package biomight.ejb;

import java.math.BigDecimal;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.util.ArrayList;

import javax.ejb.Stateless;

import biomight.Constants;
import biomight.exceptions.DataException;
import biomight.exceptions.DataSecurityException;
import biomight.util.BioGraphics;
import biomight.view.BioMightBoundBox;
import biomight.view.BioMightConnector;
import biomight.view.BioMightConnectors;
import biomight.view.BioMightConstruct;
import biomight.view.BioMightGenerate;
import biomight.view.BioMightInstructSet;
import biomight.view.BioMightInstruction;
import biomight.view.BioMightOrientation;
import biomight.view.BioMightTransform;

/**
 * Session Bean implementation class BioMightVascularBean
 */
@Stateless
public class BioMightVascularBean implements BioMightVascularBeanLocal  {

	
	
    /**
     * Default constructor. 
     */
    public BioMightVascularBean() {
        // TODO Auto-generated constructor stub
    }

    
    
	/***************************************************************************************
	 * GENERATE ARTERIES
	 * 
	 * This generates the Arteries
	 *
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/
	  	
	public int generateArteries(String startID, String componentType, String componentName, String componentID,  String parentID, double[][] currentPoints) 
		throws DataException, DataSecurityException
	{	
		System.out.println("EJB - GenerateArteries: " + componentID + "   " + parentID);
		
		int bodyID = 1;
		int projectID = 1;
		String vertices = "";
	
		return (0);
	}
	
	/***************************************************************************************
	 * GENERATE VEINS
	 * 
	 * This generates the veins
	 *
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/
	  	
	public int generateVeins(String startID, String componentType, String componentName, String componentID,  String parentID, double[][] currentPoints) 
		throws DataException, DataSecurityException
	{	
		System.out.println("EJB - GenerateVeins: " + componentID + "   " + parentID);
		
		int bodyID = 1;
		int projectID = 1;
		String vertices = "";
	
		return (0);
	}

   	/***************************************************************************************
	 * GENERATE ATRIUM
	 * 
	 * This method generates an Atrium
	 * 
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/

	public int generateAtrium(String startID, String componentType, String componentName, String componentID,  String parentID, double[][] currentPoints) 
	throws DataException, DataSecurityException
  	{	
		System.out.println("Generate Atrium");
		
		int bodyID = 1;
		int projectID = 1;
		String vertices = "";
		
		ArrayList mySqlList= new ArrayList();
		int returnCode = 0;
		double radius = 1.8;
		
		
		// We can generate the Heart alone, or when connected
		// The current points passed into the equation are assumed
		// to come from the base oral cavity
		if (currentPoints == null )
		{
			double[] startPos = {2.0, -19.25, -1.75};
    		currentPoints = BioGraphics.createCylinderInPlane(Constants.XPLANE, startPos, radius, 8);
    		System.out.println("GenerateAtrium - Set StartPlane! ");
		}


		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();
		
		if (parentID.equals("Atrium:01")) 
		{	
			// Do the left Adrenal Gland 
			int nMaxSegs = 5;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
		
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
       		         
				// Extend out from the terminus of the Knee
	  			if (numSegs==0){
	    			bioInstruct.setTransType(Constants.SCALE);
	    			bioInstruct.setScaleMatrix(30.0, 1.0, 40.0);
	    			bioInstruct.setTranslateMatrix(0.00, -0.125, 0.0); 
	    		}
	       		else if (numSegs==1){
	       			bioInstruct.setTransType(Constants.SCALE);
	    			bioInstruct.setScaleMatrix(1.5, 1.0, 2.0);
	    			bioInstruct.setTranslateMatrix(0.0, -0.125, 0.0); 
	           	}
	      		else if (numSegs==2){
	      			bioInstruct.setTransType(Constants.SCALE);
	    			bioInstruct.setScaleMatrix(1.1, 1.1, 1.1);
	    			bioInstruct.setTranslateMatrix(0.10, -0.25, 0.0);
	           	}
	    		else if (numSegs==3){
	      			bioInstruct.setTransType(Constants.SCALE);
	    			bioInstruct.setScaleMatrix(1.1, 1.1, 1.1);
	    			bioInstruct.setTranslateMatrix(0.15, -0.25, 0.0);
	           	}
	    		else if (numSegs==4){
	      			bioInstruct.setTransType(Constants.SCALE);
	    			bioInstruct.setScaleMatrix(1.1, 1.1, 1.1);
	    			bioInstruct.setTranslateMatrix(0.0, -0.25, 0.0);
	           	}		
	  			
				else
        		{
	      			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(0.0, -0.25, 0.0);
        		}
    
    		// Add the instruction into the instruction set
    		bioMightInstructSet.addElement(bioInstruct);
			}
			
		}
		else if (parentID.equals("Atrium:02")) 
		{	
	    	
			int nMaxSegs = 7;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
		
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
       		         
				// Extend out from the terminus of the Knee
	  			if (numSegs==0){
	    			bioInstruct.setTransType(Constants.SCALE);
	    			bioInstruct.setScaleMatrix(1.0, 1.0, 1.0);
	    			bioInstruct.setTranslateMatrix(0.00, -0.25, 0.0); 
	    		}
	       		else if (numSegs==1){
	       			bioInstruct.setTransType(Constants.SCALE);
	    			bioInstruct.setScaleMatrix(1.1, 1.0, 1.1);
	    			bioInstruct.setTranslateMatrix(-0.2, -0.25, 0.0); 
	           	}
	      		else if (numSegs==2){
	      			bioInstruct.setTransType(Constants.SCALE);
	    			bioInstruct.setScaleMatrix(1.20, 1.0, 1.30);
	    			bioInstruct.setTranslateMatrix(-0.1, -0.25, 0.0);
	           	}
	    		else if (numSegs==3){
	     			bioInstruct.setTransType(Constants.ROTATEMOVESCALE);
	     			bioInstruct.setTranslateMatrix(-0.1, -0.025, 0.0);
	    			bioInstruct.setScaleMatrix(1.0, 1.0, 1.1);
	    			BioMightOrientation orientation = new BioMightOrientation(0.0, -1.0, 0.0, 90.0);
	    			bioInstruct.setTheta(15);	
	    			bioInstruct.setPivotPoint(0);	
	     			bioInstruct.setRotateVector(0.0, 0.0, 1.0);
	     			bioInstruct.setOrientation(orientation);
	           	}				
	    		else if (numSegs==4){
	      			bioInstruct.setTransType(Constants.ROTATEMOVESCALE);
	      			bioInstruct.setTranslateMatrix(-0.1, 0.0, 0.0);
	    			bioInstruct.setScaleMatrix(1.15, 1.0, 1.15);
	    			BioMightOrientation orientation = new BioMightOrientation(0.0, -1.0, 0.0, 90.0);
	    			bioInstruct.setTheta(15);	
	    			bioInstruct.setPivotPoint(0);	
	     			bioInstruct.setRotateVector(0.0, 0.0, 1.0);
	     			bioInstruct.setOrientation(orientation);
	           	}		
	    		else if (numSegs==5){
	    			BioMightOrientation orientation = new BioMightOrientation(0.0, -1.0, 0.0, 90.0);
		 			bioInstruct.setTransType(Constants.ROTATEOCTO);
	    			bioInstruct.setTheta(15);	
	    			bioInstruct.setPivotPoint(0);	
	     			bioInstruct.setRotateVector(0.0, 0.0, 1.0);
	     			bioInstruct.setOrientation(orientation);
	           	}
	      		else if (numSegs==6){
	      			bioInstruct.setTransType(Constants.SCALE);
	    			bioInstruct.setScaleMatrix(1.1, 1.0, 1.1);
	    			bioInstruct.setTranslateMatrix(0.35, -0.35, 0.0);
	           	}
	  			
	  			
	  			
	  			
	      		else if (numSegs==7){
	      			bioInstruct.setTransType(Constants.SCALE);
	    			bioInstruct.setScaleMatrix(1.1, 1.0, 1.1);
	    			bioInstruct.setTranslateMatrix(0.5, -0.5, 0.0);
	           	}
	  			
	  			
				else
        		{
	      			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(0.0, -0.25, 0.0);
        		}
	    		
    	    
        		// Add the instruction into the instruction set
        		bioMightInstructSet.addElement(bioInstruct);
    		}
			
		}	
  
 				
		// Generate the Atrium
 		DBUtils.generateFacedComponents(Constants.QUADRANGLE, startID, componentType, componentName, componentID, currentPoints, bioMightInstructSet);
		System.out.println("Generating the Rows for Atrium Heart Endothelium: " + componentID + "   " + componentType);
	  
		return returnCode;
	}


	 /***************************************************************************************
	 * GENERATE ColicArtery
	 * 
	 * This method generates ColicArtery for use within the Vascular System.
	 *
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/
	  	
	public int generateColicArtery(String startID, String componentType, String componentName, String componentID,  String parentID, double[][] currentPoints) 
		throws DataException, DataSecurityException
	{	
		System.out.println("ColicArtery: " + componentID + "   " + parentID);
		
		int bodyID = 1;
		int projectID = 1;
		String vertices = "";
		
		ArrayList mySqlList= new ArrayList();
		int returnCode = 0;
		double circumference = 0.25;
		
		
		// We can generate the ColicArtery alone, or when connected
		// The current points passed into the equation are assumed
		// to come from the base oral cavity
		if (currentPoints == null )
		{
			double x =  -0.3;
			double y =  -17.0;
			double z =  -3.0;
		
			// Generate 
			// Create 5 sections
			double[] startPos = {0.5,-17.0, -3.0};	
			currentPoints = BioGraphics.octogonYPlane(startPos, circumference);
  	
			System.out.println("Calling Generate ColicArtery: " + componentID + "    " + parentID);
		}
		

		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();

		if (parentID.equals("ColicArtery:01")) 
		{	
			
			// Generate 
			// Create 5 sections
			double[] startPos = {0.5,-22.0, -4.0};	
			currentPoints = BioGraphics.octogonYPlane(startPos, circumference);
			
			int nMaxSegs = 4;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
		
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
	     
				if (numSegs==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.25);
				}
				else if (numSegs==1){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.25);
				}
				else if (numSegs==2){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.15, 0.10);
				}
				else if (numSegs==3){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.20);
				}
				else if (numSegs==4){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.50);
				}
				else if (numSegs==5){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, 0.0, 0.25);
				}
				
				else {
					bioInstruct.setPivotPoint(3);
					bioInstruct.setRotateVector(0.0, 0.0, 1.0);
					bioInstruct.setTransType(2);
					bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);
				}
				
				
	    		// Add the instruction into the instruction set
	    		bioMightInstructSet.addElement(bioInstruct);
			}
	    
		} else if (parentID.equals("ColicArtery:02")) {	
	
			// Generate 
			// Create 5 sections
			double[] startPos = {3.5,-22.0, -4.0};	
			currentPoints = BioGraphics.octogonYPlane(startPos, circumference);
		
			
			int nMaxSegs = 4;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
			
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
		      
				if (numSegs==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.25);
				}
				else if (numSegs==1){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.25);
				}
				else if (numSegs==2){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.10);
				}
				else if (numSegs==3){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.20);
				}
				else if (numSegs==4){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, 0.0, 0.50);
				}
				else if (numSegs==5){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.25);
				}
				else {
					bioInstruct.setPivotPoint(3);
					bioInstruct.setRotateVector(0.0, 0.0, 1.0);
					bioInstruct.setTransType(2);
					bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);
				}
					
					
		    	// Add the instruction into the instruction set
		    	bioMightInstructSet.addElement(bioInstruct);
			}
		    
		}
		 else if (parentID.equals("ColicArtery:03")) {	
			 
				// Generate 
				// Create 5 sections
				double[] startPos = {-3.5,-22.0, -4.0};	
				currentPoints = BioGraphics.octogonYPlane(startPos, circumference);
			
				
				int nMaxSegs = 4;
				for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
				
					// Create a place for an instruction 
					BioMightInstruction bioInstruct = new BioMightInstruction();
			      
					if (numSegs==0){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.25);
					}
					else if (numSegs==1){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.25);
					}
					else if (numSegs==2){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.10);
					}
					else if (numSegs==3){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.20);
					}
					else if (numSegs==4){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-1.0, 0.0, 0.50);
					}
					else if (numSegs==5){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.25);
					}
					else {
						bioInstruct.setPivotPoint(3);
						bioInstruct.setRotateVector(0.0, 0.0, 1.0);
						bioInstruct.setTransType(2);
						bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);
					}
						
						
			    	// Add the instruction into the instruction set
			    	bioMightInstructSet.addElement(bioInstruct);
				}
			    
			}
		
		DBUtils.generateFacedComponents(Constants.QUADRANGLE, startID, componentType, componentName, componentID, currentPoints, bioMightInstructSet);
		System.out.println("Generated the Rows for ColicArteryEndothelium: " + componentID + "   parent: " + parentID + "   " + componentType);
		
	return returnCode;
	}
	
	 /***************************************************************************************
	 * GENERATE AxillaryArtery
	 * 
	 * This method generates the AxillaryArtery
	 *
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/
	  	
	public int generateAxillaryArtery(String startID, String componentType, String componentName, String componentID,  String parentID, double[][] currentPoints) 
		throws DataException, DataSecurityException
	{	
		System.out.println("AxillaryArteryEndothelium: " + componentID + "   " + parentID);
		
		int bodyID = 1;
		int projectID = 1;
		String vertices = "";
		
		ArrayList mySqlList= new ArrayList();
		int returnCode = 0;
	
		// We can generate the AxillaryArtery alone, or when connected
		// The current points passed into the equation are assumed
		// to come from the base oral cavity
		if (currentPoints == null )
		{
			double circumference = 0.025;
			


		double[] startPos = {0.5,-17.0, -3.0};	
		currentPoints = BioGraphics.octogonYPlane(startPos, circumference);
  	
		System.out.println("Calling Generate Colic Artery: " + componentID + "    " + parentID);
		}
		
		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();

		if (parentID.equals("AxillaryArtery:01")) 
		{	
			int nMaxSegs = 4;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
		
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
	     
				if (numSegs==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.40, 0.45);
				}
				else if (numSegs==1){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.35, 0.45);
				}
				else if (numSegs==2){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.30, 0.40);
				}
				else if (numSegs==3){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.65, -0.25, 0.35);
				}
		
				
				
				else {
					bioInstruct.setPivotPoint(3);
					bioInstruct.setRotateVector(0.0, 0.0, 1.0);
					bioInstruct.setTransType(2);
					bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);
				}
				
				
	    		// Add the instruction into the instruction set
	    		bioMightInstructSet.addElement(bioInstruct);
			}
	    
		} else if (parentID.equals("AxillaryArtery:02")) {	
			int nMaxSegs = 4;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
			
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
		      
				if (numSegs==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.40, 0.45);
				}
				else if (numSegs==1){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.35, 0.45);
				}
				else if (numSegs==2){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.30, 0.40);
				}
				else if (numSegs==3){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.65, -0.25, 0.35);
				}
		
				
				else {
					bioInstruct.setPivotPoint(3);
					bioInstruct.setRotateVector(0.0, 0.0, 1.0);
					bioInstruct.setTransType(2);
					bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);
				}
					
					
		    	// Add the instruction into the instruction set
		    	bioMightInstructSet.addElement(bioInstruct);
			}
		    
		}
	
		
		DBUtils.generateFacedComponents(Constants.QUADRANGLE, startID, componentType, componentName, componentID, currentPoints, bioMightInstructSet);
		System.out.println("Generated the Rows for AxillaryArteryEndothelium: " + componentID + "   parent: " + parentID + "   " + componentType);
		
	return returnCode;
	}
	
	
	
	/***************************************************************************************
	 * GENERATE VENTRICLE
	 * 
	 * This method generates an Ventricle
	 * 
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/

	public int generateVentricle(String startID, String componentType, String componentName, String componentID,  String parentID, double[][] currentPoints) 
	throws DataException, DataSecurityException
  	{	
		System.out.println("Generate Ventricle");
		
		int bodyID = 1;
		int projectID = 1;
		String vertices = "";
		
		ArrayList mySqlList= new ArrayList();
		int returnCode = 0;
	
	
		double radius = 1.8;
		
		
		// We can generate the Heart alone, or when connected
		// The current points passed into the equation are assumed
		// to come from the base oral cavity
		if (currentPoints == null )
		{
			double[] startPos = {2.0, -19.25, -1.75};
    		currentPoints = BioGraphics.createCylinderInPlane(Constants.XPLANE, startPos, radius, 8);
    		System.out.println("GenerateHeart - Set StartPlane! ");
		}


		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();
		
		
 		if (parentID.equals("Ventricle:01")) 
		{	
		
 			int nMaxSegs = 11;
 			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
 			
 				// Create a place for an instruction 
 				BioMightInstruction bioInstruct = new BioMightInstruction();
 			         
 	    		// Extend out from the terminus of the Knee
 	    		if (numSegs==0){
 	    			bioInstruct.setTransType(Constants.SCALE);
 	    			bioInstruct.setScaleMatrix(205.0, 205.0, 205.0);
 	    			bioInstruct.setTranslateMatrix(0.0, -0.0001, 0.0); 
 	    		}
 	       		else if (numSegs==1){
 	       			bioInstruct.setTransType(Constants.SCALE);
 	    			bioInstruct.setScaleMatrix(2.0, 2.0, 2.0);
 	    			bioInstruct.setTranslateMatrix(0.0, -0.125, 0.2); 
 	           	}
 	    		else if (numSegs==2){
 	    			bioInstruct.setTransType(Constants.SCALE);
 	    			bioInstruct.setScaleMatrix(1.25, 1.25, 1.25);
 	    			bioInstruct.setTranslateMatrix(0.0, -0.125, 0.25); 
 	    		}
 	    		else if (numSegs==3){
 	    			bioInstruct.setTransType(Constants.SCALE);
 	    			bioInstruct.setScaleMatrix(1.5, 1.5, 1.5);
 	    			bioInstruct.setTranslateMatrix(0.0, -0.25, 0.25); 
 	    		}
 	    		else if (numSegs==4){
 	    			bioInstruct.setTransType(Constants.SCALE);
 	    			bioInstruct.setScaleMatrix(1.75, 1.75, 1.75);
 	    			bioInstruct.setTranslateMatrix(0.0, -0.5, 0.25); 	   
 	        	}
 	    		else if (numSegs==5){
 	    			bioInstruct.setTransType(Constants.SCALE);
 	    			bioInstruct.setScaleMatrix(1.0, 1.0, 1.0);
 	    			bioInstruct.setTranslateMatrix(0.0, -0.5, 0.25); 	        			
 	        	}
 		      	else if (numSegs==6){
 	    			bioInstruct.setTransType(Constants.SCALE);
 	    			bioInstruct.setScaleMatrix(0.90, 0.90, 0.90);
 	    			bioInstruct.setTranslateMatrix(0.0, -0.5, 0.25); 
 	        	}  	
 	      		else if (numSegs==7){
 	    			bioInstruct.setTransType(Constants.SCALE);
 	    			bioInstruct.setScaleMatrix(0.80, 0.80, 0.80);
 	    			bioInstruct.setTranslateMatrix(0.0, -0.5, 0.35);    			
 	        	}
 	      		else if (numSegs==8){
 	    			bioInstruct.setTransType(Constants.SCALE);
 	    			bioInstruct.setScaleMatrix(0.80, 0.80, 0.80);
 	    			bioInstruct.setTranslateMatrix(0.0, -0.5, 0.35);        			
 	        	}
 	      		else if (numSegs==9){
 	      			bioInstruct.setTransType(Constants.SCALE);
 	    			bioInstruct.setScaleMatrix(0.60, 0.60, 0.60);
 	    			bioInstruct.setTranslateMatrix(0.0, -0.25, 0.15);          			
 	        	}
 	      		else if (numSegs==10){
 	    			bioInstruct.setTransType(Constants.SCALE);
 	    			bioInstruct.setScaleMatrix(0.025, 0.025, 0.025);
 	    			bioInstruct.setTranslateMatrix(0.0, 0.125, 0.0);       			
 	        	}	
 	    		

 	    		else {
 	    			bioInstruct.setTransType(Constants.SCALE);
 	    			bioInstruct.setScaleMatrix(0.0001, 0.0001, 0.0001);
 	    			bioInstruct.setTranslateMatrix(-0.0025, 0.0, 0.0); 
 	    		}
 		    
 	    		// Add the instruction into the instruction set
 	    		bioMightInstructSet.addElement(bioInstruct);
 			}
		}
 		else if (parentID.equals("Ventricle:02")) 
		{

 			int nMaxSegs = 11;
 			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
 			
 				// Create a place for an instruction 
 				BioMightInstruction bioInstruct = new BioMightInstruction();
 			         
 	    		// Extend out from the terminus of the Knee
 	    		if (numSegs==0){
 	    			bioInstruct.setTransType(Constants.SCALE);
 	    			bioInstruct.setScaleMatrix(205.0, 205.0, 205.0);
 	    			bioInstruct.setTranslateMatrix(0.0, -0.0001, 0.0); 
 	    		}
 	       		else if (numSegs==1){
 	       			bioInstruct.setTransType(Constants.SCALE);
 	    			bioInstruct.setScaleMatrix(2.0, 2.0, 2.0);
 	    			bioInstruct.setTranslateMatrix(0.0, -0.125, 0.2); 
 	           	}
 	    		else if (numSegs==2){
 	    			bioInstruct.setTransType(Constants.SCALE);
 	    			bioInstruct.setScaleMatrix(1.25, 1.25, 1.25);
 	    			bioInstruct.setTranslateMatrix(0.0, -0.125, 0.25); 
 	    		}
 	    		else if (numSegs==3){
 	    			bioInstruct.setTransType(Constants.SCALE);
 	    			bioInstruct.setScaleMatrix(1.5, 1.5, 1.5);
 	    			bioInstruct.setTranslateMatrix(0.0, -0.25, 0.25); 
 	    		}
 	    		else if (numSegs==4){
 	    			bioInstruct.setTransType(Constants.SCALE);
 	    			bioInstruct.setScaleMatrix(1.75, 1.75, 1.75);
 	    			bioInstruct.setTranslateMatrix(0.0, -0.5, 0.25); 	   
 	        	}
 	    		else if (numSegs==5){
 	    			bioInstruct.setTransType(Constants.SCALE);
 	    			bioInstruct.setScaleMatrix(1.0, 1.0, 1.0);
 	    			bioInstruct.setTranslateMatrix(0.0, -0.5, 0.25); 	        			
 	        	}
 		      	else if (numSegs==6){
 	    			bioInstruct.setTransType(Constants.SCALE);
 	    			bioInstruct.setScaleMatrix(0.90, 0.90, 0.90);
 	    			bioInstruct.setTranslateMatrix(0.0, -0.5, 0.25); 
 	        	}  	
 	      		else if (numSegs==7){
 	    			bioInstruct.setTransType(Constants.SCALE);
 	    			bioInstruct.setScaleMatrix(0.80, 0.80, 0.80);
 	    			bioInstruct.setTranslateMatrix(0.0, -0.5, 0.35);    			
 	        	}
 	      		else if (numSegs==8){
 	    			bioInstruct.setTransType(Constants.SCALE);
 	    			bioInstruct.setScaleMatrix(0.80, 0.80, 0.80);
 	    			bioInstruct.setTranslateMatrix(0.0, -0.5, 0.35);        			
 	        	}
 	      		else if (numSegs==9){
 	      			bioInstruct.setTransType(Constants.SCALE);
 	    			bioInstruct.setScaleMatrix(0.60, 0.60, 0.60);
 	    			bioInstruct.setTranslateMatrix(0.0, -0.25, 0.15);          			
 	        	}
 	      		else if (numSegs==10){
 	    			bioInstruct.setTransType(Constants.SCALE);
 	    			bioInstruct.setScaleMatrix(0.025, 0.025, 0.025);
 	    			bioInstruct.setTranslateMatrix(0.0, 0.125, 0.0);       			
 	        	}	
 	    		

 	    		else {
 	    			bioInstruct.setTransType(Constants.SCALE);
 	    			bioInstruct.setScaleMatrix(0.0001, 0.0001, 0.0001);
 	    			bioInstruct.setTranslateMatrix(-0.0025, 0.0, 0.0); 
 	    		}
 		    
 	    		// Add the instruction into the instruction set
 	    		bioMightInstructSet.addElement(bioInstruct);
 			}
		
		}    	
  
 				
		// Generate the Ventricle
 		DBUtils.generateFacedComponents(Constants.QUADRANGLE, startID, componentType, componentName, componentID, currentPoints, bioMightInstructSet);
		System.out.println("Generating the Rows for Ventricle Heart Endothelium: " + componentID + "   " + componentType);
	  
		return returnCode;
	}
	
   /***************************************************************************************
	 * GENERATE  AORTA
	 * 
	 * This generates the Aorta Artery
	 * Eminates at the chamber of the Heart
	 *
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/
	  	
	public int generateAortaArtery(String startID, String componentType, String componentName, String componentID,  String parentID, double[][] currentPoints) 
		throws DataException, DataSecurityException
	{	
		System.out.println("AortaArtery: " + componentID + "   " + parentID);
		
 		int bodyID = 1;
		int projectID = 1;
		String vertices = "";
		
		ArrayList mySqlList= new ArrayList();
		int returnCode = 0;
	
		
		// We can generate the AortaArtery alone, or when connected
		// The current points passed into the equation are assumed
		// to come from the base oral cavity
		if (currentPoints == null )
		{
			double radius = 0.5;
			double[] startPos = {0.75, -8.0, -6.0};
			currentPoints = BioGraphics.createCylinderInPlane(Constants.XPLANE, startPos, radius, 8);
		}
		
		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();
	
		if (parentID.equals("Arteries:0")) 
		{
			int nMaxSegs = 6;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
			
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
	       		         
				// The artery descends straight down through central core of body
				// splitting at the Elvis pelvis
	    		if (numSegs==0){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);
	    		}
	       		else if (numSegs==1){
	       			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);
	           	}
	    		else if (numSegs==2){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);
	    		}
	    		else if (numSegs==3){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);
	    		}
	    		else if (numSegs==4){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);
	            }
	    		else if (numSegs==5){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);	      			
	        	}
	       		else {
	       			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);  	
	       
	    		}
		    
	    		// Add the instruction into the instruction set
	    		bioMightInstructSet.addElement(bioInstruct);
			}
		}
		
		
		
		DBUtils.generateFacedComponents(Constants.QUADRANGLE, startID, componentType, componentName, componentID, currentPoints, bioMightInstructSet);
		System.out.println("Generating the Rows for AortaArteryEndothelium: " + componentID + "   " + componentType);		
		
		return returnCode;
	}

	

	 /***************************************************************************************
	 * GENERATE ASCENDING AORTA
	 * 
	 * This generates the Ascending Aorta Artery
	 * Eminates at the chamber of the Heart
	 *
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/
	  	
	public int generateAscendingAortaArtery(String startID, String componentType, String componentName, String componentID,  String parentID, double[][] currentPoints) 
		throws DataException, DataSecurityException
	{	
		System.out.println("EJB:generateAscendingAortaArtery(): " + componentID + "   " + parentID);
	
		
		int bodyID = 1;
		int projectID = 1;
		String vertices = "";
		
		ArrayList mySqlList= new ArrayList();
		int returnCode = 0;
	
		
		// We can generate the AscendingAortaArtery alone, or when connected
		// The current points passed into the equation are assumed
		// to come from the base oral cavity
		if (currentPoints == null )
		{
			double circumference = 0.25;
    		double[] startPos = {-0.3,-14.0, -4.00};
			// Create a equilateral octogon	
    		currentPoints = BioGraphics.octogonYPlane(startPos, circumference);
		}
		

		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();
		
		int nMaxSegs = 2;
		for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
		
			// Create a place for an instruction 
			BioMightInstruction bioInstruct = new BioMightInstruction();
       		         
			// The artery descends straight down through central core of body
			// splitting at the Elvis pelvis
    		if (numSegs==0){
    			bioInstruct.setTransType(2);
    			bioInstruct.setTranslateMatrix(0.07, 1.0, 0.20);
    		}
       		else if (numSegs==1){
       			bioInstruct.setTransType(2);
    			bioInstruct.setTranslateMatrix(0.15, 1.0, 0.15);
           	}
    
       		else {
    			bioInstruct.setPivotPoint(3);
    			bioInstruct.setRotateVector(0.0, 0.0, 1.0);
    			bioInstruct.setTransType(2);
    			bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);
    		}
	    
    		// Add the instruction into the instruction set
    		bioMightInstructSet.addElement(bioInstruct);
		}
	
	
		DBUtils.generateFacedComponents(Constants.QUADRANGLE, startID, componentType, componentName, componentID, currentPoints, bioMightInstructSet);
		System.out.println("Generating the Rows for AscendingAortaArteryEndothelium: " + componentID + "   " + componentType);
			
		return returnCode;
	}


	 /***************************************************************************************
		 * GENERATE AORTIC ARCH
		 * 
		 * This generates the Aortic Arch
		 *
		 * @param key
		 * @param user
		 * @return
		 * @throws DataException
		 * @throws DataSecurityException
		 ***************************************************************************************/
		  	
		public int generateAorticArch(String startID, String componentType, String componentName, String componentID,  String parentID, double[][] currentPoints) 
			throws DataException, DataSecurityException
		{	
			System.out.println("EJB:generateAorticArch(): " + componentID + "   " + parentID);
		
			
			int bodyID = 1;
			int projectID = 1;
			String vertices = "";
			
			ArrayList mySqlList= new ArrayList();
			int returnCode = 0;
		
			
			// We can generate the AorticArch Artery alone, or when connected
			// The current points passed into the equation are assumed
			// to come from the base oral cavity
			if (currentPoints == null )
			{
				double circumference = 0.25;
	    		double[] startPos = {-0.3,-14.0, -4.00};
				// Create a equilateral octogon	
	    		currentPoints = BioGraphics.octogonYPlane(startPos, circumference);
			}
			

			// Allocate an instruction set for building it
			BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();
			
			int nMaxSegs = 6;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
			
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
	       		         
				// The artery descends straight down through central core of body
				// splitting at the Elvis pelvis
	
	    		if (numSegs==0){
					BioMightOrientation orientation = new BioMightOrientation(0.0, -1.0, 0.0, 90.0);
		 			bioInstruct.setTransType(Constants.ROTATEOCTO);
	    			bioInstruct.setTheta(-45);	
	    			bioInstruct.setPivotPoint(6);	
	     			bioInstruct.setRotateVector(1.0, 0.0, 0.0);
	     			bioInstruct.setOrientation(orientation);  	
	    		}
	    		else if (numSegs==1){
	    			bioInstruct.setTransType(2);
	    			bioInstruct.setTranslateMatrix(0.0, 0.75, -0.50);
	    		}
	    		else if (numSegs==2){
	    			BioMightOrientation orientation = new BioMightOrientation(0.0, -1.0, 0.0, 90.0);
		 			bioInstruct.setTransType(Constants.ROTATEOCTO);
	    			bioInstruct.setTheta(-45);	
	    			bioInstruct.setPivotPoint(6);	
	     			bioInstruct.setRotateVector(1.0, 0.0, 0.0);
	     			bioInstruct.setOrientation(orientation);  
	            }
	    		else if (numSegs==3){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(0.40, 0.0, -0.90);
	    		}
	    		else if (numSegs==4){
	    			BioMightOrientation orientation = new BioMightOrientation(0.0, -1.0, 0.0, 90.0);
		 			bioInstruct.setTransType(Constants.ROTATEOCTO);
	    			bioInstruct.setTheta(-45);	
	    			bioInstruct.setPivotPoint(6);	
	     			bioInstruct.setRotateVector(1.0, 0.0, 0.0);
	     			bioInstruct.setOrientation(orientation); 
	        	}
	       		else if (numSegs==5){
	    			BioMightOrientation orientation = new BioMightOrientation(0.0, -1.0, 0.0, 90.0);
		 			bioInstruct.setTransType(Constants.ROTATEOCTO);
	    			bioInstruct.setTheta(-45);	
	    			bioInstruct.setPivotPoint(6);	
	     			bioInstruct.setRotateVector(1.0, 0.0, 0.0);
	     			bioInstruct.setOrientation(orientation);      			     			
	    		}       		
	       	

	       		else {
	    			bioInstruct.setPivotPoint(3);
	    			bioInstruct.setRotateVector(0.0, 0.0, 1.0);
	    			bioInstruct.setTransType(2);
	    			bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);
	    		}
		    
	    		// Add the instruction into the instruction set
	    		bioMightInstructSet.addElement(bioInstruct);
			}
		
		
			DBUtils.generateFacedComponents(Constants.QUADRANGLE, startID, componentType, componentName, componentID, currentPoints, bioMightInstructSet);
			System.out.println("Generating the Rows for AorticArchEndothelium: " + componentID + "   " + componentType);
				
			return returnCode;
		}

		
	/***************************************************************************************
	 * GENERATE EXTERNAL JUGULAR VEIN
	 * 
	 * This generates the External Jugular Vein
	 *
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/
	  	
	public int generateExternalJugularVein(String startID, String componentType, String componentName, String componentID,  String parentID, double[][] currentPoints) 
		throws DataException, DataSecurityException
	{	
		System.out.println("ExternalJugularVein: " + componentID + "   " + parentID);
		
		int bodyID = 1;
		int projectID = 1;
		String vertices = "";
		
		ArrayList mySqlList= new ArrayList();
		int returnCode = 0;
	
		
		// We can generate the ExternalJugularVein
		if (currentPoints == null )
		{
			double circumference = 0.25;
    		double[] startPos = {-1.75,-5.0, -3.0};		
    		currentPoints = BioGraphics.octogonYPlane(startPos, circumference);
		}

		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();

		// Left External Jugular Artery - Cervicle Region
		if (parentID.equals("ExternalJugularVein:01")) 
		{	
			int nMaxSegs = 4;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
		
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
	     
				if (numSegs==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);
				}
				else if (numSegs==1){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -1.0, 0.25);
				}
				else if (numSegs==2){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);
				}
				else if (numSegs==3){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -1.0, 0.25);
				}		
				else if (numSegs==4){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -1.0, 0.10);
				}		
				else if (numSegs==5){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);
				}
				
				else {
					bioInstruct.setTransType(2);
					bioInstruct.setTranslateMatrix(0.0, 0.50, 0.0);
				}
				
				
	    		// Add the instruction into the instruction set
	    		bioMightInstructSet.addElement(bioInstruct);
			}
		// Right External Jugular Vein - Cervicle Region		    
		} else if (parentID.equals("ExternalJugularVein:02")) {	
			int nMaxSegs = 4;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
			
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
		      
				if (numSegs==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);
				}
				else if (numSegs==1){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -1.0, 0.25);
				}
				else if (numSegs==2){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);
				}
				else if (numSegs==3){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -1.0, 0.25);
				}		
				else if (numSegs==4){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -1.0, 0.10);
				}
				else {
					bioInstruct.setTransType(2);
					bioInstruct.setTranslateMatrix(0.0, 0.50, 0.0);
				}
					
		    	// Add the instruction into the instruction set
		    	bioMightInstructSet.addElement(bioInstruct);
			}
		    
		}
		// Left External Jugular Vein - Head Region
		else if (parentID.equals("ExternalJugularVein:03")) {	
				int nMaxSegs = 4;
				for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
			
					// Create a place for an instruction 
					BioMightInstruction bioInstruct = new BioMightInstruction();
		     
					if (numSegs==0){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.25, 1.0, 0.0);
					}
					else if (numSegs==1){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.35, 1.0, 0.0);
					}
					else if (numSegs==2){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.45, 1.0, -0.15);
					}
					else if (numSegs==3){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.20, 1.0, 0.0);
					}		
					else if (numSegs==4){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.15, 1.0, 0.0);
					}							
					else {
						bioInstruct.setTransType(2);
						bioInstruct.setTranslateMatrix(0.0, 0.50, 0.0);
					}
					
					
		    		// Add the instruction into the instruction set
		    		bioMightInstructSet.addElement(bioInstruct);
				}
			}
		 //Right External Jugular Vein - Cervical Region
		 else if (parentID.equals("Externan:04")) {	
				int nMaxSegs = 4;
				for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
			
					// Create a place for an instruction 
					BioMightInstruction bioInstruct = new BioMightInstruction();
		     
				     
					if (numSegs==0){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.25, 1.0, 0.0);
					}
					else if (numSegs==1){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.35, 1.0, 0.0);
					}
					else if (numSegs==2){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.45, 1.0, -0.15);
					}
					else if (numSegs==3){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.20, 1.0, 0.0);
					}		
					else if (numSegs==4){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.15, 1.0, 0.0);
					}							
					else {
						bioInstruct.setTransType(2);
						bioInstruct.setTranslateMatrix(0.0, 0.50, 0.0);
					}
					
					
					
		    		// Add the instruction into the instruction set
		    		bioMightInstructSet.addElement(bioInstruct);
			}
		
		 }
		
		DBUtils.generateFacedComponents(Constants.QUADRANGLE, startID, componentType, componentName, componentID, currentPoints, bioMightInstructSet);
		System.out.println("Generating the Rows for ExternalJugularVeinEndothelium: " + componentID + "   " + componentType);

		
		return returnCode;
	}

	
	
	/***************************************************************************************
	 * GENERATE OBTURATOR
	 * 
	 * This generates the Inferior Thyroid Vein given the set of parameters in the
	 * BioMghtConstruct object
	 *
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/
	
	public int generateObturatorArtery(String startID, String componentType, String componentName, String componentID,  String parentID, double[][] currentPoints) 
	throws DataException, DataSecurityException
	{	
		
	System.out.println("generateObturatorArtery: " + componentID + "   " + parentID);
		
		int bodyID = 1;
		int projectID = 1;
		String vertices = "";
		
		ArrayList mySqlList= new ArrayList();
		int returnCode = 0;
	
		// Generate the ObturatorArtery
		if (currentPoints == null )
		{
			double circumference = 0.25;
			
			double x =  -0.3;
    		double y =  -17.0;
    		double z =  -3.0;
			
			// Create a equilateral octogon	
			currentPoints[0][0] =  x;
			currentPoints[0][1] =  y;
			currentPoints[0][2] =  z;
			
			currentPoints[1][0] =  x-circumference;
			currentPoints[1][1] =  y;
			currentPoints[1][2] =  z-circumference;
			
			currentPoints[2][0] =  x-circumference;
			currentPoints[2][1] =  y;
			currentPoints[2][2] =  z-circumference*2;
			
			currentPoints[3][0] =  x;
			currentPoints[3][1] =  y;
			currentPoints[3][2] =  z-circumference*3;
	
			currentPoints[4][0] =  x+circumference;
			currentPoints[4][1] =  y;
			currentPoints[4][2] =  z-circumference*3;
			
			currentPoints[5][0] =  x+circumference*2;
			currentPoints[5][1] =  y;
			currentPoints[5][2] =  z-circumference*2;
	
			currentPoints[6][0] =  x+circumference*2;
			currentPoints[6][1] =  y;
			currentPoints[6][2] =  z-circumference;

			currentPoints[7][0] =  x+circumference;
			currentPoints[7][1] =  y;
			currentPoints[7][2] =  z;
		}
		

		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();

		if (componentID.equals("ObturatorArtery:01")) 
		{	
			   
				int nMaxSegs = 4;
				for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
			
					// Create a place for an instruction 
					BioMightInstruction bioInstruct = new BioMightInstruction();
		     
					if (numSegs==0){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.25, -1.0, 0.0);
					}
					else if (numSegs==1){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.25, -1.0, 0.0);
					}
					else if (numSegs==2){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.25, -1.0, 0.10);
					}
					else if (numSegs==3){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.25, -1.0, 0.0);
					}		
					
		
					else {
						bioInstruct.setPivotPoint(3);
						bioInstruct.setRotateVector(0.0, 0.0, 1.0);
						bioInstruct.setTransType(2);
						bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);
					}
				
				
				
	    		// Add the instruction into the instruction set
	    		bioMightInstructSet.addElement(bioInstruct);
			}
	    
		} else if (componentID.equals("ObturatorArtery:02")) {	
			int nMaxSegs = 3;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
			
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
		      
			     
				if (numSegs==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.25, -1.0, 0.0);
				}
				else if (numSegs==1){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.25, -1.0, 0.0);
				}
				else if (numSegs==2){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.25, -1.0, 0.10);
				}
				else if (numSegs==3){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.25, -1.0, 0.0);
				}					
					
		    	// Add the instruction into the instruction set
		    	bioMightInstructSet.addElement(bioInstruct);
			}
		    
		}
	
		
		DBUtils.generateFacedComponents(Constants.QUADRANGLE, startID, componentType, componentName, componentID, currentPoints, bioMightInstructSet);
		System.out.println("Generated the Rows for ObturatorArteryEndothelium: " + componentID + "   parent: " + parentID + "   " + componentType);
		
		return returnCode;
	
		}
	
	
	/***************************************************************************************
	 * GENERATE INFERIOR THYROID VEIN
	 * 
	 * This generates the Inferior Thyroid Vein given the set of parameters in the
	 * BioMghtConstruct object
	 *
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/
	  	
	public BioMightGenerate generateInferiorThyroidVein(String startID, String componentType, String componentName, String componentID,  String parentID, BioMightConstruct bioMightConstruct) 
	throws DataException, DataSecurityException
{	
	System.out.println("GenerateInferiorThyroidVein: " + componentID + "   " + parentID);  		    		
	
	// Allocate an instruction set for building it
	BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();
	double[][] connectPoints = null;
		
	// We can generate the InferiorThyroidVein alone, or when connected
	// The current points passed into the equation are assumed
	// to come from the base oral cavity
	// We are creating the InferiorThyroidVein for the neck
	if (parentID.equals("Neck:01")) 
	{	
		// We can generate the InferiorThyroidVein alone, or when connected
		// The current points passed into the equation are assumed
		// to come from the base oral cavity
		// We are creating the InferiorThyroidVein for the neck
		if (bioMightConstruct == null )
		{
			// Cannot build without the constructor.
			// Issue warning and leave the method
			System.out.println("NO CONSTRUCTOR to Generate Epithelium");
		}
		else
		{
			// Get the Bounding Box from the Constructor
			System.out.println("Using Constructor to Generate InferiorThyroidVein");
			BioMightBoundBox bioMightBoundBox = bioMightConstruct.getBoundingBox(Constants.InferiorThyroidVeinRef);
			if (bioMightBoundBox == null)
			{
				System.out.println(parentID + " InferiorThyroidVein BoundBox is null!");
			}
			else
			{
				System.out.println(parentID + " Have InferiorThyroidVein BoundBox for: " + parentID);
				
				BioMightConnectors bioMightConnectors = bioMightBoundBox.getBioMightConnectors();
				BioMightConnector bioMightConnector = bioMightConnectors.getBioMightConnector(Constants.InferiorThyroidVeinRef);
				if (bioMightConnector == null) {
					System.out.println(parentID + " InferiorThyroidVein Connector is null!");				
				}	
				else
				{
					System.out.println("Have InferiorThyroidVeinConnector to Generate Epithelium");
					connectPoints = bioMightConnector.getConnectorPoints();
	
					// Get the Bounding Box for the neck from the Constructor
					System.out.println("In generateInferiorThyroidVein XBound: " + bioMightBoundBox.getxPos());
					System.out.println("In generateInferiorThyroidVein YBound: " + bioMightBoundBox.getyPos());
					System.out.println("In generateInferiorThyroidVein zBound: " + bioMightBoundBox.getzPos());	
		
					System.out.println("In generateInferiorThyroidVein xConn1: " + connectPoints[0][0]);
					System.out.println("In generateInferiorThyroidVein yConn1: " + connectPoints[0][1]);
					System.out.println("In generateInferiorThyroidVein zConn1: " + connectPoints[0][1]);
			
					System.out.println("NumSegments Y: " + bioMightBoundBox.getYVector());
				}
			}
		}

		
		int nMaxSegs = 5;
		for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
	
			// Create a place for an instruction 
			BioMightInstruction bioInstruct = new BioMightInstruction();
	
   		         
			// Extend out from the terminus of the Knee
			if (numSegs==0){
				bioInstruct.setTransType(Constants.TRANSLATE);
				bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);	
			}
			else if (numSegs==1){
				bioInstruct.setTransType(Constants.TRANSLATE);
				bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);	
			}
			else if (numSegs==2){
				bioInstruct.setTransType(Constants.TRANSLATE);
				bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);		
			}
			else if (numSegs==3){
				bioInstruct.setTransType(Constants.TRANSLATE);
				bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);	
			}
			else if (numSegs==4){
				bioInstruct.setTransType(Constants.TRANSLATE);
				bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);	      			
			}
			else if (numSegs==5){
				bioInstruct.setTransType(Constants.TRANSLATE);
				bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);	      			     			
			}
			
			
			else if (numSegs==6){
				bioInstruct.setPivotPoint(3);
				bioInstruct.setRotateVector(0.0, 0.0, 1.0);
				bioInstruct.setTransType(2);
				bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);		      			     				      			
			}		
			else {
				bioInstruct.setPivotPoint(3);
				bioInstruct.setRotateVector(0.0, 0.0, 1.0);
				bioInstruct.setTransType(2);
				bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);
			}
    
			// Add the instruction into the instruction set
			bioMightInstructSet.addElement(bioInstruct);
		}
	}
	else if (parentID.equals("Chest:01")) 
	{
		
		// We can generate the InferiorThyroidVein alone, or when connected
		// The current points passed into the equation are assumed
		// to come from the base oral cavity
		// We are creating the InferiorThyroidVein for the neck
		if (bioMightConstruct == null )
		{
			// Cannot build without the constructor.
			// Issue warning and leave the method
			System.out.println("NO CONSTRUCTOR to Generate Epithelium");
		}
		else
		{
			// Get the Bounding Box from the Constructor
			System.out.println("Using Constructor to Generate InferiorThyroidVein");
			BioMightBoundBox bioMightBoundBox = bioMightConstruct.getBoundingBox(Constants.InferiorThyroidVeinRef);
			if (bioMightBoundBox == null)
			{
				System.out.println(parentID + " InferiorThyroidVein BoundBox is null!");
			}
			else
			{
				System.out.println(parentID + " Have InferiorThyroidVein BoundBox for: " + parentID);
				
				BioMightConnectors bioMightConnectors = bioMightBoundBox.getBioMightConnectors();
				BioMightConnector bioMightConnector = bioMightConnectors.getBioMightConnector(Constants.InferiorThyroidVeinRef);
				if (bioMightConnector == null) {
					System.out.println(parentID + " InferiorThyroidVein Connector is null!");				
				}	
				else
				{
					System.out.println("Have InferiorThyroidVeinConnector to Generate Epithelium");
					connectPoints = bioMightConnector.getConnectorPoints();
	
					// Get the Bounding Box for the neck from the Constructor
					System.out.println("In generateInferiorThyroidVein XBound: " + bioMightBoundBox.getxPos());
					System.out.println("In generateInferiorThyroidVein YBound: " + bioMightBoundBox.getyPos());
					System.out.println("In generateInferiorThyroidVein zBound: " + bioMightBoundBox.getzPos());	
		
					System.out.println("In generateInferiorThyroidVein xConn1: " + connectPoints[0][0]);
					System.out.println("In generateInferiorThyroidVein yConn1: " + connectPoints[0][1]);
					System.out.println("In generateInferiorThyroidVein zConn1: " + connectPoints[0][1]);
			
					System.out.println("NumSegments Y: " + bioMightBoundBox.getYVector());
				}
			}
		}
		
		int nMaxSegs = 4;
		for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
		
			// Create a place for an instruction 
			BioMightInstruction bioInstruct = new BioMightInstruction();
		
       		         
			// Extend out from the terminus of the Knee
			if (numSegs==0){
				bioInstruct.setPivotPoint(3);
				bioInstruct.setRotateVector(0.0, 0.0, 1.0);
				bioInstruct.setTransType(2);
				bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);
			}
			else if (numSegs==1){
				bioInstruct.setPivotPoint(3);
				bioInstruct.setRotateVector(0.0, 0.0, 1.0);
				bioInstruct.setTransType(2);
				bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);
			}
			else if (numSegs==2){
				bioInstruct.setPivotPoint(3);
				bioInstruct.setRotateVector(0.0, 0.0, 1.0);
				bioInstruct.setTransType(2);
				bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);	
			}
			else if (numSegs==3){
				bioInstruct.setPivotPoint(3);
				bioInstruct.setRotateVector(0.0, 0.0, 1.0);
				bioInstruct.setTransType(2);
				bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);	
			}
			else if (numSegs==4){
				bioInstruct.setPivotPoint(3);
				bioInstruct.setRotateVector(0.0, 0.0, 1.0);
				bioInstruct.setTransType(2);
				bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);	      			
			}
    		
    		
			else if (numSegs==5){
				bioInstruct.setPivotPoint(3);
				bioInstruct.setRotateVector(0.0, 0.0, 1.0);
				bioInstruct.setTransType(2);
				bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);	      			     			
			}
			else if (numSegs==6){
				bioInstruct.setPivotPoint(3);
				bioInstruct.setRotateVector(0.0, 0.0, 1.0);
				bioInstruct.setTransType(2);
				bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);		      			     				      			
			}		
			else {
				bioInstruct.setPivotPoint(3);
				bioInstruct.setRotateVector(0.0, 0.0, 1.0);
				bioInstruct.setTransType(2);
				bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);
			}
	    
			// Add the instruction into the instruction set
			bioMightInstructSet.addElement(bioInstruct);

		}
		
	}
	
     
	// Generate the object based on the instruction set
	double[][] lastPoints = DBUtils.generateFacedComponents(Constants.QUADRANGLE, startID, componentType, componentName, componentID, connectPoints, bioMightInstructSet);
	System.out.println("Generated the Rows for InferiorThyroidVein: " + componentID + "   " + componentType);
		   
	// Set up the BioMightGenerate that will be returned to the client
	// so that its information can be used to build other objects
		BioMightGenerate  bioMightGenerate = new BioMightGenerate(lastPoints, 0, "");
		System.out.println("Setup InferiorThyroidVein BioMightGenerate Object: " + lastPoints[0][0]);
	   
	return (bioMightGenerate);
}
	
	
	/***************************************************************************************
	 * GENERATE MIDDLE THYROID VEIN
	 * 
	 * This generates the MiddleThyroidVein. It will receive a BioMightGenerate object
	 * The constuctor will come from the Neck, Chest, and Abdomen. Regardless from
	 * whence it came,    
	 * 
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/
	  	
	public BioMightGenerate generateMiddleThyroidVein(String startID, String componentType, String componentName, String componentID,  String parentID, BioMightConstruct bioMightConstruct) 
		throws DataException, DataSecurityException
	{	
	System.out.println("GenerateMiddleThyroidVein: " + componentID + "   " + parentID);  		    		
		
		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();
		double[][] connectPoints = null;
		
		
		// We can generate the MiddleThyroidVein alone, or when connected
		// The current points passed into the equation are assumed
		// to come from the base oral cavity
		// We are creating the MiddleThyroidVein for the neck
		if (parentID.equals("Neck:01")) 
		{	

			// We can generate the MiddleThyroidVein alone, or when connected
			// The current points passed into the equation are assumed
			// to come from the base oral cavity
			// We are creating the MiddleThyroidVein for the neck
			if (bioMightConstruct == null )
			{
				// Cannot build without the constructor.
				// Issue warning and leave the method
				System.out.println("NO CONSTRUCTOR to Generate Epithelium");
			}
			else
			{
				// Get the Bounding Box from the Constructor
				System.out.println("Using Constructor to Generate InferiorThyroidVein");
				BioMightBoundBox bioMightBoundBox = bioMightConstruct.getBoundingBox(Constants.InferiorThyroidVeinRef);
				if (bioMightBoundBox == null)
				{
					System.out.println(parentID + " InferiorThyroidVein BoundBox is null!");
				}
				else
				{
					System.out.println(parentID + " Have InferiorThyroidVein BoundBox for: " + parentID);
					
					BioMightConnectors bioMightConnectors = bioMightBoundBox.getBioMightConnectors();
					BioMightConnector bioMightConnector = bioMightConnectors.getBioMightConnector(Constants.InferiorThyroidVeinRef);
					if (bioMightConnector == null) {
						System.out.println(parentID + " InferiorThyroidVein Connector is null!");				
					}	
					else
					{
						System.out.println("Have InferiorThyroidVeinConnector to Generate Epithelium");
						connectPoints = bioMightConnector.getConnectorPoints();
		
						// Get the Bounding Box for the neck from the Constructor
						System.out.println("In generateInferiorThyroidVein XBound: " + bioMightBoundBox.getxPos());
						System.out.println("In generateInferiorThyroidVein YBound: " + bioMightBoundBox.getyPos());
						System.out.println("In generateInferiorThyroidVein zBound: " + bioMightBoundBox.getzPos());	
			
						System.out.println("In generateInferiorThyroidVein xConn1: " + connectPoints[0][0]);
						System.out.println("In generateInferiorThyroidVein yConn1: " + connectPoints[0][1]);
						System.out.println("In generateInferiorThyroidVein zConn1: " + connectPoints[0][1]);
				
						System.out.println("NumSegments Y: " + bioMightBoundBox.getYVector());
					}
				}
			}
			
			
			
			int nMaxSegs = 5;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
		
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
		
       		         
				// Extend out from the terminus of the Knee
				if (numSegs==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);	
				}
				else if (numSegs==1){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);	
				}
				else if (numSegs==2){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);		
				}
				else if (numSegs==3){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);	
				}
				else if (numSegs==4){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);	      			
				}
				else if (numSegs==5){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);	      			     			
				}
				
				
				else if (numSegs==6){
					bioInstruct.setPivotPoint(3);
					bioInstruct.setRotateVector(0.0, 0.0, 1.0);
					bioInstruct.setTransType(2);
					bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);		      			     				      			
				}		
				else {
					bioInstruct.setPivotPoint(3);
					bioInstruct.setRotateVector(0.0, 0.0, 1.0);
					bioInstruct.setTransType(2);
					bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);
				}
	    
				// Add the instruction into the instruction set
				bioMightInstructSet.addElement(bioInstruct);
			}
		}
		else if (parentID.equals("Chest:01")) 
		{
			
			// We can generate the MiddleThyroidVein alone, or when connected
			// The current points passed into the equation are assumed
			// to come from the base oral cavity
			// We are creating the MiddleThyroidVein for the neck
			if (bioMightConstruct == null )
			{
				// Cannot build without the constructor.
				// Issue warning and leave the method
				System.out.println("NO CONSTRUCTOR to Generate Epithelium");
			}
			else
			{
				// Get the Bounding Box from the Constructor
				System.out.println("Using Constructor to Generate MiddleThyroidVein");
				BioMightBoundBox bioMightBoundBox = bioMightConstruct.getBoundingBox(Constants.InferiorThyroidVeinRef);
				if (bioMightBoundBox == null)
				{
					System.out.println(parentID + " InferiorThyroidVein BoundBox is null!");
				}
				else
				{
					System.out.println(parentID + " Have InferiorMiddleVein BoundBox for: " + parentID);
					
					BioMightConnectors bioMightConnectors = bioMightBoundBox.getBioMightConnectors();
					BioMightConnector bioMightConnector = bioMightConnectors.getBioMightConnector(Constants.InferiorThyroidVeinRef);
					if (bioMightConnector == null) {
						System.out.println(parentID + " InferiorMiddleVein Connector is null!");				
					}	
					else
					{
						System.out.println("Have InferiorThyroidVeinConnector to Generate Epithelium");
						connectPoints = bioMightConnector.getConnectorPoints();
		
						// Get the Bounding Box for the neck from the Constructor
						System.out.println("In generateMiddleThyroidVein XBound: " + bioMightBoundBox.getxPos());
						System.out.println("In generateMiddleThyroidVein YBound: " + bioMightBoundBox.getyPos());
						System.out.println("In generateMiddleThyroidVein zBound: " + bioMightBoundBox.getzPos());	
			
						System.out.println("In generateMiddleThyroidVein xConn1: " + connectPoints[0][0]);
						System.out.println("In generateMiddleThyroidVein yConn1: " + connectPoints[0][1]);
						System.out.println("In generateMiddleThyroidVein zConn1: " + connectPoints[0][1]);
				
						System.out.println("NumSegments Y: " + bioMightBoundBox.getYVector());
					}
				}
			}
			
			
			int nMaxSegs = 4;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
    		
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
    		
           		         
				// Extend out from the terminus of the Knee
				if (numSegs==0){
					bioInstruct.setPivotPoint(3);
					bioInstruct.setRotateVector(0.0, 0.0, 1.0);
					bioInstruct.setTransType(2);
					bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);
				}
				else if (numSegs==1){
					bioInstruct.setPivotPoint(3);
					bioInstruct.setRotateVector(0.0, 0.0, 1.0);
					bioInstruct.setTransType(2);
					bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);
				}
				else if (numSegs==2){
					bioInstruct.setPivotPoint(3);
					bioInstruct.setRotateVector(0.0, 0.0, 1.0);
					bioInstruct.setTransType(2);
					bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);	
				}
				else if (numSegs==3){
					bioInstruct.setPivotPoint(3);
					bioInstruct.setRotateVector(0.0, 0.0, 1.0);
					bioInstruct.setTransType(2);
					bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);	
				}
				else if (numSegs==4){
					bioInstruct.setPivotPoint(3);
					bioInstruct.setRotateVector(0.0, 0.0, 1.0);
					bioInstruct.setTransType(2);
					bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);	      			
				}
        		
        		
				else if (numSegs==5){
					bioInstruct.setPivotPoint(3);
					bioInstruct.setRotateVector(0.0, 0.0, 1.0);
					bioInstruct.setTransType(2);
					bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);	      			     			
				}
				else if (numSegs==6){
					bioInstruct.setPivotPoint(3);
					bioInstruct.setRotateVector(0.0, 0.0, 1.0);
					bioInstruct.setTransType(2);
					bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);		      			     				      			
				}		
				else {
					bioInstruct.setPivotPoint(3);
					bioInstruct.setRotateVector(0.0, 0.0, 1.0);
					bioInstruct.setTransType(2);
					bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);
				}
    	    
				// Add the instruction into the instruction set
				bioMightInstructSet.addElement(bioInstruct);

			}
			
		}
		
	     
		// Generate the object based on the instruction set
		double[][] lastPoints = DBUtils.generateFacedComponents(Constants.QUADRANGLE, startID, componentType, componentName, componentID, connectPoints, bioMightInstructSet);
		System.out.println("Generated the Rows for MiddleThyroidVein: " + componentID + "   " + componentType);
    		   
		// Set up the BioMightGenerate that will be returned to the client
		// so that its information can be used to build other objects
  		BioMightGenerate  bioMightGenerate = new BioMightGenerate(lastPoints, 0, "");
  		System.out.println("Setup MiddleThyroidVein BioMightGenerate Object: " + lastPoints[0][0]);
		   
		return (bioMightGenerate);
	}

	/***************************************************************************************
	 * GENERATE SUPERIOR THYROID VEIN
	 * 
	 * This generates the External Jugular Vein
	 *
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/
	 	
	public BioMightGenerate generateSuperiorThyroidVein(String startID, String componentType, String componentName, String componentID,  String parentID,  BioMightConstruct bioMightConstruct) 
		throws DataException, DataSecurityException
	{	
		System.out.println("GenerateSuperiorThyroidVein: " + componentID + "   " + parentID);  		    		
		
		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();
		double[][] connectPoints = null;
		
		
		// We can generate the SuperiorThyroidVein alone, or when connected
		// The current points passed into the equation are assumed
		// to come from the base oral cavity
		// We are creating the SuperiorThyroidVein for the neck
		if (parentID.equals("Neck:01")) 
		{	

			// We can generate the MiddleThyroidVein alone, or when connected
			// The current points passed into the equation are assumed
			// to come from the base oral cavity
			// We are creating the MiddleThyroidVein for the neck
			if (bioMightConstruct == null )
			{
				// Cannot build without the constructor.
				// Issue warning and leave the method
				System.out.println("NO CONSTRUCTOR to Generate Epithelium");
			}
			else
			{
				// Get the Bounding Box from the Constructor
				System.out.println("Using Constructor to Generate InferiorThyroidVein");
				BioMightBoundBox bioMightBoundBox = bioMightConstruct.getBoundingBox(Constants.InferiorThyroidVeinRef);
				if (bioMightBoundBox == null)
				{
					System.out.println(parentID + " InferiorThyroidVein BoundBox is null!");
				}
				else
				{
					System.out.println(parentID + " Have InferiorThyroidVein BoundBox for: " + parentID);
					
					BioMightConnectors bioMightConnectors = bioMightBoundBox.getBioMightConnectors();
					BioMightConnector bioMightConnector = bioMightConnectors.getBioMightConnector(Constants.InferiorThyroidVeinRef);
					if (bioMightConnector == null) {
						System.out.println(parentID + " InferiorThyroidVein Connector is null!");				
					}	
					else
					{
						System.out.println("Have InferiorThyroidVeinConnector to Generate Epithelium");
						connectPoints = bioMightConnector.getConnectorPoints();
		
						// Get the Bounding Box for the neck from the Constructor
						System.out.println("In generateMiddleThyroidVein XBound: " + bioMightBoundBox.getxPos());
						System.out.println("In generateMiddleThyroidVein YBound: " + bioMightBoundBox.getyPos());
						System.out.println("In generateMiddleThyroidVein zBound: " + bioMightBoundBox.getzPos());	
			
						System.out.println("In generateMiddleThyroidVein xConn1: " + connectPoints[0][0]);
						System.out.println("In generateMiddleThyroidVein yConn1: " + connectPoints[0][1]);
						System.out.println("In generateMiddleThyroidVein zConn1: " + connectPoints[0][1]);
				
						System.out.println("NumSegments Y: " + bioMightBoundBox.getYVector());
					}
				}
			}			
			
			
			int nMaxSegs = 5;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
		
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
		
       		         
				// Extend out from the terminus of the Knee
				if (numSegs==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);	
				}
				else if (numSegs==1){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);	
				}
				else if (numSegs==2){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);		
				}
				else if (numSegs==3){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);	
				}
				else if (numSegs==4){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);	      			
				}
				else if (numSegs==5){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);	      			     			
				}
				
				
				else if (numSegs==6){
					bioInstruct.setPivotPoint(3);
					bioInstruct.setRotateVector(0.0, 0.0, 1.0);
					bioInstruct.setTransType(2);
					bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);		      			     				      			
				}		
				else {
					bioInstruct.setPivotPoint(3);
					bioInstruct.setRotateVector(0.0, 0.0, 1.0);
					bioInstruct.setTransType(2);
					bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);
				}
	    
				// Add the instruction into the instruction set
				bioMightInstructSet.addElement(bioInstruct);
			}
		}
		else if (parentID.equals("Chest:01")) 
		{
			
			// We can generate the MiddleThyroidVein alone, or when connected
			// The current points passed into the equation are assumed
			// to come from the base oral cavity
			// We are creating the MiddleThyroidVein for the neck
			if (bioMightConstruct == null )
			{
				// Cannot build without the constructor.
				// Issue warning and leave the method
				System.out.println("NO CONSTRUCTOR to Generate Epithelium");
			}
			else
			{
				// Get the Bounding Box from the Constructor
				System.out.println("Using Constructor to Generate InferiorThyroidVein");
				BioMightBoundBox bioMightBoundBox = bioMightConstruct.getBoundingBox(Constants.InferiorThyroidVeinRef);
				if (bioMightBoundBox == null)
				{
					System.out.println(parentID + " InferiorThyroidVein BoundBox is null!");
				}
				else
				{
					System.out.println(parentID + " Have InferiorThyroidVein BoundBox for: " + parentID);
					
					BioMightConnectors bioMightConnectors = bioMightBoundBox.getBioMightConnectors();
					BioMightConnector bioMightConnector = bioMightConnectors.getBioMightConnector(Constants.InferiorThyroidVeinRef);
					if (bioMightConnector == null) {
						System.out.println(parentID + " InferiorThyroidVein Connector is null!");				
					}	
					else
					{
						System.out.println("Have InferiorThyroidVeinConnector to Generate Epithelium");
						connectPoints = bioMightConnector.getConnectorPoints();
		
						// Get the Bounding Box for the neck from the Constructor
						System.out.println("In generateMiddleThyroidVein XBound: " + bioMightBoundBox.getxPos());
						System.out.println("In generateMiddleThyroidVein YBound: " + bioMightBoundBox.getyPos());
						System.out.println("In generateMiddleThyroidVein zBound: " + bioMightBoundBox.getzPos());	
			
						System.out.println("In generateMiddleThyroidVein xConn1: " + connectPoints[0][0]);
						System.out.println("In generateMiddleThyroidVein yConn1: " + connectPoints[0][1]);
						System.out.println("In generateMiddleThyroidVein zConn1: " + connectPoints[0][1]);
				
						System.out.println("NumSegments Y: " + bioMightBoundBox.getYVector());
					}
				}
			}			
			
			int nMaxSegs = 4;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
    		
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
    		
           		         
				// Extend out from the terminus of the Knee
				if (numSegs==0){
					bioInstruct.setPivotPoint(3);
					bioInstruct.setRotateVector(0.0, 0.0, 1.0);
					bioInstruct.setTransType(2);
					bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);
				}
				else if (numSegs==1){
					bioInstruct.setPivotPoint(3);
					bioInstruct.setRotateVector(0.0, 0.0, 1.0);
					bioInstruct.setTransType(2);
					bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);
				}
				else if (numSegs==2){
					bioInstruct.setPivotPoint(3);
					bioInstruct.setRotateVector(0.0, 0.0, 1.0);
					bioInstruct.setTransType(2);
					bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);	
				}
				else if (numSegs==3){
					bioInstruct.setPivotPoint(3);
					bioInstruct.setRotateVector(0.0, 0.0, 1.0);
					bioInstruct.setTransType(2);
					bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);	
				}
				else if (numSegs==4){
					bioInstruct.setPivotPoint(3);
					bioInstruct.setRotateVector(0.0, 0.0, 1.0);
					bioInstruct.setTransType(2);
					bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);	      			
				}
        		
        		
				else if (numSegs==5){
					bioInstruct.setPivotPoint(3);
					bioInstruct.setRotateVector(0.0, 0.0, 1.0);
					bioInstruct.setTransType(2);
					bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);	      			     			
				}
				else if (numSegs==6){
					bioInstruct.setPivotPoint(3);
					bioInstruct.setRotateVector(0.0, 0.0, 1.0);
					bioInstruct.setTransType(2);
					bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);		      			     				      			
				}		
				else {
					bioInstruct.setPivotPoint(3);
					bioInstruct.setRotateVector(0.0, 0.0, 1.0);
					bioInstruct.setTransType(2);
					bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);
				}
    	    
				// Add the instruction into the instruction set
				bioMightInstructSet.addElement(bioInstruct);

			}
			
		}
		
	     
		// Generate the object based on the instruction set
		double[][] lastPoints = DBUtils.generateFacedComponents(Constants.QUADRANGLE, startID, componentType, componentName, componentID, connectPoints, bioMightInstructSet);
		System.out.println("Generated the Rows for SuperiorThyroidVein: " + componentID + "   " + componentType);
    		   
		// Set up the BioMightGenerate that will be returned to the client
		// so that its information can be used to build other objects
  		BioMightGenerate  bioMightGenerate = new BioMightGenerate(lastPoints, 0, "");
  		System.out.println("Setup SuperiorThyroidVein BioMightGenerate Object: " + lastPoints[0][0]);
		   
		return (bioMightGenerate);
	}
	
	 /***************************************************************************************
	 * GENERATE Bulbo Urethral Artery
	 * 
	 * This method generates the Bulbo Urethral Artery
	 *
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/
	  	
	public int generateBulboUrethralArtery(String startID, String componentType, String componentName, String componentID,  String parentID, double[][] currentPoints) 
		throws DataException, DataSecurityException
	{	
		System.out.println("generate BulboUrethralArteryEndothelium: " + componentID + "   " + parentID);
		
		int bodyID = 1;
		int projectID = 1;
		String vertices = "";
		
		ArrayList mySqlList= new ArrayList();
		int returnCode = 0;
	
		// We can generate the BulboUrethralArtery alone, or when connected
		// The current points passed into the equation are assumed
		// to come from the base oral cavity
		if (currentPoints == null )
		{
			double circumference = 0.25;
			
			double x =  -0.3;
    		double y =  -17.0;
    		double z =  -3.0;
			
			// Create a equilateral octogon	
			currentPoints[0][0] =  x;
			currentPoints[0][1] =  y;
			currentPoints[0][2] =  z;
			
			currentPoints[1][0] =  x-circumference;
			currentPoints[1][1] =  y;
			currentPoints[1][2] =  z-circumference;
			
			currentPoints[2][0] =  x-circumference;
			currentPoints[2][1] =  y;
			currentPoints[2][2] =  z-circumference*2;
			
			currentPoints[3][0] =  x;
			currentPoints[3][1] =  y;
			currentPoints[3][2] =  z-circumference*3;
	
			currentPoints[4][0] =  x+circumference;
			currentPoints[4][1] =  y;
			currentPoints[4][2] =  z-circumference*3;
			
			currentPoints[5][0] =  x+circumference*2;
			currentPoints[5][1] =  y;
			currentPoints[5][2] =  z-circumference*2;
	
			currentPoints[6][0] =  x+circumference*2;
			currentPoints[6][1] =  y;
			currentPoints[6][2] =  z-circumference;

			currentPoints[7][0] =  x+circumference;
			currentPoints[7][1] =  y;
			currentPoints[7][2] =  z;
		}
		

		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();

		if (parentID.equals("BulboUrethralArtery:01")) 
		{	
			int nMaxSegs = 5;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
		
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
	     
				if (numSegs==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.25, 0.20, 0.15);
				}
				else if (numSegs==1){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.25, 0.20, 0.20);
				}
				else if (numSegs==2){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.25, 0.20, 0.20);
				}
				else if (numSegs==3){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.25, 0.20, 0.00);
				}
				else if (numSegs==4){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.25, 0.20, 0.20);
				}
				else if (numSegs==5){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.25, 0.25, 0.00);
				}
				
				else {
					bioInstruct.setPivotPoint(3);
					bioInstruct.setRotateVector(0.0, 0.0, 1.0);
					bioInstruct.setTransType(2);
					bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);
				}
				
				
	    		// Add the instruction into the instruction set
	    		bioMightInstructSet.addElement(bioInstruct);
			}
	    
		} 
		
		DBUtils.generateFacedComponents(Constants.QUADRANGLE, startID, componentType, componentName, componentID, currentPoints, bioMightInstructSet);
		System.out.println("Generated the Rows for BulboUrethralArteryEndothelium: " + componentID + "   parent: " + parentID + "   " + componentType);
		
	return returnCode;
}

	 /***************************************************************************************
	 * GENERATE LateralSuperiorGenicularArtery
	 * 
	 * This method generates the LateralSuperiorGenicularArtery
	 *
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/
	  	
	public int generateLateralSuperiorGenicularArtery(String startID, String componentType, String componentName, String componentID,  String parentID, double[][] currentPoints) 
		throws DataException, DataSecurityException
	{	
		System.out.println("LateralSuperiorGenicularArteryEndothelium: " + componentID + "   " + parentID);
		
		int bodyID = 1;
		int projectID = 1;
		String vertices = "";
		
		ArrayList mySqlList= new ArrayList();
		int returnCode = 0;
	

		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();

		if (componentID.equals("LateralSuperiorGenicularArtery:01")) 
		{	
			

			if (currentPoints == null )
			{
				double circumference = 0.25;
				// Generate the LateralSuperiorGenicularArteryEndothelium of the stomach
				// Create 5 sections
				double[] startPos = {3.75,-38.0, -3.0};	
				currentPoints = BioGraphics.octogonYPlane(startPos, circumference);
	  		}
			
			int nMaxSegs = 6;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
		
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
	     
				if (numSegs==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -1.00, 0.25);
				}
				else if (numSegs==1){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -1.00, 0.25);
				}
				else if (numSegs==2){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.15, -1.00, 0.10);
				}
				else if (numSegs==3){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.25, -1.00, 0.20);
				}
				else if (numSegs==4){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -1.00, 0.50);
				}
				else if (numSegs==5){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -1.00, 0.25);
				}
				
				else {
					bioInstruct.setPivotPoint(3);
					bioInstruct.setRotateVector(0.0, 0.0, 1.0);
					bioInstruct.setTransType(2);
					bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);
				}
				
				
	    		// Add the instruction into the instruction set
	    		bioMightInstructSet.addElement(bioInstruct);
			}
	    
		} else if (componentID.equals("LateralSuperiorGenicularArtery:02")) {
			
		
			if (currentPoints == null )
			{
				double circumference = 0.25;
				// Generate the LateralSuperiorGenicularArteryEndothelium of the stomach
				// Create 5 sections
				double[] startPos = {3.75,-38.0, -3.0};	
				currentPoints = BioGraphics.octogonYPlane(startPos, circumference);
	  		}
			
			
			int nMaxSegs = 6;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
			
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
		      
				if (numSegs==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.00, -1.00, 0.25);
				}
				else if (numSegs==1){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.00, -1.00, 0.25);
				}
				else if (numSegs==2){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.00, -1.00, 0.10);
				}
				else if (numSegs==3){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.00, -1.00, 0.20);
				}
				else if (numSegs==4){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.00, -1.00, 0.50);
				}
				else if (numSegs==5){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.00, -1.00, 0.25);
				}
				else {
					bioInstruct.setPivotPoint(3);
					bioInstruct.setRotateVector(0.0, 0.0, 1.0);
					bioInstruct.setTransType(2);
					bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);
				}
					
					
		    	// Add the instruction into the instruction set
		    	bioMightInstructSet.addElement(bioInstruct);
			}
		    
		}
	
		
		DBUtils.generateFacedComponents(Constants.QUADRANGLE, startID, componentType, componentName, componentID, currentPoints, bioMightInstructSet);
		System.out.println("Generated the Rows for LateralSuperiorGenicularArteryEndothelium: " + componentID + "   parent: " + parentID + "   " + componentType);
		
	return returnCode;
	}
	
	/***************************************************************************************
	 * GENERATE DescendingGenicularArtery
	 * 
	 * This method generates the DescendingGenicularArtery
	 *
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/
	  	
	public int generateDescendingGenicularArtery(String startID, String componentType, String componentName, String componentID,  String parentID, double[][] currentPoints) 
		throws DataException, DataSecurityException
	{	
		System.out.println("EJB:DescendingGenicularArteryEndothelium: " + componentID + "   " + parentID);
		
		int bodyID = 1;
		int projectID = 1;
		String vertices = "";
		
		ArrayList mySqlList= new ArrayList();
		int returnCode = 0;
	

		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();

		if (componentID.equals("DescendingGenicularArtery:01")) 
		{	
			
			if (currentPoints == null )
			{
				double circumference = 0.25;
				double[] startPos = {3.75,-38.0, -3.0};	
				currentPoints = BioGraphics.octogonYPlane(startPos, circumference);
	  		}
			
			int nMaxSegs = 6;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
		
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
	     
				if (numSegs==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.15, -0.50, 0.0);
				}
				else if (numSegs==1){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.16, -0.50, 0.0);
				}
				else if (numSegs==2){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.18, -0.50, 0.0);
				}
				else if (numSegs==3){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.11, -0.50, 0.0);
				}
				else if (numSegs==4){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.07, -0.50, 0.0);
				}
				else if (numSegs==5){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.05, -0.50, 0.0);
				}
	
				else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.00, -0.50, 0.0);
				}
				
				
	    		// Add the instruction into the instruction set
	    		bioMightInstructSet.addElement(bioInstruct);
			}
	    
		} else if (componentID.equals("DescendingGenicularArtery:02")) {
			
	
			if (currentPoints == null )
			{
				double circumference = 0.25;
				// Generate the LateralSuperiorGenicularArteryEndothelium of the stomach
				// Create 5 sections
				double[] startPos = {3.75,-38.0, -3.0};	
				currentPoints = BioGraphics.octogonYPlane(startPos, circumference);
	  		}
			
			
			int nMaxSegs = 6;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
			
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
		      
				if (numSegs==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.15, -0.50, 0.0);
				}
				else if (numSegs==1){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.16, -0.50, 0.0);
				}
				else if (numSegs==2){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.18, -0.50, 0.0);
				}
				else if (numSegs==3){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.11, -0.50, 0.0);
				}
				else if (numSegs==4){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.07, -0.50, 0.0);
				}
				else if (numSegs==5){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.05, -0.50, 0.0);
				}
				else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.05, -0.50, 0.0);
				}
					
					
		    	// Add the instruction into the instruction set
		    	bioMightInstructSet.addElement(bioInstruct);
			}
		    
		}
	
		
		DBUtils.generateFacedComponents(Constants.QUADRANGLE, startID, componentType, componentName, componentID, currentPoints, bioMightInstructSet);
		System.out.println("Generated the Rows for DescendingGenicularEndothelium: " + componentID + "   parent: " + parentID + "   " + componentType);
		
	return returnCode;
	}


	/***************************************************************************************
	 * GENERATE DescendingGenicularArticularArtery
	 * 
	 * This method generates the DescendingGenicularArticularArtery
	 *
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/
	  	
	public int generateDescendingGenicularArticularArtery(String startID, String componentType, String componentName, String componentID,  String parentID, double[][] currentPoints) 
		throws DataException, DataSecurityException
	{	
		System.out.println("DescendingGenicularArticularArteryEndothelium: " + componentID + "   " + parentID);
		
		int bodyID = 1;
		int projectID = 1;
		String vertices = "";
		
		ArrayList mySqlList= new ArrayList();
		int returnCode = 0;
	

		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();

		if (componentID.equals("DescendingGenicularArticularArtery:01")) 
		{	
			
			if (currentPoints == null )
			{
				double circumference = 0.25;
				double[] startPos = {3.75,-38.0, -3.0};	
				currentPoints = BioGraphics.octogonYPlane(startPos, circumference);
	  		}
			
			int nMaxSegs = 4;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
		
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
	     
				if (numSegs==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.23, -0.50, 0.0);
				}
				else if (numSegs==1){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.25, -0.50, 0.0);
				}
				else if (numSegs==2){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.27, -0.50, 0.0);
				}
				else if (numSegs==3){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.12, -0.250, 0.0);
				}
			

				else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.00, -0.50, 0.0);
				}
				
				
	    		// Add the instruction into the instruction set
	    		bioMightInstructSet.addElement(bioInstruct);
			}
	    
		} else if (componentID.equals("DescendingGenicularArticularArtery:02")) {
			
	
			if (currentPoints == null )
			{
				double circumference = 0.25;
				// Generate the LateralSuperiorGenicularArteryEndothelium of the stomach
				// Create 5 sections
				double[] startPos = {3.75,-38.0, -3.0};	
				currentPoints = BioGraphics.octogonYPlane(startPos, circumference);
	  		}
			
			
			int nMaxSegs = 4;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
			
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
		      
				if (numSegs==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.23, -0.50, 0.0);
				}
				else if (numSegs==1){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.25, -0.50, 0.0);
				}
				else if (numSegs==2){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.27, -0.50, 0.0);
				}
				else if (numSegs==3){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.12, -0.250, 0.0);
				}
				else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.05, -0.50, 0.0);
				}
					
					
		    	// Add the instruction into the instruction set
		    	bioMightInstructSet.addElement(bioInstruct);
			}
		    
		}
	
		DBUtils.generateFacedComponents(Constants.QUADRANGLE, startID, componentType, componentName, componentID, currentPoints, bioMightInstructSet);
		System.out.println("Generated the Rows for DescendingGenicularArticularEndothelium: " + componentID + "   parent: " + parentID + "   " + componentType);
		
	return returnCode;
	}

	
	/***************************************************************************************
	 * GENERATE DescendingGenicularSaphenousArtery
	 * 
	 * This method generates the DescendingGenicularSaphenousArtery
	 *
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/
	  	
	public int generateDescendingGenicularSaphenousArtery(String startID, String componentType, String componentName, String componentID,  String parentID, double[][] currentPoints) 
		throws DataException, DataSecurityException
	{	
		System.out.println("DescendingGenicularSaphenousArteryEndothelium: " + componentID + "   " + parentID);
		
		int bodyID = 1;
		int projectID = 1;
		String vertices = "";
		
		ArrayList mySqlList= new ArrayList();
		int returnCode = 0;
	

		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();

		if (componentID.equals("DescendingGenicularSaphenousArtery:01")) 
		{	
			
			if (currentPoints == null )
			{
				double circumference = 0.25;
				double[] startPos = {3.75,-38.0, -3.0};	
				currentPoints = BioGraphics.octogonYPlane(startPos, circumference);
	  		}
			
			int nMaxSegs = 5;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
		
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
	     
				if (numSegs==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.15, -0.50, 0.0);
				}
				else if (numSegs==1){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.16, -0.50, 0.0);
				}
				else if (numSegs==2){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.18, -0.50, 0.0);
				}
				else if (numSegs==3){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.11, -0.50, 0.0);
				}
				else if (numSegs==4){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.07, -0.50, 0.0);
				}
				else if (numSegs==5){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.05, -0.50, 0.0);
				}
	
				else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.00, -0.50, 0.0);
				}
				
				
	    		// Add the instruction into the instruction set
	    		bioMightInstructSet.addElement(bioInstruct);
			}
	    
		} else if (componentID.equals("DescendingGenicularSaphenousArtery:02")) {
			
	
			if (currentPoints == null )
			{
				double circumference = 0.25;
				// Generate the LateralSuperiorGenicularArteryEndothelium of the stomach
				// Create 5 sections
				double[] startPos = {3.75,-38.0, -3.0};	
				currentPoints = BioGraphics.octogonYPlane(startPos, circumference);
	  		}
			
			
			int nMaxSegs = 5;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
			
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
		      
				if (numSegs==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.15, -0.50, 0.0);
				}
				else if (numSegs==1){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.16, -0.50, 0.0);
				}
				else if (numSegs==2){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.18, -0.50, 0.0);
				}
				else if (numSegs==3){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.11, -0.50, 0.0);
				}
				else if (numSegs==4){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.07, -0.50, 0.0);
				}
				else if (numSegs==5){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.05, -0.50, 0.0);
				}
	
				else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.05, -0.50, 0.0);
				}
					
					
		    	// Add the instruction into the instruction set
		    	bioMightInstructSet.addElement(bioInstruct);
			}
		    
		}
	
		
		DBUtils.generateFacedComponents(Constants.QUADRANGLE, startID, componentType, componentName, componentID, currentPoints, bioMightInstructSet);
		System.out.println("Generated the Rows for DescendingGenicularSaphenousEndothelium: " + componentID + "   parent: " + parentID + "   " + componentType);
		
	return returnCode;
	}

	
	
	/***************************************************************************************
	 * GENERATE EXTERNAL JUGULAR VEIN
	 * 
	 * This generates the External Jugular Vein
	 *
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/
	  	
	public int generateInternalJugularVein(String startID, String componentType, String componentName, String componentID,  String parentID, double[][] currentPoints) 
		throws DataException, DataSecurityException
	{	
		System.out.println("InternalJugularVein: " + componentID + "   " + parentID);
		
		int bodyID = 1;
		int projectID = 1;
		String vertices = "";
		
		ArrayList mySqlList= new ArrayList();
		int returnCode = 0;
	
		
		// We can generate the InternalJugularVein
		// We can generate the ExternalJugularVein
		if (currentPoints == null )
		{
			double circumference = 0.25;
    		double[] startPos = {-1.75,-5.0, -3.0};		
    		currentPoints = BioGraphics.octogonYPlane(startPos, circumference);
		}


		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();

		// Left Internal Jugular Vein - Cervicle Region
		if (parentID.equals("InternalJugularVein:01")) 
		{	
			int nMaxSegs = 6;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
		
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
	     
				if (numSegs==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);
				}
				else if (numSegs==1){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -1.0, 0.25);
				}
				else if (numSegs==2){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);
				}
				else if (numSegs==3){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -1.0, 0.25);
				}		
				else if (numSegs==4){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -1.0, 0.10);
				}		
				else if (numSegs==5){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, 1.0, 0.0);
				}
				
				
				else {
					bioInstruct.setPivotPoint(3);
					bioInstruct.setRotateVector(0.0, 0.0, 1.0);
					bioInstruct.setTransType(2);
					bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);
				}
				
				
	    		// Add the instruction into the instruction set
	    		bioMightInstructSet.addElement(bioInstruct);
			}
		// Right Internal Jugular Vein - Cervicle Region		    
		} else if (parentID.equals("InternalJugularVein:02")) {	
			int nMaxSegs = 2;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
			
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
		      
				if (numSegs==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);
				}
				else if (numSegs==1){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -1.0, 0.20);
				}
				else if (numSegs==2){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.25, -1.0, 0.0);
				}
				else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.25, -1.0, 0.0);
				}
					
					
		    	// Add the instruction into the instruction set
		    	bioMightInstructSet.addElement(bioInstruct);
			}
		    
		}
		// Left Internal Jugular Vein - Head Region
		else if (parentID.equals("InternalJugularVein:03")) {	
				int nMaxSegs = 6;
				for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
			
					// Create a place for an instruction 
					BioMightInstruction bioInstruct = new BioMightInstruction();
		     
		     
					if (numSegs==0){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.25, 1.0, 0.0);
					}
					else if (numSegs==1){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.10, 1.0, 0.0);
					}
					else if (numSegs==2){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.20, 1.0, -0.15);
					}
					else if (numSegs==3){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.20, 1.0, 0.0);
					}		
					else if (numSegs==4){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.15, 1.0, 0.0);
					}				
					else if (numSegs==5){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.0, 1.0, 0.0);
					}	
					else if (numSegs==6){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.0, 1.0, 0.0);
					}	
					else {
						bioInstruct.setTransType(2);
						bioInstruct.setTranslateMatrix(0.0, 0.50, 0.0);
					}
					
					
					
		    		// Add the instruction into the instruction set
		    		bioMightInstructSet.addElement(bioInstruct);
				}
			}
		 //Right Internal Jugular Vein - Cervical Region
		 else if (parentID.equals("InternalJugularVein:04")) {	
				int nMaxSegs = 6;
				for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
			
					// Create a place for an instruction 
					BioMightInstruction bioInstruct = new BioMightInstruction();
				     
							if (numSegs==0){
								bioInstruct.setTransType(Constants.TRANSLATE);
								bioInstruct.setTranslateMatrix(0.25, 1.0, 0.0);
							}
							else if (numSegs==1){
								bioInstruct.setTransType(Constants.TRANSLATE);
								bioInstruct.setTranslateMatrix(0.10, 1.0, 0.0);
							}
							else if (numSegs==2){
								bioInstruct.setTransType(Constants.TRANSLATE);
								bioInstruct.setTranslateMatrix(0.20, 1.0, -0.15);
							}
							else if (numSegs==3){
								bioInstruct.setTransType(Constants.TRANSLATE);
								bioInstruct.setTranslateMatrix(0.20, 1.0, 0.0);
							}		
							else if (numSegs==4){
								bioInstruct.setTransType(Constants.TRANSLATE);
								bioInstruct.setTranslateMatrix(0.15, 1.0, 0.0);
							}				
							else if (numSegs==5){
								bioInstruct.setTransType(Constants.TRANSLATE);
								bioInstruct.setTranslateMatrix(0.0, 1.0, 0.0);
							}	
							else if (numSegs==6){
								bioInstruct.setTransType(Constants.TRANSLATE);
								bioInstruct.setTranslateMatrix(0.0, 1.0, 0.0);
							}	
							else {
								bioInstruct.setTransType(2);
								bioInstruct.setTranslateMatrix(0.0, 0.50, 0.0);
							}			
					
		    		// Add the instruction into the instruction set
		    		bioMightInstructSet.addElement(bioInstruct);
			}
		
		 }
		
		DBUtils.generateFacedComponents(Constants.QUADRANGLE, startID, componentType, componentName, componentID, currentPoints, bioMightInstructSet);
		System.out.println("Generating the Rows for InternalJugularVeinEndothelium: " + componentID + "   " + componentType);

		
		return returnCode;
	}
	

	
	
	/***************************************************************************************
	 * GENERATE EXTERNAL CAROTID ARTERY
	 * 
	 * This generates the External Carotid Artery. They are an etension of the 
	 * Common Carotid Arteries
	 *
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/
	  	
	public int generateExternalCarotidArtery(String startID, String componentType, String componentName, String componentID,  String parentID, double[][] currentPoints) 
		throws DataException, DataSecurityException
	{	
		System.out.println("ExternalCarotidArtery: " + componentID + "   " + parentID);
		
		int bodyID = 1;
		int projectID = 1;
		String vertices = "";
		
		ArrayList mySqlList= new ArrayList();
		int returnCode = 0;
	
		
		// We can generate the ExternalCarotidArtery
		if (currentPoints == null )
		{
			double circumference = 0.125;
			double[] startPos = {1.75, -6.0, -3.0};
			currentPoints = BioGraphics.octogonYPlane(startPos, circumference);
		}

		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();

		// Left External Carotid Artery - Cervicle Region
		if (parentID.equals("ExternalCarotidArtery:01")) 
		{	
			int nMaxSegs = 2;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
		
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
	     
				if (numSegs==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, 1.0, 0.0);
				}
				else if (numSegs==1){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.05, 1.0, -0.05);
				}
				else if (numSegs==2){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.05, 1.0, -0.01);
				}
				else if (numSegs==3){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, 1.0, 0.0);
				}		
	
			
				else {
					bioInstruct.setPivotPoint(3);
					bioInstruct.setRotateVector(0.0, 0.0, 1.0);
					bioInstruct.setTransType(2);
					bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);
				}
				
				
	    		// Add the instruction into the instruction set
	    		bioMightInstructSet.addElement(bioInstruct);
			}
		// Right External Carotid Artery - Cervicle Region		    
		} else if (parentID.equals("ExternalCarotidArtery:02")) {	
			int nMaxSegs = 2;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
			
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
		      
				if (numSegs==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.25, -1.0, 0.0);
				}
				else if (numSegs==1){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.15, -1.0, 0.20);
				}
				else if (numSegs==2){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.25, -1.0, 0.0);
				}
				else if (numSegs==3){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -1.0, 0.25);
				}		
				else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.25, -1.0, 0.0);
				}
					
					
		    	// Add the instruction into the instruction set
		    	bioMightInstructSet.addElement(bioInstruct);
			}
		    
		}
		// Left External Carotid Artery - Head Region
		else if (parentID.equals("ExternalCarotidArtery:03")) {	
				int nMaxSegs = 6;
				for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
			
					// Create a place for an instruction 
					BioMightInstruction bioInstruct = new BioMightInstruction();
		     
					if (numSegs==0){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.10, 1.0, 0.0);
					}
					else if (numSegs==1){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.20, 1.0, 0.0);
					}
					else if (numSegs==2){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.25, 0.5, 0.05);
					}
					else if (numSegs==3){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.25, 0.5, 0.01);
					}
					else if (numSegs==4){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.25, 0.5, 0.02);
					}		
					else if (numSegs==5){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.10, 0.5, 0.04);
					}
					else if (numSegs==6){
						bioInstruct.setTransType(2);
						bioInstruct.setTranslateMatrix(0.05, 1.0, 0.05);
					}
					else {
						bioInstruct.setPivotPoint(3);
						bioInstruct.setRotateVector(0.0, 0.0, 1.0);
						bioInstruct.setTransType(2);
						bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);
					}
					
					
		    		// Add the instruction into the instruction set
		    		bioMightInstructSet.addElement(bioInstruct);
				}
			}
		 //Right External Carotid Artery - Cervical Region
		// We draw moving away the heart
		 else if (parentID.equals("ExternalCarotidArtery:04")) {	
				int nMaxSegs = 6;
				for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
			
					// Create a place for an instruction 
					BioMightInstruction bioInstruct = new BioMightInstruction();
		     
					   
		     
					if (numSegs==0){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.10, 1.0, 0.0);
					}
					else if (numSegs==1){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.20, 1.0, 0.0);
					}
					else if (numSegs==2){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.25, 0.5, -0.05);
					}
					else if (numSegs==3){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.25, 0.5, -0.01);
					}
					else if (numSegs==4){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.25, 0.5, 0.02);
					}		
					else if (numSegs==5){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.10, 0.5, 0.01);
					}
					else if (numSegs==6){
						bioInstruct.setTransType(2);
						bioInstruct.setTranslateMatrix(-0.05, 1.0, 0.0);
					}

					else {
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.10, -1.0, 0.0);
					}
					
					
		    		// Add the instruction into the instruction set
		    		bioMightInstructSet.addElement(bioInstruct);
			}
		
		 }
		
		DBUtils.generateFacedComponents(Constants.QUADRANGLE, startID, componentType, componentName, componentID, currentPoints, bioMightInstructSet);
		System.out.println("Generating the Rows for ExternalCarotidArteryEndothelium: " + componentID + "   " + componentType);

		
		return returnCode;
	}
	

	/***************************************************************************************
	 * GENERATE ANGULAR ARTERY
	 * 
	 * This generates the Angular Artery. 
	 *
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/
	  	
	public int generateAngularArtery(String startID, String componentType, String componentName, String componentID,  String parentID, double[][] currentPoints) 
		throws DataException, DataSecurityException
	{	
		System.out.println("AngularArtery: " + componentID + "   " + parentID);
		
		int bodyID = 1;
		int projectID = 1;
		String vertices = "";
		
		ArrayList mySqlList= new ArrayList();
		int returnCode = 0;
	
		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();

		// Right AngularArtery
		if (parentID.equals("AngularArtery:01")) 
		{	
			// We can generate the AngularArtery
			if (currentPoints == null )
			{
				double circumference = 0.00625;
				double[] startPos = {1.5, 0.25, 0.00};
				currentPoints = BioGraphics.octogonYPlane(startPos, circumference);
			}
			
			int nMaxSegs = 6;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
		
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
	     
				if (numSegs==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -0.25, 0.0);
				}
				else if (numSegs==1){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -0.25, 0.0);
				}
				else if (numSegs==2){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.125, -0.5, 0.10);
				}
				else if (numSegs==3){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.125, -0.5, 0.0);
				}
				else if (numSegs==4){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.15, -0.5, 0.15);
				}
				else if (numSegs==5){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.175, -0.5, 0.10);
				}
				else {
					bioInstruct.setPivotPoint(3);
					bioInstruct.setRotateVector(0.0, 0.0, 1.0);
					bioInstruct.setTransType(2);
					bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);
				}
				
				
	    		// Add the instruction into the instruction set
	    		bioMightInstructSet.addElement(bioInstruct);
			}
		// Left AngularArtery		    
		} else if (parentID.equals("AngularArtery:02")) {	
			int nMaxSegs = 6;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
				
				// We can generate the AngularArtery
				if (currentPoints == null )
				{
					double circumference = 0.00625;
					double[] startPos = {-1.5, 0.25, 0.00};
					currentPoints = BioGraphics.octogonYPlane(startPos, circumference);
				}
			
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
		      
			     
				if (numSegs==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -0.25, 0.0);
				}
				else if (numSegs==1){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -0.25, 0.0);
				}
				else if (numSegs==2){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.125, -0.5, 0.10);
				}
				else if (numSegs==3){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.125, -0.5, 0.0);
				}
				else if (numSegs==4){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.15, -0.5, 0.15);
				}
				else if (numSegs==5){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.175, -0.5, 0.10);
				}
				else {
					bioInstruct.setPivotPoint(3);
					bioInstruct.setRotateVector(0.0, 0.0, 1.0);
					bioInstruct.setTransType(2);
					bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);
				}
					
					
		    	// Add the instruction into the instruction set
		    	bioMightInstructSet.addElement(bioInstruct);
			}
		    
		}

		
		
		DBUtils.generateFacedComponents(Constants.QUADRANGLE, startID, componentType, componentName, componentID, currentPoints, bioMightInstructSet);
		System.out.println("Generating the Rows for AngularArteryEndothelium: " + componentID + "   " + componentType);

		
		return returnCode;
	}

	/***************************************************************************************
	 * GENERATE BASILAR ARTERY
	 * 
	 * This generates the Basilar Artery. 
	 *
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/
	  	
	public int generateBasilarArtery(String startID, String componentType, String componentName, String componentID,  String parentID, double[][] currentPoints) 
		throws DataException, DataSecurityException
	{	
		System.out.println("BasilarArtery: " + componentID + "   " + parentID);
		
		int bodyID = 1;
		int projectID = 1;
		String vertices = "";
		
		ArrayList mySqlList= new ArrayList();
		int returnCode = 0;
	
		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();

		// BasilarArtery
		if (componentID.equals("BasilarArtery:01")) 
		{	
			// We can generate the BasilarArtery
			if (currentPoints == null )
			{
				double circumference = 0.0125;
				double[] startPos = {0.0, 3.25, -3.00};
				currentPoints = BioGraphics.octogonZPlane(startPos, circumference);
			}
			
			int nMaxSegs = 6;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
		
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
	     
				if (numSegs==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -0.25, 0.08);
				}
				else if (numSegs==1){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -0.25, 0.05);
				}
				else if (numSegs==2){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -0.25, 0.01);
				}
				else if (numSegs==3){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -0.25, -0.13);
				}
				else if (numSegs==4){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -0.25, -0.02);
				}
				else if (numSegs==5){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -0.35, -0.15);
				}
			
				
				else {
					bioInstruct.setPivotPoint(3);
					bioInstruct.setRotateVector(0.0, 0.0, 1.0);
					bioInstruct.setTransType(2);
					bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);
				}
				
				
	    		// Add the instruction into the instruction set
	    		bioMightInstructSet.addElement(bioInstruct);
			}
		// BasilarArtery mutant	    
		} else if (componentID.equals("BasilarArtery:02")) {	
			int nMaxSegs = 0;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
				
				// We can generate the BasilarArtery
				if (currentPoints == null )
				{
					double circumference = 0.00625;
					double[] startPos = {-1.5, 0.25, 0.00};
					currentPoints = BioGraphics.octogonYPlane(startPos, circumference);
				}
			
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
		      
			     
				if (numSegs==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -0.25, 0.0);
				}
				else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.00, 1.0, 0.0);
				}
					
					
		    	// Add the instruction into the instruction set
		    	bioMightInstructSet.addElement(bioInstruct);
			}
		    
		}

		
		
		DBUtils.generateFacedComponents(Constants.QUADRANGLE, startID, componentType, componentName, componentID, currentPoints, bioMightInstructSet);
		System.out.println("Generating the Rows for BasilarArteryEndothelium: " + componentID + "   " + componentType);

		
		return returnCode;
	}

	
	/***************************************************************************************
	 * GENERATE BUCCAL ARTERY
	 * 
	 * This generates the Buccal Artery. 
	 *
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/
	  	
	public int generateBuccalArtery(String startID, String componentType, String componentName, String componentID,  String parentID, double[][] currentPoints) 
		throws DataException, DataSecurityException
	{	
		System.out.println("BuccalArtery: " + componentID + "   " + parentID);
		
		int bodyID = 1;
		int projectID = 1;
		String vertices = "";
		
		ArrayList mySqlList= new ArrayList();
		int returnCode = 0;
	
		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();

		// Right BuccalArtery
		if (parentID.equals("BuccalArtery:01")) 
		{	
			// We can generate the BuccalArtery
			if (currentPoints == null )
			{
				double circumference = 0.0125;
				double[] startPos = {0.0, 3.25, -3.00};
				currentPoints = BioGraphics.octogonZPlane(startPos, circumference);
			}
			
			int nMaxSegs = 3;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
		
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
	     
				if (numSegs==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -0.25, 0.15);
				}
				else if (numSegs==1){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.125, -0.25, 0.10);
				}
				else if (numSegs==2){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.125, -0.25, 0.05);
				}
				else if (numSegs==3){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.150, -0.25, -1.0);
				}
			
				else {
					bioInstruct.setPivotPoint(3);
					bioInstruct.setRotateVector(0.0, 0.0, 1.0);
					bioInstruct.setTransType(2);
					bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);
				}
				
				
	    		// Add the instruction into the instruction set
	    		bioMightInstructSet.addElement(bioInstruct);
			}
		// Left BuccalArtery 
		} else if (parentID.equals("BuccalArtery:02")) {	
			int nMaxSegs = 3;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
				
				// We can generate the BuccalArtery
				if (currentPoints == null )
				{
					double circumference = 0.00625;
					double[] startPos = {-1.5, 0.25, 0.00};
					currentPoints = BioGraphics.octogonYPlane(startPos, circumference);
				}
			
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
		      
			     
				if (numSegs==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -0.25, 0.15);
				}
				else if (numSegs==1){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.125, -0.25, 0.10);
				}
				else if (numSegs==2){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.125, -0.25, 0.05);
				}
				else if (numSegs==3){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.150, -0.25, -1.0);
				}
				else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.00, 1.0, 0.0);
				}
					
					
		    	// Add the instruction into the instruction set
		    	bioMightInstructSet.addElement(bioInstruct);
			}
		    
		}
		
		DBUtils.generateFacedComponents(Constants.QUADRANGLE, startID, componentType, componentName, componentID, currentPoints, bioMightInstructSet);
		System.out.println("Generating the Rows for BuccalArteryEndothelium: " + componentID + "   " + componentType);

		
		return returnCode;
	}


	/***************************************************************************************
	 * GENERATE DORSAL NASAL ARTERY
	 * 
	 * This generates the DorsalNasal Artery. 
	 *
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/
	  	
	public int generateDorsalNasalArtery(String startID, String componentType, String componentName, String componentID,  String parentID, double[][] currentPoints) 
		throws DataException, DataSecurityException
	{	
		System.out.println("DorsalNasalArtery: " + componentID + "   " + parentID);
		
		int bodyID = 1;
		int projectID = 1;
		String vertices = "";
		
		ArrayList mySqlList= new ArrayList();
		int returnCode = 0;
	
		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();

		// Right DorsalNasalArtery
		if (parentID.equals("DorsalNasalArtery:01")) 
		{	
			// We can generate the DorsalNasalArtery
			if (currentPoints == null )
			{
				double circumference = 0.00625;
				double[] startPos = {0.25, -0.50, 0.00};
				currentPoints = BioGraphics.octogonYPlane(startPos, circumference);
			}
			
			int nMaxSegs = 6;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
		
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
	     
				if (numSegs==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, 0.0, 0.15);
				}
				else if (numSegs==1){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0125, 0.0, 0.15);
				}
				else if (numSegs==2){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0150, -0.06, 0.15);
				}
				else if (numSegs==3){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0175, 0.0, 0.15);
				}
				else if (numSegs==4){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0125, 0.0, 0.15);
				}
				else if (numSegs==5){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, 0.0, 0.15);
				}
				else {
					bioInstruct.setPivotPoint(3);
					bioInstruct.setRotateVector(0.0, 0.0, 1.0);
					bioInstruct.setTransType(2);
					bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);
				}
				
				
	    		// Add the instruction into the instruction set
	    		bioMightInstructSet.addElement(bioInstruct);
			}
		// Left DorsalNasalArtery		    
		} else if (parentID.equals("DorsalNasalArtery:02")) {	
			int nMaxSegs = 6;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
				
				// We can generate the DorsalNasalArtery
				if (currentPoints == null )
				{
					double circumference = 0.00625;
					double[] startPos = {-0.25, -0.50, 0.00};
					currentPoints = BioGraphics.octogonYPlane(startPos, circumference);
				}
			
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
		      
				if (numSegs==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, 0.0, 0.15);
				}
				else if (numSegs==1){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.0125, 0.0, 0.15);
				}
				else if (numSegs==2){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.0150, -0.06, 0.15);
				}
				else if (numSegs==3){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.0175, 0.0, 0.15);
				}
				else if (numSegs==4){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.0125, 0.0, 0.15);
				}
				else if (numSegs==5){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, 0.0, 0.15);
				}
				else {  
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.0125, 0.0, -0.15);
				}	
					
		    	// Add the instruction into the instruction set
		    	bioMightInstructSet.addElement(bioInstruct);
			}
		    
		}

		
		DBUtils.generateFacedComponents(Constants.QUADRANGLE, startID, componentType, componentName, componentID, currentPoints, bioMightInstructSet);
		System.out.println("Generating the Rows for DorsalNasalArteryEndothelium: " + componentID + "   " + componentType);

		
		return returnCode;
	}
	

	/***************************************************************************************
	 * GENERATE FACIAL ARTERY
	 * 
	 * This generates the Facial Artery. 
	 *
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/
	  	
	public int generateFacialArtery(String startID, String componentType, String componentName, String componentID,  String parentID, double[][] currentPoints) 
		throws DataException, DataSecurityException
	{	
		System.out.println("FacialArtery: " + componentID + "   " + parentID);
		
		int bodyID = 1;
		int projectID = 1;
		String vertices = "";
		
		ArrayList mySqlList= new ArrayList();
		int returnCode = 0;
	
		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();

		// Right FacialArtery - Move inward toward the front of Jaw
		if (parentID.equals("FacialArtery:01")) 
		{	
			// We can generate the FacialArtery
			if (currentPoints == null )
			{
				double circumference = 0.00625;
				double[] startPos = {1.5, 0.25, 0.00};
				currentPoints = BioGraphics.octogonYPlane(startPos, circumference);
			}
			
			int nMaxSegs = 8;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
		
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
	     
				if (numSegs==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, 0.20, 0.25);
				}
				else if (numSegs==1){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, 0.0, 0.20);
				}
				else if (numSegs==2){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -0.10, 0.25);
				}
				else if (numSegs==3){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.05, -0.1, 0.50);
				}
				else if (numSegs==4){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.1, -0.1, 0.50);
				}
				else if (numSegs==5){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.15, -0.10, 0.5);
				}
				else if (numSegs==6){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.08, -0.05, 0.5);
				}
				else if (numSegs==7){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.25, 0.0, 0.40);
				}
		
				
				else {
					bioInstruct.setPivotPoint(3);
					bioInstruct.setRotateVector(0.0, 0.0, 1.0);
					bioInstruct.setTransType(2);
					bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);
				}
				
				
	    		// Add the instruction into the instruction set
	    		bioMightInstructSet.addElement(bioInstruct);
			}    
		} 
		
		else if (parentID.equals("FacialArtery:02")) {	
			int nMaxSegs = 11;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
				
				// We can generate the FacialArtery
				if (currentPoints == null )
				{
					double circumference = 0.00625;
					double[] startPos = {-1.5, 0.25, 0.00};
					currentPoints = BioGraphics.octogonYPlane(startPos, circumference);
				}
			
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
		      

				if (numSegs==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, 0.25, 0.20);
				}
				else if (numSegs==1){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.05, 0.25, 0.25);
				}
				else if (numSegs==2){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.1, 0.25, 0.15);
				}
				else if (numSegs==3){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.08, 0.25, 0.15);
				}
				else if (numSegs==4){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.07, 0.25, 0.18);
				}
				else if (numSegs==5){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.06, 0.25, 0.21);
				}
				else if (numSegs==6){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.1, 0.25, 0.15);
				}
				else if (numSegs==7){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.15, 0.20, 0.20);
				}
				else if (numSegs==8){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.11, 0.20, 0.15);
				}
				else if (numSegs==9){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.05, 0.25, 0.00);
				}
				else if (numSegs==10) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.05, 0.10, 0.00);
				}	
				
		    	// Add the instruction into the instruction set
		    	bioMightInstructSet.addElement(bioInstruct);
			}
		}

		else if (parentID.equals("FacialArtery:03")) {	
			int nMaxSegs = 2;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
				
				// We can generate the FacialArtery
				if (currentPoints == null )
				{
					double circumference = 0.00625;
					double[] startPos = {-1.5, 0.25, 0.00};
					currentPoints = BioGraphics.octogonYPlane(startPos, circumference);
				}
			
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
		      

				if (numSegs==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.1, 0.01, 0.25);
				}
				else if (numSegs==1){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.15, 0.0, 0.25);
				}
				else if (numSegs==2){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.10, 0.10, 0.50);
				}
				
	
		    	// Add the instruction into the instruction set
		    	bioMightInstructSet.addElement(bioInstruct);
			}
		}
		
		else if (parentID.equals("FacialArtery:04")) 
		{	
			// We can generate the FacialArtery
			if (currentPoints == null )
			{
				double circumference = 0.00625;
				double[] startPos = {1.5, 0.25, 0.00};
				currentPoints = BioGraphics.octogonYPlane(startPos, circumference);
			}
			
			int nMaxSegs = 8;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
		
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
	     
				if (numSegs==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, 0.20, 0.25);
				}
				else if (numSegs==1){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, 0.0, 0.20);
				}
				else if (numSegs==2){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -0.10, 0.25);
				}
				else if (numSegs==3){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.05, -0.1, 0.50);
				}
				else if (numSegs==4){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.1, -0.1, 0.50);
				}
				else if (numSegs==5){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.15, -0.10, 0.5);
				}
				else if (numSegs==6){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.08, -0.05, 0.5);
				}
				else if (numSegs==7){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.25, 0.0, 0.40);
				}
		
				
				else {
					bioInstruct.setPivotPoint(3);
					bioInstruct.setRotateVector(0.0, 0.0, 1.0);
					bioInstruct.setTransType(2);
					bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);
				}
				
				
	    		// Add the instruction into the instruction set
	    		bioMightInstructSet.addElement(bioInstruct);
			}    
		} 
		
		else if (parentID.equals("FacialArtery:05")) {	
			int nMaxSegs = 11;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
				
				// We can generate the FacialArtery
				if (currentPoints == null )
				{
					double circumference = 0.00625;
					double[] startPos = {-1.5, 0.25, 0.00};
					currentPoints = BioGraphics.octogonYPlane(startPos, circumference);
				}
			
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
		      

				if (numSegs==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, 0.25, 0.20);
				}
				else if (numSegs==1){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.05, 0.25, 0.25);
				}
				else if (numSegs==2){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.1, 0.25, 0.15);
				}
				else if (numSegs==3){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.08, 0.25, 0.15);
				}
				else if (numSegs==4){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.07, 0.25, 0.18);
				}
				else if (numSegs==5){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.06, 0.25, 0.21);
				}
				else if (numSegs==6){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.1, 0.25, 0.15);
				}
				else if (numSegs==7){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.15, 0.20, 0.20);
				}
				else if (numSegs==8){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.11, 0.20, 0.15);
				}
				else if (numSegs==9){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.05, 0.25, 0.00);
				}
				else if (numSegs==10) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.05, 0.10, 0.00);
				}	
				
		    	// Add the instruction into the instruction set
		    	bioMightInstructSet.addElement(bioInstruct);
			}
		}

		else if (parentID.equals("FacialArtery:06")) {	
			int nMaxSegs = 2;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
				
				// We can generate the FacialArtery
				if (currentPoints == null )
				{
					double circumference = 0.00625;
					double[] startPos = {-1.5, 0.25, 0.00};
					currentPoints = BioGraphics.octogonYPlane(startPos, circumference);
				}
			
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
		      

				if (numSegs==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.1, 0.01, 0.25);
				}
				else if (numSegs==1){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.15, 0.0, 0.25);
				}
				else if (numSegs==2){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.10, 0.10, 0.50);
				}
				
	
		    	// Add the instruction into the instruction set
		    	bioMightInstructSet.addElement(bioInstruct);
			}
		}
				
				
		
		DBUtils.generateFacedComponents(Constants.QUADRANGLE, startID, componentType, componentName, componentID, currentPoints, bioMightInstructSet);
		System.out.println("Generating the Rows for FacialArteryEndothelium: " + componentID + "   " + componentType);

		
		return returnCode;
	}
	

	/***************************************************************************************
	 * GENERATE ANTERIOR TIBIAL ARTERY
	 * 
	 * This generates the AnteriorTibial Artery. 
	 *
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/
	  	
	public int generateAnteriorTibialArtery(String startID, String componentType, String componentName, String componentID,  String parentID, double[][] currentPoints) 
		throws DataException, DataSecurityException
	{	
		System.out.println("AnteriorTibialArtery: " + componentID + "   " + parentID);
		
		int bodyID = 1;
		int projectID = 1;
		String vertices = "";
		
		ArrayList mySqlList= new ArrayList();
		int returnCode = 0;
	
		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();

		// Right AnteriorTibialArtery - Move inward toward the front of Jaw
		if (componentID.equals("AnteriorTibialArtery:01") || parentID.equals("AnsteriorTibialArtery:01") ) 	
		{	
			// We can generate the AnteriorTibialArtery
			if (currentPoints == null )
			{
				double circumference = 0.00625;
				double[] startPos = {1.5, 0.25, 0.00};
				currentPoints = BioGraphics.octogonYPlane(startPos, circumference);
			}
			
			int nMaxSegs = 26;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
		
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
	     
				if (numSegs==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.20, -0.50, 0.2);
				}
				else if (numSegs==1){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.20, -0.50, 0.1);
				}
				else if (numSegs==2){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.20, -0.50, 0.1);
				}
				else if (numSegs==3){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.20, -0.50, 0.25);
				}
				else if (numSegs==4){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.20, -0.50, 0.0);
				}
				else if (numSegs==5){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.18, -0.50, 0.0);
				}
				else if (numSegs==6){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.15, -0.50, 0.0);
				}
				else if (numSegs==7){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.10, -0.50, 0.0);
				}
				else if (numSegs==8){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.05, -0.50, 0.0);
				}
				else if (numSegs==9){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -0.50, 0.0);
				}
				else if (numSegs==10){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -0.50, 0.01);
				}
				else if (numSegs==11){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.1, -0.50, 0.0);
				}
				else if (numSegs==12){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.08, -0.50, 0.0);
				}
				else if (numSegs==13){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.07, -0.50, 0.0);
				}
				else if (numSegs==14){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.03, -0.50, 0.0);
				}
				else if (numSegs==15){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.03, -0.50, 0.0);
				}
				else if (numSegs==16){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.03, -0.50, 0.0);
				}
				else if (numSegs==17){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.03, -0.50, 0.0);
				}
				else if (numSegs==18){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.03, -0.50, 0.0);
				}
				else if (numSegs==19){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.03, -0.50, 0.0);
				}
				else if (numSegs==20){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.03, -0.50, 0.0);
				}
				else if (numSegs==21){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.03, -0.50, 0.0);
				}
				else if (numSegs==22){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.03, -0.50, 0.0);
				}
				else if (numSegs==23){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.03, -0.50, 0.0);
				}
				else if (numSegs==24){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.03, -0.50, 0.0);
				}
				else if (numSegs==25){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.03, -0.50, 0.0);
				}
				
				
	    		// Add the instruction into the instruction set
	    		bioMightInstructSet.addElement(bioInstruct);
			}
		// Left AnteriorTibialArtery - Move inward toward the front of Jaw    
		} 
		else if (componentID.equals("AnteriorTibialArtery:02") || parentID.equals("AnteriorTibialArtery:02") ) 	{
				
				// We can generate the AnteriorTibialArtery
				if (currentPoints == null )
				{
					double circumference = 0.00625;
					double[] startPos = {-1.5, 0.25, 0.00};
					currentPoints = BioGraphics.octogonYPlane(startPos, circumference);
				}
			
		      
				int nMaxSegs = 26;
				for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
			
					// Create a place for an instruction 
					BioMightInstruction bioInstruct = new BioMightInstruction();
					if (numSegs==0){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.20, -0.50, 0.2);
					}
					else if (numSegs==1){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.20, -0.50, 0.1);
					}
					else if (numSegs==2){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.20, -0.50, 0.1);
					}
					else if (numSegs==3){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.20, -0.50, 0.25);
					}
					else if (numSegs==4){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.20, -0.50, 0.0);
					}
					else if (numSegs==5){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.18, -0.50, 0.0);
					}
					else if (numSegs==6){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.15, -0.50, 0.0);
					}
					else if (numSegs==7){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.10, -0.50, 0.0);
					}
					else if (numSegs==8){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.05, -0.50, 0.0);
					}
					else if (numSegs==9){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.0, -0.50, 0.0);
					}
					else if (numSegs==10){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.0, -0.50, 0.01);
					}
					else if (numSegs==11){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.1, -0.50, 0.0);
					}
					else if (numSegs==12){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.08, -0.50, 0.0);
					}
					else if (numSegs==13){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.07, -0.50, 0.0);
					}
					else if (numSegs==14){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.03, -0.50, 0.0);
					}
					else if (numSegs==15){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.03, -0.50, 0.0);
					}
					else if (numSegs==16){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.03, -0.50, 0.0);
					}
					else if (numSegs==17){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.03, -0.50, 0.0);
					}
					else if (numSegs==18){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.03, -0.50, 0.0);
					}
					else if (numSegs==19){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.03, -0.50, 0.0);
					}
					else if (numSegs==20){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.03, -0.50, 0.0);
					}
					else if (numSegs==21){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.03, -0.50, 0.0);
					}
					else if (numSegs==22){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.03, -0.50, 0.0);
					}
					else if (numSegs==23){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.03, -0.50, 0.0);
					}
					else if (numSegs==24){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.03, -0.50, 0.0);
					}
					else if (numSegs==25){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.03, -0.50, 0.0);
					}				
				
		    	// Add the instruction into the instruction set
		    	bioMightInstructSet.addElement(bioInstruct);
			}
		}

		
		DBUtils.generateFacedComponents(Constants.QUADRANGLE, startID, componentType, componentName, componentID, currentPoints, bioMightInstructSet);
		System.out.println("Generating the Rows for AnteriorTibialArteryEndothelium: " + componentID + "   " + componentType + "   size: " + bioMightInstructSet.getSize());

		
		return returnCode;
	}
	
	
	/***************************************************************************************
	 * GENERATE ANTERIOR TIBIAL VEIN
	 * 
	 * This generates the AnteriorTibial Artery. 
	 *
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/
	  	
	public int generateAnteriorTibialVein(String startID, String componentType, String componentName, String componentID,  String parentID, double[][] currentPoints) 
		throws DataException, DataSecurityException
	{	
		System.out.println("AnteriorTibialVein: " + componentID + "   " + parentID);
		
		int bodyID = 1;
		int projectID = 1;
		String vertices = "";
		
		ArrayList mySqlList= new ArrayList();
		int returnCode = 0;
	
		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();

		// Right AnteriorTibialVein - Move inward toward the front of Jaw
		if (componentID.equals("AnteriorTibialVein:01") || parentID.equals("AnsteriorTibialVein:01") ) 	
		{	
			// We can generate the AnteriorTibialArtery
			if (currentPoints == null )
			{
				double circumference = 0.00625;
				double[] startPos = {1.5, 0.25, 0.00};
				currentPoints = BioGraphics.octogonYPlane(startPos, circumference);
			}
			
			int nMaxSegs = 26;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
		
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
	     
				if (numSegs==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.20, -0.50, 0.2);
				}
				else if (numSegs==1){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.20, -0.50, 0.1);
				}
				else if (numSegs==2){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.20, -0.50, 0.1);
				}
				else if (numSegs==3){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.20, -0.50, 0.25);
				}
				else if (numSegs==4){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.20, -0.50, 0.0);
				}
				else if (numSegs==5){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.18, -0.50, 0.0);
				}
				else if (numSegs==6){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.15, -0.50, 0.0);
				}
				else if (numSegs==7){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.10, -0.50, 0.0);
				}
				else if (numSegs==8){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.05, -0.50, 0.0);
				}
				else if (numSegs==9){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -0.50, 0.0);
				}
				else if (numSegs==10){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -0.50, 0.01);
				}
				else if (numSegs==11){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.1, -0.50, 0.0);
				}
				else if (numSegs==12){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.08, -0.50, 0.0);
				}
				else if (numSegs==13){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.07, -0.50, 0.0);
				}
				else if (numSegs==14){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.03, -0.50, 0.0);
				}
				else if (numSegs==15){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.03, -0.50, 0.0);
				}
				else if (numSegs==16){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.03, -0.50, 0.0);
				}
				else if (numSegs==17){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.03, -0.50, 0.0);
				}
				else if (numSegs==18){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.03, -0.50, 0.0);
				}
				else if (numSegs==19){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.03, -0.50, 0.0);
				}
				else if (numSegs==20){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.03, -0.50, 0.0);
				}
				else if (numSegs==21){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.03, -0.50, 0.0);
				}
				else if (numSegs==22){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.03, -0.50, 0.0);
				}
				else if (numSegs==23){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.03, -0.50, 0.0);
				}
				else if (numSegs==24){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.03, -0.50, 0.0);
				}
				else if (numSegs==25){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.03, -0.50, 0.0);
				}
				
				
	    		// Add the instruction into the instruction set
	    		bioMightInstructSet.addElement(bioInstruct);
			}
		// Left AnteriorTibialArtery - Move inward toward the front of Jaw    
		} 
		else if (componentID.equals("AnteriorTibialVein:02") || parentID.equals("AnteriorTibialVein:02") ) 	{
				
				// We can generate the AnteriorTibialVein
				if (currentPoints == null )
				{
					double circumference = 0.00625;
					double[] startPos = {-1.5, 0.25, 0.00};
					currentPoints = BioGraphics.octogonYPlane(startPos, circumference);
				}
			
		      
				int nMaxSegs = 26;
				for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
			
					// Create a place for an instruction 
					BioMightInstruction bioInstruct = new BioMightInstruction();
					if (numSegs==0){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.20, -0.50, 0.2);
					}
					else if (numSegs==1){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.20, -0.50, 0.1);
					}
					else if (numSegs==2){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.20, -0.50, 0.1);
					}
					else if (numSegs==3){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.20, -0.50, 0.25);
					}
					else if (numSegs==4){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.20, -0.50, 0.0);
					}
					else if (numSegs==5){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.18, -0.50, 0.0);
					}
					else if (numSegs==6){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.15, -0.50, 0.0);
					}
					else if (numSegs==7){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.10, -0.50, 0.0);
					}
					else if (numSegs==8){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.05, -0.50, 0.0);
					}
					else if (numSegs==9){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.0, -0.50, 0.0);
					}
					else if (numSegs==10){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.0, -0.50, 0.01);
					}
					else if (numSegs==11){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.1, -0.50, 0.0);
					}
					else if (numSegs==12){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.08, -0.50, 0.0);
					}
					else if (numSegs==13){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.07, -0.50, 0.0);
					}
					else if (numSegs==14){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.03, -0.50, 0.0);
					}
					else if (numSegs==15){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.03, -0.50, 0.0);
					}
					else if (numSegs==16){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.03, -0.50, 0.0);
					}
					else if (numSegs==17){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.03, -0.50, 0.0);
					}
					else if (numSegs==18){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.03, -0.50, 0.0);
					}
					else if (numSegs==19){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.03, -0.50, 0.0);
					}
					else if (numSegs==20){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.03, -0.50, 0.0);
					}
					else if (numSegs==21){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.03, -0.50, 0.0);
					}
					else if (numSegs==22){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.03, -0.50, 0.0);
					}
					else if (numSegs==23){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.03, -0.50, 0.0);
					}
					else if (numSegs==24){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.03, -0.50, 0.0);
					}
					else if (numSegs==25){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.03, -0.50, 0.0);
					}				
				
		    	// Add the instruction into the instruction set
		    	bioMightInstructSet.addElement(bioInstruct);
			}
		}

		
		DBUtils.generateFacedComponents(Constants.QUADRANGLE, startID, componentType, componentName, componentID, currentPoints, bioMightInstructSet);
		System.out.println("Generating the Rows for AnteriorTibialVeinEndothelium: " + componentID + "   " + componentType + "   size: " + bioMightInstructSet.getSize());

		
		return returnCode;
	}
	
	/***************************************************************************************
	 * GENERATE POSTERIOR TIBIAL ARTERY
	 * 
	 * This generates the PosteriorTibial Artery. 
	 *
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/
	  	
	public int generatePosteriorTibialArtery(String startID, String componentType, String componentName, String componentID,  String parentID, double[][] currentPoints) 
		throws DataException, DataSecurityException
	{	
		System.out.println("EJB generatePosteriorTibialArtery: " + componentID + "   " + parentID);
		
		int bodyID = 1;
		int projectID = 1;
		String vertices = "";
		
		ArrayList mySqlList= new ArrayList();
		int returnCode = 0;
	
		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();

		// Right PosteriorTibialArtery - Move inward toward the front of Jaw
		if (componentID.equals("PosteriorTibialArtery:01") || parentID.equals("PosteriorTibialArtery:01") ) 
		{	
			// We can generate the AnteriorTibialArtery
			if (currentPoints == null )
			{
				double circumference = 0.00625;
				double[] startPos = {1.5, 0.25, 0.00};
				currentPoints = BioGraphics.octogonYPlane(startPos, circumference);
			}
			
			int nMaxSegs = 26;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
		
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
	     
				if (numSegs==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.10, -0.50, -0.2);
				}
				else if (numSegs==1){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.10, -0.50, -0.2);
				}
				else if (numSegs==2){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.08, -0.50, -0.2);
				}
				else if (numSegs==3){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.05, -0.50, -0.2);
				}
				else if (numSegs==4){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.05, -0.50, -0.2);
				}
				else if (numSegs==5){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -0.50, -0.2);
				}
				else if (numSegs==6){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -0.50, -0.15);
				}
				else if (numSegs==7){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -0.50, -0.1);
				}
				else if (numSegs==8){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -0.50, -0.1);
				}
				else if (numSegs==9){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -0.50, -0.05);
				}
				else if (numSegs==10){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.01, -0.50, -0.02);
				}
				else if (numSegs==11){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -0.50, 0.0);
				}
				else if (numSegs==12){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -0.50, 0.0);
				}
				else if (numSegs==13){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -0.50, 0.0);
				}
				else if (numSegs==14){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -0.50, 0.01);
				}
				else if (numSegs==15){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -0.50, 0.01);
				}
				else if (numSegs==16){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -0.50, 0.01);
				}
				else if (numSegs==17){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -0.50, 0.01);
				}
				else if (numSegs==18){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -0.50, 0.03);
				}
				else if (numSegs==19){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -0.50, 0.03);
				}
				else if (numSegs==20){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -0.50, 0.03);
				}
				else if (numSegs==21){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -0.50, 0.03);
				}
				else if (numSegs==22){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -0.50, 0.01);
				}
				else if (numSegs==23){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -0.50, 0.0);
				}
				else if (numSegs==24){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -0.50, 0.0);
				}
				else if (numSegs==25){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -0.50, 0.0);
				}
	

							
				else {
					bioInstruct.setPivotPoint(3);
					bioInstruct.setRotateVector(0.0, 0.0, 1.0);
					bioInstruct.setTransType(2);
					bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);
				}
				
				
	    		// Add the instruction into the instruction set
	    		bioMightInstructSet.addElement(bioInstruct);
			}
		// Left PosteriorTibialArtery - Move inward toward the front of Jaw    
		} 
		else if (componentID.equals("PosteriorTibialArtery:02") || parentID.equals("PosteriorTibialArtery:02") ) 	{

				// We can generate the AnteriorTibialArtery
				if (currentPoints == null )
				{
					double circumference = 0.00625;
					double[] startPos = {-1.5, 0.25, 0.00};
					currentPoints = BioGraphics.octogonYPlane(startPos, circumference);
				}
				
				int nMaxSegs = 26;
				for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
			
					// Create a place for an instruction 
					BioMightInstruction bioInstruct = new BioMightInstruction();
		     
					if (numSegs==0){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.10, -0.50, -0.2);
					}
					else if (numSegs==1){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.10, -0.50, -0.2);
					}
					else if (numSegs==2){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.08, -0.50, -0.2);
					}
					else if (numSegs==3){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.05, -0.50, -0.2);
					}
					else if (numSegs==4){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.05, -0.50, -0.2);
					}
					else if (numSegs==5){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.0, -0.50, -0.2);
					}
					else if (numSegs==6){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.0, -0.50, -0.15);
					}
					else if (numSegs==7){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.0, -0.50, -0.1);
					}
					else if (numSegs==8){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.0, -0.50, -0.1);
					}
					else if (numSegs==9){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.0, -0.50, -0.05);
					}
					else if (numSegs==10){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.01, -0.50, -0.02);
					}
					else if (numSegs==11){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.0, -0.50, 0.0);
					}
					else if (numSegs==12){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.0, -0.50, 0.0);
					}
					else if (numSegs==13){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.0, -0.50, 0.0);
					}
					else if (numSegs==14){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.0, -0.50, 0.01);
					}
					else if (numSegs==15){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.0, -0.50, 0.01);
					}
					else if (numSegs==16){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.0, -0.50, 0.01);
					}
					else if (numSegs==17){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.0, -0.50, 0.01);
					}
					else if (numSegs==18){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.0, -0.50, 0.03);
					}
					else if (numSegs==19){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.0, -0.50, 0.03);
					}
					else if (numSegs==20){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.0, -0.50, 0.03);
					}
					else if (numSegs==21){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.0, -0.50, 0.03);
					}
					else if (numSegs==22){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.0, -0.50, 0.01);
					}
					else if (numSegs==23){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.0, -0.50, 0.0);
					}
					else if (numSegs==24){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.0, -0.50, 0.0);
					}
					else if (numSegs==25){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.0, -0.50, 0.0);
					}			
					
		    	// Add the instruction into the instruction set
		    	bioMightInstructSet.addElement(bioInstruct);
			}
		}

		
		DBUtils.generateFacedComponents(Constants.QUADRANGLE, startID, componentType, componentName, componentID, currentPoints, bioMightInstructSet);
		System.out.println("Generating the Rows for PosteriorTibialArteryEndothelium: " + componentID + "   " + componentType);

		
		return returnCode;
	}
	
	
	
	/***************************************************************************************
	 * GENERATE POSTERIOR TIBIAL ARTERY
	 * 
	 * This generates the PosteriorTibial Vein. 
	 *
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/
	  	
	public int generatePosteriorTibialVein(String startID, String componentType, String componentName, String componentID,  String parentID, double[][] currentPoints) 
		throws DataException, DataSecurityException
	{	
		System.out.println("EJB generatePosteriorTibialVein: " + componentID + "   " + parentID);
		
		int bodyID = 1;
		int projectID = 1;
		String vertices = "";
		
		ArrayList mySqlList= new ArrayList();
		int returnCode = 0;
	
		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();

		// Right PosteriorTibialVein - Move inward toward the front of Jaw
		if (componentID.equals("PosteriorTibialVein:01") || parentID.equals("PosteriorTibialVein:01") ) 
		{	
			// We can generate the AnteriorTibialVein
			if (currentPoints == null )
			{
				double circumference = 0.00625;
				double[] startPos = {1.5, 0.25, 0.00};
				currentPoints = BioGraphics.octogonYPlane(startPos, circumference);
			}
			
			int nMaxSegs = 26;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
		
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
	     
				if (numSegs==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.10, -0.50, -0.2);
				}
				else if (numSegs==1){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.10, -0.50, -0.2);
				}
				else if (numSegs==2){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.08, -0.50, -0.2);
				}
				else if (numSegs==3){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.05, -0.50, -0.2);
				}
				else if (numSegs==4){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.05, -0.50, -0.2);
				}
				else if (numSegs==5){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -0.50, -0.2);
				}
				else if (numSegs==6){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -0.50, -0.15);
				}
				else if (numSegs==7){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -0.50, -0.1);
				}
				else if (numSegs==8){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -0.50, -0.1);
				}
				else if (numSegs==9){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -0.50, -0.05);
				}
				else if (numSegs==10){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.01, -0.50, -0.02);
				}
				else if (numSegs==11){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -0.50, 0.0);
				}
				else if (numSegs==12){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -0.50, 0.0);
				}
				else if (numSegs==13){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -0.50, 0.0);
				}
				else if (numSegs==14){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -0.50, 0.01);
				}
				else if (numSegs==15){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -0.50, 0.01);
				}
				else if (numSegs==16){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -0.50, 0.01);
				}
				else if (numSegs==17){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -0.50, 0.01);
				}
				else if (numSegs==18){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -0.50, 0.03);
				}
				else if (numSegs==19){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -0.50, 0.03);
				}
				else if (numSegs==20){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -0.50, 0.03);
				}
				else if (numSegs==21){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -0.50, 0.03);
				}
				else if (numSegs==22){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -0.50, 0.01);
				}
				else if (numSegs==23){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -0.50, 0.0);
				}
				else if (numSegs==24){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -0.50, 0.0);
				}
				else if (numSegs==25){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -0.50, 0.0);
				}
	

							
				else {
					bioInstruct.setPivotPoint(3);
					bioInstruct.setRotateVector(0.0, 0.0, 1.0);
					bioInstruct.setTransType(2);
					bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);
				}
				
				
	    		// Add the instruction into the instruction set
	    		bioMightInstructSet.addElement(bioInstruct);
			}
		// Left PosteriorTibialVein - Move inward toward the front of Jaw    
		} 
		else if (componentID.equals("PosteriorTibialVein:02") || parentID.equals("PosteriorTibialVein:02") ) 	{

				// We can generate the AnteriorTibialVein
				if (currentPoints == null )
				{
					double circumference = 0.00625;
					double[] startPos = {-1.5, 0.25, 0.00};
					currentPoints = BioGraphics.octogonYPlane(startPos, circumference);
				}
				
				int nMaxSegs = 26;
				for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
			
					// Create a place for an instruction 
					BioMightInstruction bioInstruct = new BioMightInstruction();
		     
					if (numSegs==0){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.10, -0.50, -0.2);
					}
					else if (numSegs==1){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.10, -0.50, -0.2);
					}
					else if (numSegs==2){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.08, -0.50, -0.2);
					}
					else if (numSegs==3){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.05, -0.50, -0.2);
					}
					else if (numSegs==4){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.05, -0.50, -0.2);
					}
					else if (numSegs==5){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.0, -0.50, -0.2);
					}
					else if (numSegs==6){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.0, -0.50, -0.15);
					}
					else if (numSegs==7){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.0, -0.50, -0.1);
					}
					else if (numSegs==8){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.0, -0.50, -0.1);
					}
					else if (numSegs==9){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.0, -0.50, -0.05);
					}
					else if (numSegs==10){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.01, -0.50, -0.02);
					}
					else if (numSegs==11){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.0, -0.50, 0.0);
					}
					else if (numSegs==12){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.0, -0.50, 0.0);
					}
					else if (numSegs==13){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.0, -0.50, 0.0);
					}
					else if (numSegs==14){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.0, -0.50, 0.01);
					}
					else if (numSegs==15){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.0, -0.50, 0.01);
					}
					else if (numSegs==16){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.0, -0.50, 0.01);
					}
					else if (numSegs==17){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.0, -0.50, 0.01);
					}
					else if (numSegs==18){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.0, -0.50, 0.03);
					}
					else if (numSegs==19){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.0, -0.50, 0.03);
					}
					else if (numSegs==20){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.0, -0.50, 0.03);
					}
					else if (numSegs==21){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.0, -0.50, 0.03);
					}
					else if (numSegs==22){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.0, -0.50, 0.01);
					}
					else if (numSegs==23){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.0, -0.50, 0.0);
					}
					else if (numSegs==24){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.0, -0.50, 0.0);
					}
					else if (numSegs==25){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.0, -0.50, 0.0);
					}			
					
		    	// Add the instruction into the instruction set
		    	bioMightInstructSet.addElement(bioInstruct);
			}
		}

		
		DBUtils.generateFacedComponents(Constants.QUADRANGLE, startID, componentType, componentName, componentID, currentPoints, bioMightInstructSet);
		System.out.println("Generating the Rows for PosteriorTibialVeinEndothelium: " + componentID + "   " + componentType);

		
		return returnCode;
	}
	
	
	
	/***************************************************************************************
	 * GENERATE TRANSVERSE FACIAL ARTERY
	 * 
	 * This generates the TransverseFacial Artery. 
	 *
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/
	  	
	public int generateTransverseFacialArtery(String startID, String componentType, String componentName, String componentID,  String parentID, double[][] currentPoints) 
		throws DataException, DataSecurityException
	{	
		System.out.println("TransverseFacialArtery: " + componentID + "   " + parentID);
		
		int bodyID = 1;
		int projectID = 1;
		String vertices = "";
		
		ArrayList mySqlList= new ArrayList();
		int returnCode = 0;
	
		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();

		// Right TransverseFacialArtery - Move inward toward the front of Jaw
		if (parentID.equals("TransverseFacialArtery:01")) 
		{	
			// We can generate the TransverseFacialArtery
			if (currentPoints == null )
			{
				double circumference = 0.00625;
				double[] startPos = {1.5, 0.25, 0.00};
				currentPoints = BioGraphics.octogonYPlane(startPos, circumference);
			}
			
			int nMaxSegs = 6;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
		
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
	     
				if (numSegs==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.04, 0.05, 0.25);
				}
				else if (numSegs==1){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.05, 0.1, 0.5);
				}
				else if (numSegs==2){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.1, 0.0, 0.50);
				}
				else if (numSegs==3){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.15, -0.02, 0.5);
				}
				else if (numSegs==4){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.25, 0.02, 0.25);
				}
				else if (numSegs==5){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.22, -0.08, 0.25);
				}
			

			
				
				else {
					bioInstruct.setPivotPoint(3);
					bioInstruct.setRotateVector(0.0, 0.0, 1.0);
					bioInstruct.setTransType(2);
					bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);
				}
				
				
	    		// Add the instruction into the instruction set
	    		bioMightInstructSet.addElement(bioInstruct);
			}  
		} 

		else if (parentID.equals("TransverseFacialArtery:02")) 
		{	
			// We can generate the TransverseFacialArtery
			if (currentPoints == null )
			{
				double circumference = 0.00625;
				double[] startPos = {1.5, 0.25, 0.00};
				currentPoints = BioGraphics.octogonYPlane(startPos, circumference);
			}
			
			int nMaxSegs = 2;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
		
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
	     
				if (numSegs==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.25, -0.20, 0.25);
				}
				else if (numSegs==1){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.18, -0.15, 0.25);
				}		
				else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, 0.0, 0.25);
				}
				
	    		// Add the instruction into the instruction set
	    		bioMightInstructSet.addElement(bioInstruct);
			}  
		} 

		else if (parentID.equals("TransverseFacialArtery:03")) 
		{	
			// We can generate the TransverseFacialArtery
			if (currentPoints == null )
			{
				double circumference = 0.00625;
				double[] startPos = {1.5, 0.25, 0.00};
				currentPoints = BioGraphics.octogonYPlane(startPos, circumference);
			}
			
			int nMaxSegs = 3;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
		
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
	     
				if (numSegs==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.18, 0.10, 0.25);
				}
				else if (numSegs==1){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.1, 0.20, 0.25);
				}
				else if (numSegs==2){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.10, 0.0, 0.25);
				}		
				else {
					bioInstruct.setPivotPoint(3);
					bioInstruct.setRotateVector(0.0, 0.0, 1.0);
					bioInstruct.setTransType(2);
					bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);
				}
				
	    		// Add the instruction into the instruction set
	    		bioMightInstructSet.addElement(bioInstruct);
			}  
		} 
		else if (parentID.equals("TransverseFacialArtery:04")) 
		{	
			// We can generate the TransverseFacialArtery
			if (currentPoints == null )
			{
				double circumference = 0.00625;
				double[] startPos = {1.5, 0.25, 0.00};
				currentPoints = BioGraphics.octogonYPlane(startPos, circumference);
			}
			
			int nMaxSegs = 2;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
		
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
	     
				if (numSegs==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.05, -0.20, 0.25);
				}
				else if (numSegs==1){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.05, -0.12, 0.25);
				}		
				else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.05, -0.12, 0.25);
				}
				
	    		// Add the instruction into the instruction set
	    		bioMightInstructSet.addElement(bioInstruct);
			}  
		} 
		
		//*******************************************************************
		// Left TransverseFacialArtery - Move inward toward the front of Jaw 
		//*******************************************************************
		else if (parentID.equals("TransverseFacialArtery:05")) 
		{	
			// We can generate the TransverseFacialArtery
			if (currentPoints == null )
			{
				double circumference = 0.00625;
				double[] startPos = {1.5, 0.25, 0.00};
				currentPoints = BioGraphics.octogonYPlane(startPos, circumference);
			}
			
			int nMaxSegs = 6;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
		
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
	     
				if (numSegs==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.10, 0.15, 0.5);
				}
				else if (numSegs==1){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.10, 0.10, 0.5);
				}
				else if (numSegs==2){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, 0.0, 0.50);
				}
				else if (numSegs==3){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -0.05, 0.25);
				}
				else if (numSegs==4){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.05, 0.0, 0.25);
				}
				else if (numSegs==5){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.05, 0.20, 0.25);
				}
				else if (numSegs==6){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.07, 0.25, 0.25);
				}
			
				
				else {
					bioInstruct.setPivotPoint(3);
					bioInstruct.setRotateVector(0.0, 0.0, 1.0);
					bioInstruct.setTransType(2);
					bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);
				}
				
				
	    		// Add the instruction into the instruction set
	    		bioMightInstructSet.addElement(bioInstruct);
			}  
		} 

		if (parentID.equals("TransverseFacialArtery:06")) 
		{	
			// We can generate the TransverseFacialArtery
			if (currentPoints == null )
			{
				double circumference = 0.00625;
				double[] startPos = {1.5, 0.25, 0.00};
				currentPoints = BioGraphics.octogonYPlane(startPos, circumference);
			}
			
			int nMaxSegs = 2;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
		
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
	     
				if (numSegs==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.10, -0.20, 0.25);
				}
				else if (numSegs==1){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.10, -0.15, 0.25);
				}
				
				
				else if (numSegs==2){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, 0.0, 0.25);
				}		
				else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, 0.0, 0.25);
				}
				
	    		// Add the instruction into the instruction set
	    		bioMightInstructSet.addElement(bioInstruct);
			}  
		} 

		else if (parentID.equals("TransverseFacialArtery:07")) 
		{	
			// We can generate the TransverseFacialArtery
			if (currentPoints == null )
			{
				double circumference = 0.00625;
				double[] startPos = {1.5, 0.25, 0.00};
				currentPoints = BioGraphics.octogonYPlane(startPos, circumference);
			}
			
			int nMaxSegs = 3;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
		
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
	     
				if (numSegs==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, 0.10, 0.25);
				}
				else if (numSegs==1){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, 0.20, 0.25);
				}
				else if (numSegs==2){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, 0.0, 0.25);
				}		
				else {
					bioInstruct.setPivotPoint(3);
					bioInstruct.setRotateVector(0.0, 0.0, 1.0);
					bioInstruct.setTransType(2);
					bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);
				}
				
	    		// Add the instruction into the instruction set
	    		bioMightInstructSet.addElement(bioInstruct);
			}  
		} 
		else if (parentID.equals("TransverseFacialArtery:08")) 
		{	
			// We can generate the TransverseFacialArtery
			if (currentPoints == null )
			{
				double circumference = 0.00625;
				double[] startPos = {1.5, 0.25, 0.00};
				currentPoints = BioGraphics.octogonYPlane(startPos, circumference);
			}
			
			int nMaxSegs = 3;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
		
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
	     
				if (numSegs==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -0.25, 0.25);
				}
				else if (numSegs==1){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -0.20, 0.25);
				}
				else if (numSegs==2){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, 0.0, 0.25);
				}		
				else {
					bioInstruct.setPivotPoint(3);
					bioInstruct.setRotateVector(0.0, 0.0, 1.0);
					bioInstruct.setTransType(2);
					bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);
				}
				
	    		// Add the instruction into the instruction set
	    		bioMightInstructSet.addElement(bioInstruct);
			}  
		} 
			
		
		
		
		
		DBUtils.generateFacedComponents(Constants.QUADRANGLE, startID, componentType, componentName, componentID, currentPoints, bioMightInstructSet);
		System.out.println("Generating the Rows for TransverseFacialArteryEndothelium: " + componentID + "   " + componentType);

		
		return returnCode;
	}

	
	/***************************************************************************************
	 * GENERATE ACCESSORY MENINGEAL ARTERY
	 * 
	 * This generates the AccessoryMeningeal Artery. 
	 *
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/
	  	
	public int generateAccessoryMeningealArtery(String startID, String componentType, String componentName, String componentID,  String parentID, double[][] currentPoints) 
		throws DataException, DataSecurityException
	{	
		System.out.println("AccessoryMeningealArtery: " + componentID + "   " + parentID);
		
		int bodyID = 1;
		int projectID = 1;
		String vertices = "";
		
		ArrayList mySqlList= new ArrayList();
		int returnCode = 0;
	
		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();

		// Right AccessoryMeningealArtery - Move inward toward the front of Jaw
		if (parentID.equals("AccessoryMeningealArtery:01")) 
		{	
			// We can generate the AccessoryMeningealArtery
			if (currentPoints == null )
			{
				double circumference = 0.00625;
				double[] startPos = {1.5, 0.25, 0.00};
				currentPoints = BioGraphics.octogonYPlane(startPos, circumference);
			}
			
			int nMaxSegs = 4;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
		
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
	     

				if (numSegs==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, 0.5, 0.0);
				}
				else if (numSegs==1){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.10, 0.5, 0.0);
				}
				else if (numSegs==2){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, 0.5, -0.05);
				}
				else if (numSegs==3){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.10, 0.5, 0.00);
				}
				else if (numSegs==4){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.15, 0.05, 0.25);
				}
				else if (numSegs==5){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.15, 0.05, 0.25);
				}
				else if (numSegs==6){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.15, 0.0, 0.25);
				}
				else if (numSegs==7){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.15, 0.5, 0.25);
				}
				else if (numSegs==8){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.15, 0.5, 0.25);
				}	
				
				
	    		// Add the instruction into the instruction set
	    		bioMightInstructSet.addElement(bioInstruct);
			}
		// Left AccessoryMeningealArtery - Move inward toward the front of Jaw    
		} else if (parentID.equals("AccessoryMeningealArtery:02")) {	
			int nMaxSegs = 4;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
				
				// We can generate the AccessoryMeningealArtery
				if (currentPoints == null )
				{
					double circumference = 0.00625;
					double[] startPos = {-1.5, 0.25, 0.00};
					currentPoints = BioGraphics.octogonYPlane(startPos, circumference);
				}
			
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
		      

				if (numSegs==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, 0.5, 0.0);
				}
				else if (numSegs==1){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.10, 0.5, 0.0);
				}
				else if (numSegs==2){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, 0.5, -0.05);
				}
				else if (numSegs==3){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.10, 0.5, 0.00);
				}
				else if (numSegs==4){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.15, 0.05, 0.25);
				}
				else if (numSegs==5){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.15, 0.05, 0.25);
				}
				else if (numSegs==6){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.15, 0.0, 0.25);
				}
				else if (numSegs==7){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.15, 0.5, 0.25);
				}
				else if (numSegs==8){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.15, 0.5, 0.25);
				}				
				
		    	// Add the instruction into the instruction set
		    	bioMightInstructSet.addElement(bioInstruct);
			}
		}

		
		DBUtils.generateFacedComponents(Constants.QUADRANGLE, startID, componentType, componentName, componentID, currentPoints, bioMightInstructSet);
		System.out.println("Generating the Rows for AccessoryMeningealArteryEndothelium: " + componentID + "   " + componentType);

		
		return returnCode;
	}

	/***************************************************************************************
	 * GENERATE MIDDLE MENINGEAL ARTERY
	 * 
	 * This generates the MiddleMeningeal Artery. 
	 *
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/
	  	
	public int generateMiddleMeningealArtery(String startID, String componentType, String componentName, String componentID,  String parentID, double[][] currentPoints) 
		throws DataException, DataSecurityException
	{	
		System.out.println("MiddleMeningealArtery: " + componentID + "   " + parentID);
		
		int bodyID = 1;
		int projectID = 1;
		String vertices = "";
		
		ArrayList mySqlList= new ArrayList();
		int returnCode = 0;
	
		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();

		// Right MiddleMeningealArtery - Move inward toward the front of Jaw
		if (parentID.equals("MiddleMeningealArtery:01")) 
		{	
			// We can generate the MiddleMeningealArtery
			if (currentPoints == null )
			{
				double circumference = 0.00625;
				double[] startPos = {1.5, 0.25, 0.00};
				currentPoints = BioGraphics.octogonYPlane(startPos, circumference);
			}
			
			int nMaxSegs = 10;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
		
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
	     
				if (numSegs==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.05, 0.5, 0.0);
				}
				else if (numSegs==1){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.08, 0.5, 0.0);
				}
				else if (numSegs==2){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, 0.5, 0.0);
				}
				else if (numSegs==3){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.05, 0.5, 0.0);
				}
				else if (numSegs==4){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.02, 0.50, 0.35);
				}
				else if (numSegs==5){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, 0.5, 0.45);
				}
				else if (numSegs==6){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.01, 0.5, 0.25);
				}
				else if (numSegs==7){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.01, 0.25, -0.05);
				}
				else if (numSegs==8){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.02, 0.25, -0.04);
				}
				else if (numSegs==9){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.01, 0.25, -0.1);
				}
				
				else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.15, 0.5, 0.25);
				}
				
				
	    		// Add the instruction into the instruction set
	    		bioMightInstructSet.addElement(bioInstruct);
			}	
		}	
		else if (parentID.equals("MiddleMeningealArtery:02")) 
		{	
			// We can generate the MiddleMeningealArtery
			if (currentPoints == null )
			{
				double circumference = 0.00625;
				double[] startPos = {1.5, 0.25, 0.00};
				currentPoints = BioGraphics.octogonYPlane(startPos, circumference);
			}
			
			int nMaxSegs = 5;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
		
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
	     
				if (numSegs==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, 0.10, -0.25);
				}
				else if (numSegs==1){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.01, 0.15, -0.25);
				}
				else if (numSegs==2){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, 0.0, -0.25);
				}
				else if (numSegs==3){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.01, 0.03, -0.25);
				}
				else if (numSegs==4){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.02, 0.01, -0.35);
				}
	
		
				
				else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.15, 0.5, 0.25);
				}
				
				
	    		// Add the instruction into the instruction set
	    		bioMightInstructSet.addElement(bioInstruct);
			}
		
		}
		
		else if (parentID.equals("MiddleMeningealArtery:03")) 
		{	
			// We can generate the MiddleMeningealArtery
			if (currentPoints == null )
			{
				double circumference = 0.00625;
				double[] startPos = {1.5, 0.25, 0.00};
				currentPoints = BioGraphics.octogonYPlane(startPos, circumference);
			}
			
			int nMaxSegs = 5;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
		
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
	     
				if (numSegs==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, 0.15, -0.25);
				}
				else if (numSegs==1){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.01, 0.1, -0.25);
				}
				else if (numSegs==2){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, 0.05, -0.25);
				}
				else if (numSegs==3){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.01, -0.03, -0.25);
				}
				else if (numSegs==4){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.02, 0.01, -0.35);
				}
	
	

				else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.15, 0.5, 0.25);
				}
				
	    		// Add the instruction into the instruction set
	    		bioMightInstructSet.addElement(bioInstruct);
			}
		
		}

		
		
		// Left MiddleMeningealArtery - Move inward toward the front of Jaw    
		 else if (parentID.equals("MiddleMeningealArtery:04")) {	
			int nMaxSegs = 4;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
				
				// We can generate the MiddleMeningealArtery
				if (currentPoints == null )
				{
					double circumference = 0.00625;
					double[] startPos = {-1.5, 0.25, 0.00};
					currentPoints = BioGraphics.octogonYPlane(startPos, circumference);
				}
			
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
		      

				if (numSegs==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, 0.5, 0.0);
				}
				else if (numSegs==1){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.10, 0.5, 0.0);
				}
				else if (numSegs==2){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, 0.5, -0.05);
				}
				else if (numSegs==3){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.10, 0.5, 0.00);
				}
				else if (numSegs==4){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.15, 0.05, 0.25);
				}
				else if (numSegs==5){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.15, 0.05, 0.25);
				}
				else if (numSegs==6){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.15, 0.0, 0.25);
				}
				else if (numSegs==7){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.15, 0.5, 0.25);
				}
				else if (numSegs==8){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.15, 0.5, 0.25);
				}			
				
		    	// Add the instruction into the instruction set
		    	bioMightInstructSet.addElement(bioInstruct);
			}
		}

		
		
		else if (parentID.equals("MiddleMeningealArtery:05")) 
		{	
			// We can generate the MiddleMeningealArtery
			if (currentPoints == null )
			{
				double circumference = 0.00625;
				double[] startPos = {1.5, 0.25, 0.00};
				currentPoints = BioGraphics.octogonYPlane(startPos, circumference);
			}
			
			int nMaxSegs = 5;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
		
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
	     
				if (numSegs==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.05, 0.5, 0.0);
				}
				else if (numSegs==1){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.08, 0.5, 0.0);
				}
				else if (numSegs==2){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, 0.5, 0.0);
				}
				else if (numSegs==3){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.1, 0.5, 0.0);
				}
				else if (numSegs==4){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.15, 0.50, 0.35);
				}
	

				else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.15, 0.5, 0.25);
				}
				
	    		// Add the instruction into the instruction set
	    		bioMightInstructSet.addElement(bioInstruct);
			}
		
		}

		
		
		else if (parentID.equals("MiddleMeningealArtery:06")) 
		{	
			// We can generate the MiddleMeningealArtery
			if (currentPoints == null )
			{
				double circumference = 0.00625;
				double[] startPos = {1.5, 0.25, 0.00};
				currentPoints = BioGraphics.octogonYPlane(startPos, circumference);
			}
			
			int nMaxSegs = 5;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
		
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
	     
				if (numSegs==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.05, 0.5, 0.0);
				}
				else if (numSegs==1){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.08, 0.5, 0.0);
				}
				else if (numSegs==2){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, 0.5, 0.0);
				}
				else if (numSegs==3){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.1, 0.5, 0.0);
				}
				else if (numSegs==4){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.15, 0.50, 0.35);
				}
	

				else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.15, 0.5, 0.25);
				}
				
	    		// Add the instruction into the instruction set
	    		bioMightInstructSet.addElement(bioInstruct);
			}
		
		}

		

		
		
		
		
		DBUtils.generateFacedComponents(Constants.QUADRANGLE, startID, componentType, componentName, componentID, currentPoints, bioMightInstructSet);
		System.out.println("Generating the Rows for MiddleMeningealArteryEndothelium: " + componentID + "   " + componentType);

		
		return returnCode;
	}
	
	
	/***************************************************************************************
	 * GENERATE POSTERIOR MENINGEAL ARTERY
	 * 
	 * This generates the PosteriorMeningeal Artery. 
	 *
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/
	  	
	public int generatePosteriorMeningealArtery(String startID, String componentType, String componentName, String componentID,  String parentID, double[][] currentPoints) 
		throws DataException, DataSecurityException
	{	
		System.out.println("PosteriorMeningealArtery: " + componentID + "   " + parentID);
		
		int bodyID = 1;
		int projectID = 1;
		String vertices = "";
		
		ArrayList mySqlList= new ArrayList();
		int returnCode = 0;
	
		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();

		// Right PosteriorMeningealArtery - Move inward toward the front of Jaw
		if (parentID.equals("PosteriorMeningealArtery:01")) 
		{	
			// We can generate the PosteriorMeningealArtery
			if (currentPoints == null )
			{
				double circumference = 0.00625;
				double[] startPos = {1.5, 0.25, 0.00};
				currentPoints = BioGraphics.octogonYPlane(startPos, circumference);
			}
			
			int nMaxSegs = 4;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
		
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
	     
				if (numSegs==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.10, 0.5, 0.25);
				}
				else if (numSegs==1){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.10, 0.5, 0.25);
				}
				else if (numSegs==2){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.10, 0.10, 0.50);
				}
				else if (numSegs==3){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.10, -0.05, 0.50);
				}
				else if (numSegs==4){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.15, 0.0, 0.50);
				}
				else if (numSegs==5){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.15, 0.05, 0.25);
				}
				else if (numSegs==6){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.15, 0.0, 0.25);
				}
				else if (numSegs==7){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.15, 0.5, 0.25);
				}
				else if (numSegs==8){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.15, 0.5, 0.25);
				}
				
				else {
					bioInstruct.setPivotPoint(3);
					bioInstruct.setRotateVector(0.0, 0.0, 1.0);
					bioInstruct.setTransType(2);
					bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);
				}
				
				
	    		// Add the instruction into the instruction set
	    		bioMightInstructSet.addElement(bioInstruct);
			}
		// Left PosteriorMeningealArtery - Move inward toward the front of Jaw    
		} else if (parentID.equals("PosteriorMeningealArtery:02")) {	
			int nMaxSegs = 4;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
				
				// We can generate the PosteriorMeningealArtery
				if (currentPoints == null )
				{
					double circumference = 0.00625;
					double[] startPos = {-1.5, 0.25, 0.00};
					currentPoints = BioGraphics.octogonYPlane(startPos, circumference);
				}
			
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
		      

				if (numSegs==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.10, 0.5, 0.25);
				}
				else if (numSegs==1){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.10, 0.5, 0.25);
				}
				else if (numSegs==2){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.10, 0.10, 0.50);
				}
				else if (numSegs==3){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.10, -0.05, 0.50);
				}
				else if (numSegs==4){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.15, 0.0, 0.50);
				}
				else if (numSegs==5){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.15, 0.05, 0.25);
				}
				else if (numSegs==6){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.15, 0.0, 0.25);
				}
				else if (numSegs==7){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.15, 0.5, 0.25);
				}
				else if (numSegs==8){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.15, 0.5, 0.25);
				}			
				
		    	// Add the instruction into the instruction set
		    	bioMightInstructSet.addElement(bioInstruct);
			}
		}

		
		DBUtils.generateFacedComponents(Constants.QUADRANGLE, startID, componentType, componentName, componentID, currentPoints, bioMightInstructSet);
		System.out.println("Generating the Rows for PosteriorMeningealArteryEndothelium: " + componentID + "   " + componentType);

		
		return returnCode;
	}

	/***************************************************************************************
	 * GENERATE INFERIOR LABIAL ARTERY
	 * 
	 * This generates the InferiorLabial Artery. 
	 *
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/
	  	
	public int generateInferiorLabialArtery(String startID, String componentType, String componentName, String componentID,  String parentID, double[][] currentPoints) 
		throws DataException, DataSecurityException
	{	
		System.out.println("InferiorLabialArtery: " + componentID + "   " + parentID);
		
		int bodyID = 1;
		int projectID = 1;
		String vertices = "";
		
		ArrayList mySqlList= new ArrayList();
		int returnCode = 0;
	
		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();

		// Right InferiorLabialArtery - Move inward toward the front of Jaw
		if (parentID.equals("InferiorLabialArtery:01")) 
		{	
			// We can generate the AscendingPharyngealArtery
			if (currentPoints == null )
			{
				double circumference = 0.00625;
				double[] startPos = {1.5, 0.25, 0.00};
				currentPoints = BioGraphics.octogonYPlane(startPos, circumference);
			}
			
			int nMaxSegs = 5;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
		
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
	     
				if (numSegs==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.25, 0.0, -0.04);
				}
				else if (numSegs==1){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.25, -0.02, -0.05);
				}
				else if (numSegs==2){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.25, -0.03, -0.10);
				}
				else if (numSegs==3){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.30, -0.05, -0.25);
				}
				else if (numSegs==4){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.35, 0.0, -0.25);
				}
				else if (numSegs==5){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.05, 0.0, -0.05);
				}
				
	    		// Add the instruction into the instruction set
	    		bioMightInstructSet.addElement(bioInstruct);
			}
		// Left InferiorLabialArtery - Move inward toward the front of Jaw    
		} else if (parentID.equals("InferiorLabialArtery:02")) {	
			int nMaxSegs = 5;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
				
				// We can generate the AscendingPharyngealArtery
				if (currentPoints == null )
				{
					double circumference = 0.00625;
					double[] startPos = {-1.5, 0.25, 0.00};
					currentPoints = BioGraphics.octogonYPlane(startPos, circumference);
				}
			
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
		      

				if (numSegs==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.25, 0.0, -0.04);
				}
				else if (numSegs==1){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.25, -0.02, -0.05);
				}
				else if (numSegs==2){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.25, -0.03, -0.10);
				}
				else if (numSegs==3){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.30, -0.05, -0.25);
				}
				else if (numSegs==4){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.35, 0.0, -0.25);
				}
				else if (numSegs==5){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.05, 0.0, -0.05);
				}
				
		    	// Add the instruction into the instruction set
		    	bioMightInstructSet.addElement(bioInstruct);
			}
		}

		
		DBUtils.generateFacedComponents(Constants.QUADRANGLE, startID, componentType, componentName, componentID, currentPoints, bioMightInstructSet);
		System.out.println("Generating the Rows for InferiorLabialArteryEndothelium: " + componentID + "   " + componentType);

		
		return returnCode;
	}	


	/***************************************************************************************
	 * GENERATE SUPERIOR LABIAL ARTERY
	 * 
	 * This generates the SuperiorLabial Artery. 
	 *
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/
	  	
	public int generateSuperiorLabialArtery(String startID, String componentType, String componentName, String componentID,  String parentID, double[][] currentPoints) 
		throws DataException, DataSecurityException
	{	
		System.out.println("SuperiorLabialArtery: " + componentID + "   " + parentID);
		
		int bodyID = 1;
		int projectID = 1;
		String vertices = "";
		
		ArrayList mySqlList= new ArrayList();
		int returnCode = 0;
	
		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();

		// Right SuperiorLabialArtery - Move inward toward the front of Jaw
		if (parentID.equals("SuperiorLabialArtery:01")) 
		{	
			// We can generate the AscendingPharyngealArtery
			if (currentPoints == null )
			{
				double circumference = 0.00625;
				double[] startPos = {1.5, 0.25, 0.00};
				currentPoints = BioGraphics.octogonYPlane(startPos, circumference);
			}
			
			int nMaxSegs = 4;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
		
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
	     

				if (numSegs==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.25, 0.0, -0.04);
				}
				else if (numSegs==1){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.25, -0.02, -0.05);
				}
				else if (numSegs==2){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.25, -0.03, -0.10);
				}
				else if (numSegs==3){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.2, -0.05, -0.18);
				}
				
		
				
	    		// Add the instruction into the instruction set
	    		bioMightInstructSet.addElement(bioInstruct);
			}
		// Left SuperiorLabialArtery - Move inward toward the front of Jaw    
		} else if (parentID.equals("SuperiorLabialArtery:02")) {	
			int nMaxSegs = 4;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
				
				// We can generate the SuperiorLabialArtery
				if (currentPoints == null )
				{
					double circumference = 0.00625;
					double[] startPos = {-1.5, 0.25, 0.00};
					currentPoints = BioGraphics.octogonYPlane(startPos, circumference);
				}
			
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
		      

				if (numSegs==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.25, 0.0, -0.04);
				}
				else if (numSegs==1){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.25, -0.02, -0.1);
				}
				else if (numSegs==2){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.25, -0.01, -0.20);
				}
				else if (numSegs==3){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.25, -0.02, -0.35);
				}
							
				
		    	// Add the instruction into the instruction set
		    	bioMightInstructSet.addElement(bioInstruct);
			}
		}

		
		DBUtils.generateFacedComponents(Constants.QUADRANGLE, startID, componentType, componentName, componentID, currentPoints, bioMightInstructSet);
		System.out.println("Generating the Rows for SuperiorLabialArteryEndothelium: " + componentID + "   " + componentType);

		
		return returnCode;
	}	
	
	
	/***************************************************************************************
	 * GENERATE INFRAORBITAL ARTERY
	 * 
	 * This generates the InfraOrbitalArtery Artery. 
	 *
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/
	  	
	public int generateInfraOrbitalArtery(String startID, String componentType, String componentName, String componentID,  String parentID, double[][] currentPoints) 
		throws DataException, DataSecurityException
	{	
		System.out.println("InfraOrbitalArtery: " + componentID + "   " + parentID);
		
		int bodyID = 1;
		int projectID = 1;
		String vertices = "";
		
		ArrayList mySqlList= new ArrayList();
		int returnCode = 0;
	
		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();

		// Right InfraOrbitalArtery - Move inward toward the front of Jaw
		if (parentID.equals("InfraOrbitalArtery:01")) 
		{	
			// We can generate the AscendingPharyngealArtery
			if (currentPoints == null )
			{
				double circumference = 0.00625;
				double[] startPos = {1.5, 0.25, 0.00};
				currentPoints = BioGraphics.octogonYPlane(startPos, circumference);
			}
			
			int nMaxSegs = 8;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
		
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
	     

				if (numSegs==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.03, 0.5, -0.02);
				}
				else if (numSegs==1){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.07, 0.5, -0.05);
				}
				else if (numSegs==2){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.08, 0.5, -0.1);
				}
				else if (numSegs==3){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.05, 0.5, -0.1);
				}
				else if (numSegs==4){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.09, 0.5, -0.15);
				}
				else if (numSegs==5){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.1, 0.20, -0.5);
				}
				else if (numSegs==6){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, 0.0, -0.5);
				}
				else if (numSegs==7){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -0.1, -0.5);
				}
				
				
				else if (numSegs==8){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.15, 0.5, 0.25);
				}	
				
				
	    		// Add the instruction into the instruction set
	    		bioMightInstructSet.addElement(bioInstruct);
			}
		// Left InfraOrbitalArtery - Move inward toward the front of Jaw    
		} else if (parentID.equals("InfraOrbitalArtery:02")) {
			
			// We can generate the AscendingPharyngealArtery
			if (currentPoints == null )
			{
				double circumference = 0.00625;
				double[] startPos = {-1.5, 0.25, 0.00};
				currentPoints = BioGraphics.octogonYPlane(startPos, circumference);
			}
			
			int nMaxSegs = 8;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
				
			
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
		      

				if (numSegs==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.03, 0.5, -0.02);
				}
				else if (numSegs==1){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.07, 0.5, -0.05);
				}
				else if (numSegs==2){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.08, 0.5, -0.1);
				}
				else if (numSegs==3){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.05, 0.5, -0.1);
				}
				else if (numSegs==4){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.09, 0.5, -0.15);
				}
				else if (numSegs==5){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.1, 0.20, -0.5);
				}
				else if (numSegs==6){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, 0.0, -0.5);
				}
				else if (numSegs==7){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -0.1, -0.5);
				}	
				
		    	// Add the instruction into the instruction set
		    	bioMightInstructSet.addElement(bioInstruct);
			}
		}

		
		DBUtils.generateFacedComponents(Constants.QUADRANGLE, startID, componentType, componentName, componentID, currentPoints, bioMightInstructSet);
		System.out.println("Generating the Rows for InfraOrbitalArteryEndothelium: " + componentID + "   " + componentType);

		
		return returnCode;
	}
	
	
	

	/***************************************************************************************
	 * GENERATE INFRAORBITAL ARTERY
	 * 
	 * This generates the SupraOrbitalArtery Artery. 
	 *
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/
	  	
	public int generateSupraOrbitalArtery(String startID, String componentType, String componentName, String componentID,  String parentID, double[][] currentPoints) 
		throws DataException, DataSecurityException
	{	
		System.out.println("SupraOrbitalArtery: " + componentID + "   " + parentID);
		
		int bodyID = 1;
		int projectID = 1;
		String vertices = "";
		
		ArrayList mySqlList= new ArrayList();
		int returnCode = 0;
	
		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();

		// Right SupraOrbitalArtery - Move inward toward the front of Jaw
		if (parentID.equals("SupraOrbitalArtery:01")) 
		{	
			// We can generate the AscendingPharyngealArtery
			if (currentPoints == null )
			{
				double circumference = 0.00625;
				double[] startPos = {1.5, 0.25, 0.00};
				currentPoints = BioGraphics.octogonYPlane(startPos, circumference);
			}
		
			int nMaxSegs = 4;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
		
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
	     

				if (numSegs==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.10, 0.25, 0.0);
				}
				else if (numSegs==1){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.10, 0.25, 0.0);
				}
				else if (numSegs==2){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.05, 0.25, -0.05);
				}
				else if (numSegs==3){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, 0.25, 0.00);
				}
				else if (numSegs==4){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.15, 0.5, -0.10);
				}
				else if (numSegs==5){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, 0.5, 0.0);
				}
	
				
				
	    		// Add the instruction into the instruction set
	    		bioMightInstructSet.addElement(bioInstruct);
			}
		// Left SupraOrbitalArtery - Move inward toward the front of Jaw    
		} else if (parentID.equals("SupraOrbitalArtery:02")) {	
			int nMaxSegs = 4;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
				
				// We can generate the AscendingPharyngealArtery
				if (currentPoints == null )
				{
					double circumference = 0.00625;
					double[] startPos = {-1.5, 0.25, 0.00};
					currentPoints = BioGraphics.octogonYPlane(startPos, circumference);
				}
			
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
		      

				if (numSegs==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.10, 0.25, 0.0);
				}
				else if (numSegs==1){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.10, 0.25, 0.0);
				}
				else if (numSegs==2){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.05, 0.25, -0.05);
				}
				else if (numSegs==3){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, 0.25, 0.00);
				}
				else if (numSegs==4){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.15, 0.5, -0.10);
				}
				else if (numSegs==5){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, 0.5, 0.0);
				}
				
		    	// Add the instruction into the instruction set
		    	bioMightInstructSet.addElement(bioInstruct);
			}
		}

		
		DBUtils.generateFacedComponents(Constants.QUADRANGLE, startID, componentType, componentName, componentID, currentPoints, bioMightInstructSet);
		System.out.println("Generating the Rows for SupraOrbitalArteryEndothelium: " + componentID + "   " + componentType);

		
		return returnCode;
	}
	
	/***************************************************************************************
	 * GENERATE SUPRATROCHLEAR ARTERY
	 * 
	 * This generates the SupraTrochlearArtery Artery. 
	 *
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/
	  	
	public int generateSupraTrochlearArtery(String startID, String componentType, String componentName, String componentID,  String parentID, double[][] currentPoints) 
		throws DataException, DataSecurityException
	{	
		System.out.println("SupraTrochlearArtery: " + componentID + "   " + parentID);
		
		int bodyID = 1;
		int projectID = 1;
		String vertices = "";
		
		ArrayList mySqlList= new ArrayList();
		int returnCode = 0;
	
		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();

		// Right SupraTrochlearArtery - Move inward toward the front of Jaw
		if (parentID.equals("SupraTrochlearArtery:01")) 
		{	
			// We can generate the AscendingPharyngealArtery
			if (currentPoints == null )
			{
				double circumference = 0.00625;
				double[] startPos = {1.5, 0.25, 0.00};
				currentPoints = BioGraphics.octogonYPlane(startPos, circumference);
			}
			
			int nMaxSegs = 4;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
		
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
	     

				if (numSegs==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.10, 0.5, 0.0);
				}
				else if (numSegs==1){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, 0.5, 0.0);
				}
				else if (numSegs==2){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.05, 0.5, -0.05);
				}
				else if (numSegs==3){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, 0.5, 0.00);
				}
				else if (numSegs==4){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.15, 0.5, -0.10);
				}
				else if (numSegs==5){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, 0.5, 0.0);
				}
		
				
				
	    		// Add the instruction into the instruction set
	    		bioMightInstructSet.addElement(bioInstruct);
			}
		// Left SupraTrochlearArtery - Move inward toward the front of Jaw    
		} else if (parentID.equals("SupraTrochlearArtery:02")) {	
			int nMaxSegs = 4;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
				
				// We can generate the AscendingPharyngealArtery
				if (currentPoints == null )
				{
					double circumference = 0.00625;
					double[] startPos = {-1.5, 0.25, 0.00};
					currentPoints = BioGraphics.octogonYPlane(startPos, circumference);
				}
			
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
		      

				if (numSegs==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.10, 0.5, 0.0);
				}
				else if (numSegs==1){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, 0.5, 0.0);
				}
				else if (numSegs==2){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.05, 0.5, -0.05);
				}
				else if (numSegs==3){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, 0.5, 0.00);
				}
				else if (numSegs==4){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.15, 0.5, -0.10);
				}
				else if (numSegs==5){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, 0.5, 0.0);
				}
			
		    	// Add the instruction into the instruction set
		    	bioMightInstructSet.addElement(bioInstruct);
			}
		}

		
		DBUtils.generateFacedComponents(Constants.QUADRANGLE, startID, componentType, componentName, componentID, currentPoints, bioMightInstructSet);
		System.out.println("Generating the Rows for SupraTrochlearArteryEndothelium: " + componentID + "   " + componentType);

		
		return returnCode;
	}	

	
	/***************************************************************************************
	 * GENERATE ACCESSORY PHARYNGEAL ARTERY
	 * 
	 * This generates the AccessoryPharyngeal Artery. 
	 *
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/
	  	
	public int generateAscendingPharyngealArtery(String startID, String componentType, String componentName, String componentID,  String parentID, double[][] currentPoints) 
		throws DataException, DataSecurityException
	{	
		System.out.println("AscendingPharyngealArtery: " + componentID + "   " + parentID);
		
		int bodyID = 1;
		int projectID = 1;
		String vertices = "";
		
		ArrayList mySqlList= new ArrayList();
		int returnCode = 0;
	
		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();

		// Right AscendingPharyngealArtery - Move inward toward the front of Jaw
		if (parentID.equals("AscendingPharyngealArtery:01")) 
		{	
			// We can generate the AscendingPharyngealArtery
			if (currentPoints == null )
			{
				double circumference = 0.00625;
				double[] startPos = {1.5, 0.25, 0.00};
				currentPoints = BioGraphics.octogonYPlane(startPos, circumference);
			}
			
			int nMaxSegs = 6;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
		
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
	     

				if (numSegs==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.10, 0.5, -0.15);
				}
				else if (numSegs==1){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.10, 0.5, -0.20);
				}
				else if (numSegs==2){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, 0.5, -0.05);
				}
				else if (numSegs==3){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, 0.5, 0.00);
				}
				else if (numSegs==4){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.15, 0.5, -0.15);
				}
				else if (numSegs==5){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, 0.5, 0.0);
				}
				else if (numSegs==6){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, 0.0, 0.25);
				}
				else if (numSegs==7){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, 0.5, 0.25);
				}
				else if (numSegs==8){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.15, 0.5, 0.25);
				}	
				
				
	    		// Add the instruction into the instruction set
	    		bioMightInstructSet.addElement(bioInstruct);
			}
		// Left AscendingPharyngealArtery - Move inward toward the front of Jaw    
		} else if (parentID.equals("AscendingPharyngealArtery:02")) {	
			int nMaxSegs = 6;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
				
				// We can generate the AscendingPharyngealArtery
				if (currentPoints == null )
				{
					double circumference = 0.00625;
					double[] startPos = {-1.5, 0.25, 0.00};
					currentPoints = BioGraphics.octogonYPlane(startPos, circumference);
				}
			
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
		      

				if (numSegs==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, 0.5, 0.0);
				}
				else if (numSegs==1){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.10, 0.5, 0.0);
				}
				else if (numSegs==2){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, 0.5, -0.05);
				}
				else if (numSegs==3){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.10, 0.5, 0.00);
				}
				else if (numSegs==4){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.15, 0.05, 0.25);
				}
				else if (numSegs==5){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.15, 0.05, 0.25);
				}
				else if (numSegs==6){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.15, 0.0, 0.25);
				}
				else if (numSegs==7){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.15, 0.5, 0.25);
				}
				else if (numSegs==8){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.15, 0.5, 0.25);
				}				
				
		    	// Add the instruction into the instruction set
		    	bioMightInstructSet.addElement(bioInstruct);
			}
		}

		
		DBUtils.generateFacedComponents(Constants.QUADRANGLE, startID, componentType, componentName, componentID, currentPoints, bioMightInstructSet);
		System.out.println("Generating the Rows for AscendingPharyngealArteryEndothelium: " + componentID + "   " + componentType);

		
		return returnCode;
	}

	
	/***************************************************************************************
	 * GENERATE LINGUAL ARTERY
	 * 
	 * This generates the Lingual Artery. 
	 *
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/
	  	
	public int generateLingualArtery(String startID, String componentType, String componentName, String componentID,  String parentID, double[][] currentPoints) 
		throws DataException, DataSecurityException
	{	
		System.out.println("LingualArtery: " + componentID + "   " + parentID);
		
		int bodyID = 1;
		int projectID = 1;
		String vertices = "";
		
		ArrayList mySqlList= new ArrayList();
		int returnCode = 0;
	
		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();

		// Left LingualArtery
		if (parentID.equals("LingualArtery:01")) 
		{	
			// We can generate the LingualArtery
			if (currentPoints == null )
			{
				double circumference = 0.00625;
				double[] startPos = {1.5, 0.25, 0.00};
				currentPoints = BioGraphics.octogonYPlane(startPos, circumference);
			}
			
			int nMaxSegs = 8;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
		
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
	     
				if (numSegs==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.10, 0.5, 0.25);
				}
				else if (numSegs==1){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.10, 0.5, 0.25);
				}
				else if (numSegs==2){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.10, 0.10, 0.50);
				}
				else if (numSegs==3){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.10, -0.45, 0.50);
				}
				else if (numSegs==4){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.15, -0.25, 0.50);
				}
				else if (numSegs==5){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.15, -0.10, 0.25);
				}
				else if (numSegs==6){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.15, -0.05, 0.25);
				}
				else if (numSegs==7){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.15, 0.0, 0.25);
				}
				else if (numSegs==8){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.15, 0.0, 0.25);
				}
				
				else {
					bioInstruct.setPivotPoint(3);
					bioInstruct.setRotateVector(0.0, 0.0, 1.0);
					bioInstruct.setTransType(2);
					bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);
				}
				
				
	    		// Add the instruction into the instruction set
	    		bioMightInstructSet.addElement(bioInstruct);
			}
		// RIGHT LingualArtery		    
		} else if (parentID.equals("LingualArtery:02")) {	
			int nMaxSegs = 8;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
				
				// We can generate the LingualArtery
				if (currentPoints == null )
				{
					double circumference = 0.00625;
					double[] startPos = {-1.5, 0.25, 0.00};
					currentPoints = BioGraphics.octogonYPlane(startPos, circumference);
				}
			
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
		      

				if (numSegs==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.10, 0.5, 0.25);
				}
				else if (numSegs==1){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.10, 0.5, 0.25);
				}
				else if (numSegs==2){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.10, 0.10, 0.50);
				}
				else if (numSegs==3){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.10, -0.45, 0.50);
				}
				else if (numSegs==4){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.15, -0.25, 0.50);
				}
				else if (numSegs==5){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.15, -0.10, 0.25);
				}
				else if (numSegs==6){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.15, -0.05, 0.25);
				}
				else if (numSegs==7){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.15, 0.0, 0.25);
				}
				else if (numSegs==8){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.15, 0.0, 0.25);
				}
				
				
		    	// Add the instruction into the instruction set
		    	bioMightInstructSet.addElement(bioInstruct);
			}
		}

		
		DBUtils.generateFacedComponents(Constants.QUADRANGLE, startID, componentType, componentName, componentID, currentPoints, bioMightInstructSet);
		System.out.println("Generating the Rows for LingualArteryEndothelium: " + componentID + "   " + componentType);

		
		return returnCode;
	}

	/***************************************************************************************
	 * GENERATE LCARIMAL ARTERY
	 * 
	 * This generates the Lacrimal Artery. Runs under the bulb of the eye
	 *
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/
	  	
	public int generateLacrimalArtery(String startID, String componentType, String componentName, String componentID,  String parentID, double[][] currentPoints) 
		throws DataException, DataSecurityException
	{	
		System.out.println("LacrimalArtery: " + componentID + "   " + parentID);
		
		int bodyID = 1;
		int projectID = 1;
		String vertices = "";
		
		ArrayList mySqlList= new ArrayList();
		int returnCode = 0;
	
		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();

		// LacrimalArtery
		if (parentID.equals("LacrimalArtery:01")) 
		{	
			// We can generate the LacrimalArtery
			if (currentPoints == null )
			{
				double circumference = 0.00625;
				double[] startPos = {1.5, 0.25, 0.00};
				currentPoints = BioGraphics.octogonYPlane(startPos, circumference);
			}
			
			int nMaxSegs = 3;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
		
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
	     
				if (numSegs==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -0.25, 0.00);
				}
				else if (numSegs==1){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -0.25, -0.0125);
				}
				else if (numSegs==2){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -0.15, -0.0125);
				}
		
				else {
					bioInstruct.setPivotPoint(3);
					bioInstruct.setRotateVector(0.0, 0.0, 1.0);
					bioInstruct.setTransType(2);
					bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);
				}
				
				
	    		// Add the instruction into the instruction set
	    		bioMightInstructSet.addElement(bioInstruct);
			}
		// LacrimalArtery		    
		} else if (parentID.equals("LacrimalArtery:02")) {	
			int nMaxSegs = 3;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
				
				// We can generate the LacrimalArtery
				if (currentPoints == null )
				{
					double circumference = 0.00625;
					double[] startPos = {-1.5, 0.25, 0.00};
					currentPoints = BioGraphics.octogonYPlane(startPos, circumference);
				}
			
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
		      
				if (numSegs==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -0.25, 0.00);
				}
				else if (numSegs==1){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -0.25, -0.0125);
				}
				else if (numSegs==2){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -0.15, -0.0125);
				}
				else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.00, 1.0, 0.0);
				}
					
					
		    	// Add the instruction into the instruction set
		    	bioMightInstructSet.addElement(bioInstruct);
			}
		}

		
		DBUtils.generateFacedComponents(Constants.QUADRANGLE, startID, componentType, componentName, componentID, currentPoints, bioMightInstructSet);
		System.out.println("Generating the Rows for LacrimalArteryEndothelium: " + componentID + "   " + componentType);

		
		return returnCode;
	}
	
	
	/***************************************************************************************
	 * GENERATE OCCIPITAL ARTERY
	 * 
	 * This generates the Occipital Artery. 
	 *
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/
	  	
	public int generateOccipitalArtery(String startID, String componentType, String componentName, String componentID,  String parentID, double[][] currentPoints) 
		throws DataException, DataSecurityException
	{	
		System.out.println("OccipitalArtery: " + componentID + "   " + parentID);
		
		int bodyID = 1;
		int projectID = 1;
		String vertices = "";
		
		ArrayList mySqlList= new ArrayList();
		int returnCode = 0;
	
		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();

		// OccipitalArtery
		if (parentID.equals("OccipitalArtery:01")) 
		{	
			// We can generate the OccipitalArtery
			if (currentPoints == null )
			{
				double circumference = 0.00625;
				double[] startPos = {1.5, 0.25, 0.00};
				currentPoints = BioGraphics.octogonYPlane(startPos, circumference);
			}
			
			int nMaxSegs = 6;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
		
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
	     
				if (numSegs==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, 0.5, -0.25);
				}
				else if (numSegs==1){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, 0.25, -0.35);
				}
				else if (numSegs==2){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, 0.25, -0.75);
				}
				else if (numSegs==3){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.06, 0.50, -0.50);
				}	
				else if (numSegs==4){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, 0.25, -0.75);
				}
				else if (numSegs==5){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.10, 0.50, -0.50);
				}	
				
				else {
					bioInstruct.setPivotPoint(3);
					bioInstruct.setRotateVector(0.0, 0.0, 1.0);
					bioInstruct.setTransType(2);
					bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);
				}
				
				
	    		// Add the instruction into the instruction set
	    		bioMightInstructSet.addElement(bioInstruct);
			}
		// OccipitalArtery		    
		} else if (parentID.equals("OccipitalArtery:02")) {	
			int nMaxSegs = 6;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
				
				// We can generate the OccipitalArtery
				if (currentPoints == null )
				{
					double circumference = 0.00625;
					double[] startPos = {-1.5, 0.25, 0.00};
					currentPoints = BioGraphics.octogonYPlane(startPos, circumference);
				}
			
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
		      

				if (numSegs==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, 0.5, -0.25);
				}
				else if (numSegs==1){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, 0.25, -0.35);
				}
				else if (numSegs==2){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, 0.25, -0.75);
				}
				else if (numSegs==3){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.06, 0.50, -0.50);
				}	
				else if (numSegs==4){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, 0.25, -0.75);
				}
				else if (numSegs==5){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.10, 0.50, -0.50);
				}	
				else {
				bioInstruct.setTransType(Constants.TRANSLATE);
				bioInstruct.setTranslateMatrix(0.00, 1.0, 0.0);
				}
					
					
		    	// Add the instruction into the instruction set
		    	bioMightInstructSet.addElement(bioInstruct);
			}
		}

		
		DBUtils.generateFacedComponents(Constants.QUADRANGLE, startID, componentType, componentName, componentID, currentPoints, bioMightInstructSet);
		System.out.println("Generating the Rows for OccipitalArteryEndothelium: " + componentID + "   " + componentType);

		
		return returnCode;
	}
	
	
	/***************************************************************************************
	 * GENERATE OPHTHALMIC ARTERY
	 * 
	 * This generates the Ophthalmic Artery. 
	 *
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/
	  	
	public int generateOphthalmicArtery(String startID, String componentType, String componentName, String componentID,  String parentID, double[][] currentPoints) 
		throws DataException, DataSecurityException
	{	
		System.out.println("OphthalmicArtery: " + componentID + "   " + parentID);
		
		int bodyID = 1;
		int projectID = 1;
		String vertices = "";
		
		ArrayList mySqlList= new ArrayList();
		int returnCode = 0;
	
		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();

		// OphthalmicArtery
		if (parentID.equals("OphthalmicArtery:01")) 
		{	
			// We can generate the OphthalmicArtery
			if (currentPoints == null )
			{
				double circumference = 0.00625;
				double[] startPos = {1.5, 0.25, 0.00};
				currentPoints = BioGraphics.octogonYPlane(startPos, circumference);
			}
			
			int nMaxSegs = 3;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
		
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
	     
				if (numSegs==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, 0.0, -0.25);
				}
				else if (numSegs==1){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, 0.0, -0.25);
				}
				else if (numSegs==2){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, 0.0, -0.25);
				}
				else if (numSegs==3){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, 0.0, -0.25);
				}	
			
				else {
					bioInstruct.setPivotPoint(3);
					bioInstruct.setRotateVector(0.0, 0.0, 1.0);
					bioInstruct.setTransType(2);
					bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);
				}
				
				
	    		// Add the instruction into the instruction set
	    		bioMightInstructSet.addElement(bioInstruct);
			}
		// OphthalmicArtery		    
		} else if (parentID.equals("OphthalmicArtery:02")) {	
			int nMaxSegs = 3;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
				
				// We can generate the OphthalmicArtery
				if (currentPoints == null )
				{
					double circumference = 0.00625;
					double[] startPos = {-1.5, 0.25, 0.00};
					currentPoints = BioGraphics.octogonYPlane(startPos, circumference);
				}
			
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
	     
				if (numSegs==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, 0.0, -0.25);
				}
				else if (numSegs==1){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, 0.0, -0.25);
				}
				else if (numSegs==2){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, 0.0, -0.25);
				}
				else if (numSegs==3){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, 0.0, -0.25);
				}
				else 
				{
				bioInstruct.setTransType(Constants.TRANSLATE);
				bioInstruct.setTranslateMatrix(0.00, 1.0, 0.0);
				}
					
					
		    	// Add the instruction into the instruction set
		    	bioMightInstructSet.addElement(bioInstruct);
			}
		}

		
		DBUtils.generateFacedComponents(Constants.QUADRANGLE, startID, componentType, componentName, componentID, currentPoints, bioMightInstructSet);
		System.out.println("Generating the Rows for OphthalmicArteryEndothelium: " + componentID + "   " + componentType);

		
		return returnCode;
	}

	
	/***************************************************************************************
	 * GENERATE MENTAL ARTERY
	 * 
	 * This generates the Mental Artery. 
	 *
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/
	  	
	public int generateMentalArtery(String startID, String componentType, String componentName, String componentID,  String parentID, double[][] currentPoints) 
		throws DataException, DataSecurityException
	{	
		System.out.println("MentalArtery: " + componentID + "   " + parentID);
		
		int bodyID = 1;
		int projectID = 1;
		String vertices = "";
		
		ArrayList mySqlList= new ArrayList();
		int returnCode = 0;
	
		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();

		// MentalArtery
		if (parentID.equals("MentalArtery:01")) 
		{	
			// We can generate the MentalArtery
			if (currentPoints == null )
			{
				double circumference = 0.00625;
				double[] startPos = {1.5, 0.25, 0.00};
				currentPoints = BioGraphics.octogonYPlane(startPos, circumference);
			}
			
			int nMaxSegs = 4;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
		
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
	     
				if (numSegs==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.20, 0.0, -0.5);
				}
				else if (numSegs==1){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.25, 0.0, -0.5);
				}
				else if (numSegs==2){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.35, 0.0, -0.5);
				}
				else if (numSegs==3){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.5, 0.0, -0.5);
				}	
			
				else {
					bioInstruct.setPivotPoint(3);
					bioInstruct.setRotateVector(0.0, 0.0, 1.0);
					bioInstruct.setTransType(2);
					bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);
				}
				
				
	    		// Add the instruction into the instruction set
	    		bioMightInstructSet.addElement(bioInstruct);
			}
		// MentalArtery		    
		} else if (parentID.equals("MentalArtery:02")) {	
			int nMaxSegs = 4;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
				
				// We can generate the MentalArtery
				if (currentPoints == null )
				{
					double circumference = 0.00625;
					double[] startPos = {-1.5, 0.25, 0.00};
					currentPoints = BioGraphics.octogonYPlane(startPos, circumference);
				}
			
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
	     
				if (numSegs==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.20, 0.0, -0.5);
				}
				else if (numSegs==1){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.25, 0.0, -0.5);
				}
				else if (numSegs==2){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.35, 0.0, -0.5);
				}
				else if (numSegs==3){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.5, 0.0, -0.5);
				}	
				else 
				{
				bioInstruct.setTransType(Constants.TRANSLATE);
				bioInstruct.setTranslateMatrix(0.00, 1.0, 0.0);
				}
					
					
		    	// Add the instruction into the instruction set
		    	bioMightInstructSet.addElement(bioInstruct);
			}
		}

		
		DBUtils.generateFacedComponents(Constants.QUADRANGLE, startID, componentType, componentName, componentID, currentPoints, bioMightInstructSet);
		System.out.println("Generating the Rows for MentalArteryEndothelium: " + componentID + "   " + componentType);

		
		return returnCode;
	}
	
	/***************************************************************************************
	 * GENERATE BRACHIAL ARTERY
	 * 
	 * This generates the Brachial Artery. 
	 *
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/
	  	
	public int generateBrachialArtery(String startID, String componentType, String componentName, String componentID,  String parentID, double[][] currentPoints) 
		throws DataException, DataSecurityException
	{	
		System.out.println("BrachialArtery: " + componentID + "   " + parentID);
		
		int bodyID = 1;
		int projectID = 1;
		String vertices = "";
		
		ArrayList mySqlList= new ArrayList();
		int returnCode = 0;
	
		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();

		// BrachialArtery
		if (parentID.equals("BrachialArtery:01")) 
		{	
			// We can generate the BrachialArtery
			if (currentPoints == null )
			{
				double circumference = 0.00625;
				double[] startPos = {1.5, 0.25, 0.00};
				currentPoints = BioGraphics.octogonYPlane(startPos, circumference);
			}
			
			int nMaxSegs = 11;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
		
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
	     
				if (numSegs==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.25, -1.0, 0.0);
				}
				else if (numSegs==1){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.2, -1.0, 0.0);
				}
				else if (numSegs==2){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);
				}
				else if (numSegs==3){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -1.0, 0.1);
				}	
				else if (numSegs==4){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.055, -1.0, 0.0);
				}	
				else if (numSegs==5){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.07, -1.0, 0.10);
				}	
				else if (numSegs==6){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.05, -1.0, -0.25);
				}	
				else if (numSegs==7){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -1.0, 0.4);
				}	
				else if (numSegs==8){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.12, -0.75, 0.35);
				}	
				else if (numSegs==9){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.2, -0.75, 0.0);
				}	
				else if (numSegs==10){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.25, -0.75, 0.2);
				}

				
				
				
				
				else if (numSegs==12){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -1.0, 0.1);
				}
				else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);
				}
				
				
	    		// Add the instruction into the instruction set
	    		bioMightInstructSet.addElement(bioInstruct);
			}
		// BrachialArtery		    
		} else if (parentID.equals("BrachialArtery:02")) {	
			
			// We can generate the BrachialArtery
			if (currentPoints == null )
			{
				double circumference = 0.00625;
				double[] startPos = {-1.5, 0.25, 0.00};
				currentPoints = BioGraphics.octogonYPlane(startPos, circumference);
			}
			
			int nMaxSegs = 11;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
		
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
	     
				if (numSegs==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);
				}
				else if (numSegs==1){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);
				}
				else if (numSegs==2){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.10, -1.0, 0.0);
				}
				else if (numSegs==3){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -1.0, 0.05);
				}	
				else if (numSegs==4){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.11, -1.0, 0.0);
				}	
				else if (numSegs==5){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -1.0, 0.10);
				}	
				else if (numSegs==6){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.07, -1.0, -0.15);
				}	
				else if (numSegs==7){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.05, -1.0, 0.30);
				}	
				else if (numSegs==8){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -1.0, 0.25);
				}	
				else if (numSegs==9){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.1, -1.0, 0.20);
				}	
				else if (numSegs==10){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.35, -1.0, 0.15);
				}
				else if (numSegs==11){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.15, -1.20, 0.0);
				}
				else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);
				}							
					
		    	// Add the instruction into the instruction set
		    	bioMightInstructSet.addElement(bioInstruct);
			}
		}

		
		DBUtils.generateFacedComponents(Constants.QUADRANGLE, startID, componentType, componentName, componentID, currentPoints, bioMightInstructSet);
		System.out.println("Generating the Rows for BrachialArteryEndothelium: " + componentID + "   " + componentType);

		
		return returnCode;
	}
	
	
	/***************************************************************************************
	 * GENERATE BRACHIAL VEIN
	 * 
	 * This generates the Brachial Vein. 
	 *
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/
	  	
	public int generateBrachialVein(String startID, String componentType, String componentName, String componentID,  String parentID, double[][] currentPoints) 
		throws DataException, DataSecurityException
	{	
		System.out.println("BrachialVein: " + componentID + "   " + parentID);
		
		int bodyID = 1;
		int projectID = 1;
		String vertices = "";
		
		ArrayList mySqlList= new ArrayList();
		int returnCode = 0;
	
		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();

		// BrachialVein
		if (parentID.equals("BrachialVein:01")) 
		{	
			// We can generate the BrachialVein
			if (currentPoints == null )
			{
				double circumference = 0.00625;
				double[] startPos = {1.5, 0.25, 0.00};
				currentPoints = BioGraphics.octogonYPlane(startPos, circumference);
			}
			
			int nMaxSegs = 12;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
		
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
	     
				if (numSegs==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -1.0, -0.10);
				}
				else if (numSegs==1){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.10, -1.0, 0.0);
				}
				else if (numSegs==2){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.15, -1.0, 0.0);
				}
				else if (numSegs==3){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.05, -1.0, 0.10);
				}	
				else if (numSegs==4){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);
				}	
				else if (numSegs==5){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);
				}	
				else if (numSegs==6){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.06, -1.0, 0.5);
				}	
				else if (numSegs==7){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);
				}	
				else if (numSegs==8){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);
				}	
				else if (numSegs==9){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.05, -1.0, 0.0);
				}	
				else if (numSegs==10){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.6, -1.0, 0.0);
				}
				else if (numSegs==11){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.15, -1.0, 0.0);
				}
				else if (numSegs==12){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);
				}
				else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);
				}
				
				
	    		// Add the instruction into the instruction set
	    		bioMightInstructSet.addElement(bioInstruct);
			}
		// BrachialVein		    
		} else if (parentID.equals("BrachialVein:02")) {	
			int nMaxSegs = 12;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
				
				// We can generate the BrachialVein
				if (currentPoints == null )
				{
					double circumference = 0.00625;
					double[] startPos = {-1.5, 0.25, 0.00};
					currentPoints = BioGraphics.octogonYPlane(startPos, circumference);
				}
			
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
	     
			     
				if (numSegs==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -1.0, -0.10);
				}
				else if (numSegs==1){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.10, -1.0, 0.0);
				}
				else if (numSegs==2){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.15, -1.0, 0.0);
				}
				else if (numSegs==3){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.05, -1.0, 0.10);
				}	
				else if (numSegs==4){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);
				}	
				else if (numSegs==5){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);
				}	
				else if (numSegs==6){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.06, -1.0, 0.5);
				}	
				else if (numSegs==7){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);
				}	
				else if (numSegs==8){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);
				}	
				else if (numSegs==9){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.05, -1.0, 0.0);
				}	
				else if (numSegs==10){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.6, -1.0, 0.0);
				}
				else if (numSegs==11){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.15, -1.0, 0.0);
				}
				else if (numSegs==12){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);
				}
				else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);
				}
						
					
		    	// Add the instruction into the instruction set
		    	bioMightInstructSet.addElement(bioInstruct);
			}
		}

		
		DBUtils.generateFacedComponents(Constants.QUADRANGLE, startID, componentType, componentName, componentID, currentPoints, bioMightInstructSet);
		System.out.println("Generating the Rows for BrachialVeinEndothelium: " + componentID + "   " + componentType);

		
		return returnCode;
	}
	
	
	/***************************************************************************************
	 * GENERATE DEEP BRACHIAL ARTERY
	 * 
	 * This generates the Brachial Artery. 
	 *
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/
	  	
	public int generateDeepBrachialArtery(String startID, String componentType, String componentName, String componentID,  String parentID, double[][] currentPoints) 
		throws DataException, DataSecurityException
	{	
		System.out.println("DeepBrachialArtery: " + componentID + "   " + parentID);
		
		int bodyID = 1;
		int projectID = 1;
		String vertices = "";
		
		ArrayList mySqlList= new ArrayList();
		int returnCode = 0;
	
		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();

		// DeepBrachialArtery
		if (parentID.equals("DeepBrachialArtery:01")) 
		{	
			// We can generate the DeepBrachialArtery
			if (currentPoints == null )
			{
				double circumference = 0.00625;
				double[] startPos = {1.5, 0.25, 0.00};
				currentPoints = BioGraphics.octogonYPlane(startPos, circumference);
			}
			
			int numInstructions = 13;
			//BioMightOrientation bioMightOrientation = new BioMightOrientation(0.0, 0.0, 1.0, 90);
			for (int instructCount=0; instructCount<numInstructions; instructCount++)
			{
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
									
				// Place the appendage into the instruction set
				bioInstruct.setBioMightAppendage(null);
				bioInstruct.setFillAppendage(true); 
				
				if (instructCount==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.35, -0.5, -0.2);
				}
				else if (instructCount==1){			
					BioMightOrientation orientation = new BioMightOrientation(0.0, -1.0, 0.0, 90.0);
		 			bioInstruct.setTransType(Constants.ROTATEOCTO);
	    			bioInstruct.setTheta(45);	
	    			bioInstruct.setPivotPoint(0);	
	     			bioInstruct.setRotateVector(0.0, 0.0, 1.0);
	     			bioInstruct.setOrientation(orientation);
				}
				else if (instructCount==2){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -0.10, 0.0);
				}
				else if (instructCount==3){				
					BioMightOrientation orientation = new BioMightOrientation(0.0, -1.0, 0.0, 90.0);
		 			bioInstruct.setTransType(Constants.ROTATEOCTO);
	    			bioInstruct.setTheta(45);	
	    			bioInstruct.setPivotPoint(0);	
	     			bioInstruct.setRotateVector(0.0, 0.0, 1.0);
	     			bioInstruct.setOrientation(orientation);
				}	
				else if (instructCount==4){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.25, -0.15, -0.15);
				}	
				else if (instructCount==5){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.25, -0.25, -0.05);
				}	
				else if (instructCount==6){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.35, -0.35, 0.1);
				}	
				else if (instructCount==7){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.45, -0.30, 0.1);
				}
				else if (instructCount==8){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.35, -0.45, 0.1);
				}
				else if (instructCount==9){
					BioMightOrientation orientation = new BioMightOrientation(0.0, -1.0, 0.0, 90.0);
		 			bioInstruct.setTransType(Constants.ROTATEOCTO);
	    			bioInstruct.setTheta(-45);	
	    			bioInstruct.setPivotPoint(4);	
	     			bioInstruct.setRotateVector(0.0, 0.0, 1.0);
	     			bioInstruct.setOrientation(orientation);
				}	
				else if (instructCount==10){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.08, -1.0, 0.1);
				}	
				else if (instructCount==11){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.03, -1.0, 0.2);
				}	
				else if (instructCount==12){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.03, -1.0, 0.1);
				}	
				else if (instructCount==13){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.02, -1.0, 0.2);
				}
				else if (instructCount==14){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.05, -1.0, 0.15);
				}
				else if (instructCount==15){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.2, -0.75, 0.1);
				}
				else if (instructCount==16){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.175, -0.75, 0.15);
				}	
				else if (instructCount==17){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.075, -0.25, 0.075);
				}			
				
				else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);
				}
					
				
	    		// Add the instruction into the instruction set
	    		bioMightInstructSet.addElement(bioInstruct);
			}
		// DeepBrachialArtery		    
		} else if (parentID.equals("DeepBrachialArtery:02")) {	

			// We can generate the DeepBrachialArtery
			if (currentPoints == null )
			{
				double circumference = 0.00625;
				double[] startPos = {-1.5, 0.25, 0.00};
				currentPoints = BioGraphics.octogonYPlane(startPos, circumference);
			}
			
			
			int numInstructions = 10;
			//BioMightOrientation bioMightOrientation = new BioMightOrientation(0.0, 0.0, 1.0, 90);
			for (int instructCount=0; instructCount<numInstructions; instructCount++)
			{
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
									
				// Place the appendage into the instruction set
				bioInstruct.setBioMightAppendage(null);
				bioInstruct.setFillAppendage(true); 
				
				if (instructCount==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.35, -0.5, -0.2);
				}
				else if (instructCount==1){			
					BioMightOrientation orientation = new BioMightOrientation(0.0, -1.0, 0.0, 90.0);
		 			bioInstruct.setTransType(Constants.ROTATEOCTO);
	    			bioInstruct.setTheta(45);	
	    			bioInstruct.setPivotPoint(0);	
	     			bioInstruct.setRotateVector(0.0, 0.0, 1.0);
	     			bioInstruct.setOrientation(orientation);
				}
				else if (instructCount==2){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -0.10, 0.0);
				}
				else if (instructCount==3){				
					BioMightOrientation orientation = new BioMightOrientation(0.0, -1.0, 0.0, 90.0);
		 			bioInstruct.setTransType(Constants.ROTATEOCTO);
	    			bioInstruct.setTheta(45);	
	    			bioInstruct.setPivotPoint(0);	
	     			bioInstruct.setRotateVector(0.0, 0.0, 1.0);
	     			bioInstruct.setOrientation(orientation);
				}	
				else if (instructCount==4){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.25, -0.15, -0.15);
				}	
				else if (instructCount==5){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.25, -0.25, -0.05);
				}	
				else if (instructCount==6){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.35, -0.35, 0.1);
				}	
				else if (instructCount==7){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.45, -0.30, 0.1);
				}
				else if (instructCount==8){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.35, -0.45, 0.1);
				}
				else if (instructCount==9){
					BioMightOrientation orientation = new BioMightOrientation(0.0, -1.0, 0.0, 90.0);
		 			bioInstruct.setTransType(Constants.ROTATEOCTO);
	    			bioInstruct.setTheta(-45);	
	    			bioInstruct.setPivotPoint(4);	
	     			bioInstruct.setRotateVector(0.0, 0.0, 1.0);
	     			bioInstruct.setOrientation(orientation);
				}	
				else if (instructCount==10){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.08, -1.0, 0.1);
				}	
				else if (instructCount==11){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.03, -1.0, 0.2);
				}	
				else if (instructCount==12){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.03, -1.0, 0.1);
				}	
				else if (instructCount==13){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.02, -1.0, 0.2);
				}
				else if (instructCount==14){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.05, -1.0, 0.15);
				}
				else if (instructCount==15){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.2, -0.75, 0.1);
				}
				else if (instructCount==16){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.175, -0.75, 0.15);
				}	
				else if (instructCount==17){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.075, -0.25, 0.075);
				}			
				
				else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);
				}
					
		
					
		    	// Add the instruction into the instruction set
		    	bioMightInstructSet.addElement(bioInstruct);
			}
		}

		
		DBUtils.generateFacedComponents(Constants.QUADRANGLE, startID, componentType, componentName, componentID, currentPoints, bioMightInstructSet);
		System.out.println("Generating the Rows for DeepBrachialArteryEndothelium: " + componentID + "   " + componentType);

		
		return returnCode;
	}

	
	/***************************************************************************************
	 * GENERATE RADIAL ARTERY
	 * 
	 * This generates the Radial Artery. 
	 *
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/
	  	
	public int generateRadialArtery(String startID, String componentType, String componentName, String componentID,  String parentID, double[][] currentPoints) 
		throws DataException, DataSecurityException
	{	
		System.out.println("RadialArtery: " + componentID + "   " + parentID);
		
		int bodyID = 1;
		int projectID = 1;
		String vertices = "";
		
		ArrayList mySqlList= new ArrayList();
		int returnCode = 0;
	
		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();

		// RadialArtery
		if (parentID.equals("RadialArtery:01")) 
		{	
			// We can generate the RadialArtery
			if (currentPoints == null )
			{
				double circumference = 0.00625;
				double[] startPos = {1.5, 0.25, 0.00};
				currentPoints = BioGraphics.octogonYPlane(startPos, circumference);
			}
			   
				int numInstructions = 10;
				//BioMightOrientation bioMightOrientation = new BioMightOrientation(0.0, 0.0, 1.0, 90);
				for (int instructCount=0; instructCount<numInstructions; instructCount++)
				{
					// Create a place for an instruction 
					BioMightInstruction bioInstruct = new BioMightInstruction();
					
					if (instructCount==0){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.450, -1.0, 0.0);
					}
					else if (instructCount==1){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.350, -1.0, 0.0);
					}
					else if (instructCount==2){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.25, -1.0, 0.0);
					}
					else if (instructCount==3){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.05, -1.0, 0.0);
					}	
					else if (instructCount==4){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.075, -1.0, 0.15);
					}	
					else if (instructCount==5){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.1, -1.0, 0.0);
					}	
					else if (instructCount==6){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.06, -1.0, 0.0);
					}	
					else if (instructCount==7){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.05, -1.0, 0.0);
					}	
					else if (instructCount==8){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.03, -0.5, 0.0);
					}	
					else if (instructCount==9){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.02, -0.5, 0.0);
					}	
					else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);
					}				
						
									
	    		// Add the instruction into the instruction set
	    		bioMightInstructSet.addElement(bioInstruct);
			}
		// RadialArtery		    
		} else if (parentID.equals("RadialArtery:02")) {	
				
				// We can generate the RadialArtery
				if (currentPoints == null )
				{
					double circumference = 0.00625;
					double[] startPos = {-1.5, 0.25, 0.00};
					currentPoints = BioGraphics.octogonYPlane(startPos, circumference);
				}
		
			     
				int numInstructions = 10;
				//BioMightOrientation bioMightOrientation = new BioMightOrientation(0.0, 0.0, 1.0, 90);
				for (int instructCount=0; instructCount<numInstructions; instructCount++)
				{
					// Create a place for an instruction 
					BioMightInstruction bioInstruct = new BioMightInstruction();
					
					if (instructCount==0){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.450, -1.0, 0.0);
					}
					else if (instructCount==1){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.350, -1.0, 0.0);
					}
					else if (instructCount==2){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.25, -1.0, 0.0);
					}
					else if (instructCount==3){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.05, -1.0, 0.0);
					}	
					else if (instructCount==4){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.075, -1.0, 0.15);
					}	
					else if (instructCount==5){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.1, -1.0, 0.0);
					}	
					else if (instructCount==6){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.06, -1.0, 0.0);
					}	
					else if (instructCount==7){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.05, -1.0, 0.0);
					}	
					else if (instructCount==8){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.03, -0.5, 0.0);
					}	
					else if (instructCount==9){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.02, -0.5, 0.0);
					}	
			
				
					else {
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);
					}		
			
					
		    	// Add the instruction into the instruction set
		    	bioMightInstructSet.addElement(bioInstruct);
			}
		}

		
		DBUtils.generateFacedComponents(Constants.QUADRANGLE, startID, componentType, componentName, componentID, currentPoints, bioMightInstructSet);
		System.out.println("Generating the Rows for RadialArteryEndothelium: " + componentID + "   " + componentType);

		
		return returnCode;
	}
	
	/***************************************************************************************
	 * GENERATE RADIAL ARTERY
	 * 
	 * This generates the Hepatic Artery. 
	 *
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/
	  	
	public int generateHepaticArtery(String startID, String componentType, String componentName, String componentID,  String parentID, double[][] currentPoints) 
		throws DataException, DataSecurityException
	{	
		System.out.println("HepaticArtery: " + componentID + "   " + parentID);
		
		int bodyID = 1;
		int projectID = 1;
		String vertices = "";
		
		ArrayList mySqlList= new ArrayList();
		int returnCode = 0;
	
		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();

		// HepaticArtery
		if (parentID.equals("HepaticArtery:01")) 
		{	
			// We can generate the HepaticArtery
			if (currentPoints == null )
			{
				double circumference = 0.00625;
				double[] startPos = {1.5, 0.25, 0.00};
				currentPoints = BioGraphics.octogonYPlane(startPos, circumference);
			}
			   
				int numInstructions = 7;
				//BioMightOrientation bioMightOrientation = new BioMightOrientation(0.0, 0.0, 1.0, 90);
				for (int instructCount=0; instructCount<numInstructions; instructCount++)
				{
					// Create a place for an instruction 
					BioMightInstruction bioInstruct = new BioMightInstruction();
					
					if (instructCount==0){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.25, 0.5, 0.0);
					}
					else if (instructCount==1){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.35, 0.30, 0.0);
					}
					else if (instructCount==2){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.50, 0.20, 0.35);
					}
					else if (instructCount==3){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.40, 0.40, 0.40);
					}	
					else if (instructCount==4){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.50, 0.45, 0.015);
					}	
					else if (instructCount==5){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.50, 0.5, -0.01);
					}	
					else if (instructCount==6){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.50, 0.75, 0.02);
					}
					
					else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);
					}				
						
									
	    		// Add the instruction into the instruction set
	    		bioMightInstructSet.addElement(bioInstruct);
			}
		// HepaticArtery		    
		} else if (parentID.equals("HepaticArtery:02")) {	
				
				// We can generate the HepaticArtery
				if (currentPoints == null )
				{
					double circumference = 0.00625;
					double[] startPos = {-1.5, 0.25, 0.00};
					currentPoints = BioGraphics.octogonYPlane(startPos, circumference);
				}
		
			     
				int numInstructions = 3;
				//BioMightOrientation bioMightOrientation = new BioMightOrientation(0.0, 0.0, 1.0, 90);
				for (int instructCount=0; instructCount<numInstructions; instructCount++)
				{
					// Create a place for an instruction 
					BioMightInstruction bioInstruct = new BioMightInstruction();
					
					if (instructCount==0){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.450, 0.5, 0.0);
					}
					else if (instructCount==1){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.350, 0.5, 0.0);
					}
					else if (instructCount==2){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.175, 0.5, 0.0);
					}
					else if (instructCount==3){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.05, 0.5, 0.0);
					}	
					else if (instructCount==4){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.075, -1.0, 0.15);
					}	
			
					else {
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);
					}		
			
					
		    	// Add the instruction into the instruction set
		    	bioMightInstructSet.addElement(bioInstruct);
			}
		}

		
		DBUtils.generateFacedComponents(Constants.QUADRANGLE, startID, componentType, componentName, componentID, currentPoints, bioMightInstructSet);
		System.out.println("Generating the Rows for HepaticArteryEndothelium: " + componentID + "   " + componentType);

		
		return returnCode;
	}
	
	
	
	/***************************************************************************************
	 * GENERATE ANTERIOR CIRCUMFLEX HUMERAL ARTERY
	 * 
	 * This generates the AnteriorCircumflexHumeral Artery. 
	 *
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/
	  	
	public int generateAnteriorCircumflexHumeralArtery(String startID, String componentType, String componentName, String componentID,  String parentID, double[][] currentPoints) 
		throws DataException, DataSecurityException
	{	
		System.out.println("AnteriorCircumflexHumeralArtery: " + componentID + "   " + parentID);
		
		int bodyID = 1;
		int projectID = 1;
		String vertices = "";
		
		ArrayList mySqlList= new ArrayList();
		int returnCode = 0;
	
		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();

		// AnteriorCircumflexHumeralArtery
		if (parentID.equals("AnteriorCircumflexHumeralArtery:01")) 
		{	
			// We can generate the AnteriorCircumflexHumeralArtery
			if (currentPoints == null )
			{
				double circumference = 0.00625;
				double[] startPos = {1.5, 0.25, 0.00};
				currentPoints = BioGraphics.octogonYPlane(startPos, circumference);
			}
			
			int nMaxSegs = 5;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
		
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
	     
				if (numSegs==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.5, 0.02, 0.45);
				}
				else if (numSegs==1){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.5, -0.01, 0.35);
				}
				else if (numSegs==2){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.5, 0.00, 0.0);
				}
				else if (numSegs==3){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.5, 0.05, -0.35);
				}	
				else if (numSegs==4){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.35, -0.06, -0.5);
				}	
				else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.5, 0.025, 0.0);
				}
				
				
	    		// Add the instruction into the instruction set
	    		bioMightInstructSet.addElement(bioInstruct);
			}
		// AnteriorCircumflexHumeralArtery		    
		} else if (parentID.equals("AnteriorCircumflexHumeralArtery:02")) {	

			// We can generate the AnteriorCircumflexHumeralArtery
			if (currentPoints == null )
			{
				double circumference = 0.00625;
				double[] startPos = {-1.5, 0.25, 0.00};
				currentPoints = BioGraphics.octogonYPlane(startPos, circumference);
			}
			
			int nMaxSegs = 4;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
				
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
	     
			     
				if (numSegs==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.5, 0.02, 0.45);
				}
				else if (numSegs==1){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.5, -0.01, 0.35);
				}
				else if (numSegs==2){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.5, 0.00, 0.0);
				}
				else if (numSegs==3){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.5, 0.05, -0.35);
				}	
				else if (numSegs==4){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.35, -0.06, -0.5);
				}	
				else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.5, 0.025, 0.0);
				}
						
					
		    	// Add the instruction into the instruction set
		    	bioMightInstructSet.addElement(bioInstruct);
			}
		}

		
		DBUtils.generateFacedComponents(Constants.QUADRANGLE, startID, componentType, componentName, componentID, currentPoints, bioMightInstructSet);
		System.out.println("Generating the Rows for AnteriorCircumflexHumeralArteryEndothelium: " + componentID + "   " + componentType);

		
		return returnCode;
	}
	
	/***************************************************************************************
	 * GENERATE POSTERIOR CIRCUMFLEX HUMERAL ARTERY
	 * 
	 * This generates the PosteriorCircumflexHumeral Artery. 
	 *
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/
	  	
	public int generatePosteriorCircumflexHumeralArtery(String startID, String componentType, String componentName, String componentID,  String parentID, double[][] currentPoints) 
		throws DataException, DataSecurityException
	{	
		System.out.println("PosteriorCircumflexHumeralArtery: " + componentID + "   " + parentID);
		
		int bodyID = 1;
		int projectID = 1;
		String vertices = "";
		
		ArrayList mySqlList= new ArrayList();
		int returnCode = 0;
	
		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();

		// PosteriorCircumflexHumeralArtery
		if (parentID.equals("PosteriorCircumflexHumeralArtery:01")) 
		{	
			// We can generate the PosteriorCircumflexHumeralArtery
			if (currentPoints == null )
			{
				double circumference = 0.00625;
				double[] startPos = {1.5, 0.25, 0.00};
				currentPoints = BioGraphics.octogonYPlane(startPos, circumference);
			}
			
			int nMaxSegs = 5;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
		
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
	     
				if (numSegs==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.5, 0.02, -0.45);
				}
				else if (numSegs==1){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.5, -0.01, -0.35);
				}
				else if (numSegs==2){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.5, 0.00, 0.0);
				}
				else if (numSegs==3){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.5, 0.05, 0.35);
				}	
				else if (numSegs==4){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.35, -0.06, 0.50);
				}	
				else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.5, 0.025, 0.0);
				}
				
				
	    		// Add the instruction into the instruction set
	    		bioMightInstructSet.addElement(bioInstruct);
			}
		// PosteriorCircumflexHumeralArtery		    
		} else if (parentID.equals("PosteriorCircumflexHumeralArtery:02")) {	

			// We can generate the PosteriorCircumflexHumeralArtery
			if (currentPoints == null )
			{
				double circumference = 0.00625;
				double[] startPos = {-1.5, 0.25, 0.00};
				currentPoints = BioGraphics.octogonYPlane(startPos, circumference);
			}
			
			int nMaxSegs = 4;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
				

			
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
	     
				if (numSegs==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.5, 0.02, -0.45);
				}
				else if (numSegs==1){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.5, -0.01, -0.35);
				}
				else if (numSegs==2){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.5, 0.00, 0.0);
				}
				else if (numSegs==3){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.5, 0.05, 0.35);
				}	
				else if (numSegs==4){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.35, -0.06, 0.5);
				}	
				else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.5, 0.025, 0.0);
				}
						
					
		    	// Add the instruction into the instruction set
		    	bioMightInstructSet.addElement(bioInstruct);
			}
		}

		
		DBUtils.generateFacedComponents(Constants.QUADRANGLE, startID, componentType, componentName, componentID, currentPoints, bioMightInstructSet);
		System.out.println("Generating the Rows for PosteriorCircumflexHumeralArteryEndothelium: " + componentID + "   " + componentType);

		
		return returnCode;
	}
	
	
	/***************************************************************************************
	 * GENERATE SUPERIOR ULNAR COLLATERAL ARTERY
	 * 
	 * This generates the SuperiorUlnarCollateral Artery. 
	 *
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/
	  	
	public int generateSuperiorUlnarCollateralArtery(String startID, String componentType, String componentName, String componentID,  String parentID, double[][] currentPoints) 
		throws DataException, DataSecurityException
	{	
		System.out.println("SuperiorUlnarCollateralArtery: " + componentID + "   " + parentID);
		
		int bodyID = 1;
		int projectID = 1;
		String vertices = "";
		
		ArrayList mySqlList= new ArrayList();
		int returnCode = 0;
	
		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();

		// SuperiorUlnarCollateralArtery
		if (parentID.equals("SuperiorUlnarCollateralArtery:01")) 
		{	
			// We can generate the SuperiorUlnarCollateralArtery
			if (currentPoints == null)
			{
				double circumference = 0.00625;
				double[] startPos = {1.5, 0.25, 0.00};
				currentPoints = BioGraphics.octogonYPlane(startPos, circumference);
			}
			
			int nMaxSegs = 9;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
		
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
	     
				if (numSegs==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.250, -1.0, 0.0);
				}
				else if (numSegs==1){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.20, -1.0, -0.05);
				}
				else if (numSegs==2){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -1.0, -0.1);
				}
				else if (numSegs==3){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.05, -1.0, 0.01);
				}	
				else if (numSegs==4){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);
				}	
				else if (numSegs==5){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.25, -0.5, 0.06);
				}	
				else if (numSegs==6){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.08, -0.5, 0.04);
				}	
				else if (numSegs==7){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, 0.0, 0.0);
				}
				else if (numSegs==8){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, 0.0, 0.0);
				}
				
				
				
				else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);
				}
				
				
	    		// Add the instruction into the instruction set
	    		bioMightInstructSet.addElement(bioInstruct);
			}
		// SuperiorUlnarCollateralArtery		    
		} else if (parentID.equals("SuperiorUlnarCollateralArtery:02")) {	
		
			// We can generate the SuperiorUlnarCollateralArtery
			if (currentPoints == null )
			{
				double circumference = 0.00625;
				double[] startPos = {-1.5, 0.25, 0.00};
				currentPoints = BioGraphics.octogonYPlane(startPos, circumference);
			}
		
			
			int nMaxSegs = 9;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
				
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
			     
     
				if (numSegs==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.250, -1.0, 0.0);
				}
				else if (numSegs==1){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.20, -1.0, -0.05);
				}
				else if (numSegs==2){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);
				}
				else if (numSegs==3){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.05, -1.0, 0.10);
				}	
				else if (numSegs==4){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -1.0, 0.08);
				}	
				else if (numSegs==5){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.25, -1.0, 0.05);
				}	
				else if (numSegs==6){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.175, -0.5, 0.25);
				}	
				else if (numSegs==7){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.15, -0.5, 0.25);
				}
				else if (numSegs==8){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.30, -0.35, 0.0);
				}
				
		
				else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);
				}
						
					
		    	// Add the instruction into the instruction set
		    	bioMightInstructSet.addElement(bioInstruct);
			}
		}

		
		DBUtils.generateFacedComponents(Constants.QUADRANGLE, startID, componentType, componentName, componentID, currentPoints, bioMightInstructSet);
		System.out.println("Generating the Rows for SuperiorUlnarCollateralArteryEndothelium: " + componentID + "   " + componentType);

		
		return returnCode;
	}
	
	/***************************************************************************************
	 * GENERATE INFERIOR ULNAR COLLATERAL ARTERY
	 * 
	 * This generates the InferiorUlnarCollateral Artery. 
	 *
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/
	  	
	public int generateInferiorUlnarCollateralArtery(String startID, String componentType, String componentName, String componentID,  String parentID, double[][] currentPoints) 
		throws DataException, DataSecurityException
	{	
		System.out.println("InferiorUlnarCollateralArtery: " + componentID + "   " + parentID);
		
		int bodyID = 1;
		int projectID = 1;
		String vertices = "";
		
		ArrayList mySqlList= new ArrayList();
		int returnCode = 0;
	
		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();

		// InferiorUlnarCollateralArtery
		if (parentID.equals("InferiorUlnarCollateralArtery:01")) 
		{	
			// We can generate the InferiorUlnarCollateralArtery
			if (currentPoints == null )
			{
				double circumference = 0.00625;
				double[] startPos = {1.5, 0.25, 0.00};
				currentPoints = BioGraphics.octogonYPlane(startPos, circumference);
			}
			
			int nMaxSegs = 3;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
		
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
	     
				if (numSegs==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.15, -0.5, -0.2);
				}
				else if (numSegs==1){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.08, -0.50, -0.15);
				}
				else if (numSegs==2){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.075, -0.40, -0.1);
				}	
				else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);
				}
					
					
	    		// Add the instruction into the instruction set
	    		bioMightInstructSet.addElement(bioInstruct);
			}
			

			double[][] anteriorPoints = DBUtils.generateFacedComponents(Constants.QUADRANGLE, startID, componentType, componentName, componentID, currentPoints, bioMightInstructSet);
			System.out.println("Generating the 1stSet Rows for InferiorUlnarCollateralArteryEndothelium: " + componentID + "   " + componentType);
			
			// Save this location for the other branch
			double[][] posteriorPoints = {
											{anteriorPoints[0][0], anteriorPoints[0][1], anteriorPoints[0][2]},
											{anteriorPoints[1][0], anteriorPoints[1][1], anteriorPoints[1][2]},
											{anteriorPoints[2][0], anteriorPoints[2][1], anteriorPoints[2][2]},
											{anteriorPoints[3][0], anteriorPoints[3][1], anteriorPoints[3][2]},
											{anteriorPoints[4][0], anteriorPoints[4][1], anteriorPoints[4][2]},
											{anteriorPoints[5][0], anteriorPoints[5][1], anteriorPoints[5][2]},
											{anteriorPoints[6][0], anteriorPoints[6][1], anteriorPoints[6][2]},
											{anteriorPoints[7][0], anteriorPoints[7][1], anteriorPoints[7][2]}
										 };
			
			
			// Branch Anterior
			startID = "InferiorUlnarCollateralArteryEndothelium:00024";
			bioMightInstructSet = new BioMightInstructSet();
			nMaxSegs = 3;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
		
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
	     
				if (numSegs==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.03, -0.25, 0.30);
				}
				else if (numSegs==1){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.05, -0.25, 0.1);
				}
				else if (numSegs==2){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.07, -0.25, -0.13);
				}
				
				else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);
				}
					
					
	    		// Add the instruction into the instruction set
	    		bioMightInstructSet.addElement(bioInstruct);
			}
			
			DBUtils.generateFacedComponents(Constants.QUADRANGLE, startID, componentType, componentName, componentID, anteriorPoints, bioMightInstructSet);
			System.out.println("Generating the Anterior Rows for InferiorUlnarCollateralArteryEndothelium: " + componentID + "   " + componentType);

		
			// Branch Posterior
			startID = "InferiorUlnarCollateralArteryEndothelium:00048";
			bioMightInstructSet = new BioMightInstructSet();
			nMaxSegs = 3;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
		
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
	     
				if (numSegs==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.03, -0.25, -0.30);
				}
				else if (numSegs==1){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.05, -0.25, -0.1);
				}
				else if (numSegs==2){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.07, -0.25, 0.0);
				}
			
				
				else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);
				}
					
					
	    		// Add the instruction into the instruction set
	    		bioMightInstructSet.addElement(bioInstruct);
			}
	
			double[][] endPoints = DBUtils.generateFacedComponents(Constants.QUADRANGLE, startID, componentType, componentName, componentID, posteriorPoints, bioMightInstructSet);
			System.out.println("Generating the Posterior Rows InferiorUlnarCollateralArteryEndothelium: " + componentID + "   " + componentType);
			double[] ctrPoint = BioGraphics.getCenterPoint(endPoints);
			System.out.println("Start InferiorUlnarCollateralArtery at: " +  ctrPoint[0] + "," + ctrPoint[1] + "," + ctrPoint[2]);
			
		}	
		// InferiorUlnarCollateralArtery		    
		else if (parentID.equals("InferiorUlnarCollateralArtery:02")) {	
			
			// We can generate the InferiorUlnarCollateralArtery
			if (currentPoints == null )
			{
				double circumference = 0.00625;
				double[] startPos = {1.5, 0.25, 0.00};
				currentPoints = BioGraphics.octogonYPlane(startPos, circumference);
			}
			
			
			int nMaxSegs = 5;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
				
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
			     
     
				if (numSegs==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.250, -1.0, 0.0);
				}
				else if (numSegs==1){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.20, -1.0, -0.05);
				}
				else if (numSegs==2){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);
				}
				else if (numSegs==3){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.05, -1.0, 0.10);
				}	
				else if (numSegs==4){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.15, -1.0, 0.08);
				}	
				else if (numSegs==5){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.25, -1.0, 0.05);
				}	
				
		
				else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);
				}
						
						
					
		    	// Add the instruction into the instruction set
		    	bioMightInstructSet.addElement(bioInstruct);
			}
	
			DBUtils.generateFacedComponents(Constants.QUADRANGLE, startID, componentType, componentName, componentID, currentPoints, bioMightInstructSet);
			System.out.println("Generating the Rows for InferiorUlnarCollateralArteryEndothelium: " + componentID + "   " + componentType);		
		}

		
	
		
		return returnCode;
	}

	
	/***************************************************************************************
	 * GENERATE RADIAL COLLATERAL ARTERY
	 * 
	 * This generates the RadialCollateral Artery. This flows from the Deep Brachial artery
	 *
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/
	  	
	public int generateRadialCollateralArtery(String startID, String componentType, String componentName, String componentID,  String parentID, double[][] currentPoints) 
		throws DataException, DataSecurityException
	{	
		System.out.println("RadialCollateralArtery: " + componentID + "   " + parentID);
		
		int bodyID = 1;
		int projectID = 1;
		String vertices = "";
		
		ArrayList mySqlList= new ArrayList();
		int returnCode = 0;
	
		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();

		// RadialCollateralArtery
		if (parentID.equals("RadialCollateralArtery:01")) 
		{	
			// We can generate the RadialCollateralArtery
			if (currentPoints == null )
			{
				double circumference = 0.00625;
				double[] startPos = {1.5, 0.25, -0.5};
				currentPoints = BioGraphics.octogonYPlane(startPos, circumference);
			}
			
			int numInstructions = 3;
			//BioMightOrientation bioMightOrientation = new BioMightOrientation(0.0, 0.0, 1.0, 90);
			for (int instructCount=0; instructCount<numInstructions; instructCount++)
			{
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
									
				// Place the appendage into the instruction set
				bioInstruct.setBioMightAppendage(null);
				bioInstruct.setFillAppendage(true); 
			
		
				if (instructCount==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.03, -1.0, 0.2);
				}	
				else if (instructCount==1){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.05, -1.0, 0.25);
				}
				else if (instructCount==2){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.08, -1.0, 0.28);
				}
			
					
				
				else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);
				}
									
				
	    		// Add the instruction into the instruction set
	    		bioMightInstructSet.addElement(bioInstruct);
			}
		// RadialCollateralArtery		    
		} else if (parentID.equals("RadialCollateralArtery:02")) {	

			// We can generate the RadialCollateralArtery
			if (currentPoints == null )
			{
				double circumference = 0.00625;
				double[] startPos = {-1.5, 0.25, 0.00};
				currentPoints = BioGraphics.octogonYPlane(startPos, circumference);
			}
			
			int numInstructions = 3;
			//BioMightOrientation bioMightOrientation = new BioMightOrientation(0.0, 0.0, 1.0, 90);
			for (int instructCount=0; instructCount<numInstructions; instructCount++)
			{
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
					
				// Place the appendage into the instruction set
				bioInstruct.setBioMightAppendage(null);
				bioInstruct.setFillAppendage(true); 
				
				if (instructCount==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.03, -1.0, 0.1);
				}	
				else if (instructCount==1){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.02, -1.0, 0.2);
				}
				else if (instructCount==2){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.05, -1.0, 0.15);
				}
				else if (instructCount==3){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.2, -0.75, 0.1);
				}
				else if (instructCount==4){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.175, -0.75, 0.15);
				}	
				else if (instructCount==5){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.075, -0.25, 0.075);
				}			
				
				
		    	// Add the instruction into the instruction set
		    	bioMightInstructSet.addElement(bioInstruct);
			}
		}

		
		DBUtils.generateFacedComponents(Constants.QUADRANGLE, startID, componentType, componentName, componentID, currentPoints, bioMightInstructSet);
		System.out.println("Generating the Rows for RadialCollateralArteryEndothelium: " + componentID + "   " + componentType);

		
		return returnCode;
	}


	/***************************************************************************************
	 * GENERATE MIDDLE COLLATERAL ARTERY
	 * 
	 * This generates the MiddleCollateral Artery. 
	 *
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/
	  	
	public int generateMiddleCollateralArtery(String startID, String componentType, String componentName, String componentID,  String parentID, double[][] currentPoints) 
		throws DataException, DataSecurityException
	{	
		System.out.println("MiddleCollateralArtery: " + componentID + "   " + parentID);
		
		int bodyID = 1;
		int projectID = 1;
		String vertices = "";
		
		ArrayList mySqlList= new ArrayList();
		int returnCode = 0;
	
		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();

		// MiddleCollateralArtery
		if (parentID.equals("MiddleCollateralArtery:01")) 
		{	
			// We can generate the MiddleCollateralArtery
			if (currentPoints == null )
			{
				double circumference = 0.00625;
				double[] startPos = {1.5, 0.25, 0.00};
				currentPoints = BioGraphics.octogonYPlane(startPos, circumference);
			}
			
			
			int numInstructions = 6;
			//BioMightOrientation bioMightOrientation = new BioMightOrientation(0.0, 0.0, 1.0, 90);
			for (int instructCount=0; instructCount<numInstructions; instructCount++)
			{
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
									
				// Place the appendage into the instruction set
				bioInstruct.setBioMightAppendage(null);
				bioInstruct.setFillAppendage(true); 
			
		
				if (instructCount==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.03, -1.0, -0.2);
				}	
				else if (instructCount==1){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.02, -1.0, -0.1);
				}
				else if (instructCount==2){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.05, -1.0, 0.05);
				}
				else if (instructCount==3){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.2, -0.75, -0.1);
				}
				else if (instructCount==4){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.175, -0.25, 0.0);
				}	
				else if (instructCount==5){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.175, -0.15, 0.0);
				}
				else if (instructCount==6){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, 0.0, 0.01);
				}			
				
				else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);
				}
									
						
				
	    		// Add the instruction into the instruction set
	    		bioMightInstructSet.addElement(bioInstruct);
			}
		// MiddleCollateralArtery		    
		} else if (parentID.equals("MiddleCollateralArtery:02")) {	

	
			int numInstructions = 6;
			//BioMightOrientation bioMightOrientation = new BioMightOrientation(0.0, 0.0, 1.0, 90);
			for (int instructCount=0; instructCount<numInstructions; instructCount++)
			{
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
									
				// Place the appendage into the instruction set
				bioInstruct.setBioMightAppendage(null);
				bioInstruct.setFillAppendage(true); 
			
		
				if (instructCount==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.03, -1.0, -0.2);
				}	
				else if (instructCount==1){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.02, -1.0, -0.25);
				}
				else if (instructCount==2){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.05, -1.0, -0.28);
				}
				else if (instructCount==3){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.2, -0.75, 0.0);
				}
				else if (instructCount==4){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.175, -0.25, 0.0);
				}	
				else if (instructCount==5){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, 0.0, 0.0);
				}			
				
				else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);
				}
									
						
					
		    	// Add the instruction into the instruction set
		    	bioMightInstructSet.addElement(bioInstruct);
			}
		}

		
		DBUtils.generateFacedComponents(Constants.QUADRANGLE, startID, componentType, componentName, componentID, currentPoints, bioMightInstructSet);
		System.out.println("Generating the Rows for MiddleCollateralArteryEndothelium: " + componentID + "   " + componentType);

		
		return returnCode;
	}

	
	/***************************************************************************************
	 * GENERATE AnteriorUlnarRecurrentArtery
	 * 
	 * This generates the AnteriorUlnarRecurrent Artery. This flows from the Deep Brachial artery
	 *
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/
	  	
	public int generateAnteriorUlnarRecurrentArtery(String startID, String componentType, String componentName, String componentID,  String parentID, double[][] currentPoints) 
		throws DataException, DataSecurityException
	{	
		System.out.println("AnteriorUlnarRecurrentArtery: " + componentID + "   " + parentID);
		
		int bodyID = 1;
		int projectID = 1;
		String vertices = "";
		
		ArrayList mySqlList= new ArrayList();
		int returnCode = 0;
	
		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();

		// RadialCollateralArtery
		if (parentID.equals("AnteriorUlnarRecurrentArtery:01")) 
		{	
			// We can generate the RadialCollateralArtery
			if (currentPoints == null )
			{
				double circumference = 0.00625;
				double[] startPos = {1.5, 0.25, -0.5};
				currentPoints = BioGraphics.octogonYPlane(startPos, circumference);
			}
			
			int numInstructions = 3;
			//BioMightOrientation bioMightOrientation = new BioMightOrientation(0.0, 0.0, 1.0, 90);
			for (int instructCount=0; instructCount<numInstructions; instructCount++)
			{
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
									
				// Place the appendage into the instruction set
				bioInstruct.setBioMightAppendage(null);
				bioInstruct.setFillAppendage(true); 
			
		
				if (instructCount==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.00, -0.25, -0.05);
				}	
				else if (instructCount==1){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -0.25, -0.075);
				}
				else if (instructCount==2){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -0.25, -0.075);
				}	
				else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -0.25, 0.0);
				}
									
				
	    		// Add the instruction into the instruction set
	    		bioMightInstructSet.addElement(bioInstruct);
			}
		// RadialCollateralArtery		    
		} else if (parentID.equals("AnteriorUlnarRecurrentArtery:02")) {	

			// We can generate the RadialCollateralArtery
			if (currentPoints == null )
			{
				double circumference = 0.00625;
				double[] startPos = {-1.5, 0.25, 0.00};
				currentPoints = BioGraphics.octogonYPlane(startPos, circumference);
			}
			
			int numInstructions = 3;
			//BioMightOrientation bioMightOrientation = new BioMightOrientation(0.0, 0.0, 1.0, 90);
			for (int instructCount=0; instructCount<numInstructions; instructCount++)
			{
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
					
				// Place the appendage into the instruction set
				bioInstruct.setBioMightAppendage(null);
				bioInstruct.setFillAppendage(true); 
				
				
				if (instructCount==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.00, -0.25, -0.05);
				}	
				else if (instructCount==1){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -0.25, -0.075);
				}
				else if (instructCount==2){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -0.25, -0.075);
				}	
				else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -0.25, 0.0);
				}		
				
				
		    	// Add the instruction into the instruction set
		    	bioMightInstructSet.addElement(bioInstruct);
			}
		}

		
		DBUtils.generateFacedComponents(Constants.QUADRANGLE, startID, componentType, componentName, componentID, currentPoints, bioMightInstructSet);
		System.out.println("Generating the Rows for AnteriorUlnarRecurrentArtery Endothelium: " + componentID + "   " + componentType);

		
		return returnCode;
	}

	/***************************************************************************************
	 * GENERATE PosteriorUlnarRecurrentArtery
	 * 
	 * This generates the PosteriorUlnarRecurrent Artery. This flows from the Deep Brachial artery
	 *
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/
	  	
	public int generatePosteriorUlnarRecurrentArtery(String startID, String componentType, String componentName, String componentID,  String parentID, double[][] currentPoints) 
		throws DataException, DataSecurityException
	{	
		System.out.println("PosteriorUlnarRecurrentArtery: " + componentID + "   " + parentID);
		
		int bodyID = 1;
		int projectID = 1;
		String vertices = "";
		
		ArrayList mySqlList= new ArrayList();
		int returnCode = 0;
	
		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();

		// RadialCollateralArtery
		if (parentID.equals("PosteriorUlnarRecurrentArtery:01")) 
		{	
			// We can generate the RadialCollateralArtery
			if (currentPoints == null )
			{
				double circumference = 0.00625;
				double[] startPos = {1.5, 0.25, -0.5};
				currentPoints = BioGraphics.octogonYPlane(startPos, circumference);
			}
			
			int numInstructions = 7;
			//BioMightOrientation bioMightOrientation = new BioMightOrientation(0.0, 0.0, 1.0, 90);
			for (int instructCount=0; instructCount<numInstructions; instructCount++)
			{
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
									
				// Place the appendage into the instruction set
				bioInstruct.setBioMightAppendage(null);
				bioInstruct.setFillAppendage(true); 
			
		
				if (instructCount==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.00, -0.25, 0.075);
				}	
				else if (instructCount==1){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -0.25, 0.1);
				}
				else if (instructCount==2){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -0.25, 0.2);
				}	
				else if (instructCount==3){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.05, -0.25, 0.25);
				}
				else if (instructCount==4){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.02, -0.25, 0.20);
				}
				else if (instructCount==5){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.01, -0.15, 0.21);
				}
				else if (instructCount==6){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -0.10, 0.19);
				}
				else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -0.25, 0.0);
				}
									
				
	    		// Add the instruction into the instruction set
	    		bioMightInstructSet.addElement(bioInstruct);
			}
		// RadialCollateralArtery		    
		} else if (parentID.equals("PosteriorUlnarRecurrentArtery:02")) {	

			// We can generate the RadialCollateralArtery
			if (currentPoints == null )
			{
				double circumference = 0.00625;
				double[] startPos = {-1.5, 0.25, 0.00};
				currentPoints = BioGraphics.octogonYPlane(startPos, circumference);
			}
			
			int numInstructions = 3;
			//BioMightOrientation bioMightOrientation = new BioMightOrientation(0.0, 0.0, 1.0, 90);
			for (int instructCount=0; instructCount<numInstructions; instructCount++)
			{
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
					
				// Place the appendage into the instruction set
				bioInstruct.setBioMightAppendage(null);
				bioInstruct.setFillAppendage(true); 
				
				if (instructCount==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.00, -0.25, 0.05);
				}	
				else if (instructCount==1){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -0.25, 0.075);
				}
				else if (instructCount==2){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -0.25, 0.075);
				}	
				else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -0.25, 0.0);
				}	
				
				
		    	// Add the instruction into the instruction set
		    	bioMightInstructSet.addElement(bioInstruct);
			}
		}

		
		DBUtils.generateFacedComponents(Constants.QUADRANGLE, startID, componentType, componentName, componentID, currentPoints, bioMightInstructSet);
		System.out.println("Generating the Rows for PosteriorUlnarRecurrentArtery Endothelium: " + componentID + "   " + componentType);

		
		return returnCode;
	}

	/***************************************************************************************
	 * GENERATE RadialRecurrentArtery
	 * 
	 * This generates the RadialRecurrent Artery. This flows from the Deep Brachial artery
	 *
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/
	  	
	public int generateRadialRecurrentArtery(String startID, String componentType, String componentName, String componentID,  String parentID, double[][] currentPoints) 
		throws DataException, DataSecurityException
	{	
		System.out.println("RadialRecurrentArtery: " + componentID + "   " + parentID);
		
		int bodyID = 1;
		int projectID = 1;
		String vertices = "";
		
		ArrayList mySqlList= new ArrayList();
		int returnCode = 0;
	
		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();

		// RadialRecurrentArtery
		if (parentID.equals("RadialRecurrentArtery:01")) 
		{	
			// We can generate the RadialCollateralArtery
			if (currentPoints == null )
			{
				double circumference = 0.00625;
				double[] startPos = {1.5, 0.25, -0.5};
				currentPoints = BioGraphics.octogonYPlane(startPos, circumference);
			}
			
			int numInstructions = 4;
			//BioMightOrientation bioMightOrientation = new BioMightOrientation(0.0, 0.0, 1.0, 90);
			for (int instructCount=0; instructCount<numInstructions; instructCount++)
			{
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
									
				// Place the appendage into the instruction set
				bioInstruct.setBioMightAppendage(null);
				bioInstruct.setFillAppendage(true); 
			
				if (instructCount==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.05, -0.25, 0.0);
				}
				else if (instructCount==1){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.2, -0.75, 0.0);
				}
				else if (instructCount==2){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.175, -0.25, 0.0);
				}	
				else if (instructCount==3){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, 0.0, 0.0);
				}				
				else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);
				}
									
				
	    		// Add the instruction into the instruction set
	    		bioMightInstructSet.addElement(bioInstruct);
			}
		// RadialRecurrentArtery		    
		} else if (parentID.equals("RadialRecurrentArtery:02")) {	

			// We can generate the RadialCollateralArtery
			if (currentPoints == null )
			{
				double circumference = 0.00625;
				double[] startPos = {-1.5, 0.25, 0.00};
				currentPoints = BioGraphics.octogonYPlane(startPos, circumference);
			}
			
			int numInstructions = 4;
			//BioMightOrientation bioMightOrientation = new BioMightOrientation(0.0, 0.0, 1.0, 90);
			for (int instructCount=0; instructCount<numInstructions; instructCount++)
			{
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
					
				// Place the appendage into the instruction set
				bioInstruct.setBioMightAppendage(null);
				bioInstruct.setFillAppendage(true); 
				
				if (instructCount==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.05, -0.25, 0.0);
				}
				else if (instructCount==1){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.2, -0.75, 0.0);
				}
				else if (instructCount==2){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.175, -0.25, 0.0);
				}	
				else if (instructCount==3){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, 0.0, 0.0);
				}				
				else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);
				}		
				
				
		    	// Add the instruction into the instruction set
		    	bioMightInstructSet.addElement(bioInstruct);
			}
		}

		
		DBUtils.generateFacedComponents(Constants.QUADRANGLE, startID, componentType, componentName, componentID, currentPoints, bioMightInstructSet);
		System.out.println("Generating the Rows for RadialRecurrentArtery Endothelium: " + componentID + "   " + componentType);

		
		return returnCode;
	}

	
	/***************************************************************************************
	 * GENERATE Anterior Interosseous Artery
	 * 
	 * This generates the Anterior Interosseous Artery. This flows from the Deep Brachial artery
	 *
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/
	  	
	public int generateAnteriorInterosseousArtery(String startID, String componentType, String componentName, String componentID,  String parentID, double[][] currentPoints) 
		throws DataException, DataSecurityException
	{	
		System.out.println("generateAnteriorInterosseousArtery: " + componentID + "   " + parentID);
		
		int bodyID = 1;
		int projectID = 1;
		String vertices = "";
		
		ArrayList mySqlList= new ArrayList();
		int returnCode = 0;
	
		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();

		// AnteriorInterosseousArtery
		if (parentID.equals("AnteriorInterosseousArtery:01")) 
		{	
			// We can generate the AnteriorInterosseousArtery
			if (currentPoints == null )
			{
				double circumference = 0.00625;
				double[] startPos = {1.5, 0.25, -0.5};
				currentPoints = BioGraphics.octogonYPlane(startPos, circumference);
			}
			
			int numInstructions = 3;
			//BioMightOrientation bioMightOrientation = new BioMightOrientation(0.0, 0.0, 1.0, 90);
			for (int instructCount=0; instructCount<numInstructions; instructCount++)
			{
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
									
				// Place the appendage into the instruction set
				bioInstruct.setBioMightAppendage(null);
				bioInstruct.setFillAppendage(true); 
			
		
				if (instructCount==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.03, -1.0, 0.2);
				}	
				else if (instructCount==1){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.05, -1.0, 0.25);
				}
				else if (instructCount==2){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.08, -1.0, 0.28);
				}
			
					
				
				else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);
				}
									
				
	    		// Add the instruction into the instruction set
	    		bioMightInstructSet.addElement(bioInstruct);
			}
		// AnteriorInterosseousArtery		    
		} else if (parentID.equals("AnteriorInterosseousArtery:02")) {	

			// We can generate the AnteriorInterosseousArtery
			if (currentPoints == null )
			{
				double circumference = 0.00625;
				double[] startPos = {-1.5, 0.25, 0.00};
				currentPoints = BioGraphics.octogonYPlane(startPos, circumference);
			}
			
			int numInstructions = 3;
			//BioMightOrientation bioMightOrientation = new BioMightOrientation(0.0, 0.0, 1.0, 90);
			for (int instructCount=0; instructCount<numInstructions; instructCount++)
			{
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
					
				// Place the appendage into the instruction set
				bioInstruct.setBioMightAppendage(null);
				bioInstruct.setFillAppendage(true); 
				
				if (instructCount==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.03, -1.0, 0.1);
				}	
				else if (instructCount==1){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.02, -1.0, 0.2);
				}
				else if (instructCount==2){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.05, -1.0, 0.15);
				}
				else if (instructCount==3){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.2, -0.75, 0.1);
				}
				else if (instructCount==4){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.175, -0.75, 0.15);
				}	
				else if (instructCount==5){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.075, -0.25, 0.075);
				}			
				
				
		    	// Add the instruction into the instruction set
		    	bioMightInstructSet.addElement(bioInstruct);
			}
		}

		
		DBUtils.generateFacedComponents(Constants.QUADRANGLE, startID, componentType, componentName, componentID, currentPoints, bioMightInstructSet);
		System.out.println("Generating the Rows for AnteriorInterosseousArteryEndothelium: " + componentID + "   " + componentType);

		
		return returnCode;
	}


	/***************************************************************************************
	 * GENERATE Posterior Interosseous Artery
	 * 
	 * This generates the Posterior Interosseous Artery. This flows from the Deep Brachial artery
	 *
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/
	  	
	public int generatePosteriorInterosseousArtery(String startID, String componentType, String componentName, String componentID,  String parentID, double[][] currentPoints) 
		throws DataException, DataSecurityException
	{	
		System.out.println("generatePosteriorInterosseousArtery: " + componentID + "   " + parentID);
		
		int bodyID = 1;
		int projectID = 1;
		String vertices = "";
		
		ArrayList mySqlList= new ArrayList();
		int returnCode = 0;
	
		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();

		// PosteriorInterosseousArtery
		if (parentID.equals("PosteriorInterosseousArtery:01")) 
		{	
			// We can generate the PosteriorInterosseousArtery
			if (currentPoints == null )
			{
				double circumference = 0.00625;
				double[] startPos = {1.5, 0.25, -0.5};
				currentPoints = BioGraphics.octogonYPlane(startPos, circumference);
			}
			
			int numInstructions = 4;
			//BioMightOrientation bioMightOrientation = new BioMightOrientation(0.0, 0.0, 1.0, 90);
			for (int instructCount=0; instructCount<numInstructions; instructCount++)
			{
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
									
				// Place the appendage into the instruction set
				bioInstruct.setBioMightAppendage(null);
				bioInstruct.setFillAppendage(true); 
			
		
				if (instructCount==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -0.75, 0.0);
				}	
				else if (instructCount==1){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.05, -0.75, 0.02);
				}
				else if (instructCount==2){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.03, -0.75, 0.01);
				}
				else if (instructCount==3){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.02, -0.75, 0.01);
				}
			
					
				
				else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);
				}
									
				
	    		// Add the instruction into the instruction set
	    		bioMightInstructSet.addElement(bioInstruct);
			}
		// PosteriorInterosseousArtery		    
		} else if (parentID.equals("PosteriorInterosseousArtery:02")) {	

			// We can generate the PosteriorInterosseousArtery
			if (currentPoints == null )
			{
				double circumference = 0.00625;
				double[] startPos = {-1.5, 0.25, 0.00};
				currentPoints = BioGraphics.octogonYPlane(startPos, circumference);
			}
			
			int numInstructions = 3;
			//BioMightOrientation bioMightOrientation = new BioMightOrientation(0.0, 0.0, 1.0, 90);
			for (int instructCount=0; instructCount<numInstructions; instructCount++)
			{
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
					
				// Place the appendage into the instruction set
				bioInstruct.setBioMightAppendage(null);
				bioInstruct.setFillAppendage(true); 
				
				if (instructCount==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.03, -1.0, 0.1);
				}	
				else if (instructCount==1){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.02, -1.0, 0.2);
				}
				else if (instructCount==2){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.05, -1.0, 0.15);
				}
				else if (instructCount==3){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.2, -0.75, 0.1);
				}
				else if (instructCount==4){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.175, -0.75, 0.15);
				}	
				else if (instructCount==5){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.075, -0.25, 0.075);
				}			
				
				
		    	// Add the instruction into the instruction set
		    	bioMightInstructSet.addElement(bioInstruct);
			}
		}

		
		DBUtils.generateFacedComponents(Constants.QUADRANGLE, startID, componentType, componentName, componentID, currentPoints, bioMightInstructSet);
		System.out.println("Generating the Rows for PosteriorInterosseousArteryEndothelium: " + componentID + "   " + componentType);

		
		return returnCode;
	}

	
	/***************************************************************************************
	 * GENERATE Interosseous Recurrent Artery
	 * 
	 * This generates the Interosseous Recurrent Artery. This flows from the Deep Brachial artery
	 *
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/
	  	
	public int generateInterosseousRecurrentArtery(String startID, String componentType, String componentName, String componentID,  String parentID, double[][] currentPoints) 
		throws DataException, DataSecurityException
	{	
		System.out.println("generateInterosseousRecurrentArtery: " + componentID + "   " + parentID);
		
		int bodyID = 1;
		int projectID = 1;
		String vertices = "";
		
		ArrayList mySqlList= new ArrayList();
		int returnCode = 0;
	
		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();

		// InterosseousRecurrentArtery
		if (parentID.equals("InterosseousRecurrentArtery:01")) 
		{	
			// We can generate the PosteriorInterosseousArtery
			if (currentPoints == null )
			{
				double circumference = 0.00625;
				double[] startPos = {1.5, 0.25, -0.5};
				currentPoints = BioGraphics.octogonYPlane(startPos, circumference);
			}
			
			int numInstructions = 4;
			//BioMightOrientation bioMightOrientation = new BioMightOrientation(0.0, 0.0, 1.0, 90);
			for (int instructCount=0; instructCount<numInstructions; instructCount++)
			{
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
									
				// Place the appendage into the instruction set
				bioInstruct.setBioMightAppendage(null);
				bioInstruct.setFillAppendage(true); 
			
		
				if (instructCount==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.2, -0.75, 0.05);
				}	
				else if (instructCount==1){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.05, -0.5, 0.02);
				}
				else if (instructCount==2){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.025, -0.75, 0.04);
				}
				else if (instructCount==3){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -0.75, 0.03);
				}
				
				else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);
				}
									
				
	    		// Add the instruction into the instruction set
	    		bioMightInstructSet.addElement(bioInstruct);
			}
		// InterosseousRecurrentArtery		    
		} else if (parentID.equals("InterosseousRecurrentArtery:02")) {	

			// We can generate the InterosseousRecurrentArtery
			if (currentPoints == null )
			{
				double circumference = 0.00625;
				double[] startPos = {-1.5, 0.25, 0.00};
				currentPoints = BioGraphics.octogonYPlane(startPos, circumference);
			}
			
			int numInstructions = 4;
			//BioMightOrientation bioMightOrientation = new BioMightOrientation(0.0, 0.0, 1.0, 90);
			for (int instructCount=0; instructCount<numInstructions; instructCount++)
			{
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
					
				// Place the appendage into the instruction set
				bioInstruct.setBioMightAppendage(null);
				bioInstruct.setFillAppendage(true); 
				
				if (instructCount==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.2, -0.75, 0.05);
				}	
				else if (instructCount==1){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.1, -0.5, -0.02);
				}
				else if (instructCount==2){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.025, -0.75, -0.01);
				}
				else if (instructCount==3){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -0.75, -0.01);
				}
				
				else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);
				}
			
				
				
		    	// Add the instruction into the instruction set
		    	bioMightInstructSet.addElement(bioInstruct);
			}
		}

		
		DBUtils.generateFacedComponents(Constants.QUADRANGLE, startID, componentType, componentName, componentID, currentPoints, bioMightInstructSet);
		System.out.println("Generating the Rows for PosteriorInterosseousArteryEndothelium: " + componentID + "   " + componentType);

		
		return returnCode;
	}

	/***************************************************************************************
	 * GENERATE ULNAR ARTERY
	 * 
	 * This generates the Ulnar Artery. 
	 *
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/
	  	
	public int generateUlnarArtery(String startID, String componentType, String componentName, String componentID,  String parentID, double[][] currentPoints) 
		throws DataException, DataSecurityException
	{	
		System.out.println("UlnarArtery: " + componentID + "   " + parentID);
		
		int bodyID = 1;
		int projectID = 1;
		String vertices = "";
		
		ArrayList mySqlList= new ArrayList();
		int returnCode = 0;
	
		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();

		// UlnarArtery
		if (parentID.equals("UlnarArtery:02")) 
		{	
			// We can generate the UlnarArtery
			if (currentPoints == null )
			{
				double circumference = 0.00625;
				double[] startPos = {1.75, 0.25, 0.00};
				currentPoints = BioGraphics.octogonYPlane(startPos, circumference);
			}
			int numInstructions = 10;
			//BioMightOrientation bioMightOrientation = new BioMightOrientation(0.0, 0.0, 1.0, 90);
			for (int instructCount=0; instructCount<numInstructions; instructCount++)
			{
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
				
				if (instructCount==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.450, -1.0, 0.0);
				}
				else if (instructCount==1){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.350, -1.0, 0.0);
				}
				else if (instructCount==2){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.25, -1.0, 0.0);
				}
				else if (instructCount==3){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.05, -1.0, 0.0);
				}	
				else if (instructCount==4){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.075, -1.0, 0.15);
				}	
				else if (instructCount==5){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.1, -1.0, 0.0);
				}	
				else if (instructCount==6){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.06, -1.0, 0.0);
				}	
				else if (instructCount==7){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.05, -1.0, 0.0);
				}	
				else if (instructCount==8){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.03, -0.5, 0.0);
				}	
				else if (instructCount==9){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.02, -0.5, 0.0);
				}	
		
			
				else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);
				}		
				
	    		// Add the instruction into the instruction set
	    		bioMightInstructSet.addElement(bioInstruct);
			}
			
		// UlnarArtery		    
		} else if (parentID.equals("UlnarArtery:01")) {	
			
			// We can generate the UlnarArtery
			if (currentPoints == null )
			{
				double circumference = 0.00625;
				double[] startPos = {-1.5, 0.25, 0.00};
				currentPoints = BioGraphics.octogonYPlane(startPos, circumference);
			}
	     
			int numInstructions = 10;
			//BioMightOrientation bioMightOrientation = new BioMightOrientation(0.0, 0.0, 1.0, 90);
			for (int instructCount=0; instructCount<numInstructions; instructCount++)
			{
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
				
				if (instructCount==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.450, -1.0, 0.0);
				}
				else if (instructCount==1){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.350, -1.0, 0.0);
				}
				else if (instructCount==2){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.25, -1.0, 0.0);
				}
				else if (instructCount==3){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.05, -1.0, 0.0);
				}	
				else if (instructCount==4){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.075, -1.0, 0.15);
				}	
				else if (instructCount==5){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.1, -1.0, 0.0);
				}	
				else if (instructCount==6){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.06, -1.0, 0.0);
				}	
				else if (instructCount==7){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.05, -1.0, 0.0);
				}	
				else if (instructCount==8){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.03, -0.5, 0.0);
				}	
				else if (instructCount==9){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.02, -0.5, 0.0);
				}	
				else {
				bioInstruct.setTransType(Constants.TRANSLATE);
				bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);
				}				
				
		    	// Add the instruction into the instruction set
		    	bioMightInstructSet.addElement(bioInstruct);
			}
		}

		
		DBUtils.generateFacedComponents(Constants.QUADRANGLE, startID, componentType, componentName, componentID, currentPoints, bioMightInstructSet);
		System.out.println("Generating the Rows for UlnarArteryEndothelium: " + componentID + "   " + componentType);

		
		return returnCode;
	}
	
	
	/***************************************************************************************
	 * GENERATE BASILIC VEIN
	 * 
	 * This generates the Basilic Vein. 
	 *
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/
	  	
	public int generateBasilicVein(String startID, String componentType, String componentName, String componentID,  String parentID, double[][] currentPoints) 
		throws DataException, DataSecurityException
	{	
		System.out.println("BasilicVein: " + componentID + "   " + parentID);
		
		int bodyID = 1;
		int projectID = 1;
		String vertices = "";
		
		ArrayList mySqlList= new ArrayList();
		int returnCode = 0;
	
		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();

		// BasilicVein
		if (parentID.equals("BasilicVein:01")) 
		{	
			// We can generate the BasilicVein
			if (currentPoints == null )
			{
				double circumference = 0.00625;
				double[] startPos = {1.5, 0.25, 0.00};
				currentPoints = BioGraphics.octogonYPlane(startPos, circumference);
			}
			
			int nMaxSegs = 8;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
		
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
	     
				if (numSegs==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.50, -1.0, 0.0);
				}
				else if (numSegs==1){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.20, -1.0, -0.15);
				}
				else if (numSegs==2){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.35, -1.0, 0.0);
				}
				else if (numSegs==3){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -1.0, -0.10);
				}	
				else if (numSegs==4){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);
				}	
				else if (numSegs==5){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.05, -1.0, 0.0);
				}	
				else if (numSegs==6){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -1.0, -0.15);
				}	
				else if (numSegs==7){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.10, -1.0, 0.0);
				}	
				
				
				else if (numSegs==8){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);
				}	
				else if (numSegs==9){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);
				}	
				else if (numSegs==10){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);
				}
				else if (numSegs==11){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);
				}
				else if (numSegs==12){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);
				}
				else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);
				}
				
				
	    		// Add the instruction into the instruction set
	    		bioMightInstructSet.addElement(bioInstruct);
			}
		// BasilicVein		    
		} 
		else if (parentID.equals("BasilicVein:02")) {	
			int nMaxSegs = 8;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
				
				// We can generate the BasilicVein
				if (currentPoints == null )
				{
					double circumference = 0.00625;
					double[] startPos = {-1.5, 0.25, 0.00};
					currentPoints = BioGraphics.octogonYPlane(startPos, circumference);
				}
			
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
	     
			     
			     
						if (numSegs==0){
							bioInstruct.setTransType(Constants.TRANSLATE);
							bioInstruct.setTranslateMatrix(-0.50, -1.0, 0.0);
						}
						else if (numSegs==1){
							bioInstruct.setTransType(Constants.TRANSLATE);
							bioInstruct.setTranslateMatrix(-0.20, -1.0, -0.15);
						}
						else if (numSegs==2){
							bioInstruct.setTransType(Constants.TRANSLATE);
							bioInstruct.setTranslateMatrix(-0.35, -1.0, 0.0);
						}
						else if (numSegs==3){
							bioInstruct.setTransType(Constants.TRANSLATE);
							bioInstruct.setTranslateMatrix(0.0, -1.0, -0.10);
						}	
						else if (numSegs==4){
							bioInstruct.setTransType(Constants.TRANSLATE);
							bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);
						}	
						else if (numSegs==5){
							bioInstruct.setTransType(Constants.TRANSLATE);
							bioInstruct.setTranslateMatrix(-0.05, -1.0, 0.0);
						}	
						else if (numSegs==6){
							bioInstruct.setTransType(Constants.TRANSLATE);
							bioInstruct.setTranslateMatrix(0.0, -1.0, -0.15);
						}	
						else if (numSegs==7){
							bioInstruct.setTransType(Constants.TRANSLATE);
							bioInstruct.setTranslateMatrix(0.10, -1.0, 0.0);
						}
						
				else if (numSegs==8){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.05, -1.0, 0.0);
				}	
				else if (numSegs==9){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);
				}	
				else if (numSegs==10){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);
				}
				else if (numSegs==11){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);
				}
				else if (numSegs==12){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);
				}
				else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);
				}
						
					
		    	// Add the instruction into the instruction set
		    	bioMightInstructSet.addElement(bioInstruct);
			}
		}
		
			else if (parentID.equals("BasilicVein:03")) {	
				int nMaxSegs = 8;
				for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
					
					// We can generate the BasilicVein
					if (currentPoints == null )
					{
						double circumference = 0.00625;
						double[] startPos = {-1.5, 0.25, 0.00};
						currentPoints = BioGraphics.octogonYPlane(startPos, circumference);
					}
				
					// Create a place for an instruction 
					BioMightInstruction bioInstruct = new BioMightInstruction();
		     
		     
		     
					if (numSegs==0){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.50, -1.0, 0.0);
					}
					else if (numSegs==1){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.20, -1.0, -0.15);
					}
					else if (numSegs==2){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.35, -1.0, 0.0);
					}
					else if (numSegs==3){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.0, -1.0, -0.10);
					}	
					else if (numSegs==4){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);
					}	
					else if (numSegs==5){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.05, -1.0, 0.0);
					}	
					else if (numSegs==6){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.0, -1.0, -0.15);
					}	
					else if (numSegs==7){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.10, -1.0, 0.0);
					}
					
					else if (numSegs==8){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.05, -1.0, 0.0);
					}	
					else if (numSegs==9){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);
					}	
					else if (numSegs==10){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);
					}
					else if (numSegs==11){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);
					}
					else if (numSegs==12){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);
					}
					else {
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);
					}
							
						
			    	// Add the instruction into the instruction set
			    	bioMightInstructSet.addElement(bioInstruct);
				}
			
		}
		
			else if (parentID.equals("BasilicVein:04")) {	
				int nMaxSegs = 8;
				for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
					
					// We can generate the BasilicVein
					if (currentPoints == null )
					{
						double circumference = 0.00625;
						double[] startPos = {-1.5, 0.25, 0.00};
						currentPoints = BioGraphics.octogonYPlane(startPos, circumference);
					}
				
					// Create a place for an instruction 
					BioMightInstruction bioInstruct = new BioMightInstruction();
		     
				     
				     
							if (numSegs==0){
								bioInstruct.setTransType(Constants.TRANSLATE);
								bioInstruct.setTranslateMatrix(-0.50, -1.0, 0.0);
							}
							else if (numSegs==1){
								bioInstruct.setTransType(Constants.TRANSLATE);
								bioInstruct.setTranslateMatrix(-0.20, -1.0, -0.15);
							}
							else if (numSegs==2){
								bioInstruct.setTransType(Constants.TRANSLATE);
								bioInstruct.setTranslateMatrix(-0.35, -1.0, 0.0);
							}
							else if (numSegs==3){
								bioInstruct.setTransType(Constants.TRANSLATE);
								bioInstruct.setTranslateMatrix(0.0, -1.0, -0.10);
							}	
							else if (numSegs==4){
								bioInstruct.setTransType(Constants.TRANSLATE);
								bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);
							}	
							else if (numSegs==5){
								bioInstruct.setTransType(Constants.TRANSLATE);
								bioInstruct.setTranslateMatrix(-0.05, -1.0, 0.0);
							}	
							else if (numSegs==6){
								bioInstruct.setTransType(Constants.TRANSLATE);
								bioInstruct.setTranslateMatrix(0.0, -1.0, -0.15);
							}	
							else if (numSegs==7){
								bioInstruct.setTransType(Constants.TRANSLATE);
								bioInstruct.setTranslateMatrix(0.10, -1.0, 0.0);
							}
							
					else if (numSegs==8){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.05, -1.0, 0.0);
					}	
					else if (numSegs==9){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);
					}	
					else if (numSegs==10){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);
					}
					else if (numSegs==11){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);
					}
					else if (numSegs==12){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);
					}
					else {
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);
					}
							
						
			    	// Add the instruction into the instruction set
			    	bioMightInstructSet.addElement(bioInstruct);
				}

			}

		
		DBUtils.generateFacedComponents(Constants.QUADRANGLE, startID, componentType, componentName, componentID, currentPoints, bioMightInstructSet);
		System.out.println("Generating the Rows for BasilicVeinEndothelium: " + componentID + "   " + componentType);

		
		return returnCode;
	}
	

	/***************************************************************************************
	 * GENERATE CEPHALIC VEIN
	 * 
	 * This generates the Cephalic Vein. 
	 *
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/
	  	
	public int generateCephalicVein(String startID, String componentType, String componentName, String componentID,  String parentID, double[][] currentPoints) 
		throws DataException, DataSecurityException
	{	
		System.out.println("CephalicVein: " + componentID + "   " + parentID);
		
		int bodyID = 1;
		int projectID = 1;
		String vertices = "";
		
		ArrayList mySqlList= new ArrayList();
		int returnCode = 0;
	
		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();

		// CephalicVein
		if (parentID.equals("CephalicVein:01")) 
		{	
			// We can generate the CephalicVein
			if (currentPoints == null )
			{
				double circumference = 0.00625;
				double[] startPos = {1.5, 0.25, 0.00};
				currentPoints = BioGraphics.octogonYPlane(startPos, circumference);
			}
			
			int nMaxSegs = 8;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
		
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
	     
				if (numSegs==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.5, -1.0, 0.0);
				}
				else if (numSegs==1){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.25, -1.0, 0.0);
				}
				else if (numSegs==2){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);
				}
				else if (numSegs==3){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.10, -1.0, 0.15);
				}	
				else if (numSegs==4){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.20, -1.0, 0.0);
				}	
				else if (numSegs==5){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.30, -1.0, 0.0);
				}	
				else if (numSegs==6){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.15, -1.0, -0.15);
				}	
				else if (numSegs==7){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);
				}	
				
				else if (numSegs==8){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);
				}	
				else if (numSegs==9){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);
				}	
				else if (numSegs==10){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);
				}
				else if (numSegs==11){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);
				}
				else if (numSegs==12){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);
				}
				else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);
				}
				
				
	    		// Add the instruction into the instruction set
	    		bioMightInstructSet.addElement(bioInstruct);
			}
		// CephalicVein		    
		} else if (parentID.equals("CephalicVein:02")) {	
			int nMaxSegs = 8;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
				
				// We can generate the CephalicVein
				if (currentPoints == null )
				{
					double circumference = 0.00625;
					double[] startPos = {-1.5, 0.25, 0.00};
					currentPoints = BioGraphics.octogonYPlane(startPos, circumference);
				}
			
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
	     
			     
				if (numSegs==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.5, -1.0, 0.0);
				}
				else if (numSegs==1){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.25, -1.0, 0.0);
				}
				else if (numSegs==2){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);
				}
				else if (numSegs==3){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.10, -1.0, 0.15);
				}	
				else if (numSegs==4){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.20, -1.0, 0.0);
				}	
				else if (numSegs==5){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.30, -1.0, 0.0);
				}	
				else if (numSegs==6){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.15, -1.0, -0.15);
				}	
				else if (numSegs==7){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);
				}	
				
				
				
				else if (numSegs==8){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.05, -1.0, 0.0);
				}	
				else if (numSegs==9){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);
				}	
				else if (numSegs==10){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);
				}
				else if (numSegs==11){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);
				}
				else if (numSegs==12){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);
				}
				else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);
				}
						
					
		    	// Add the instruction into the instruction set
		    	bioMightInstructSet.addElement(bioInstruct);
			}
		}

		
		DBUtils.generateFacedComponents(Constants.QUADRANGLE, startID, componentType, componentName, componentID, currentPoints, bioMightInstructSet);
		System.out.println("Generating the Rows for CephalicVeinEndothelium: " + componentID + "   " + componentType);

		
		return returnCode;
	}
	
	/***************************************************************************************
	 * GENERATE CEPHALIC VEIN
	 * 
	 * This generates the Cephalic Vein. 
	 *
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/
	  	
	public int generateAccessoryCephalicVein(String startID, String componentType, String componentName, String componentID,  String parentID, double[][] currentPoints) 
		throws DataException, DataSecurityException
	{	
		System.out.println("AccessoryCephalicVein: " + componentID + "   " + parentID);
		
		int bodyID = 1;
		int projectID = 1;
		String vertices = "";
		
		ArrayList mySqlList= new ArrayList();
		int returnCode = 0;
	
		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();

		// AccessoryCephalicVein
		if (parentID.equals("AccessoryCephalicVein:01")) 
		{	
			// We can generate the AccessoryCephalicVein
			if (currentPoints == null )
			{
				double circumference = 0.00625;
				double[] startPos = {1.5, 0.25, 0.00};
				currentPoints = BioGraphics.octogonYPlane(startPos, circumference);
			}
			
			int nMaxSegs = 8;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
		
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
	     
				if (numSegs==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.5, -1.0, 0.0);
				}
				else if (numSegs==1){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.25, -1.0, 0.0);
				}
				else if (numSegs==2){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);
				}
				else if (numSegs==3){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.10, -1.0, 0.15);
				}	
				else if (numSegs==4){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.20, -1.0, 0.0);
				}	
				else if (numSegs==5){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.30, -1.0, 0.0);
				}	
				else if (numSegs==6){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.15, -1.0, -0.15);
				}	
				else if (numSegs==7){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);
				}	
				
				else if (numSegs==8){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);
				}	
				else if (numSegs==9){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);
				}	
				else if (numSegs==10){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);
				}
				else if (numSegs==11){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);
				}
				else if (numSegs==12){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);
				}
				else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);
				}
				
				
	    		// Add the instruction into the instruction set
	    		bioMightInstructSet.addElement(bioInstruct);
			}
		// AccessoryCephalicVein		    
		} else if (parentID.equals("AccessoryCephalicVein:02")) {	
			int nMaxSegs = 8;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
				
				// We can generate the AccessoryCephalicVein
				if (currentPoints == null )
				{
					double circumference = 0.00625;
					double[] startPos = {-1.5, 0.25, 0.00};
					currentPoints = BioGraphics.octogonYPlane(startPos, circumference);
				}
			
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
	     
			     
				if (numSegs==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.5, -1.0, 0.0);
				}
				else if (numSegs==1){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.25, -1.0, 0.0);
				}
				else if (numSegs==2){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);
				}
				else if (numSegs==3){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.10, -1.0, 0.15);
				}	
				else if (numSegs==4){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.20, -1.0, 0.0);
				}	
				else if (numSegs==5){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.30, -1.0, 0.0);
				}	
				else if (numSegs==6){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.15, -1.0, -0.15);
				}	
				else if (numSegs==7){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);
				}	
				
				
				
				else if (numSegs==8){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.05, -1.0, 0.0);
				}	
				else if (numSegs==9){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);
				}	
				else if (numSegs==10){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);
				}
				else if (numSegs==11){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);
				}
				else if (numSegs==12){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);
				}
				else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);
				}
						
					
		    	// Add the instruction into the instruction set
		    	bioMightInstructSet.addElement(bioInstruct);
			}
		}

		
		DBUtils.generateFacedComponents(Constants.QUADRANGLE, startID, componentType, componentName, componentID, currentPoints, bioMightInstructSet);
		System.out.println("Generating the Rows for AccessoryCephalicVeinEndothelium: " + componentID + "   " + componentType);

		
		return returnCode;
	}
	

	
	/***************************************************************************************
	 * GENERATE MENTAL VEIN
	 * 
	 * This generates the Mental Vein. 
	 *
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/
	  	
	public int generateMentalVein(String startID, String componentType, String componentName, String componentID,  String parentID, double[][] currentPoints) 
		throws DataException, DataSecurityException
	{	
		System.out.println("MentalVein: " + componentID + "   " + parentID);
		
		int bodyID = 1;
		int projectID = 1;
		String vertices = "";
		
		ArrayList mySqlList= new ArrayList();
		int returnCode = 0;
	
		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();

		// MentalVein
		if (parentID.equals("MentalVein:01")) 
		{	
			// We can generate the MentalVein
			if (currentPoints == null )
			{
				double circumference = 0.00625;
				double[] startPos = {1.5, 0.25, 0.00};
				currentPoints = BioGraphics.octogonYPlane(startPos, circumference);
			}
			
			int nMaxSegs = 4;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
		
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
	     
				if (numSegs==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.20, 0.0, -0.5);
				}
				else if (numSegs==1){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.25, 0.0, -0.5);
				}
				else if (numSegs==2){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.35, 0.0, -0.5);
				}
				else if (numSegs==3){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.5, 0.0, -0.5);
				}	
			
				else {
					bioInstruct.setPivotPoint(3);
					bioInstruct.setRotateVector(0.0, 0.0, 1.0);
					bioInstruct.setTransType(2);
					bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);
				}
				
				
	    		// Add the instruction into the instruction set
	    		bioMightInstructSet.addElement(bioInstruct);
			}
		// MentalVein		    
		} else if (parentID.equals("MentalVein:02")) {	
			int nMaxSegs = 4;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
				
				// We can generate the MentalVein
				if (currentPoints == null )
				{
					double circumference = 0.00625;
					double[] startPos = {-1.5, 0.25, 0.00};
					currentPoints = BioGraphics.octogonYPlane(startPos, circumference);
				}
			
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
	     
				if (numSegs==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.20, 0.0, -0.5);
				}
				else if (numSegs==1){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.25, 0.0, -0.5);
				}
				else if (numSegs==2){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.35, 0.0, -0.5);
				}
				else if (numSegs==3){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.5, 0.0, -0.5);
				}	
				else 
				{
				bioInstruct.setTransType(Constants.TRANSLATE);
				bioInstruct.setTranslateMatrix(0.00, 1.0, 0.0);
				}
					
					
		    	// Add the instruction into the instruction set
		    	bioMightInstructSet.addElement(bioInstruct);
			}
		}

		
		DBUtils.generateFacedComponents(Constants.QUADRANGLE, startID, componentType, componentName, componentID, currentPoints, bioMightInstructSet);
		System.out.println("Generating the Rows for MentalVeinEndothelium: " + componentID + "   " + componentType);

		
		return returnCode;
	}
	

	
	
	/***************************************************************************************
	 * GENERATE RANINE ARTERY
	 * 
	 * This generates the Ranine Artery. 
	 *
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/
	  	
	public int generateRanineArtery(String startID, String componentType, String componentName, String componentID,  String parentID, double[][] currentPoints) 
		throws DataException, DataSecurityException
	{	
		System.out.println("RanineArtery: " + componentID + "   " + parentID);
		
		int bodyID = 1;
		int projectID = 1;
		String vertices = "";
		
		ArrayList mySqlList= new ArrayList();
		int returnCode = 0;
	
		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();

		// RanineArtery
		if (parentID.equals("RanineArtery:01")) 
		{	
			// We can generate the RanineArtery
			if (currentPoints == null )
			{
				double circumference = 0.00625;
				double[] startPos = {1.5, 0.25, 0.00};
				currentPoints = BioGraphics.octogonYPlane(startPos, circumference);
			}
			
			int nMaxSegs = 3;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
		
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
	     
				if (numSegs==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, 0.0, 0.5);
				}
				else if (numSegs==1){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, 0.020, 0.5);
				}
				else if (numSegs==2){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, 0.020, 0.5);
				}
				else if (numSegs==3){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, 0.0, 0.5);
				}	
			
				else {
					bioInstruct.setPivotPoint(3);
					bioInstruct.setRotateVector(0.0, 0.0, 1.0);
					bioInstruct.setTransType(2);
					bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);
				}
				
				
	    		// Add the instruction into the instruction set
	    		bioMightInstructSet.addElement(bioInstruct);
			}
		// RanineArtery		    
		} else if (parentID.equals("RanineArtery:02")) {	
			int nMaxSegs = 3;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
				
				// We can generate the RanineArtery
				if (currentPoints == null )
				{
					double circumference = 0.00625;
					double[] startPos = {-1.5, 0.25, 0.00};
					currentPoints = BioGraphics.octogonZPlane(startPos, circumference);
				}
			
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
	     
				if (numSegs==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, 0.0, 0.5);
				}
				else if (numSegs==1){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, 0.020, 0.5);
				}
				else if (numSegs==2){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, 0.020, 0.5);
				}
				else if (numSegs==3){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, 0.0, 0.5);
				}
				else 
				{
				bioInstruct.setTransType(Constants.TRANSLATE);
				bioInstruct.setTranslateMatrix(0.00, 1.0, 0.0);
				}
					
					
		    	// Add the instruction into the instruction set
		    	bioMightInstructSet.addElement(bioInstruct);
			}
		}

		
		DBUtils.generateFacedComponents(Constants.QUADRANGLE, startID, componentType, componentName, componentID, currentPoints, bioMightInstructSet);
		System.out.println("Generating the Rows for RanineArteryEndothelium: " + componentID + "   " + componentType);

		
		return returnCode;
	}
	
	/***************************************************************************************
	 * GENERATE FRONTAL ARTERY
	 * 
	 * This generates the Frontal Artery. 
	 *
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/
	  	
	public int generateFrontalArtery(String startID, String componentType, String componentName, String componentID,  String parentID, double[][] currentPoints) 
		throws DataException, DataSecurityException
	{	
		System.out.println("FrontalArtery: " + componentID + "   " + parentID);
		
		int bodyID = 1;
		int projectID = 1;
		String vertices = "";
		
		ArrayList mySqlList= new ArrayList();
		int returnCode = 0;
	
		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();

		// FrontalArtery
		if (parentID.equals("FrontalArtery:01")) 
		{	
			// We can generate the FrontalArtery
			if (currentPoints == null )
			{
				double circumference = 0.00625;
				double[] startPos = {1.5, 0.25, 0.25};
				currentPoints = BioGraphics.octogonXPlane(startPos, circumference);
			}
			
			int nMaxSegs = 6;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
		
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
	     
				if (numSegs==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.5, 0.0, 0.0);
				}
				else if (numSegs==1){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.5, 0.0125, 0.0);
				}
				else if (numSegs==2){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.5, 0.0, 0.10);
				}	
				else if (numSegs==3){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.25, -0.0125, 0.05);
				}	
				else if (numSegs==4){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.25, -0.25, -0.20);
				}	
				else if (numSegs==5){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -0.25, -0.25);
				}
				else {
					bioInstruct.setPivotPoint(3);
					bioInstruct.setRotateVector(0.0, 0.0, 1.0);
					bioInstruct.setTransType(2);
					bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);
				}
				
				
	    		// Add the instruction into the instruction set
	    		bioMightInstructSet.addElement(bioInstruct);
			}
		// FrontalArtery		    
		} else if (parentID.equals("FrontalArtery:02")) {	
			int nMaxSegs = 6;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
				
				// We can generate the FrontalArtery
				if (currentPoints == null )
				{
					double circumference = 0.00625;
					double[] startPos = {-1.5, 0.25, 0.25};
					currentPoints = BioGraphics.octogonXPlane(startPos, circumference);
				}
			
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
	     
				if (numSegs==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.5, 0.0, 0.0);
				}
				else if (numSegs==1){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.5, 0.0125, 0.0);
				}
				else if (numSegs==2){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.5, 0.0, 0.10);
				}	
				else if (numSegs==3){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.25, -0.0125, 0.05);
				}	
				else if (numSegs==4){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.25, -0.25, -0.20);
				}	
				else if (numSegs==5){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -0.25, -0.25);
				}		
				else 
				{
				bioInstruct.setTransType(Constants.TRANSLATE);
				bioInstruct.setTranslateMatrix(0.00, 1.0, 0.0);
				}
					
					
		    	// Add the instruction into the instruction set
		    	bioMightInstructSet.addElement(bioInstruct);
			}
		}

		
		DBUtils.generateFacedComponents(Constants.QUADRANGLE, startID, componentType, componentName, componentID, currentPoints, bioMightInstructSet);
		System.out.println("Generating the Rows for FrontalArteryEndothelium: " + componentID + "   " + componentType);

		
		return returnCode;
	}

	/***************************************************************************************
	 * GENERATE STYLOMASTOID ARTERY
	 * 
	 * This generates the Stylomastoid Artery. 
	 *
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/
	  	
	public int generateStylomastoidArtery(String startID, String componentType, String componentName, String componentID,  String parentID, double[][] currentPoints) 
		throws DataException, DataSecurityException
	{	
		System.out.println("StylomastoidArtery: " + componentID + "   " + parentID);
		
		int bodyID = 1;
		int projectID = 1;
		String vertices = "";
		
		ArrayList mySqlList= new ArrayList();
		int returnCode = 0;
	
		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();

		// StylomastoidArtery
		if (parentID.equals("StylomastoidArtery:01")) 
		{	
			// We can generate the StylomastoidArtery
			if (currentPoints == null )
			{
				double circumference = 0.00625;
				double[] startPos = {1.5, 0.25, 0.25};
				currentPoints = BioGraphics.octogonXPlane(startPos, circumference);
			}
			
			int nMaxSegs = 5;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
		
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
	     
				if (numSegs==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, 0.5, -0.10);
				}
				else if (numSegs==1){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, 0.5, 0.0);
				}
				else if (numSegs==2){
					bioInstruct.setTranslateMatrix(-0.125, 0.5, -0.10);
				}	
				else if (numSegs==3){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, 0.5, 0.0);
				}	
				else if (numSegs==4){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, 0.5, 0.0);
				}	
				else if (numSegs==5){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, 0.5, 0.0);
				}
				else {
					bioInstruct.setPivotPoint(3);
					bioInstruct.setRotateVector(0.0, 0.0, 1.0);
					bioInstruct.setTransType(2);
					bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);
				}
				
				
	    		// Add the instruction into the instruction set
	    		bioMightInstructSet.addElement(bioInstruct);
			}
		// StylomastoidArtery		    
		} else if (parentID.equals("StylomastoidArtery:02")) {	
			int nMaxSegs = 5;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
				
				// We can generate the StylomastoidArtery
				if (currentPoints == null )
				{
					double circumference = 0.00625;
					double[] startPos = {-1.5, 0.25, 0.25};
					currentPoints = BioGraphics.octogonXPlane(startPos, circumference);
				}
			
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
	     

			     
				if (numSegs==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, 0.5, -0.10);
				}
				else if (numSegs==1){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, 0.5, 0.0);
				}
				else if (numSegs==2){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.125, 0.5, -0.10);
				}	
				else if (numSegs==3){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, 0.5, 0.0);
				}	
				else if (numSegs==4){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, 0.5, 0.0);
				}	
				else if (numSegs==5){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, 0.5, 0.0);
				}		
				else 
				{
				bioInstruct.setTransType(Constants.TRANSLATE);
				bioInstruct.setTranslateMatrix(0.00, 1.0, 0.0);
				}
					
					
		    	// Add the instruction into the instruction set
		    	bioMightInstructSet.addElement(bioInstruct);
			}
		}

		
		DBUtils.generateFacedComponents(Constants.QUADRANGLE, startID, componentType, componentName, componentID, currentPoints, bioMightInstructSet);
		System.out.println("Generating the Rows for StylomastoidArteryEndothelium: " + componentID + "   " + componentType);

		
		return returnCode;
	}
	
	
	/***************************************************************************************
	 * GENERATE MEDIAL PALPEBRAL ARTERY
	 * 
	 * This generates the MedialPalpebralArtery Artery. 
	 *
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/
	  	
	public int generateMedialPalpebralArtery(String startID, String componentType, String componentName, String componentID,  String parentID, double[][] currentPoints) 
		throws DataException, DataSecurityException
	{	
		System.out.println("MedialPalpebralArtery: " + componentID + "   " + parentID);
		
		int bodyID = 1;
		int projectID = 1;
		String vertices = "";
		
		ArrayList mySqlList= new ArrayList();
		int returnCode = 0;
	
		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();

		// MedialPalpebralArtery
		if (parentID.equals("MedialPalpebralArtery:01")) 
		{	
			// We can generate the MedialPalpebralArtery
			if (currentPoints == null )
			{
				double circumference = 0.00625;
				double[] startPos = {1.5, 0.25, 0.25};
				currentPoints = BioGraphics.octogonXPlane(startPos, circumference);
			}
			
			int nMaxSegs = 2;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
		
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
	     
				if (numSegs==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -0.10, -0.25);
				}
				else if (numSegs==1){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -0.10, -0.25);
				}
				else if (numSegs==2){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -0.10, -0.25);
				}
				else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -0.10, -0.25);
				}
				
				
	    		// Add the instruction into the instruction set
	    		bioMightInstructSet.addElement(bioInstruct);
			}
		// MedialPalpebralArtery		    
		} else if (parentID.equals("MedialPalpebralArtery:02")) {	
			int nMaxSegs = 2;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
				
				// We can generate the MedialPalpebralArtery
				if (currentPoints == null )
				{
					double circumference = 0.00625;
					double[] startPos = {-1.5, 0.25, 0.25};
					currentPoints = BioGraphics.octogonXPlane(startPos, circumference);
				}
			
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
	     
				if (numSegs==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -0.10, -0.25);
				}
				else if (numSegs==1){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -0.10, -0.25);
				}
				else if (numSegs==2){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -0.10, -0.25);
				}
				else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -0.10, -0.25);
				}			
					
		    	// Add the instruction into the instruction set
		    	bioMightInstructSet.addElement(bioInstruct);
			}
		}

		
		DBUtils.generateFacedComponents(Constants.QUADRANGLE, startID, componentType, componentName, componentID, currentPoints, bioMightInstructSet);
		System.out.println("Generating the Rows for MedialPalpebralArteryEndothelium: " + componentID + "   " + componentType);

		
		return returnCode;
	}
	
	
	/***************************************************************************************
	 * GENERATE CEREBELLAR ARTERY
	 * 
	 * This generates the Cerebellar Artery. 
	 *
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/
	  	
	public int generateCerebellarArtery(String startID, String componentType, String componentName, String componentID,  String parentID, double[][] currentPoints) 
		throws DataException, DataSecurityException
	{	
		System.out.println("CerebellarArtery: " + componentID + "   " + parentID);
		
		int bodyID = 1;
		int projectID = 1;
		String vertices = "";
		
		ArrayList mySqlList= new ArrayList();
		int returnCode = 0;
	
		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();

		// CerebellarArtery
		if (parentID.equals("CerebellarArtery:01")) 
		{	
			// We can generate the CerebellarArtery
			if (currentPoints == null )
			{
				double circumference = 0.00625;
				double[] startPos = {1.5, 0.25, 0.25};
				currentPoints = BioGraphics.octogonXPlane(startPos, circumference);
			}
				
			int nMaxSegs = 6;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
		
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
	     
				if (numSegs==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, 0.5, -0.25);
				}
				else if (numSegs==1){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, 0.5, -0.25);
				}
				else if (numSegs==2){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, 0.5, -0.25);
				}	
				else if (numSegs==3){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, 0.5, -0.25);
				}	
				else if (numSegs==4){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, 0.5, -0.25);
				}	
				else if (numSegs==5){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, 0.5, -0.25);
				}
				else {
					bioInstruct.setPivotPoint(3);
					bioInstruct.setRotateVector(0.0, 0.0, 1.0);
					bioInstruct.setTransType(2);
					bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);
				}
				
				
	    		// Add the instruction into the instruction set
	    		bioMightInstructSet.addElement(bioInstruct);
			}	
		// CerebellarArtery		    
		} 
		
		else if (parentID.equals("CerebellarArtery:02")) 
		{	
			int nMaxSegs = 6;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
				
				// We can generate the CerebellarArtery
				if (currentPoints == null )
				{
					double circumference = 0.00625;
					double[] startPos = {-1.5, 0.25, 0.25};
					currentPoints = BioGraphics.octogonXPlane(startPos, circumference);
				}
			
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
	     
				if (numSegs==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.5, 0.0, 0.0);
				}
				else if (numSegs==1){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.5, 0.0125, 0.0);
				}
				else if (numSegs==2){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.5, 0.0, 0.10);
				}	
				else if (numSegs==3){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.25, -0.0125, 0.05);
				}	
				else if (numSegs==4){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.25, -0.25, -0.20);
				}	
				else if (numSegs==5){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -0.25, -0.25);
				}		
				else 
				{
				bioInstruct.setTransType(Constants.TRANSLATE);
				bioInstruct.setTranslateMatrix(0.00, 1.0, 0.0);
				}
					
					
		    	// Add the instruction into the instruction set
		    	bioMightInstructSet.addElement(bioInstruct);
			}
		}
		
		else if (parentID.equals("CerebellarArtery:03")) 
		{	
			int nMaxSegs = 6;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
				
				// We can generate the CerebellarArtery
				if (currentPoints == null )
				{
					double circumference = 0.00625;
					double[] startPos = {-1.5, 0.25, 0.25};
					currentPoints = BioGraphics.octogonXPlane(startPos, circumference);
				}
			
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
	     
				if (numSegs==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.5, 0.0, 0.0);
				}
				else if (numSegs==1){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.5, 0.0125, 0.0);
				}
				else if (numSegs==2){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.5, 0.0, 0.10);
				}	
				else if (numSegs==3){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.25, -0.0125, 0.05);
				}	
				else if (numSegs==4){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.25, -0.25, -0.20);
				}	
				else if (numSegs==5){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -0.25, -0.25);
				}		
				else 
				{
				bioInstruct.setTransType(Constants.TRANSLATE);
				bioInstruct.setTranslateMatrix(0.00, 1.0, 0.0);
				}
					
					
		    	// Add the instruction into the instruction set
		    	bioMightInstructSet.addElement(bioInstruct);
			}
		}
	

		DBUtils.generateFacedComponents(Constants.QUADRANGLE, startID, componentType, componentName, componentID, currentPoints, bioMightInstructSet);
		System.out.println("Generating the Rows for CerebellarArteryEndothelium: " + componentID + "   " + componentType);

		
		return returnCode;
	}

	/***************************************************************************************
	 * GENERATE SUPERIOR CEREBELLAR ARTERY
	 * 
	 * This generates the SuperiorCerebellar Artery. 
	 *
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/
	  	
	public int generateSuperiorCerebellarArtery(String startID, String componentType, String componentName, String componentID,  String parentID, double[][] currentPoints) 
		throws DataException, DataSecurityException
	{	
		System.out.println("SuperiorCerebellarArtery: " + componentID + "   " + parentID);
		
		int bodyID = 1;
		int projectID = 1;
		String vertices = "";
		
		ArrayList mySqlList= new ArrayList();
		int returnCode = 0;
	
		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();

	
		
		// Artery
		if (parentID.equals("SuperiorCerebellarArtery:01")) 
		{	
			int nMaxSegs = 10;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
		
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
	     
				  
				if (numSegs==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.18, 0.0, 0.05);
				}
				else if (numSegs==1){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.12, 0.0, 0.0);
				}
				else if (numSegs==2){
					BioMightOrientation orientation = new BioMightOrientation(0.0, -1.0, 0.0, 90.0);
		 			bioInstruct.setTransType(Constants.ROTATEOCTO);
	    			bioInstruct.setTheta(30);	
	    			bioInstruct.setPivotPoint(4);	
	     			bioInstruct.setRotateVector(0.0, 1.0, 0.0);
	     			bioInstruct.setOrientation(orientation);
				}	
				else if (numSegs==3){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.20, 0.0, -0.15);
				}
				else if (numSegs==4){
					BioMightOrientation orientation = new BioMightOrientation(0.0, -1.0, 0.0, 90.0);
		 			bioInstruct.setTransType(Constants.ROTATEOCTO);
	    			bioInstruct.setTheta(15);	
	    			bioInstruct.setPivotPoint(4);	
	     			bioInstruct.setRotateVector(0.0, 1.0, 0.0);
	     			bioInstruct.setOrientation(orientation);
				}
				else if (numSegs==5){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.05, 0.0, -0.125);
				}
				else if (numSegs==6){
					BioMightOrientation orientation = new BioMightOrientation(0.0, -1.0, 0.0, 90.0);
		 			bioInstruct.setTransType(Constants.ROTATEOCTOSCALE);
	    			bioInstruct.setTheta(15);	
	    			bioInstruct.setPivotPoint(4);	
	     			bioInstruct.setRotateVector(0.0, 1.0, 0.0);
	     			bioInstruct.setOrientation(orientation);
	     			bioInstruct.setScaleMatrix(0.90, 0.90, 0.90);
				}	
				else if (numSegs==7){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, 0.0, -0.15);
				}	
				else if (numSegs==8){
					BioMightOrientation orientation = new BioMightOrientation(0.0, -1.0, 0.0, 90.0);
		 			bioInstruct.setTransType(Constants.ROTATEOCTOSCALE);
	    			bioInstruct.setTheta(15);	
	    			bioInstruct.setPivotPoint(4);	
	     			bioInstruct.setRotateVector(0.0, 1.0, 0.0);
	     			bioInstruct.setOrientation(orientation);
	     			bioInstruct.setScaleMatrix(0.90, 0.90, 0.90);
				}
				else if (numSegs==9){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.01, 0.0, -0.15);
				}
			
			
				else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.05, 0.0, -0.25);
				}
				

	    		// Add the instruction into the instruction set
	    		bioMightInstructSet.addElement(bioInstruct);
			}
		// Artery		    
		} else if (parentID.equals("SuperiorCerebellarArtery:02")) {	
						
			int nMaxSegs = 10;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
		
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
	     
				  
					if (numSegs==0){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.18, 0.0, 0.05);
					}
					else if (numSegs==1){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.14, 0.0, 0.0);
					}
					else if (numSegs==2){
						BioMightOrientation orientation = new BioMightOrientation(0.0, -1.0, 0.0, 90.0);
			 			bioInstruct.setTransType(Constants.ROTATEOCTO);
		    			bioInstruct.setTheta(-30);	
		    			bioInstruct.setPivotPoint(4);	
		     			bioInstruct.setRotateVector(0.0, 1.0, 0.0);
		     			bioInstruct.setOrientation(orientation);
					}	
					else if (numSegs==3){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.20, 0.0, -0.15);
					}
					else if (numSegs==4){
						BioMightOrientation orientation = new BioMightOrientation(0.0, -1.0, 0.0, 90.0);
			 			bioInstruct.setTransType(Constants.ROTATEOCTO);
		    			bioInstruct.setTheta(-15);	
		    			bioInstruct.setPivotPoint(4);	
		     			bioInstruct.setRotateVector(0.0, 1.0, 0.0);
		     			bioInstruct.setOrientation(orientation);
					}
					else if (numSegs==5){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.05, 0.0, -0.125);
					}
					else if (numSegs==6){
						BioMightOrientation orientation = new BioMightOrientation(0.0, -1.0, 0.0, 90.0);
			 			bioInstruct.setTransType(Constants.ROTATEOCTOSCALE);
		    			bioInstruct.setTheta(-15);	
		    			bioInstruct.setPivotPoint(4);	
		     			bioInstruct.setRotateVector(0.0, 1.0, 0.0);
		     			bioInstruct.setOrientation(orientation);
		     			bioInstruct.setScaleMatrix(0.90, 0.90, 0.90);
					}	
					else if (numSegs==7){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.0, 0.0, -0.15);
					}	
					else if (numSegs==8){
						BioMightOrientation orientation = new BioMightOrientation(0.0, -1.0, 0.0, 90.0);
			 			bioInstruct.setTransType(Constants.ROTATEOCTOSCALE);
		    			bioInstruct.setTheta(-15);	
		    			bioInstruct.setPivotPoint(4);	
		     			bioInstruct.setRotateVector(0.0, 1.0, 0.0);
		     			bioInstruct.setOrientation(orientation);
		     			bioInstruct.setScaleMatrix(0.90, 0.90, 0.90);
					}
					else if (numSegs==9){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.01, 0.0, -0.15);
					}
				
					
			
				else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.02, 0.0, -0.15);
				}	
	
					
		    	// Add the instruction into the instruction set
		    	bioMightInstructSet.addElement(bioInstruct);
			}
		}

		
		DBUtils.generateFacedComponents(Constants.QUADRANGLE, startID, componentType, componentName, componentID, currentPoints, bioMightInstructSet);
		System.out.println("Generating the Rows for SuperiorCerebellarArteryEndothelium: " + componentID + "   " + componentType);

		
		return returnCode;
	}
	
	
	
	/***************************************************************************************
	 * GENERATE ANTERIOR INFERIOR CEREBELLAR ARTERY
	 * 
	 * This generates the AnteriorInferiorCerebellar Artery. 
	 *
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/
	  	
	public int generateAnteriorInferiorCerebellarArtery(String startID, String componentType, String componentName, String componentID,  String parentID, double[][] currentPoints) 
		throws DataException, DataSecurityException
	{	
		System.out.println("AnteriorInferiorCerebellarArtery: " + componentID + "   " + parentID);
		
		int bodyID = 1;
		int projectID = 1;
		String vertices = "";
		
		ArrayList mySqlList= new ArrayList();
		int returnCode = 0;
	
		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();

			
		// Artery
		if (parentID.equals("AnteriorInferiorCerebellarArtery:01")) 
		{	
			int nMaxSegs = 10;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
		
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
	     
				  
				if (numSegs==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.18, 0.0, 0.05);
				}
				else if (numSegs==1){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.15, 0.0, 0.0);
				}
				else if (numSegs==2){
					BioMightOrientation orientation = new BioMightOrientation(0.0, -1.0, 0.0, 90.0);
		 			bioInstruct.setTransType(Constants.ROTATEOCTO);
	    			bioInstruct.setTheta(30);	
	    			bioInstruct.setPivotPoint(4);	
	     			bioInstruct.setRotateVector(0.0, 1.0, 0.0);
	     			bioInstruct.setOrientation(orientation);
				}	
				else if (numSegs==3){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.20, 0.0, -0.15);
				}
				else if (numSegs==4){
					BioMightOrientation orientation = new BioMightOrientation(0.0, -1.0, 0.0, 90.0);
		 			bioInstruct.setTransType(Constants.ROTATEOCTO);
	    			bioInstruct.setTheta(15);	
	    			bioInstruct.setPivotPoint(4);	
	     			bioInstruct.setRotateVector(0.0, 1.0, 0.0);
	     			bioInstruct.setOrientation(orientation);
				}
				else if (numSegs==5){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.05, 0.0, -0.125);
				}
				else if (numSegs==6){
					BioMightOrientation orientation = new BioMightOrientation(0.0, -1.0, 0.0, 90.0);
		 			bioInstruct.setTransType(Constants.ROTATEOCTOSCALE);
	    			bioInstruct.setTheta(15);	
	    			bioInstruct.setPivotPoint(4);	
	     			bioInstruct.setRotateVector(0.0, 1.0, 0.0);
	     			bioInstruct.setOrientation(orientation);
	     			bioInstruct.setScaleMatrix(0.90, 0.90, 0.90);
				}	
				else if (numSegs==7){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, 0.0, -0.15);
				}	
				else if (numSegs==8){
					BioMightOrientation orientation = new BioMightOrientation(0.0, -1.0, 0.0, 90.0);
		 			bioInstruct.setTransType(Constants.ROTATEOCTOSCALE);
	    			bioInstruct.setTheta(15);	
	    			bioInstruct.setPivotPoint(4);	
	     			bioInstruct.setRotateVector(0.0, 1.0, 0.0);
	     			bioInstruct.setOrientation(orientation);
	     			bioInstruct.setScaleMatrix(0.90, 0.90, 0.90);
				}
				else if (numSegs==9){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.01, 0.0, -0.15);
				}
			
			
				else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.05, 0.0, -0.25);
				}
				

	    		// Add the instruction into the instruction set
	    		bioMightInstructSet.addElement(bioInstruct);
			}
		// Artery		    
		} else if (parentID.equals("AnteriorInferiorCerebellarArtery:02")) {	
						
			int nMaxSegs = 10;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
		
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
	     
				  
					if (numSegs==0){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.18, 0.0, 0.05);
					}
					else if (numSegs==1){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.15, 0.0, 0.0);
					}
					else if (numSegs==2){
						BioMightOrientation orientation = new BioMightOrientation(0.0, -1.0, 0.0, 90.0);
			 			bioInstruct.setTransType(Constants.ROTATEOCTO);
		    			bioInstruct.setTheta(-30);	
		    			bioInstruct.setPivotPoint(4);	
		     			bioInstruct.setRotateVector(0.0, 1.0, 0.0);
		     			bioInstruct.setOrientation(orientation);
					}	
					else if (numSegs==3){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.20, 0.0, -0.15);
					}
					else if (numSegs==4){
						BioMightOrientation orientation = new BioMightOrientation(0.0, -1.0, 0.0, 90.0);
			 			bioInstruct.setTransType(Constants.ROTATEOCTO);
		    			bioInstruct.setTheta(-15);	
		    			bioInstruct.setPivotPoint(4);	
		     			bioInstruct.setRotateVector(0.0, 1.0, 0.0);
		     			bioInstruct.setOrientation(orientation);
					}
					else if (numSegs==5){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.05, 0.0, -0.125);
					}
					else if (numSegs==6){
						BioMightOrientation orientation = new BioMightOrientation(0.0, -1.0, 0.0, 90.0);
			 			bioInstruct.setTransType(Constants.ROTATEOCTOSCALE);
		    			bioInstruct.setTheta(-15);	
		    			bioInstruct.setPivotPoint(4);	
		     			bioInstruct.setRotateVector(0.0, 1.0, 0.0);
		     			bioInstruct.setOrientation(orientation);
		     			bioInstruct.setScaleMatrix(0.90, 0.90, 0.90);
					}	
					else if (numSegs==7){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.0, 0.0, -0.15);
					}	
					else if (numSegs==8){
						BioMightOrientation orientation = new BioMightOrientation(0.0, -1.0, 0.0, 90.0);
			 			bioInstruct.setTransType(Constants.ROTATEOCTOSCALE);
		    			bioInstruct.setTheta(-15);	
		    			bioInstruct.setPivotPoint(4);	
		     			bioInstruct.setRotateVector(0.0, 1.0, 0.0);
		     			bioInstruct.setOrientation(orientation);
		     			bioInstruct.setScaleMatrix(0.90, 0.90, 0.90);
					}
					else if (numSegs==9){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.01, 0.0, -0.15);
					}
				
					
			
				else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.02, 0.0, -0.15);
				}	
	
					
		    	// Add the instruction into the instruction set
		    	bioMightInstructSet.addElement(bioInstruct);
			}
		}


		DBUtils.generateFacedComponents(Constants.QUADRANGLE, startID, componentType, componentName, componentID, currentPoints, bioMightInstructSet);
		System.out.println("Generating the Rows for AnteriorInferiorCerebellarArteryEndothelium: " + componentID + "   " + componentType);

		
		return returnCode;
	}
	
	
	
	/***************************************************************************************
	 * GENERATE POSTERIOR INFERIOR CEREBELLAR ARTERY
	 * 
	 * This generates the PosteriorInferiorCerebellar Artery. 
	 *
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/
	  	
	public int generatePosteriorInferiorCerebellarArtery(String startID, String componentType, String componentName, String componentID,  String parentID, double[][] currentPoints) 
		throws DataException, DataSecurityException
	{	
		System.out.println("PosteriorInferiorCerebellarArtery: " + componentID + "   " + parentID);
		
		int bodyID = 1;
		int projectID = 1;
		String vertices = "";
		
		ArrayList mySqlList= new ArrayList();
		int returnCode = 0;
	
		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();
		
		if (parentID.equals("PosteriorInferiorCerebellarArtery:01")) 
		{	
			int nMaxSegs = 10;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
		
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
	     
				  
				if (numSegs==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.15, 0.0, 0.02);
				}
				else if (numSegs==1){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.15, 0.0, 0.0);
				}
				else if (numSegs==2){
					BioMightOrientation orientation = new BioMightOrientation(0.0, -1.0, 0.0, 90.0);
		 			bioInstruct.setTransType(Constants.ROTATEOCTO);
	    			bioInstruct.setTheta(30);	
	    			bioInstruct.setPivotPoint(4);	
	     			bioInstruct.setRotateVector(0.0, 1.0, 0.0);
	     			bioInstruct.setOrientation(orientation);
				}	
				else if (numSegs==3){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.15, 0.0, -0.15);
				}
				else if (numSegs==4){
					BioMightOrientation orientation = new BioMightOrientation(0.0, -1.0, 0.0, 90.0);
		 			bioInstruct.setTransType(Constants.ROTATEOCTO);
	    			bioInstruct.setTheta(15);	
	    			bioInstruct.setPivotPoint(4);	
	     			bioInstruct.setRotateVector(0.0, 1.0, 0.0);
	     			bioInstruct.setOrientation(orientation);
				}
				else if (numSegs==5){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.05, 0.0, -0.125);
				}
				else if (numSegs==6){
					BioMightOrientation orientation = new BioMightOrientation(0.0, -1.0, 0.0, 90.0);
		 			bioInstruct.setTransType(Constants.ROTATEOCTOSCALE);
	    			bioInstruct.setTheta(15);	
	    			bioInstruct.setPivotPoint(4);	
	     			bioInstruct.setRotateVector(0.0, 1.0, 0.0);
	     			bioInstruct.setOrientation(orientation);
	     			bioInstruct.setScaleMatrix(0.90, 0.90, 0.90);
				}	
				else if (numSegs==7){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, 0.0, -0.15);
				}	
				else if (numSegs==8){
					BioMightOrientation orientation = new BioMightOrientation(0.0, -1.0, 0.0, 90.0);
		 			bioInstruct.setTransType(Constants.ROTATEOCTOSCALE);
	    			bioInstruct.setTheta(15);	
	    			bioInstruct.setPivotPoint(4);	
	     			bioInstruct.setRotateVector(0.0, 1.0, 0.0);
	     			bioInstruct.setOrientation(orientation);
	     			bioInstruct.setScaleMatrix(0.90, 0.90, 0.90);
				}
				else if (numSegs==9){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.01, 0.0, -0.15);
				}
			
			
				else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.05, 0.0, -0.25);
				}
				

	    		// Add the instruction into the instruction set
	    		bioMightInstructSet.addElement(bioInstruct);
			}
		// Artery		    
		} else if (parentID.equals("PosteriorInferiorCerebellarArtery:02")) {	
						
			int nMaxSegs = 10;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
		
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
	     
				  
					if (numSegs==0){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.15, 0.0, 0.02);
					}
					else if (numSegs==1){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.15, 0.0, 0.0);
					}
					else if (numSegs==2){
						BioMightOrientation orientation = new BioMightOrientation(0.0, -1.0, 0.0, 90.0);
			 			bioInstruct.setTransType(Constants.ROTATEOCTO);
		    			bioInstruct.setTheta(-30);	
		    			bioInstruct.setPivotPoint(4);	
		     			bioInstruct.setRotateVector(0.0, 1.0, 0.0);
		     			bioInstruct.setOrientation(orientation);
					}	
					else if (numSegs==3){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.15, 0.0, -0.15);
					}
					else if (numSegs==4){
						BioMightOrientation orientation = new BioMightOrientation(0.0, -1.0, 0.0, 90.0);
			 			bioInstruct.setTransType(Constants.ROTATEOCTO);
		    			bioInstruct.setTheta(-15);	
		    			bioInstruct.setPivotPoint(4);	
		     			bioInstruct.setRotateVector(0.0, 1.0, 0.0);
		     			bioInstruct.setOrientation(orientation);
					}
					else if (numSegs==5){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.05, 0.0, -0.125);
					}
					else if (numSegs==6){
						BioMightOrientation orientation = new BioMightOrientation(0.0, -1.0, 0.0, 90.0);
			 			bioInstruct.setTransType(Constants.ROTATEOCTOSCALE);
		    			bioInstruct.setTheta(-15);	
		    			bioInstruct.setPivotPoint(4);	
		     			bioInstruct.setRotateVector(0.0, 1.0, 0.0);
		     			bioInstruct.setOrientation(orientation);
		     			bioInstruct.setScaleMatrix(0.90, 0.90, 0.90);
					}	
					else if (numSegs==7){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.0, 0.0, -0.15);
					}	
					else if (numSegs==8){
						BioMightOrientation orientation = new BioMightOrientation(0.0, -1.0, 0.0, 90.0);
			 			bioInstruct.setTransType(Constants.ROTATEOCTOSCALE);
		    			bioInstruct.setTheta(-15);	
		    			bioInstruct.setPivotPoint(4);	
		     			bioInstruct.setRotateVector(0.0, 1.0, 0.0);
		     			bioInstruct.setOrientation(orientation);
		     			bioInstruct.setScaleMatrix(0.90, 0.90, 0.90);
					}
					else if (numSegs==9){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.01, 0.0, -0.15);
					}
				
					
			
				else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.02, 0.0, -0.15);
				}	
	
					
		    	// Add the instruction into the instruction set
		    	bioMightInstructSet.addElement(bioInstruct);
			}
		}
			

		DBUtils.generateFacedComponents(Constants.QUADRANGLE, startID, componentType, componentName, componentID, currentPoints, bioMightInstructSet);
		System.out.println("Generating the Rows for PosteriorInferiorCerebellarArteryEndothelium: " + componentID + "   " + componentType);

		
		return returnCode;
	}
	
	
	/***************************************************************************************
	 * GENERATE CEREBRAL ARTERY
	 * 
	 * This generates the Cerebral Artery. 
	 *
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/
	  	
	public int generateCerebralArtery(String startID, String componentType, String componentName, String componentID,  String parentID, double[][] currentPoints) 
		throws DataException, DataSecurityException
	{	
		System.out.println("CerebralArtery: " + componentID + "   " + parentID);
		
		int bodyID = 1;
		int projectID = 1;
		String vertices = "";
		
		ArrayList mySqlList= new ArrayList();
		int returnCode = 0;
	
		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();

		// CerebralArtery
		if (parentID.equals("CerebralArtery:01")) 
		{	
			// We can generate the CerebralArtery
			if (currentPoints == null )
			{
				double circumference = 0.00625;
				double[] startPos = {1.5, 0.25, 0.25};
				currentPoints = BioGraphics.octogonXPlane(startPos, circumference);
			}
			
			int nMaxSegs = 6;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
		
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
	     
				if (numSegs==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.5, 0.0, 0.0);
				}
				else if (numSegs==1){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.5, 0.0125, 0.0);
				}
				else if (numSegs==2){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.5, 0.0, 0.10);
				}	
				else if (numSegs==3){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.25, -0.0125, 0.05);
				}	
				else if (numSegs==4){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.25, -0.25, -0.20);
				}	
				else if (numSegs==5){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -0.25, -0.25);
				}
				else {
					bioInstruct.setPivotPoint(3);
					bioInstruct.setRotateVector(0.0, 0.0, 1.0);
					bioInstruct.setTransType(2);
					bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);
				}
				
				
	    		// Add the instruction into the instruction set
	    		bioMightInstructSet.addElement(bioInstruct);
			}
		// CerebralArtery		    
		} else if (parentID.equals("CerebralArtery:02")) {	
			int nMaxSegs = 6;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
				
				// We can generate the CerebralArtery
				if (currentPoints == null )
				{
					double circumference = 0.00625;
					double[] startPos = {-1.5, 0.25, 0.25};
					currentPoints = BioGraphics.octogonXPlane(startPos, circumference);
				}
			
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
	     
				if (numSegs==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.5, 0.0, 0.0);
				}
				else if (numSegs==1){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.5, 0.0125, 0.0);
				}
				else if (numSegs==2){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.5, 0.0, 0.10);
				}	
				else if (numSegs==3){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.25, -0.0125, 0.05);
				}	
				else if (numSegs==4){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.25, -0.25, -0.20);
				}	
				else if (numSegs==5){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -0.25, -0.25);
				}		
				else 
				{
				bioInstruct.setTransType(Constants.TRANSLATE);
				bioInstruct.setTranslateMatrix(0.00, 1.0, 0.0);
				}
					
					
		    	// Add the instruction into the instruction set
		    	bioMightInstructSet.addElement(bioInstruct);
			}
		}

		
		DBUtils.generateFacedComponents(Constants.QUADRANGLE, startID, componentType, componentName, componentID, currentPoints, bioMightInstructSet);
		System.out.println("Generating the Rows for CerebralArteryEndothelium: " + componentID + "   " + componentType);

		
		return returnCode;
	}
	

	
	/***************************************************************************************
	 * GENERATE ANTERIOR CEREBRAL ARTERY
	 * 
	 * This generates the AnteriorCerebral Artery. 
	 *
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/
	  	
	public int generateAnteriorCerebralArtery(String startID, String componentType, String componentName, String componentID,  String parentID, double[][] currentPoints) 
		throws DataException, DataSecurityException
	{	
		System.out.println("AnteriorCerebralArtery: " + componentID + "   " + parentID);
		
		int bodyID = 1;
		int projectID = 1;
		String vertices = "";
		
		ArrayList mySqlList= new ArrayList();
		int returnCode = 0;
	
		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();

		// AnteriorCerebralArtery
		if (parentID.equals("AnteriorCerebralArtery:01")) 
		{	
			// We can generate the AnteriorCerebralArtery
			if (currentPoints == null )
			{
				double circumference = 0.025;
				double[] startPos = {1.5, 0.25, 0.25};
				currentPoints = BioGraphics.octogonXPlane(startPos, circumference);
			}
			
			int nMaxSegs = 9;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
		
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();

				if (numSegs==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, 0.03, 0.025);
				}
				else if (numSegs==1){
					BioMightOrientation orientation = new BioMightOrientation(0.0, -1.0, 0.0, 90.0);
		 			bioInstruct.setTransType(Constants.ROTATEOCTO);
	    			bioInstruct.setTheta(-30);	
	    			bioInstruct.setPivotPoint(4);	
	     			bioInstruct.setRotateVector(0.0, 1.0, 0.0);
	     			bioInstruct.setOrientation(orientation);
				}
				else if (numSegs==2){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.085, 0.05, 0.15);
				}	
				else if (numSegs==3){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.20, 0.02, 0.12);
				}	
				else if (numSegs==4){
					BioMightOrientation orientation = new BioMightOrientation(0.0, -1.0, 0.0, 90.0);
		 			bioInstruct.setTransType(Constants.ROTATEOCTO);
	    			bioInstruct.setTheta(30);	
	    			bioInstruct.setPivotPoint(0);	
	     			bioInstruct.setRotateVector(0.0, 1.0, 0.0);
	     			bioInstruct.setOrientation(orientation);
				}		
				else if (numSegs==5){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.03, 0.01, 0.35);
				}
				else if (numSegs==6){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.01, 0.0, 0.35);
				}
				else if (numSegs==7){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.02, 0.0, 0.25);
				}
				else if (numSegs==8){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, 0.0, 0.25);
				}
				
				else {
					bioInstruct.setPivotPoint(3);
					bioInstruct.setRotateVector(0.0, 0.0, 1.0);
					bioInstruct.setTransType(2);
					bioInstruct.setTranslateMatrix(0.0, -1.0, 	0.0);
				}
				
				
	    		// Add the instruction into the instruction set
	    		bioMightInstructSet.addElement(bioInstruct);
			}
		// AnteriorCerebralArtery		    
		} else if (parentID.equals("AnteriorCerebralArtery:02")) {	
			int nMaxSegs = 9;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
				
				// We can generate the AnteriorCerebralArtery
				if (currentPoints == null )
				{
					double circumference = 0.00625;
					double[] startPos = {-1.5, 0.25, 0.25};
					currentPoints = BioGraphics.octogonXPlane(startPos, circumference);
				}
			
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
	     

				if (numSegs==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, 0.03, 0.025);
				}
				else if (numSegs==1){
					BioMightOrientation orientation = new BioMightOrientation(0.0, -1.0, 0.0, 90.0);
		 			bioInstruct.setTransType(Constants.ROTATEOCTO);
	    			bioInstruct.setTheta(30);	
	    			bioInstruct.setPivotPoint(0);	
	     			bioInstruct.setRotateVector(0.0, 1.0, 0.0);
	     			bioInstruct.setOrientation(orientation);
				}
				else if (numSegs==2){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.085, 0.05, 0.15);
				}	
				else if (numSegs==3){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.20, 0.02, 0.12);
				}		
				else if (numSegs==4){
					BioMightOrientation orientation = new BioMightOrientation(0.0, -1.0, 0.0, 90.0);
		 			bioInstruct.setTransType(Constants.ROTATEOCTO);
	    			bioInstruct.setTheta(-30);	
	    			bioInstruct.setPivotPoint(4);	
	     			bioInstruct.setRotateVector(0.0, 1.0, 0.0);
	     			bioInstruct.setOrientation(orientation);
				}		
				else if (numSegs==5){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.02, 0.01, 0.35);
				}
				else if (numSegs==6){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.01, 0.0, 0.35);
				}
				else if (numSegs==7){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.02, 0.0, 0.25);
				}
				else if (numSegs==8){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.01, 0.0, 0.25);
				}	
				else {
					bioInstruct.setPivotPoint(3);
					bioInstruct.setRotateVector(0.0, 0.0, 1.0);
					bioInstruct.setTransType(2);
					bioInstruct.setTranslateMatrix(0.0, -1.0, 	0.0);
				}
					
		    	// Add the instruction into the instruction set
		    	bioMightInstructSet.addElement(bioInstruct);
			}
		}

		
		DBUtils.generateFacedComponents(Constants.QUADRANGLE, startID, componentType, componentName, componentID, currentPoints, bioMightInstructSet);
		System.out.println("Generating the Rows for AnteriorCerebralArteryEndothelium: " + componentID + "   " + componentType);

		
		return returnCode;
	}
	
	
	/***************************************************************************************
	 * GENERATE MIDDLE CEREBRAL ARTERY
	 * 
	 * This generates the MiddleCerebral Artery. 
	 *
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/
	  	
	public int generateMiddleCerebralArtery(String startID, String componentType, String componentName, String componentID,  String parentID, double[][] currentPoints) 
		throws DataException, DataSecurityException
	{	
		System.out.println("MiddleCerebralArtery: " + componentID + "   " + parentID);
		
		int bodyID = 1;
		int projectID = 1;
		String vertices = "";
		
		ArrayList mySqlList= new ArrayList();
		int returnCode = 0;
	
		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();

		// MiddleCerebralArtery
		if (parentID.equals("MiddleCerebralArtery:01")) 
		{	
			// We can generate the MiddleCerebralArtery
			if (currentPoints == null )
			{
				double circumference = 0.00625;
				double[] startPos = {1.5, 0.25, 0.25};
				currentPoints = BioGraphics.octogonXPlane(startPos, circumference);
			}
			
			int nMaxSegs = 6;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
		
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
	     
				if (numSegs==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.25, 0.15, -0.05);
				}
				else if (numSegs==1){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.25, 0.0, 0.0);
				}
				else if (numSegs==2){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.25, 0.5, -0.15);
				}	
				else if (numSegs==3){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.10, 0.10, 0.0);
				}	
				else if (numSegs==4){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.10, -0.05, -0.10);
				}	
				else if (numSegs==5){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.25, 0.10, 0.0);
				}
				else {
					bioInstruct.setPivotPoint(3);
					bioInstruct.setRotateVector(0.0, 0.0, 1.0);
					bioInstruct.setTransType(2);
					bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);
				}
				
				
	    		// Add the instruction into the instruction set
	    		bioMightInstructSet.addElement(bioInstruct);
			}
		// MiddleCerebralArtery		    
		} else if (parentID.equals("MiddleCerebralArtery:02")) {	
			int nMaxSegs = 6;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
				
				// We can generate the MiddleCerebralArtery
				if (currentPoints == null )
				{
					double circumference = 0.00625;
					double[] startPos = {-1.5, 0.25, 0.25};
					currentPoints = BioGraphics.octogonXPlane(startPos, circumference);
				}
			
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
	     
			     
						if (numSegs==0){
							bioInstruct.setTransType(Constants.TRANSLATE);
							bioInstruct.setTranslateMatrix(0.25, 0.15, -0.05);
						}
						else if (numSegs==1){
							bioInstruct.setTransType(Constants.TRANSLATE);
							bioInstruct.setTranslateMatrix(0.25, 0.0, 0.0);
						}
						else if (numSegs==2){
							bioInstruct.setTransType(Constants.TRANSLATE);
							bioInstruct.setTranslateMatrix(0.25, 0.5, -0.15);
						}	
						else if (numSegs==3){
							bioInstruct.setTransType(Constants.TRANSLATE);
							bioInstruct.setTranslateMatrix(0.10, 0.10, 0.0);
						}	
						else if (numSegs==4){
							bioInstruct.setTransType(Constants.TRANSLATE);
							bioInstruct.setTranslateMatrix(0.10, -0.05, -0.10);
						}	
						else if (numSegs==5){
							bioInstruct.setTransType(Constants.TRANSLATE);
							bioInstruct.setTranslateMatrix(0.25, 0.10, 0.0);
						}
				else 
				{
				bioInstruct.setTransType(Constants.TRANSLATE);
				bioInstruct.setTranslateMatrix(0.00, 1.0, 0.0);
				}
					
					
		    	// Add the instruction into the instruction set
		    	bioMightInstructSet.addElement(bioInstruct);
			}
		}

		
		DBUtils.generateFacedComponents(Constants.QUADRANGLE, startID, componentType, componentName, componentID, currentPoints, bioMightInstructSet);
		System.out.println("Generating the Rows for MiddleCerebralArteryEndothelium: " + componentID + "   " + componentType);

		
		return returnCode;
	}

	
	/***************************************************************************************
	 * GENERATE POSTERIOR CEREBRAL ARTERY
	 * 
	 * This generates the  Artery. 
	 *
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/
	  	
	public int generatePosteriorCerebralArtery(String startID, String componentType, String componentName, String componentID,  String parentID, double[][] currentPoints) 
		throws DataException, DataSecurityException
	{	
		System.out.println("PosteriorCerebralArtery: " + componentID + "   " + parentID);
		
		int bodyID = 1;
		int projectID = 1;
		String vertices = "";
		
		ArrayList mySqlList= new ArrayList();
		int returnCode = 0;
	
		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();

		// Artery
		if (parentID.equals("PosteriorCerebralArtery:01")) 
		{	
			int nMaxSegs = 10;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
		
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
	     
				  
				if (numSegs==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.18, 0.0, 0.10);
				}
				else if (numSegs==1){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.07, 0.0, 0.0);
				}
				else if (numSegs==2){
					BioMightOrientation orientation = new BioMightOrientation(0.0, -1.0, 0.0, 90.0);
		 			bioInstruct.setTransType(Constants.ROTATEOCTO);
	    			bioInstruct.setTheta(30);	
	    			bioInstruct.setPivotPoint(4);	
	     			bioInstruct.setRotateVector(0.0, 1.0, 0.0);
	     			bioInstruct.setOrientation(orientation);
				}	
				else if (numSegs==3){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.20, 0.0, -0.15);
				}
				else if (numSegs==4){
					BioMightOrientation orientation = new BioMightOrientation(0.0, -1.0, 0.0, 90.0);
		 			bioInstruct.setTransType(Constants.ROTATEOCTO);
	    			bioInstruct.setTheta(15);	
	    			bioInstruct.setPivotPoint(4);	
	     			bioInstruct.setRotateVector(0.0, 1.0, 0.0);
	     			bioInstruct.setOrientation(orientation);
				}
				else if (numSegs==5){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.05, 0.0, -0.125);
				}
				else if (numSegs==6){
					BioMightOrientation orientation = new BioMightOrientation(0.0, -1.0, 0.0, 90.0);
		 			bioInstruct.setTransType(Constants.ROTATEOCTOSCALE);
	    			bioInstruct.setTheta(15);	
	    			bioInstruct.setPivotPoint(4);	
	     			bioInstruct.setRotateVector(0.0, 1.0, 0.0);
	     			bioInstruct.setOrientation(orientation);
	     			bioInstruct.setScaleMatrix(0.90, 0.90, 0.90);
				}	
				else if (numSegs==7){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, 0.0, -0.15);
				}	
				else if (numSegs==8){
					BioMightOrientation orientation = new BioMightOrientation(0.0, -1.0, 0.0, 90.0);
		 			bioInstruct.setTransType(Constants.ROTATEOCTOSCALE);
	    			bioInstruct.setTheta(15);	
	    			bioInstruct.setPivotPoint(4);	
	     			bioInstruct.setRotateVector(0.0, 1.0, 0.0);
	     			bioInstruct.setOrientation(orientation);
	     			bioInstruct.setScaleMatrix(0.90, 0.90, 0.90);
				}
				else if (numSegs==9){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.01, 0.0, -0.15);
				}
			
			
				else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.05, 0.0, -0.25);
				}
				

	    		// Add the instruction into the instruction set
	    		bioMightInstructSet.addElement(bioInstruct);
			}
		// Artery		    
		} else if (parentID.equals("PosteriorCerebralArtery:02")) {	
						
			int nMaxSegs = 10;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
		
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
	     
				  
					if (numSegs==0){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.18, 0.0, 0.10);
					}
					else if (numSegs==1){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.10, 0.0, 0.0);
					}
					else if (numSegs==2){
						BioMightOrientation orientation = new BioMightOrientation(0.0, -1.0, 0.0, 90.0);
			 			bioInstruct.setTransType(Constants.ROTATEOCTO);
		    			bioInstruct.setTheta(-30);	
		    			bioInstruct.setPivotPoint(4);	
		     			bioInstruct.setRotateVector(0.0, 1.0, 0.0);
		     			bioInstruct.setOrientation(orientation);
					}	
					else if (numSegs==3){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.20, 0.0, -0.15);
					}
					else if (numSegs==4){
						BioMightOrientation orientation = new BioMightOrientation(0.0, -1.0, 0.0, 90.0);
			 			bioInstruct.setTransType(Constants.ROTATEOCTO);
		    			bioInstruct.setTheta(-15);	
		    			bioInstruct.setPivotPoint(4);	
		     			bioInstruct.setRotateVector(0.0, 1.0, 0.0);
		     			bioInstruct.setOrientation(orientation);
					}
					else if (numSegs==5){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.05, 0.0, -0.125);
					}
					else if (numSegs==6){
						BioMightOrientation orientation = new BioMightOrientation(0.0, -1.0, 0.0, 90.0);
			 			bioInstruct.setTransType(Constants.ROTATEOCTOSCALE);
		    			bioInstruct.setTheta(-15);	
		    			bioInstruct.setPivotPoint(4);	
		     			bioInstruct.setRotateVector(0.0, 1.0, 0.0);
		     			bioInstruct.setOrientation(orientation);
		     			bioInstruct.setScaleMatrix(0.90, 0.90, 0.90);
					}	
					else if (numSegs==7){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.0, 0.0, -0.15);
					}	
					else if (numSegs==8){
						BioMightOrientation orientation = new BioMightOrientation(0.0, -1.0, 0.0, 90.0);
			 			bioInstruct.setTransType(Constants.ROTATEOCTOSCALE);
		    			bioInstruct.setTheta(-15);	
		    			bioInstruct.setPivotPoint(4);	
		     			bioInstruct.setRotateVector(0.0, 1.0, 0.0);
		     			bioInstruct.setOrientation(orientation);
		     			bioInstruct.setScaleMatrix(0.90, 0.90, 0.90);
					}
					else if (numSegs==9){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.01, 0.0, -0.15);
					}
				
					
			
				else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.02, 0.0, -0.15);
				}	
	
					
		    	// Add the instruction into the instruction set
		    	bioMightInstructSet.addElement(bioInstruct);
			}
		}

		
		DBUtils.generateFacedComponents(Constants.QUADRANGLE, startID, componentType, componentName, componentID, currentPoints, bioMightInstructSet);
		System.out.println("Generating the Rows for PosteriorCerebralArtery: " + componentID + "   " + componentType);

		
		return returnCode;
	}
	

	/***************************************************************************************
	 * GENERATE VERTEBRAL ARTERY
	 * 
	 * This generates the Verebral  Artery. 
	 *
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/
	  	
	public int generateVertebralArtery(String startID, String componentType, String componentName, String componentID,  String parentID, double[][] currentPoints) 
		throws DataException, DataSecurityException
	{	
		System.out.println("EJB:generateVertebralArtery: " + componentID + "   " + parentID);
		
		int bodyID = 1;
		int projectID = 1;
		String vertices = "";
		
		ArrayList mySqlList= new ArrayList();
		int returnCode = 0;
	
		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();

		// Artery
		if (parentID.equals("VertebralArtery:01")) 
		{	
			// We can generate the Artery
			if (currentPoints == null )
			{
				double circumference = 0.00625;
				double[] startPos = {1.5, 0.25, 0.25};
				currentPoints = BioGraphics.octogonXPlane(startPos, circumference);
			}
			
			int nMaxSegs = 10;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
		
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
	     
				if (numSegs==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.15, -0.25, 0.05);
				}
				else if (numSegs==1){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.08, -0.25, -0.125);
				}
				else if (numSegs==2){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.03, -0.25, -0.15);
				}
				else if (numSegs==3){
					bioInstruct.setTransType(Constants.SCALE);
					bioInstruct.setTranslateMatrix(0.02, -0.25, -0.15);
					bioInstruct.setScaleMatrix(1.1, 1.1, 1.1);
				}
				else if (numSegs==4){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.03, -0.25, -0.20);
				}
				else if (numSegs==5){
					bioInstruct.setTransType(Constants.SCALE);
					bioInstruct.setTranslateMatrix(0.15, -0.25, -0.1);
					bioInstruct.setScaleMatrix(1.05, 1.05, 1.05);
				}
				else if (numSegs==6){
					bioInstruct.setTransType(Constants.SCALE);
					bioInstruct.setTranslateMatrix(0.15, -1.0, 0.15);
					bioInstruct.setScaleMatrix(1.05, 1.05, 1.05);
				}
				else if (numSegs==7){
					bioInstruct.setTransType(Constants.SCALE);
					bioInstruct.setTranslateMatrix(0.25, -1.0, 0.25);
					bioInstruct.setScaleMatrix(1.1, 1.1, 1.1);
				}	
				else if (numSegs==8){
					bioInstruct.setTransType(Constants.SCALE);
					bioInstruct.setTranslateMatrix(0.30, -1.0, 0.35);
					bioInstruct.setScaleMatrix(1.05, 1.05, 1.05);
				}	
				else if (numSegs==9){
					bioInstruct.setTransType(Constants.SCALE);
					bioInstruct.setTranslateMatrix(0.45, -1.0, 0.24);
					bioInstruct.setScaleMatrix(1.05, 1.05, 1.05);
				}	
	
				
				else {
					bioInstruct.setPivotPoint(3);
					bioInstruct.setRotateVector(0.0, 0.0, 1.0);
					bioInstruct.setTransType(2);
					bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);
				}				
				
	    		// Add the instruction into the instruction set
	    		bioMightInstructSet.addElement(bioInstruct);
			}
		// Artery		    
		} else if (parentID.equals("VertebralArtery:02")) {	
		
			
			// We can generate the Artery
			if (currentPoints == null )
			{
				double circumference = 0.00625;
				double[] startPos = {-1.5, 0.25, 0.25};
				currentPoints = BioGraphics.octogonXPlane(startPos, circumference);
			}
			
			int nMaxSegs = 10;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
				
			
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
	     
				if (numSegs==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.15, -0.25, 0.05);
				}
				else if (numSegs==1){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.08, -0.25, -0.125);
				}
				else if (numSegs==2){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.03, -0.25, -0.15);
				}
				else if (numSegs==3){
					bioInstruct.setTransType(Constants.SCALE);
					bioInstruct.setTranslateMatrix(-0.02, -0.25, -0.15);
					bioInstruct.setScaleMatrix(1.1, 1.1, 1.1);
				}
				else if (numSegs==4){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.03, -0.25, -0.20);
				}
				else if (numSegs==5){
					bioInstruct.setTransType(Constants.SCALE);
					bioInstruct.setTranslateMatrix(-0.15, -0.25, -0.1);
					bioInstruct.setScaleMatrix(1.05, 1.05, 1.05);
				}
				else if (numSegs==6){
					bioInstruct.setTransType(Constants.SCALE);
					bioInstruct.setTranslateMatrix(-0.15, -1.0, 0.15);
					bioInstruct.setScaleMatrix(1.05, 1.05, 1.05);
				}
				else if (numSegs==7){
					bioInstruct.setTransType(Constants.SCALE);
					bioInstruct.setTranslateMatrix(-0.25, -1.0, 0.25);
					bioInstruct.setScaleMatrix(1.1, 1.1, 1.1);
				}	
				else if (numSegs==8){
					bioInstruct.setTransType(Constants.SCALE);
					bioInstruct.setTranslateMatrix(-0.30, -1.0, 0.35);
					bioInstruct.setScaleMatrix(1.05, 1.05, 1.05);
				}	
				else if (numSegs==9){
					bioInstruct.setTransType(Constants.SCALE);
					bioInstruct.setTranslateMatrix(-0.45, -1.0, 0.24);
					bioInstruct.setScaleMatrix(1.05, 1.05, 1.05);
				}	
	
					
				
				else {
					bioInstruct.setPivotPoint(3);
					bioInstruct.setRotateVector(0.0, 0.0, 1.0);
					bioInstruct.setTransType(2);
					bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);
				}		
					
		    	// Add the instruction into the instruction set
		    	bioMightInstructSet.addElement(bioInstruct);
			}
		}

		
		DBUtils.generateFacedComponents(Constants.QUADRANGLE, startID, componentType, componentName, componentID, currentPoints, bioMightInstructSet);
		System.out.println("Generating the Rows for VertebralArtery: " + componentID + "   " + componentType);

		
		return returnCode;
	}
	
	/***************************************************************************************
	 * GENERATE ANTERIOR SPINAL ARTERY
	 * 
	 * This generates the AnteriorSpinal  Artery. 
	 *
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/
	  	
	public int generateAnteriorSpinalArtery(String startID, String componentType, String componentName, String componentID,  String parentID, double[][] currentPoints) 
		throws DataException, DataSecurityException
	{	
		System.out.println("AnteriorSpinalArtery: " + componentID + "   " + parentID);
		
		int bodyID = 1;
		int projectID = 1;
		String vertices = "";
		
		ArrayList mySqlList= new ArrayList();
		int returnCode = 0;
	
		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();

		// Artery
		if (parentID.equals("AnteriorSpinalArtery:01")) 
		{	
			// We can generate the Artery
			if (currentPoints == null )
			{
				double circumference = 0.00625;
				double[] startPos = {1.5, 0.25, 0.25};
				currentPoints = BioGraphics.octogonXPlane(startPos, circumference);
			}
			
			int nMaxSegs = 7;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
		
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
	     
				if (numSegs==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.25, -0.25, 0.0);
				}
				else if (numSegs==1){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.20, -0.25, 0.0);
				}
				else if (numSegs==2){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -0.25, 0.0);
				}
				else if (numSegs==3){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -0.25, 0.0);
				}
				else if (numSegs==4){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -0.25, 0.0);
				}
				else if (numSegs==5){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -0.25, 0.0);
				}
				else if (numSegs==6){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -0.25, 0.0);
				}
				else if (numSegs==7){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -0.25, 0.0);
				}	
				else {
					bioInstruct.setPivotPoint(3);
					bioInstruct.setRotateVector(0.0, 0.0, 1.0);
					bioInstruct.setTransType(2);
					bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);
				}				
				
	    		// Add the instruction into the instruction set
	    		bioMightInstructSet.addElement(bioInstruct);
			}
		// Artery		    
		} else if (parentID.equals("AnteriorSpinalArtery:02")) {	
			int nMaxSegs = 7;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
				
				// We can generate the Artery
				if (currentPoints == null )
				{
					double circumference = 0.00625;
					double[] startPos = {-1.5, 0.25, 0.25};
					currentPoints = BioGraphics.octogonXPlane(startPos, circumference);
				}
			
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
	     
				if (numSegs==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.25, -0.25, 0.0);
				}
				else if (numSegs==1){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.20, -0.25, 0.0);
				}
				else if (numSegs==2){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -0.25, 0.0);
				}
				else if (numSegs==3){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -0.25, 0.0);
				}
				else if (numSegs==4){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -0.25, 0.0);
				}
				else if (numSegs==5){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -0.25, 0.0);
				}
				else if (numSegs==6){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -0.25, 0.0);
				}
				else if (numSegs==7){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -0.25, 0.0);
				}	
	
						
				else {
					bioInstruct.setPivotPoint(3);
					bioInstruct.setRotateVector(0.0, 0.0, 1.0);
					bioInstruct.setTransType(2);
					bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);
				}		
					
		    	// Add the instruction into the instruction set
		    	bioMightInstructSet.addElement(bioInstruct);
			}
		}

		
		DBUtils.generateFacedComponents(Constants.QUADRANGLE, startID, componentType, componentName, componentID, currentPoints, bioMightInstructSet);
		System.out.println("Generating the Rows for AnteriorSpinalArtery: " + componentID + "   " + componentType);

		
		return returnCode;
	}
	


	/***************************************************************************************
	 * GENERATE HYPOPPYSEAL ARTERY
	 * 
	 * This generates the Hypophyseal Artery. 
	 *
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/
	  	
	public int generateHypophysealArtery(String startID, String componentType, String componentName, String componentID,  String parentID, double[][] currentPoints) 
		throws DataException, DataSecurityException
	{	
		System.out.println("HypophysealArtery: " + componentID + "   " + parentID);
		
		int bodyID = 1;
		int projectID = 1;
		String vertices = "";
		
		ArrayList mySqlList= new ArrayList();
		int returnCode = 0;
	
		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();

		// HypophysealArtery
		if (parentID.equals("HypophysealArtery:01")) 
		{	
			// We can generate the HypophysealArtery
			if (currentPoints == null )
			{
				double circumference = 0.00625;
				double[] startPos = {1.5, 0.25, 0.25};
				currentPoints = BioGraphics.octogonXPlane(startPos, circumference);
			}
			
			int nMaxSegs = 6;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
		
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
	     
				if (numSegs==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.5, 0.0, 0.0);
				}
				else if (numSegs==1){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.5, 0.0125, 0.0);
				}
				else if (numSegs==2){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.5, 0.0, 0.10);
				}	
				else if (numSegs==3){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.25, -0.0125, 0.05);
				}	
				else if (numSegs==4){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.25, -0.25, -0.20);
				}	
				else if (numSegs==5){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -0.25, -0.25);
				}
				else {
					bioInstruct.setPivotPoint(3);
					bioInstruct.setRotateVector(0.0, 0.0, 1.0);
					bioInstruct.setTransType(2);
					bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);
				}
				
				
	    		// Add the instruction into the instruction set
	    		bioMightInstructSet.addElement(bioInstruct);
			}
		// HypophysealArtery		    
		} else if (parentID.equals("HypophysealArtery:02")) {	
			int nMaxSegs = 6;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
				
				// We can generate the HypophysealArtery
				if (currentPoints == null )
				{
					double circumference = 0.00625;
					double[] startPos = {-1.5, 0.25, 0.25};
					currentPoints = BioGraphics.octogonXPlane(startPos, circumference);
				}
			
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
	     
				if (numSegs==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.5, 0.0, 0.0);
				}
				else if (numSegs==1){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.5, 0.0125, 0.0);
				}
				else if (numSegs==2){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.5, 0.0, 0.10);
				}	
				else if (numSegs==3){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.25, -0.0125, 0.05);
				}	
				else if (numSegs==4){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.25, -0.25, -0.20);
				}	
				else if (numSegs==5){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -0.25, -0.25);
				}		
				else 
				{
				bioInstruct.setTransType(Constants.TRANSLATE);
				bioInstruct.setTranslateMatrix(0.00, 1.0, 0.0);
				}
					
					
		    	// Add the instruction into the instruction set
		    	bioMightInstructSet.addElement(bioInstruct);
			}
		}

		
		DBUtils.generateFacedComponents(Constants.QUADRANGLE, startID, componentType, componentName, componentID, currentPoints, bioMightInstructSet);
		System.out.println("Generating the Rows for HypophysealArteryEndothelium: " + componentID + "   " + componentType);

		
		return returnCode;
	}
	


	/***************************************************************************************
	 * GENERATE PONTINE ARTERY
	 * 
	 * This generates the Pontine Artery. 
	 *
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/
	  	
	public int generatePontineArtery(String startID, String componentType, String componentName, String componentID,  String parentID, double[][] currentPoints) 
		throws DataException, DataSecurityException
	{	
		System.out.println("PontineArtery: " + componentID + "   " + parentID);
		
		int bodyID = 1;
		int projectID = 1;
		String vertices = "";
		
		ArrayList mySqlList= new ArrayList();
		int returnCode = 0;
	
		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();

		// PontineArtery
		if (parentID.equals("PontineArtery:01")) 
		{	
			// We can generate the PontineArtery
			if (currentPoints == null )
			{
				double circumference = 0.00625;
				double[] startPos = {1.5, 0.25, 0.25};
				currentPoints = BioGraphics.octogonXPlane(startPos, circumference);
			}
			
			int nMaxSegs = 10;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
		
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
	     
				if (numSegs==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.18, 0.0, 0.05);
				}
				else if (numSegs==1){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.12, 0.0, 0.0);
				}
				else if (numSegs==2){
					BioMightOrientation orientation = new BioMightOrientation(0.0, -1.0, 0.0, 90.0);
		 			bioInstruct.setTransType(Constants.ROTATEOCTO);
	    			bioInstruct.setTheta(30);	
	    			bioInstruct.setPivotPoint(4);	
	     			bioInstruct.setRotateVector(0.0, 1.0, 0.0);
	     			bioInstruct.setOrientation(orientation);
				}	
				else if (numSegs==3){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.20, 0.0, -0.15);
				}
				else if (numSegs==4){
					BioMightOrientation orientation = new BioMightOrientation(0.0, -1.0, 0.0, 90.0);
		 			bioInstruct.setTransType(Constants.ROTATEOCTO);
	    			bioInstruct.setTheta(15);	
	    			bioInstruct.setPivotPoint(4);	
	     			bioInstruct.setRotateVector(0.0, 1.0, 0.0);
	     			bioInstruct.setOrientation(orientation);
				}
				else if (numSegs==5){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.05, 0.0, -0.125);
				}
				else if (numSegs==6){
					BioMightOrientation orientation = new BioMightOrientation(0.0, -1.0, 0.0, 90.0);
		 			bioInstruct.setTransType(Constants.ROTATEOCTOSCALE);
	    			bioInstruct.setTheta(15);	
	    			bioInstruct.setPivotPoint(4);	
	     			bioInstruct.setRotateVector(0.0, 1.0, 0.0);
	     			bioInstruct.setOrientation(orientation);
	     			bioInstruct.setScaleMatrix(0.90, 0.90, 0.90);
				}	
				else if (numSegs==7){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, 0.0, -0.15);
				}	
				else if (numSegs==8){
					BioMightOrientation orientation = new BioMightOrientation(0.0, -1.0, 0.0, 90.0);
		 			bioInstruct.setTransType(Constants.ROTATEOCTOSCALE);
	    			bioInstruct.setTheta(15);	
	    			bioInstruct.setPivotPoint(4);	
	     			bioInstruct.setRotateVector(0.0, 1.0, 0.0);
	     			bioInstruct.setOrientation(orientation);
	     			bioInstruct.setScaleMatrix(0.90, 0.90, 0.90);
				}
				else if (numSegs==9){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.01, 0.0, -0.15);
				}
			
				else {
					bioInstruct.setPivotPoint(3);
					bioInstruct.setRotateVector(0.0, 0.0, 1.0);
					bioInstruct.setTransType(2);
					bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);
				}
				
				
	    		// Add the instruction into the instruction set
	    		bioMightInstructSet.addElement(bioInstruct);
			}
		// PontineArtery		    
		} 
		
		else if (parentID.equals("PontineArtery:02")) {	
			
			// We can generate the PontineArtery
			if (currentPoints == null )
			{
				double circumference = 0.00625;
				double[] startPos = {-1.5, 0.25, 0.25};
				currentPoints = BioGraphics.octogonXPlane(startPos, circumference);
			}
		
			int nMaxSegs = 10;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
					
		
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
	     
				  
				if (numSegs==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.18, 0.0, 0.05);
				}
				else if (numSegs==1){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.14, 0.0, 0.0);
				}
				else if (numSegs==2){
					BioMightOrientation orientation = new BioMightOrientation(0.0, -1.0, 0.0, 90.0);
		 			bioInstruct.setTransType(Constants.ROTATEOCTO);
	    			bioInstruct.setTheta(-30);	
	    			bioInstruct.setPivotPoint(4);	
	     			bioInstruct.setRotateVector(0.0, 1.0, 0.0);
	     			bioInstruct.setOrientation(orientation);
				}	
				else if (numSegs==3){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.20, 0.0, -0.15);
				}
				else if (numSegs==4){
					BioMightOrientation orientation = new BioMightOrientation(0.0, -1.0, 0.0, 90.0);
		 			bioInstruct.setTransType(Constants.ROTATEOCTO);
	    			bioInstruct.setTheta(-15);	
	    			bioInstruct.setPivotPoint(4);	
	     			bioInstruct.setRotateVector(0.0, 1.0, 0.0);
	     			bioInstruct.setOrientation(orientation);
				}
				else if (numSegs==5){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.05, 0.0, -0.125);
				}
				else if (numSegs==6){
					BioMightOrientation orientation = new BioMightOrientation(0.0, -1.0, 0.0, 90.0);
		 			bioInstruct.setTransType(Constants.ROTATEOCTOSCALE);
	    			bioInstruct.setTheta(-15);	
	    			bioInstruct.setPivotPoint(4);	
	     			bioInstruct.setRotateVector(0.0, 1.0, 0.0);
	     			bioInstruct.setOrientation(orientation);
	     			bioInstruct.setScaleMatrix(0.90, 0.90, 0.90);
				}	
				else if (numSegs==7){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, 0.0, -0.15);
				}	
				else if (numSegs==8){
					BioMightOrientation orientation = new BioMightOrientation(0.0, -1.0, 0.0, 90.0);
		 			bioInstruct.setTransType(Constants.ROTATEOCTOSCALE);
	    			bioInstruct.setTheta(-15);	
	    			bioInstruct.setPivotPoint(4);	
	     			bioInstruct.setRotateVector(0.0, 1.0, 0.0);
	     			bioInstruct.setOrientation(orientation);
	     			bioInstruct.setScaleMatrix(0.90, 0.90, 0.90);
				}
				else if (numSegs==9){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.01, 0.0, -0.15);
				}
	
				else 
				{
				bioInstruct.setTransType(Constants.TRANSLATE);
				bioInstruct.setTranslateMatrix(0.00, 1.0, 0.0);
				}
					
					
		    	// Add the instruction into the instruction set
		    	bioMightInstructSet.addElement(bioInstruct);
			}
		}

		else if (parentID.equals("PontineArtery:03")) {
			
			// We can generate the PontineArtery
			if (currentPoints == null )
			{
				double circumference = 0.00625;
				double[] startPos = {-1.5, 0.25, 0.25};
				currentPoints = BioGraphics.octogonXPlane(startPos, circumference);
			}
			
			int nMaxSegs = 10;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
							
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
	     
			  
				if (numSegs==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.18, 0.0, 0.05);
				}
				else if (numSegs==1){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.12, 0.0, 0.0);
				}
				else if (numSegs==2){
					BioMightOrientation orientation = new BioMightOrientation(0.0, -1.0, 0.0, 90.0);
		 			bioInstruct.setTransType(Constants.ROTATEOCTO);
	    			bioInstruct.setTheta(30);	
	    			bioInstruct.setPivotPoint(4);	
	     			bioInstruct.setRotateVector(0.0, 1.0, 0.0);
	     			bioInstruct.setOrientation(orientation);
				}	
				else if (numSegs==3){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.20, 0.0, -0.15);
				}
				else if (numSegs==4){
					BioMightOrientation orientation = new BioMightOrientation(0.0, -1.0, 0.0, 90.0);
		 			bioInstruct.setTransType(Constants.ROTATEOCTO);
	    			bioInstruct.setTheta(15);	
	    			bioInstruct.setPivotPoint(4);	
	     			bioInstruct.setRotateVector(0.0, 1.0, 0.0);
	     			bioInstruct.setOrientation(orientation);
				}
				else if (numSegs==5){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.05, 0.0, -0.125);
				}
				else if (numSegs==6){
					BioMightOrientation orientation = new BioMightOrientation(0.0, -1.0, 0.0, 90.0);
		 			bioInstruct.setTransType(Constants.ROTATEOCTOSCALE);
	    			bioInstruct.setTheta(15);	
	    			bioInstruct.setPivotPoint(4);	
	     			bioInstruct.setRotateVector(0.0, 1.0, 0.0);
	     			bioInstruct.setOrientation(orientation);
	     			bioInstruct.setScaleMatrix(0.90, 0.90, 0.90);
				}	
				else if (numSegs==7){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, 0.0, -0.15);
				}	
				else if (numSegs==8){
					BioMightOrientation orientation = new BioMightOrientation(0.0, -1.0, 0.0, 90.0);
		 			bioInstruct.setTransType(Constants.ROTATEOCTOSCALE);
	    			bioInstruct.setTheta(15);	
	    			bioInstruct.setPivotPoint(4);	
	     			bioInstruct.setRotateVector(0.0, 1.0, 0.0);
	     			bioInstruct.setOrientation(orientation);
	     			bioInstruct.setScaleMatrix(0.90, 0.90, 0.90);
				}
				else if (numSegs==9){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.01, 0.0, -0.15);
				}
			
				else 
				{
				bioInstruct.setTransType(Constants.TRANSLATE);
				bioInstruct.setTranslateMatrix(0.00, 1.0, 0.0);
				}
					
					
		    	// Add the instruction into the instruction set
		    	bioMightInstructSet.addElement(bioInstruct);
			}
		}		
		else if (parentID.equals("PontineArtery:04")) {	
				
			// We can generate the PontineArtery
			if (currentPoints == null )
			{
				double circumference = 0.00625;
				double[] startPos = {-1.5, 0.25, 0.25};
				currentPoints = BioGraphics.octogonXPlane(startPos, circumference);
			}
	
			int nMaxSegs = 10;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
		
			
			// Create a place for an instruction 
			BioMightInstruction bioInstruct = new BioMightInstruction();
     
			  
				if (numSegs==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.18, 0.0, 0.05);
				}
				else if (numSegs==1){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.14, 0.0, 0.0);
				}
				else if (numSegs==2){
					BioMightOrientation orientation = new BioMightOrientation(0.0, -1.0, 0.0, 90.0);
		 			bioInstruct.setTransType(Constants.ROTATEOCTO);
	    			bioInstruct.setTheta(-30);	
	    			bioInstruct.setPivotPoint(4);	
	     			bioInstruct.setRotateVector(0.0, 1.0, 0.0);
	     			bioInstruct.setOrientation(orientation);
				}	
				else if (numSegs==3){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.20, 0.0, -0.15);
				}
				else if (numSegs==4){
					BioMightOrientation orientation = new BioMightOrientation(0.0, -1.0, 0.0, 90.0);
		 			bioInstruct.setTransType(Constants.ROTATEOCTO);
	    			bioInstruct.setTheta(-15);	
	    			bioInstruct.setPivotPoint(4);	
	     			bioInstruct.setRotateVector(0.0, 1.0, 0.0);
	     			bioInstruct.setOrientation(orientation);
				}
				else if (numSegs==5){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.05, 0.0, -0.125);
				}
				else if (numSegs==6){
					BioMightOrientation orientation = new BioMightOrientation(0.0, -1.0, 0.0, 90.0);
		 			bioInstruct.setTransType(Constants.ROTATEOCTOSCALE);
	    			bioInstruct.setTheta(-15);	
	    			bioInstruct.setPivotPoint(4);	
	     			bioInstruct.setRotateVector(0.0, 1.0, 0.0);
	     			bioInstruct.setOrientation(orientation);
	     			bioInstruct.setScaleMatrix(0.90, 0.90, 0.90);
				}	
				else if (numSegs==7){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, 0.0, -0.15);
				}	
				else if (numSegs==8){
					BioMightOrientation orientation = new BioMightOrientation(0.0, -1.0, 0.0, 90.0);
		 			bioInstruct.setTransType(Constants.ROTATEOCTOSCALE);
	    			bioInstruct.setTheta(-15);	
	    			bioInstruct.setPivotPoint(4);	
	     			bioInstruct.setRotateVector(0.0, 1.0, 0.0);
	     			bioInstruct.setOrientation(orientation);
	     			bioInstruct.setScaleMatrix(0.90, 0.90, 0.90);
				}
				else if (numSegs==9){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.01, 0.0, -0.15);
				}
				else 
				{
				bioInstruct.setTransType(Constants.TRANSLATE);
				bioInstruct.setTranslateMatrix(0.00, 1.0, 0.0);
				}
					
					
		    	// Add the instruction into the instruction set
		    	bioMightInstructSet.addElement(bioInstruct);
			}
		}
		
		DBUtils.generateFacedComponents(Constants.QUADRANGLE, startID, componentType, componentName, componentID, currentPoints, bioMightInstructSet);
		System.out.println("Generating the Rows for PontineArteryEndothelium: " + componentID + "   " + componentType);

		
		return returnCode;
	}
	
	

	/***************************************************************************************
	 * GENERATE ASCENDING PALATINE ARTERY
	 * 
	 * This generates the AscendingPalatine Artery. 
	 *
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/
	  	
	public int generateAscendingPalatineArtery(String startID, String componentType, String componentName, String componentID,  String parentID, double[][] currentPoints) 
		throws DataException, DataSecurityException
	{	
		System.out.println("AscendingPalatineArtery: " + componentID + "   " + parentID);
		
		int bodyID = 1;
		int projectID = 1;
		String vertices = "";
		
		ArrayList mySqlList= new ArrayList();
		int returnCode = 0;
	
		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();

		// AscendingPalatineArtery
		if (parentID.equals("AscendingPalatineArtery:01")) 
		{	
			// We can generate the AscendingPalatineArtery
			if (currentPoints == null )
			{
				double circumference = 0.00625;
				double[] startPos = {1.5, 0.25, 0.25};
				currentPoints = BioGraphics.octogonXPlane(startPos, circumference);
			}
			
			int nMaxSegs = 6;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
		
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
	     
				  
				if (numSegs==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, 0.25, -0.10);
				}
				else if (numSegs==1){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, 0.25, -0.05);
				}
				else if (numSegs==2){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, 0.20, -0.15);
				}	
				else if (numSegs==3){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, 0.15, 0.0);
				}	
				else if (numSegs==4){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.05, 0.20, -0.05);
				}	
				else if (numSegs==5){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.05, 0.20, -0.05);
				}
				else {
					bioInstruct.setPivotPoint(3);
					bioInstruct.setRotateVector(0.0, 0.0, 1.0);
					bioInstruct.setTransType(2);
					bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);
				}
				
				
	    		// Add the instruction into the instruction set
	    		bioMightInstructSet.addElement(bioInstruct);
			}
		// AscendingPalatineArtery		    
		} 
		
		else if (parentID.equals("AscendingPalatineArtery:02")) {	
			int nMaxSegs = 6;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
				
				// We can generate the AscendingPalatineArtery
				if (currentPoints == null )
				{
					double circumference = 0.00625;
					double[] startPos = {-1.5, 0.25, 0.25};
					currentPoints = BioGraphics.octogonXPlane(startPos, circumference);
				}
			
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
	     
				if (numSegs==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, 0.25, -0.10);
				}
				else if (numSegs==1){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, 0.25, -0.05);
				}
				else if (numSegs==2){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, 0.20, -0.15);
				}	
				else if (numSegs==3){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, 0.15, 0.0);
				}	
				else if (numSegs==4){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.05, 0.20, -0.05);
				}	
				else if (numSegs==5){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.05, 0.20, -0.05);
				}				
				else 
				{
				bioInstruct.setTransType(Constants.TRANSLATE);
				bioInstruct.setTranslateMatrix(0.00, 1.0, 0.0);
				}
					
					
		    	// Add the instruction into the instruction set
		    	bioMightInstructSet.addElement(bioInstruct);
			}
		}

	
		
		DBUtils.generateFacedComponents(Constants.QUADRANGLE, startID, componentType, componentName, componentID, currentPoints, bioMightInstructSet);
		System.out.println("Generating the Rows for AscendingPalatineArteryEndothelium: " + componentID + "   " + componentType);

		
		return returnCode;
	}

	/***************************************************************************************
	 * GENERATE DESCENDING PALATINE ARTERY
	 * 
	 * This generates the DescendingPalatine Artery. 
	 *
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/
	  	
	public int generateDescendingPalatineArtery(String startID, String componentType, String componentName, String componentID,  String parentID, double[][] currentPoints) 
		throws DataException, DataSecurityException
	{	
		System.out.println("DescendingPalatineArtery: " + componentID + "   " + parentID);
		
		int bodyID = 1;
		int projectID = 1;
		String vertices = "";
		
		ArrayList mySqlList= new ArrayList();
		int returnCode = 0;
	
		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();

		// DescendingPalatineArtery
		if (parentID.equals("DescendingPalatineArtery:01")) 
		{	
			// We can generate the DescendingPalatineArtery
			if (currentPoints == null )
			{
				double circumference = 0.00625;
				double[] startPos = {1.5, 0.25, 0.25};
				currentPoints = BioGraphics.octogonXPlane(startPos, circumference);
			}
			
			int nMaxSegs = 6;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
		
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
	     
				  
				if (numSegs==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.25, 0.0, -0.25);
				}
				else if (numSegs==1){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.25, 0.0, -0.25);
				}
				else if (numSegs==2){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.10, -0.05, -0.25);
				}	
				else if (numSegs==3){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, 0.0, -0.25);
				}	
				else if (numSegs==4){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.05, 0.05, -0.25);
				}	
				else if (numSegs==5){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.05, 0.00, -0.25);
				}
				else {
					bioInstruct.setPivotPoint(3);
					bioInstruct.setRotateVector(0.0, 0.0, 1.0);
					bioInstruct.setTransType(2);
					bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);
				}
				
				
	    		// Add the instruction into the instruction set
	    		bioMightInstructSet.addElement(bioInstruct);
			}
		// DescendingPalatineArtery		    
		} 
		
		else if (parentID.equals("DescendingPalatineArtery:02")) {	
			int nMaxSegs = 6;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
				
				// We can generate the DescendingPalatineArtery
				if (currentPoints == null )
				{
					double circumference = 0.00625;
					double[] startPos = {-1.5, 0.25, 0.25};
					currentPoints = BioGraphics.octogonXPlane(startPos, circumference);
				}
			
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
	     
				  
				if (numSegs==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.25, 0.0, -0.25);
				}
				else if (numSegs==1){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.25, 0.0, -0.25);
				}
				else if (numSegs==2){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.10, -0.05, -0.25);
				}	
				else if (numSegs==3){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, 0.0, -0.25);
				}	
				else if (numSegs==4){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.05, 0.0, -0.25);
				}	
				else if (numSegs==5){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.05, 0.05, -0.25);
				}		
				else 
				{
				bioInstruct.setTransType(Constants.TRANSLATE);
				bioInstruct.setTranslateMatrix(0.00, 1.0, 0.0);
				}
					
					
		    	// Add the instruction into the instruction set
		    	bioMightInstructSet.addElement(bioInstruct);
			}
		}

	
		
		DBUtils.generateFacedComponents(Constants.QUADRANGLE, startID, componentType, componentName, componentID, currentPoints, bioMightInstructSet);
		System.out.println("Generating the Rows for DescendingPalatineArteryEndothelium: " + componentID + "   " + componentType);

		
		return returnCode;
	}
	
	
	
	/***************************************************************************************
	 * GENERATE SUPERFICIAL TEMPORAL ARTERY
	 * 
	 * This generates the SuperficialTemporal Artery. 
	 *
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/
	  	
	public int generateSuperficialTemporalArtery(String startID, String componentType, String componentName, String componentID,  String parentID, double[][] currentPoints) 
		throws DataException, DataSecurityException
	{	
		System.out.println("SuperficialTemporalArtery: " + componentID + "   " + parentID);
		
		int bodyID = 1;
		int projectID = 1;
		String vertices = "";
		
		ArrayList mySqlList= new ArrayList();
		int returnCode = 0;
	
		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();

		// SuperficialTemporalArtery
		if (parentID.equals("SuperficialTemporalArtery:01")) 
		{	
			// We can generate the SuperficialTemporalArtery
			if (currentPoints == null )
			{
				double circumference = 0.00625;
				double[] startPos = {1.5, 0.25, 0.25};
				currentPoints = BioGraphics.octogonXPlane(startPos, circumference);
			}
			
			int nMaxSegs = 11;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
		
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
	     
				if (numSegs==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, 0.5, 0.00);
				}
				else if (numSegs==1){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, 0.5, -0.10);
				}
				else if (numSegs==2){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, 0.5, -0.15);
				}	
				else if (numSegs==3){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, 0.5, 0.0);
				}	
				else if (numSegs==4){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, 0.5, -0.05);
				}	
				else if (numSegs==5){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.15, 0.5, -0.1);
				}
				else if (numSegs==6){
					bioInstruct.setTransType(Constants.SCALE);
					bioInstruct.setTranslateMatrix(-0.15, 0.5, 0.0);
					bioInstruct.setScaleMatrix(0.95, 0.95, 0.95);
				}
				else if (numSegs==7){
					bioInstruct.setTransType(Constants.SCALE);
					bioInstruct.setTranslateMatrix(0.1, 0.5, 0.0);
					bioInstruct.setScaleMatrix(0.95, 0.95, 0.95);
				}
				else if (numSegs==8){
					bioInstruct.setTransType(Constants.SCALE);
					bioInstruct.setTranslateMatrix(0.15, 0.5, 0.0);
					bioInstruct.setScaleMatrix(0.80, 0.80, 0.80);
				}
				else if (numSegs==9){
					bioInstruct.setTransType(Constants.SCALE);
					bioInstruct.setTranslateMatrix(-0.25, 0.5, 0.0);
					bioInstruct.setScaleMatrix(0.70, 0.70, 0.70);
				}
				else if (numSegs==10){
					bioInstruct.setTransType(Constants.SCALE);
					bioInstruct.setTranslateMatrix(-0.25, 0.5, 0.0);
					bioInstruct.setScaleMatrix(0.70, 0.70, 0.70);
				}
				else 
				{
				bioInstruct.setTransType(Constants.TRANSLATE);
				bioInstruct.setTranslateMatrix(0.00, 1.0, 0.0);
				}	
		
				
				
	    		// Add the instruction into the instruction set
	    		bioMightInstructSet.addElement(bioInstruct);
			}
		// SuperficialTemporalArtery		    
		} 
		
		else if (parentID.equals("SuperficialTemporalArtery:02")) {	
			int nMaxSegs = 6;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
				
				// We can generate the SuperficialTemporalArtery
				if (currentPoints == null )
				{
					double circumference = 0.00625;
					double[] startPos = {-1.5, 0.25, 0.25};
					currentPoints = BioGraphics.octogonXPlane(startPos, circumference);
				}
			
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
				if (numSegs==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.1, 0.50, 0.40);
				}
				else if (numSegs==1){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.08, 0.40, 0.35);
				}
				else if (numSegs==2){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, 0.35, 0.30);
				}	
				else if (numSegs==3){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, 0.25, 0.25);
				}	
				else if (numSegs==4){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.03, 0.10, 0.25);
				}
				else if (numSegs==5){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.06, 0.45, 0.25);
				}
				else if (numSegs==6){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.07, 0.45, 0.25);
				}
				else 
				{
				bioInstruct.setTransType(Constants.TRANSLATE);
				bioInstruct.setTranslateMatrix(0.00, 1.0, 0.0);
				}	
		
							
				
		    	// Add the instruction into the instruction set
		    	bioMightInstructSet.addElement(bioInstruct);
			}
		}

		else if (parentID.equals("SuperficialTemporalArtery:03")) {	
			int nMaxSegs = 5;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
				
				// We can generate the SuperficialTemporalArtery
				if (currentPoints == null )
				{
					double circumference = 0.00625;
					double[] startPos = {-1.5, 0.25, 0.25};
					currentPoints = BioGraphics.octogonXPlane(startPos, circumference);
				}
			
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
				if (numSegs==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, 0.25, -0.35);
				}
				else if (numSegs==1){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, 0.35, -0.45);
				}
				else if (numSegs==2){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, 0.40, -0.35);
				}	
				else if (numSegs==3){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, 0.35, -0.50);
				}	
				else if (numSegs==4){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, 0.20, -0.35);
				}
				else 
				{
				bioInstruct.setTransType(Constants.TRANSLATE);
				bioInstruct.setTranslateMatrix(0.00, 1.0, 0.0);
				}	
		
					
		    	// Add the instruction into the instruction set
		    	bioMightInstructSet.addElement(bioInstruct);
			}
		}
		
		
		
		/************************************8
		 * Other side
		 */
		
		else if (parentID.equals("SuperficialTemporalArtery:04")) {	
			
			int nMaxSegs = 11;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
		
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
	     
				if (numSegs==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, 0.5, 0.00);
				}
				else if (numSegs==1){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, 0.5, -0.10);
				}
				else if (numSegs==2){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, 0.5, -0.15);
				}	
				else if (numSegs==3){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, 0.5, 0.0);
				}	
				else if (numSegs==4){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, 0.5, -0.05);
				}	
				else if (numSegs==5){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.15, 0.5, -0.1);
				}
				else if (numSegs==6){
					bioInstruct.setTransType(Constants.SCALE);
					bioInstruct.setTranslateMatrix(0.15, 0.5, 0.0);
					bioInstruct.setScaleMatrix(0.95, 0.95, 0.95);
				}
				else if (numSegs==7){
					bioInstruct.setTransType(Constants.SCALE);
					bioInstruct.setTranslateMatrix(-0.1, 0.5, 0.0);
					bioInstruct.setScaleMatrix(0.95, 0.95, 0.95);
				}
				else if (numSegs==8){
					bioInstruct.setTransType(Constants.SCALE);
					bioInstruct.setTranslateMatrix(-0.15, 0.5, 0.0);
					bioInstruct.setScaleMatrix(0.80, 0.80, 0.80);
				}
				else if (numSegs==9){
					bioInstruct.setTransType(Constants.SCALE);
					bioInstruct.setTranslateMatrix(0.25, 0.5, 0.0);
					bioInstruct.setScaleMatrix(0.70, 0.70, 0.70);
				}
				else if (numSegs==10){
					bioInstruct.setTransType(Constants.SCALE);
					bioInstruct.setTranslateMatrix(0.25, 0.5, 0.0);
					bioInstruct.setScaleMatrix(0.70, 0.70, 0.70);
				}
				else 
				{
				bioInstruct.setTransType(Constants.TRANSLATE);
				bioInstruct.setTranslateMatrix(0.00, 1.0, 0.0);
				}	
		
		    	// Add the instruction into the instruction set
		    	bioMightInstructSet.addElement(bioInstruct);
			}
		}
		else if (parentID.equals("SuperficialTemporalArtery:05")) {	
			int nMaxSegs = 7;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
				
				// We can generate the SuperficialTemporalArtery
				if (currentPoints == null )
				{
					double circumference = 0.00625;
					double[] startPos = {-1.5, 0.25, 0.25};
					currentPoints = BioGraphics.octogonXPlane(startPos, circumference);
				}
			
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
				if (numSegs==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.1, 0.50, 0.40);
				}
				else if (numSegs==1){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.08, 0.40, 0.35);
				}
				else if (numSegs==2){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, 0.35, 0.30);
				}	
				else if (numSegs==3){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, 0.25, 0.25);
				}	
				else if (numSegs==4){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.03, 0.10, 0.25);
				}
				else if (numSegs==5){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.06, 0.45, 0.25);
				}
				else if (numSegs==6){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.07, 0.45, 0.25);
				}
		

				else 
				{
				bioInstruct.setTransType(Constants.TRANSLATE);
				bioInstruct.setTranslateMatrix(0.00, 1.0, 0.0);
				}	
		
							
				
		    	// Add the instruction into the instruction set
		    	bioMightInstructSet.addElement(bioInstruct);
			}
		}

		else if (parentID.equals("SuperficialTemporalArtery:06")) {	
			int nMaxSegs = 4;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
				
				// We can generate the SuperficialTemporalArtery
				if (currentPoints == null )
				{
					double circumference = 0.00625;
					double[] startPos = {-1.5, 0.25, 0.25};
					currentPoints = BioGraphics.octogonXPlane(startPos, circumference);
				}
			
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
				if (numSegs==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, 0.25, -0.35);
				}
				else if (numSegs==1){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, 0.35, -0.45);
				}
				else if (numSegs==2){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, 0.40, -0.35);
				}	
				else if (numSegs==3){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, 0.35, -0.50);
				}	
				else if (numSegs==4){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, 0.20, -0.35);
				}
				else
				{}
							
				
		    	// Add the instruction into the instruction set
		    	bioMightInstructSet.addElement(bioInstruct);
			}
		}
	
		
		DBUtils.generateFacedComponents(Constants.QUADRANGLE, startID, componentType, componentName, componentID, currentPoints, bioMightInstructSet);
		System.out.println("Generating the Rows for SuperficialTemporalArteryEndothelium: " + componentID + "   " + componentType);

		
		return returnCode;
	}	
	
	
	
	/***************************************************************************************
	 * GENERATE EXTERNAL MAXILLARY ARTERY
	 * 
	 * This generates the ExternalMaxillary Artery. 
	 *
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/
	  	
	public int generateExternalMaxillaryArtery(String startID, String componentType, String componentName, String componentID,  String parentID, double[][] currentPoints) 
		throws DataException, DataSecurityException
	{	
		System.out.println("ExternalMaxillaryArtery: " + componentID + "   " + parentID);
		
		int bodyID = 1;
		int projectID = 1;
		String vertices = "";
		
		ArrayList mySqlList= new ArrayList();
		int returnCode = 0;
	
		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();

		// ExternalMaxillaryArtery
		if (parentID.equals("ExternalMaxillaryArtery:01")) 
		{	
			// We can generate the ExternalMaxillaryArtery
			if (currentPoints == null )
			{
				double circumference = 0.00625;
				double[] startPos = {1.5, 0.25, 0.25};
				currentPoints = BioGraphics.octogonXPlane(startPos, circumference);
			}
			
			int nMaxSegs = 10;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
		
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
	     
				if (numSegs==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, 0.25, 0.05);
				}
				else if (numSegs==1){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.05, 0.25, 0.10);
				}
				else if (numSegs==2){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.05, 0.10, 0.15);
				}	
				else if (numSegs==3){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.05, 0.05, 0.25);
				}	
				else if (numSegs==4){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, 0.05, 0.25);
				}	
				else if (numSegs==5){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.05, 0.10, 0.20);
				}
				else if (numSegs==6){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, 0.05, 0.25);
				}
				else if (numSegs==7){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.10, 0.35, 0.45);
				}
				else if (numSegs==8){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.20, 0.45, 0.35);
				}
				else if (numSegs==9){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.15, 0.45, 0.35);
				}
				else 
				{
				bioInstruct.setTransType(Constants.TRANSLATE);
				bioInstruct.setTranslateMatrix(0.00, 1.0, 0.0);
				}	
		
				
				
	    		// Add the instruction into the instruction set
	    		bioMightInstructSet.addElement(bioInstruct);
			}
		// ExternalMaxillaryArtery		    
		} 
		
		else if (parentID.equals("ExternalMaxillaryArtery:02")) {	
			int nMaxSegs = 10;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
				
				// We can generate the ExternalMaxillaryArtery
				if (currentPoints == null )
				{
					double circumference = 0.00625;
					double[] startPos = {-1.5, 0.25, 0.25};
					currentPoints = BioGraphics.octogonXPlane(startPos, circumference);
				}
			
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
				
				if (numSegs==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, 0.25, 0.05);
				}
				else if (numSegs==1){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.05, 0.25, 0.10);
				}
				else if (numSegs==2){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.05, 0.10, 0.15);
				}	
				else if (numSegs==3){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.05, 0.05, 0.25);
				}	
				else if (numSegs==4){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, 0.05, 0.25);
				}	
				else if (numSegs==5){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.05, 0.10, 0.20);
				}
				else if (numSegs==6){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, 0.05, 0.25);
				}
				else if (numSegs==7){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.10, 0.35, 0.45);
				}
				else if (numSegs==8){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.20, 0.45, 0.35);
				}
				else if (numSegs==9){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.10, 0.45, 0.35);
				}
				else 
				{
				bioInstruct.setTransType(Constants.TRANSLATE);
				bioInstruct.setTranslateMatrix(0.00, 1.0, 0.0);
				}	
				
				
		    	// Add the instruction into the instruction set
		    	bioMightInstructSet.addElement(bioInstruct);
			}
		}

	
		
		DBUtils.generateFacedComponents(Constants.QUADRANGLE, startID, componentType, componentName, componentID, currentPoints, bioMightInstructSet);
		System.out.println("Generating the Rows for ExternalMaxillaryArteryEndothelium: " + componentID + "   " + componentType);

		
		return returnCode;
	}	
	
	/***************************************************************************************
	 * GENERATE INTERNAL MAXILLARY ARTERY
	 * 
	 * This generates the InternalMaxillary Artery. 
	 *
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/
	  	
	public int generateInternalMaxillaryArtery(String startID, String componentType, String componentName, String componentID,  String parentID, double[][] currentPoints) 
		throws DataException, DataSecurityException
	{	
		System.out.println("InternalMaxillaryArtery: " + componentID + "   " + parentID);
		
		int bodyID = 1;
		int projectID = 1;
		String vertices = "";
		
		ArrayList mySqlList= new ArrayList();
		int returnCode = 0;
	
		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();

		// InternalMaxillaryArtery
		if (parentID.equals("InternalMaxillaryArtery:01")) 
		{	
			// We can generate the InternalMaxillaryArtery
			if (currentPoints == null )
			{
				double circumference = 0.00625;
				double[] startPos = {1.5, 0.25, 0.25};
				currentPoints = BioGraphics.octogonXPlane(startPos, circumference);
			}
			
			int nMaxSegs = 8;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
		
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
	     
				if (numSegs==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.1, 0.1, 0.5);
				}
				else if (numSegs==1){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.15, 0.15, 0.5);
				}
				else if (numSegs==2){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.25, 0.01, 0.50);
				}
				else if (numSegs==3){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.20, 0.0, 0.5);
				}
				else if (numSegs==4){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.15, 0.03, 0.5);
				}
				else if (numSegs==5){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.25, -0.2, 0.5);
				}
				else if (numSegs==6){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.40, -0.11, 0.25);
				}
				else if (numSegs==7){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.2, -0.14, 0.25);
				}
			
				else 
				{
				bioInstruct.setTransType(Constants.TRANSLATE);
				bioInstruct.setTranslateMatrix(0.00, 1.0, 0.0);
				}	
		
				
				
	    		// Add the instruction into the instruction set
	    		bioMightInstructSet.addElement(bioInstruct);
			}
		// InternalMaxillaryArtery		    
		} 
		
		else if (parentID.equals("InternalMaxillaryArtery:02")) {	
				
			// We can generate the InternalMaxillaryArtery
			if (currentPoints == null )
			{
				double circumference = 0.00625;
				double[] startPos = {-1.5, 0.25, 0.25};
				currentPoints = BioGraphics.octogonXPlane(startPos, circumference);
			}
					
			int nMaxSegs = 8;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
		
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
	     
				if (numSegs==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.1, 0.1, 0.5);
				}
				else if (numSegs==1){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.15, 0.15, 0.5);
				}
				else if (numSegs==2){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.25, 0.01, 0.50);
				}
				else if (numSegs==3){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.20, 0.0, 0.5);
				}
				else if (numSegs==4){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.15, 0.03, 0.5);
				}
				else if (numSegs==5){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.25, -0.2, 0.5);
				}
				else if (numSegs==6){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.40, -0.11, 0.25);
				}
				else if (numSegs==7){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.20, -0.14, 0.25);
				}
				
				else 
				{
				bioInstruct.setTransType(Constants.TRANSLATE);
				bioInstruct.setTranslateMatrix(0.00, 1.0, 0.0);
				}	
				
				
		    	// Add the instruction into the instruction set
		    	bioMightInstructSet.addElement(bioInstruct);
			}
		}
	
		
		DBUtils.generateFacedComponents(Constants.QUADRANGLE, startID, componentType, componentName, componentID, currentPoints, bioMightInstructSet);
		System.out.println("Generating the Rows for InternalMaxillaryArteryEndothelium: " + componentID + "   " + componentType);

		
		return returnCode;
	}	
	
	
	
	
	/***************************************************************************************
	 * GENERATE ANGULAR VEIN
	 * 
	 * This generates the AngularVein. 
	 *
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException	
	 * @throws DataSecurityException
	 ***************************************************************************************/
	  	
	public int generateAngularVein(String startID, String componentType, String componentName, String componentID,  String parentID, double[][] currentPoints) 
		throws DataException, DataSecurityException
	{	
		System.out.println("AngularVein: " + componentID + "   " + parentID);
		
		int bodyID = 1;
		int projectID = 1;
		String vertices = "";
		
		ArrayList mySqlList= new ArrayList();
		int returnCode = 0;
	
		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();

		// AngularVein
		if (parentID.equals("AngularVein:01")) 
		{	
			// We can generate the AngularVein
			if (currentPoints == null )
			{
				double circumference = 0.00625;
				double[] startPos = {1.5, 0.25, 0.00};
				currentPoints = BioGraphics.octogonYPlane(startPos, circumference);
			}
			
			int nMaxSegs = 6;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {		
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
	     
				if (numSegs==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -0.25, 0.0);
				}
				else if (numSegs==1){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -0.25, 0.0);
				}
				else if (numSegs==2){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.125, -0.5, 0.0);
				}
				else if (numSegs==3){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.125, -0.5, 0.0);
				}
				else if (numSegs==4){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.15, -0.5, 0.015);
				}
				else if (numSegs==5){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.175, -0.5, 0.010);
				}
				else {
					bioInstruct.setPivotPoint(3);
					bioInstruct.setRotateVector(0.0, 0.0, 1.0);
					bioInstruct.setTransType(2);
					bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);
				}
				
				
	    		// Add the instruction into the instruction set
	    		bioMightInstructSet.addElement(bioInstruct);
			}
		// AngularVein		    
		} else if (parentID.equals("AngularVein:02")) {	
			int nMaxSegs = 4;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
				
				// We can generate the AngularVein
				if (currentPoints == null )
				{
					double circumference = 0.00625;
					double[] startPos = {-1.5, 0.25, 0.00};
					currentPoints = BioGraphics.octogonYPlane(startPos, circumference);
				}
			
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
		      
			     
				if (numSegs==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -0.25, 0.0);
				}
				else if (numSegs==1){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -0.25, 0.0);
				}
				else if (numSegs==2){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.125, -0.5, 0.0);
				}
				else if (numSegs==3){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.125, -0.5, 0.0);
				}
				else if (numSegs==4){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.15, -0.5, 0.015);
				}
				else if (numSegs==5){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.175, -0.5, 0.010);
				}
				else {
					bioInstruct.setPivotPoint(3);
					bioInstruct.setRotateVector(0.0, 0.0, 1.0);
					bioInstruct.setTransType(2);
					bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);
				}
					
					
		    	// Add the instruction into the instruction set
		    	bioMightInstructSet.addElement(bioInstruct);
			}
		    
		}

		
		
		DBUtils.generateFacedComponents(Constants.QUADRANGLE, startID, componentType, componentName, componentID, currentPoints, bioMightInstructSet);
		System.out.println("Generating the Rows for AngularVeinEndothelium: " + componentID + "   " + componentType);

		
		return returnCode;
	}

	
	
	/***************************************************************************************
	 * GENERATE HYPOPPYSEAL ARTERY
	 * 
	 * This generates the InferiorHypophyseal Artery. 
	 *
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/
	  	
	public int generateInferiorHypophysealArtery(String startID, String componentType, String componentName, String componentID,  String parentID, double[][] currentPoints) 
		throws DataException, DataSecurityException
	{	
		System.out.println("InferiorHypophysealArtery: " + componentID + "   " + parentID);
		
		int bodyID = 1;
		int projectID = 1;
		String vertices = "";
		
		ArrayList mySqlList= new ArrayList();
		int returnCode = 0;
	
		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();

		// InferiorHypophysealArtery
		if (componentID.equals("InferiorHypophysealArtery:01")) 
		{	
			// We can generate the InferiorHypophysealArtery
			if (currentPoints == null )
			{
				double circumference = 0.00625;
				double[] startPos = {1.5, 0.25, 0.25};
				currentPoints = BioGraphics.octogonXPlane(startPos, circumference);
			}
			
			int nMaxSegs = 6;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
		
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
	     
				if (numSegs==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, 0.0, -0.20);
				}
				else if (numSegs==1){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.10, -0.125, -0.25);
				}
				else if (numSegs==2){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, 0.0, -0.10);
				}	
				else if (numSegs==3){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -0.125, -0.15);
				}	
				else if (numSegs==4){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.10, 0.0, -0.20);
				}	
				else if (numSegs==5){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -0.25, -0.25);
				}
				else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -0.25, -0.25);
				}
				
				
	    		// Add the instruction into the instruction set
	    		bioMightInstructSet.addElement(bioInstruct);
			}
		// InferiorHypophysealArtery		    
		} else if (parentID.equals("InferiorHypophysealArtery:02")) {	
			int nMaxSegs = 0;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
				
				// We can generate the InferiorHypophysealArtery
				if (currentPoints == null )
				{
					double circumference = 0.00625;
					double[] startPos = {-1.5, 0.25, 0.25};
					currentPoints = BioGraphics.octogonXPlane(startPos, circumference);
				}
			
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
	     
				if (numSegs==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.5, 0.0, 0.0);
				}		
				else 
				{
				bioInstruct.setTransType(Constants.TRANSLATE);
				bioInstruct.setTranslateMatrix(0.00, 1.0, 0.0);
				}
					
					
		    	// Add the instruction into the instruction set
		    	bioMightInstructSet.addElement(bioInstruct);
			}
		}

		
		DBUtils.generateFacedComponents(Constants.QUADRANGLE, startID, componentType, componentName, componentID, currentPoints, bioMightInstructSet);
		System.out.println("Generating the Rows for InferiorHypophysealArteryEndothelium: " + componentID + "   " + componentType);

		
		return returnCode;
	}


	/***************************************************************************************
	 * GENERATE HYPOPPYSEAL ARTERY
	 * 
	 * This generates the SuperiorHypophyseal Artery. 
	 *
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/
	  	
	public int generateSuperiorHypophysealArtery(String startID, String componentType, String componentName, String componentID,  String parentID, double[][] currentPoints) 
		throws DataException, DataSecurityException
	{	
		System.out.println("SuperiorHypophysealArtery: " + componentID + "   " + parentID);
		
		int bodyID = 1;
		int projectID = 1;
		String vertices = "";
		
		ArrayList mySqlList= new ArrayList();
		int returnCode = 0;
	
		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();

		// SuperiorHypophysealArtery
		if (componentID.equals("SuperiorHypophysealArtery:01")) 
		{	
			// We can generate the SuperiorHypophysealArtery
			if (currentPoints == null )
			{
				double circumference = 0.00625;
				double[] startPos = {1.5, 0.25, 0.25};
				currentPoints = BioGraphics.octogonXPlane(startPos, circumference);
			}
			
			int nMaxSegs = 6;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
		
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
	     
				if (numSegs==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, 0.0, -0.20);
				}
				else if (numSegs==1){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.10, -0.125, -0.25);
				}
				else if (numSegs==2){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, 0.0, -0.10);
				}	
				else if (numSegs==3){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.15, -0.125, -0.15);
				}	
				else if (numSegs==4){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, 0.0, -0.20);
				}	
				else if (numSegs==5){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -0.25, -0.25);
				}
				else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -0.25, -0.25);
				}
				
				
	    		// Add the instruction into the instruction set
	    		bioMightInstructSet.addElement(bioInstruct);
			}
		// SuperiorHypophysealArtery		    
		} else if (parentID.equals("SuperiorHypophysealArtery:02")) {	
			int nMaxSegs = 0;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
				
				// We can generate the SuperiorHypophysealArtery
				if (currentPoints == null )
				{
					double circumference = 0.00625;
					double[] startPos = {-1.5, 0.25, 0.25};
					currentPoints = BioGraphics.octogonXPlane(startPos, circumference);
				}
			
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
	     
				if (numSegs==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.5, 0.0, 0.0);
				}		
				else 
				{
				bioInstruct.setTransType(Constants.TRANSLATE);
				bioInstruct.setTranslateMatrix(0.00, 1.0, 0.0);
				}
					
					
		    	// Add the instruction into the instruction set
		    	bioMightInstructSet.addElement(bioInstruct);
			}
		}

		
		DBUtils.generateFacedComponents(Constants.QUADRANGLE, startID, componentType, componentName, componentID, currentPoints, bioMightInstructSet);
		System.out.println("Generating the Rows for SuperiorHypophysealArteryEndothelium: " + componentID + "   " + componentType);

		
		return returnCode;
	}


	/***************************************************************************************
	 * GENERATE HYPOPPYSEAL ARTERY
	 * 
	 * This generates the AnteriorCommunicating Artery. 
	 *
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/
	  	
	public int generateAnteriorCommunicatingArtery(String startID, String componentType, String componentName, String componentID,  String parentID, double[][] currentPoints) 
		throws DataException, DataSecurityException
	{	
		System.out.println("AnteriorCommunicatingArtery: " + componentID + "   " + parentID);
		
		int bodyID = 1;
		int projectID = 1;
		String vertices = "";
		
		ArrayList mySqlList= new ArrayList();
		int returnCode = 0;
	
		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();

		// AnteriorCommunicatingArtery
		if (componentID.equals("AnteriorCommunicatingArtery:01")) 
		{	
			// We can generate the AnteriorCommunicatingArtery
			if (currentPoints == null )
			{
				double circumference = 0.00625;
				double[] startPos = {1.5, 0.25, 0.25};
				currentPoints = BioGraphics.octogonXPlane(startPos, circumference);
			}
			
			int nMaxSegs = 1;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
		
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
	     
				if (numSegs==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.40, 0.0, 0.0);
				}
				
				else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -0.25, 0.0);
				}
				
				
	    		// Add the instruction into the instruction set
	    		bioMightInstructSet.addElement(bioInstruct);
			}
		}	
		
		DBUtils.generateFacedComponents(Constants.QUADRANGLE, startID, componentType, componentName, componentID, currentPoints, bioMightInstructSet);
		System.out.println("Generating the Rows for AnteriorCommunicatingArteryEndothelium: " + componentID + "   " + componentType);

		
		return returnCode;
	}
	
	/***************************************************************************************
	 * GENERATE POSTERIOR COMMUNICATING ARTERY
	 * 
	 * This generates the PosteriorCommunicating Artery. 
	 *
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/
	  	
	public int generatePosteriorCommunicatingArtery(String startID, String componentType, String componentName, String componentID,  String parentID, double[][] currentPoints) 
		throws DataException, DataSecurityException
	{	
		System.out.println("PosteriorCommunicatingArtery: " + componentID + "   " + parentID);
		
		int bodyID = 1;
		int projectID = 1;
		String vertices = "";
		
		ArrayList mySqlList= new ArrayList();
		int returnCode = 0;
	
		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();

		// PosteriorCommunicatingArtery
		if (parentID.equals("PosteriorCommunicatingArtery:01")) 
		{	
			// We can generate the PosteriorCommunicatingArtery
			if (currentPoints == null )
			{
				double circumference = 0.00625;
				double[] startPos = {1.5, 0.25, 0.25};
				currentPoints = BioGraphics.octogonXPlane(startPos, circumference);
			}
			
			int nMaxSegs = 2;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
		
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
	     
				if (numSegs==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.18, 0.15, 0.25);
				}
				else if (numSegs==1){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.09, 0.08, 0.17);
				}	
	
				
				else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, 0.0, 0.45);
				}
				
				
	    		// Add the instruction into the instruction set
	    		bioMightInstructSet.addElement(bioInstruct);
			}
			
		// PosteriorCommunicatingArtery		    
		} else if (parentID.equals("PosteriorCommunicatingArtery:02")) {	
			int nMaxSegs = 2;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
				
				// We can generate the PosteriorCommunicatingArtery
				if (currentPoints == null )
				{
					double circumference = 0.00625;
					double[] startPos = {-1.5, 0.25, 0.25};
					currentPoints = BioGraphics.octogonXPlane(startPos, circumference);
				}
			
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
	     
				if (numSegs==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.18, 0.15, 0.25);
				}
				else if (numSegs==1){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.09, 0.08, 0.17);
				}	
			

				else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.05, 0.0, 0.45);
				}
				
				
	    		// Add the instruction into the instruction set
	    		bioMightInstructSet.addElement(bioInstruct);
				
			}
		}

		
		DBUtils.generateFacedComponents(Constants.QUADRANGLE, startID, componentType, componentName, componentID, currentPoints, bioMightInstructSet);
		System.out.println("Generating the Rows for PosteriorCommunicatingArteryEndothelium: " + componentID + "   " + componentType);

		
		return returnCode;
	}
	

	/***************************************************************************************
	 * GENERATE INTERNAL CAROTID ARTERY
	 * 
	 * This generates the Internal Carotid Artery. They are an etension of the 
	 * Common Carotid Arteries
	 *
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/
	  	
	public int generateInternalCarotidArtery(String startID, String componentType, String componentName, String componentID,  String parentID, double[][] currentPoints) 
		throws DataException, DataSecurityException
	{	
		System.out.println("InternalCarotidArtery: " + componentID + "   " + parentID);
		
		int bodyID = 1;
		int projectID = 1;
		String vertices = "";
		
		ArrayList mySqlList= new ArrayList();
		int returnCode = 0;
	
		
		// We can generate the InternalCarotidArtery
		if (currentPoints == null )
		{
			double circumference = 0.25;
			
			double[] startPos = {2.0,-4.0, -3.0};
			currentPoints = BioGraphics.octogonYPlane(startPos, circumference);
		}

		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();

		// Left Internal Carotid Artery - Cervical Region
		if (parentID.equals("InternalCarotidArtery:01")) 
		{	
			int nMaxSegs = 2;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
		
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
	     
				if (numSegs==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.05, 0.5, 0.0);
				}
				else if (numSegs==1){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.02, 0.5, 0.0);
				}
				
				
				else {
					bioInstruct.setPivotPoint(3);
					bioInstruct.setRotateVector(0.0, 0.0, 1.0);
					bioInstruct.setTransType(2);
					bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);
				}
				
				
	    		// Add the instruction into the instruction set
	    		bioMightInstructSet.addElement(bioInstruct);
			}
		// Right Internal Carotid Artery - Cervical Region		    
		} else if (parentID.equals("InternalCarotidArtery:02")) {	
			int nMaxSegs = 2;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
			
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
		      
				if (numSegs==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.01, 0.5, 0.0);
				}
				else if (numSegs==1){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.03, 0.5, 0.0);
				}
				else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.00, 1.0, 0.0);
				}
					
					
		    	// Add the instruction into the instruction set
		    	bioMightInstructSet.addElement(bioInstruct);
			}
		    
		}
		// Left Internal Carotid Artery - Head Region
		else if (parentID.equals("InternalCarotidArtery:03")) {	
				int nMaxSegs = 23;
				for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
			
					// Create a place for an instruction 
					BioMightInstruction bioInstruct = new BioMightInstruction();
		     
					if (numSegs==0){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.45, 0.75, 0.0);
					}
					else if (numSegs==1){
						bioInstruct.setTransType(Constants.SCALE);
						bioInstruct.setTranslateMatrix(-0.35, 1.0, -0.15);
						bioInstruct.setScaleMatrix(0.90, 1.0, 0.90);
					}
					else if (numSegs==2){
						bioInstruct.setTransType(Constants.SCALE);
						bioInstruct.setTranslateMatrix(0.25, 0.75, -0.20);
						bioInstruct.setScaleMatrix(0.90, 0.5, 0.90);
					}
					else if (numSegs==3){
						BioMightOrientation orientation = new BioMightOrientation(0.0, -1.0, 0.0, 90.0);
			 			bioInstruct.setTransType(Constants.ROTATEOCTO);
		    			bioInstruct.setTheta(45);	
		    			bioInstruct.setPivotPoint(4);	
		     			bioInstruct.setRotateVector(0.0, 0.0, 1.0);
		     			bioInstruct.setOrientation(orientation);
					}
					else if (numSegs==4){
						BioMightOrientation orientation = new BioMightOrientation(0.0, -1.0, 0.0, 90.0);
			 			bioInstruct.setTransType(Constants.ROTATEOCTO);
		    			bioInstruct.setTheta(45);	
		    			bioInstruct.setPivotPoint(4);	
		     			bioInstruct.setRotateVector(0.0, 0.0, 1.0);
		     			bioInstruct.setOrientation(orientation);
					}
					else if (numSegs==5){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.15, 0.0, 0.05);
					}
					else if (numSegs==6){
						BioMightOrientation orientation = new BioMightOrientation(0.0, -1.0, 0.0, 90.0);
			 			bioInstruct.setTransType(Constants.ROTATEOCTO);
		    			bioInstruct.setTheta(45);	
		    			bioInstruct.setPivotPoint(4);	
		     			bioInstruct.setRotateVector(0.0, 0.0, 1.0);
		     			bioInstruct.setOrientation(orientation);
					}
					else if (numSegs==7){						
						bioInstruct.setTransType(Constants.SCALE);
						bioInstruct.setTranslateMatrix(-0.20, -0.10, 0.05);
						bioInstruct.setScaleMatrix(0.90, 1.0, 0.90);
					}
					else if (numSegs==8){
						BioMightOrientation orientation = new BioMightOrientation(0.0, -1.0, 0.0, 90.0);
			 			bioInstruct.setTransType(Constants.ROTATEOCTO);
		    			bioInstruct.setTheta(-45);	
		    			bioInstruct.setPivotPoint(0);	
		     			bioInstruct.setRotateVector(0.0, 0.0, 1.0);
		     			bioInstruct.setOrientation(orientation);
					}
					else if (numSegs==9){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.20, -0.07, 0.0);
					}		
					else if (numSegs==10){
						BioMightOrientation orientation = new BioMightOrientation(0.0, -1.0, 0.0, 90.0);
			 			bioInstruct.setTransType(Constants.ROTATEOCTO);
		    			bioInstruct.setTheta(-45);	
		    			bioInstruct.setPivotPoint(0);	
		     			bioInstruct.setRotateVector(0.0, 0.0, 1.0);
		     			bioInstruct.setOrientation(orientation);
					}
					else if (numSegs==11){
						BioMightOrientation orientation = new BioMightOrientation(0.0, -1.0, 0.0, 90.0);
			 			bioInstruct.setTransType(Constants.ROTATEOCTO);
		    			bioInstruct.setTheta(-45);	
		    			bioInstruct.setPivotPoint(0);	
		     			bioInstruct.setRotateVector(0.0, 0.0, 1.0);
		     			bioInstruct.setOrientation(orientation);
					}
					else if (numSegs==12){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.05, 0.50, 0.0);
					}
					else if (numSegs==13){
						BioMightOrientation orientation = new BioMightOrientation(0.0, -1.0, 0.0, 90.0);
			 			bioInstruct.setTransType(Constants.ROTATEOCTO);
		    			bioInstruct.setTheta(-45);	
		    			bioInstruct.setPivotPoint(0);	
		     			bioInstruct.setRotateVector(0.0, 0.0, 1.0);
		     			bioInstruct.setOrientation(orientation);
					}
					else if (numSegs==14){
						BioMightOrientation orientation = new BioMightOrientation(0.0, -1.0, 0.0, 90.0);
			 			bioInstruct.setTransType(Constants.ROTATEOCTO);
		    			bioInstruct.setTheta(-45);	
		    			bioInstruct.setPivotPoint(0);	
		     			bioInstruct.setRotateVector(0.0, 0.0, 1.0);
		     			bioInstruct.setOrientation(orientation);
					}
					else if (numSegs==15){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.25, 0.0, 0.05);
					}
					else if (numSegs==16){
						BioMightOrientation orientation = new BioMightOrientation(0.0, -1.0, 0.0, 90.0);
			 			bioInstruct.setTransType(Constants.ROTATEOCTO);
		    			bioInstruct.setTheta(45);	
		    			bioInstruct.setPivotPoint(4);	
		     			bioInstruct.setRotateVector(0.0, 0.0, 1.0);
		     			bioInstruct.setOrientation(orientation);
					}
					else if (numSegs==17){
						BioMightOrientation orientation = new BioMightOrientation(0.0, -1.0, 0.0, 90.0);
			 			bioInstruct.setTransType(Constants.ROTATEOCTO);
		    			bioInstruct.setTheta(45);	
		    			bioInstruct.setPivotPoint(4);	
		     			bioInstruct.setRotateVector(0.0, 0.0, 1.0);
		     			bioInstruct.setOrientation(orientation);
					}
					else if (numSegs==18){
						BioMightOrientation orientation = new BioMightOrientation(0.0, -1.0, 0.0, 90.0);
			 			bioInstruct.setTransType(Constants.ROTATEOCTO);
		    			bioInstruct.setTheta(45);	
		    			bioInstruct.setPivotPoint(4);	
		     			bioInstruct.setRotateVector(0.0, 0.0, 1.0);
		     			bioInstruct.setOrientation(orientation);
					}
					else if (numSegs==19){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.25, 0.25, 0.0);
					}
					else if (numSegs==20){
						BioMightOrientation orientation = new BioMightOrientation(0.0, -1.0, 0.0, 90.0);
			 			bioInstruct.setTransType(Constants.ROTATEOCTO);
		    			bioInstruct.setTheta(-45);	
		    			bioInstruct.setPivotPoint(0);	
		     			bioInstruct.setRotateVector(0.0, 0.0, 1.0);
		     			bioInstruct.setOrientation(orientation);
					}	
					else if (numSegs==21){
						BioMightOrientation orientation = new BioMightOrientation(0.0, -1.0, 0.0, 90.0);
			 			bioInstruct.setTransType(Constants.ROTATEOCTO);
		    			bioInstruct.setTheta(-45);	
		    			bioInstruct.setPivotPoint(0);	
		     			bioInstruct.setRotateVector(0.0, 0.0, 1.0);
		     			bioInstruct.setOrientation(orientation);
					}	
					else if (numSegs==22){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.20, 0.55, 0.1);
					}
					
					
			
					else {
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.25, -1.0, 0.0);
					}
					
					
		    		// Add the instruction into the instruction set
		    		bioMightInstructSet.addElement(bioInstruct);
				}
			}
		 //Right Internal Carotid Artery - Head Region
		 else if (parentID.equals("InternalCarotidArtery:04")) {		     
					int nMaxSegs = 23;
					for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
				
						// Create a place for an instruction 
						BioMightInstruction bioInstruct = new BioMightInstruction();
			     
						if (numSegs==0){
							bioInstruct.setTransType(Constants.TRANSLATE);
							bioInstruct.setTranslateMatrix(0.45, 0.75, 0.0);
						}
						else if (numSegs==1){
							bioInstruct.setTransType(Constants.SCALE);
							bioInstruct.setTranslateMatrix(0.35, 1.0, -0.15);
							bioInstruct.setScaleMatrix(0.90, 1.0, 0.90);
						}
						else if (numSegs==2){
							bioInstruct.setTransType(Constants.SCALE);
							bioInstruct.setTranslateMatrix(-0.25, 0.75, -0.20);
							bioInstruct.setScaleMatrix(0.90, 0.5, 0.90);
						}
						else if (numSegs==3){
							BioMightOrientation orientation = new BioMightOrientation(0.0, -1.0, 0.0, 90.0);
				 			bioInstruct.setTransType(Constants.ROTATEOCTO);
			    			bioInstruct.setTheta(-45);	
			    			bioInstruct.setPivotPoint(0);	
			     			bioInstruct.setRotateVector(0.0, 0.0, 1.0);
			     			bioInstruct.setOrientation(orientation);
						}
						else if (numSegs==4){
							BioMightOrientation orientation = new BioMightOrientation(0.0, -1.0, 0.0, 90.0);
				 			bioInstruct.setTransType(Constants.ROTATEOCTO);
			    			bioInstruct.setTheta(-45);	
			    			bioInstruct.setPivotPoint(0);	
			     			bioInstruct.setRotateVector(0.0, 0.0, 1.0);
			     			bioInstruct.setOrientation(orientation);
						}
						else if (numSegs==5){
							bioInstruct.setTransType(Constants.TRANSLATE);
							bioInstruct.setTranslateMatrix(0.15, 0.0, 0.05);
						}
						else if (numSegs==6){
							BioMightOrientation orientation = new BioMightOrientation(0.0, -1.0, 0.0, 90.0);
				 			bioInstruct.setTransType(Constants.ROTATEOCTO);
			    			bioInstruct.setTheta(-45);	
			    			bioInstruct.setPivotPoint(0);	
			     			bioInstruct.setRotateVector(0.0, 0.0, 1.0);
			     			bioInstruct.setOrientation(orientation);
						}
						else if (numSegs==7){		
							bioInstruct.setTransType(Constants.SCALE);
							bioInstruct.setTranslateMatrix(0.20, -0.10, 0.05);
							bioInstruct.setScaleMatrix(0.90, 1.0, 0.90);
						}
						else if (numSegs==8){
							BioMightOrientation orientation = new BioMightOrientation(0.0, -1.0, 0.0, 90.0);
				 			bioInstruct.setTransType(Constants.ROTATEOCTO);
			    			bioInstruct.setTheta(45);	
			    			bioInstruct.setPivotPoint(4);	
			     			bioInstruct.setRotateVector(0.0, 0.0, 1.0);
			     			bioInstruct.setOrientation(orientation);
						}
						else if (numSegs==9){
							bioInstruct.setTransType(Constants.TRANSLATE);
							bioInstruct.setTranslateMatrix(0.20, -0.07, 0.0);
						}		
						else if (numSegs==10){
							BioMightOrientation orientation = new BioMightOrientation(0.0, -1.0, 0.0, 90.0);
				 			bioInstruct.setTransType(Constants.ROTATEOCTO);
			    			bioInstruct.setTheta(45);	
			    			bioInstruct.setPivotPoint(4);	
			     			bioInstruct.setRotateVector(0.0, 0.0, 1.0);
			     			bioInstruct.setOrientation(orientation);
						}
						else if (numSegs==11){
							BioMightOrientation orientation = new BioMightOrientation(0.0, -1.0, 0.0, 90.0);
				 			bioInstruct.setTransType(Constants.ROTATEOCTO);
			    			bioInstruct.setTheta(45);	
			    			bioInstruct.setPivotPoint(4);	
			     			bioInstruct.setRotateVector(0.0, 0.0, 1.0);
			     			bioInstruct.setOrientation(orientation);
						}
						else if (numSegs==12){
							bioInstruct.setTransType(Constants.TRANSLATE);
							bioInstruct.setTranslateMatrix(0.05, 0.50, 0.0);
						}
						else if (numSegs==13){
							BioMightOrientation orientation = new BioMightOrientation(0.0, -1.0, 0.0, 90.0);
				 			bioInstruct.setTransType(Constants.ROTATEOCTO);
			    			bioInstruct.setTheta(45);	
			    			bioInstruct.setPivotPoint(4);	
			     			bioInstruct.setRotateVector(0.0, 0.0, 1.0);
			     			bioInstruct.setOrientation(orientation);
						}
						else if (numSegs==14){
							BioMightOrientation orientation = new BioMightOrientation(0.0, -1.0, 0.0, 90.0);
				 			bioInstruct.setTransType(Constants.ROTATEOCTO);
			    			bioInstruct.setTheta(45);	
			    			bioInstruct.setPivotPoint(4);	
			     			bioInstruct.setRotateVector(0.0, 0.0, 1.0);
			     			bioInstruct.setOrientation(orientation);
						}
						else if (numSegs==15){
							bioInstruct.setTransType(Constants.TRANSLATE);
							bioInstruct.setTranslateMatrix(-0.25, 0.0, 0.0);
						}
						else if (numSegs==16){
							BioMightOrientation orientation = new BioMightOrientation(0.0, -1.0, 0.0, 90.0);
				 			bioInstruct.setTransType(Constants.ROTATEOCTO);
			    			bioInstruct.setTheta(-45);	
			    			bioInstruct.setPivotPoint(0);	
			     			bioInstruct.setRotateVector(0.0, 0.0, 1.0);
			     			bioInstruct.setOrientation(orientation);
						}
						else if (numSegs==17){
							BioMightOrientation orientation = new BioMightOrientation(0.0, -1.0, 0.0, 90.0);
				 			bioInstruct.setTransType(Constants.ROTATEOCTO);
			    			bioInstruct.setTheta(-45);	
			    			bioInstruct.setPivotPoint(0);	
			     			bioInstruct.setRotateVector(0.0, 0.0, 1.0);
			     			bioInstruct.setOrientation(orientation);
						}
						else if (numSegs==18){
							BioMightOrientation orientation = new BioMightOrientation(0.0, -1.0, 0.0, 90.0);
				 			bioInstruct.setTransType(Constants.ROTATEOCTO);
			    			bioInstruct.setTheta(-45);	
			    			bioInstruct.setPivotPoint(0);	
			     			bioInstruct.setRotateVector(0.0, 0.0, 1.0);
			     			bioInstruct.setOrientation(orientation);
						}
						else if (numSegs==19){
							bioInstruct.setTransType(Constants.TRANSLATE);
							bioInstruct.setTranslateMatrix(0.25, 0.25, 0.0);
						}
						else if (numSegs==20){
							BioMightOrientation orientation = new BioMightOrientation(0.0, -1.0, 0.0, 90.0);
				 			bioInstruct.setTransType(Constants.ROTATEOCTO);
			    			bioInstruct.setTheta(45);	
			    			bioInstruct.setPivotPoint(4);	
			     			bioInstruct.setRotateVector(0.0, 0.0, 1.0);
			     			bioInstruct.setOrientation(orientation);
						}	
						else if (numSegs==21){
							BioMightOrientation orientation = new BioMightOrientation(0.0, -1.0, 0.0, 90.0);
				 			bioInstruct.setTransType(Constants.ROTATEOCTO);
			    			bioInstruct.setTheta(45);	
			    			bioInstruct.setPivotPoint(4);	
			     			bioInstruct.setRotateVector(0.0, 0.0, 1.0);
			     			bioInstruct.setOrientation(orientation);
						}	
						else if (numSegs==22){
							bioInstruct.setTransType(Constants.TRANSLATE);
							bioInstruct.setTranslateMatrix(-0.25, 0.55, 0.1);
						}
				
					else {
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.25, -1.0, 0.0);
					}			
					
		    		// Add the instruction into the instruction set
		    		bioMightInstructSet.addElement(bioInstruct);
			}
		
		 }
		
		DBUtils.generateFacedComponents(Constants.QUADRANGLE, startID, componentType, componentName, componentID, currentPoints, bioMightInstructSet);
		System.out.println("Generating the Rows for InternalCarotidArteryEndothelium: " + componentID + "   " + componentType);

		
		return returnCode;
	}


	/***************************************************************************************
	 * GENERATE COMMON CAROTID
	 * 
	 * This generates the Common Carotid Artery
	 *
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/
	  	
	public BioMightGenerate generateCommonCarotidArtery(String startID, String componentType, String componentName, String componentID,  String parentID, double[][] currentPoints) 
		throws DataException, DataSecurityException
	{	
		System.out.println("EJB:CommonCarotidArtery: " + componentID + "   " + parentID);
					
		int bodyID = 1;
		int projectID = 1;
		String vertices = "";
		
		ArrayList mySqlList= new ArrayList();
		int returnCode = 0;
	
		
		// We can generate the CommonCarotidArtery alone, or when connected
		// The current points passed into the equation are assumed
		// to come from the base oral cavity
		if (currentPoints == null )
		{
			double radius = 0.25;
    		double[] startPos = {-0.3, -17.0, -3.0};
			currentPoints = BioGraphics.createCylinderInPlane(Constants.XPLANE, startPos, radius, 8);	
			}

		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();

		// Left Common Carotid Artery - Thoracic Region
		if (parentID.equals("CommonCarotidArtery:01")) 
		{	
			int nMaxSegs = 4;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
		
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
	     
				if (numSegs==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.21, 1.0, 0.0);
				}
				else if (numSegs==1){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.23, 1.0, -0.02);
				}
				else if (numSegs==2){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.16, 1.0, -0.03);
				}
				else if (numSegs==3){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.08, 1.0, 0.01);
				}		
				
				
				else if (numSegs==4){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, 1.0, 0.10);
				}		
				else if (numSegs==5){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, 1.0, 0.0);
				}
				
				else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);
				}
				
				
	    		// Add the instruction into the instruction set
	    		bioMightInstructSet.addElement(bioInstruct);
			}
		// Right Common Carotid Artery - Thoracic Region		    
		} else if (parentID.equals("CommonCarotidArtery:02")) {	
			int nMaxSegs = 1;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
			
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
		      
				if (numSegs==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, 1.0, 0.0);
				}
				else if (numSegs==1){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.03, 1.0, 0.02);
				}
		
				else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, 1.0, 0.0);
				}
					
					
		    	// Add the instruction into the instruction set
		    	bioMightInstructSet.addElement(bioInstruct);
			}
		    
		}
		// Left Common Carotid Artery - Cervical Region
		// Splits in the base part of the neck into the internal and external Carotids
		else if (parentID.equals("CommonCarotidArtery:03")) {	
				int nMaxSegs = 1;
				for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
			
					// Create a place for an instruction 
					BioMightInstruction bioInstruct = new BioMightInstruction();
		     
					if (numSegs==0){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.0, 1.0, 0.0);
					}
					else if (numSegs==1){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.05, 1.0, 0.0);
					}
			
				
					else {
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);
					}
					
					
		    		// Add the instruction into the instruction set
		    		bioMightInstructSet.addElement(bioInstruct);
				}
			}
		 //Right Common Carotid Artery - Cervical Region
		 else if (parentID.equals("CommonCarotidArtery:04")) {	
				int nMaxSegs = 1;
				for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
			
					// Create a place for an instruction 
					BioMightInstruction bioInstruct = new BioMightInstruction();
		     
					if (numSegs==0){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.0, 1.0, 0.0);
					}
					else if (numSegs==1){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.12, 0.5, 0.0);
					}
					else if (numSegs==2){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.0, 0.5, 0.0);
					}
					
					else {
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.0, 1.0, 0.0);
					}
					
					
		    		// Add the instruction into the instruction set
		    		bioMightInstructSet.addElement(bioInstruct);
			}
		
		 }
		
		double [][] lastPoints = DBUtils.generateFacedComponents(Constants.QUADRANGLE, startID, componentType, componentName, componentID, currentPoints, bioMightInstructSet);
		System.out.println("Generating the Rows for CommonCarotidArteryEndothelium: " + componentID + "   " + componentType);

		BioMightGenerate  bioMightGenerate = new BioMightGenerate(lastPoints, 0, "");
		return bioMightGenerate;
	}

	
    /***************************************************************************************
	 * GENERATE DESCENDING AORTA
	 * 
	 * This generates the Descending Aorta Artery
	 * Eminates at the chamber of the Heart
	 *
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/
	  	
	public int generateDescendingAortaArtery(String startID, String componentType, String componentName, String componentID,  String parentID, double[][] currentPoints) 
		throws DataException, DataSecurityException
	{	
		System.out.println("DescendingAortaArtery: " + componentID + "   " + parentID);
		
		int bodyID = 1;
		int projectID = 1;
		String vertices = "";
		
		ArrayList mySqlList= new ArrayList();
		int returnCode = 0;
	
		
		// We can generate the DescendingAortaArtery alone, or when connected
		// The current points passed into the equation are assumed
		// to come from the base oral cavity
		
		// We can generate the AortaArtery alone, or when connected
		// The current points passed into the equation are assumed
		// to come from the base oral cavity
		if (currentPoints == null )
		{
			double radius = 0.5;
			double[] startPos = {0.75, -8.0, -6.0};
			currentPoints = BioGraphics.createCylinderInPlane(Constants.XPLANE, startPos, radius, 8);
		}
		
		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();
	
		if (parentID.equals("Arteries:0")) 
		{
			int nMaxSegs = 10;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
			
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
	       		         
				// The artery descends straight down through central core of body
				// splitting at the Elvis pelvis
	    		if (numSegs==0){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(0.01, -1.0, -0.35);
	    		}
	       		else if (numSegs==1){
	       			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(0.0, -1.0, -0.35);
	           	}
	    		else if (numSegs==2){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(0.0, -1.0, -0.30);
	    		}
	    		else if (numSegs==3){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(0.0, -1.0, -0.18);
	    		}
	    		else if (numSegs==4){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-0.02, -1.0, -0.10);
	            }
	    		else if (numSegs==5){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-0.02, -1.0, -0.05);	      			
	        	}
	    		else if (numSegs==6){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-0.05, -1.0, 0.0);	      			
	        	}	
	    		else if (numSegs==7){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-0.17, -1.0, 0.03);	      			
	        	}		
	    		else if (numSegs==8){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-0.10, -1.0, 0.02);	      			
	        	}
	    		else if (numSegs==9){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(0.0, -0.15, 0.0);	      			
	        	}
	    		
	    		
	    			
	    		else if (numSegs==10){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-0.11, -1.0, 0.15);	      			
	        	}
	    		else if (numSegs==11){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(0.0, -1.0, 0.02);	      			
	        	}
	    		else if (numSegs==12){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(0.00, -1.0, 0.0);	      			
	        	}
	    		else if (numSegs==13){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);	      			
	        	}
	    		
	       		else {
	       			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);  	
	       
	    		}
		    
	    		// Add the instruction into the instruction set
	    		bioMightInstructSet.addElement(bioInstruct);
			}
		}
		
	
		DBUtils.generateFacedComponents(Constants.QUADRANGLE, startID, componentType, componentName, componentID, currentPoints, bioMightInstructSet);
		System.out.println("Generating the Rows for DescendingAortaArteryEndothelium: " + componentID + "   " + componentType);
			
		
		return returnCode;
	}

	 /***************************************************************************************
		 * GENERATE abdominal AORTA
		 * 
		 * This generates the Descending Aorta Artery
		 * Eminates at the chamber of the Heart
		 *
		 * @param key
		 * @param user
		 * @return
		 * @throws DataException
		 * @throws DataSecurityException
		 ***************************************************************************************/
		  	
		public int generateAbdominalAortaArtery(String startID, String componentType, String componentName, String componentID,  String parentID, double[][] currentPoints) 
			throws DataException, DataSecurityException
		{	
			System.out.println("AbdominalAortaArtery: " + componentID + "   " + parentID);
			
			int bodyID = 1;
			int projectID = 1;
			String vertices = "";
			
			ArrayList mySqlList= new ArrayList();
			int returnCode = 0;
		
			
			// We can generate the DescendingAortaArtery alone, or when connected
			// The current points passed into the equation are assumed
			// to come from the base oral cavity
			
			// We can generate the AortaArtery alone, or when connected
			// The current points passed into the equation are assumed
			// to come from the base oral cavity
			if (currentPoints == null )
			{
				double radius = 0.5;
				double[] startPos = {0.75, -8.0, -6.0};
				currentPoints = BioGraphics.createCylinderInPlane(Constants.XPLANE, startPos, radius, 8);
			}
			
			// Allocate an instruction set for building it
			BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();
		
			if (parentID.equals("Arteries:0")) 
			{
				int nMaxSegs = 5;
				for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
				
					// Create a place for an instruction 
					BioMightInstruction bioInstruct = new BioMightInstruction();
		       		         
					// The artery descends straight down through central core of body
					// splitting at the Elvis pelvis
		    		if (numSegs==0){
		    			bioInstruct.setTransType(Constants.TRANSLATE);
		    			bioInstruct.setTranslateMatrix(0.0, -1.0, 0.15);		    		}
		       		else if (numSegs==1){
		       			bioInstruct.setTransType(Constants.TRANSLATE);
		    			bioInstruct.setTranslateMatrix(-0.15, -1.0, 0.20);
		           	}
		    		else if (numSegs==2){
		    			bioInstruct.setTransType(Constants.TRANSLATE);
		    			bioInstruct.setTranslateMatrix(-0.25, -1.0, 0.30);
		    		}
		    		else if (numSegs==3){
		    			bioInstruct.setTransType(Constants.TRANSLATE);
		    			bioInstruct.setTranslateMatrix(-0.10, -1.0, 0.25);
		    		}
		    		else if (numSegs==4){
		    			bioInstruct.setTransType(Constants.TRANSLATE);
		    			bioInstruct.setTranslateMatrix(-0.0, -1.0, 0.30);
		    		}
		    

		    		
		       		else {
		       			bioInstruct.setTransType(Constants.TRANSLATE);
		    			bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);  	
		       
		    		}
			    
		    		// Add the instruction into the instruction set
		    		bioMightInstructSet.addElement(bioInstruct);
				}
			}
			
		
			DBUtils.generateFacedComponents(Constants.QUADRANGLE, startID, componentType, componentName, componentID, currentPoints, bioMightInstructSet);
			System.out.println("Generating the Rows for AbdominalAortaArteryEndothelium: " + componentID + "   " + componentType);
				
			
			return returnCode;
		}

	   /***************************************************************************************
		 * GENERATE BRACHIOCEPHALIC ARTERY
		 * 
		 * This generates the Descending Aorta Artery
		 * Eminates at the chamber of the Heart
		 *
		 * @param key
		 * @param user
		 * @return
		 * @throws DataException
		 * @throws DataSecurityException
		 ***************************************************************************************/
		  	
		public int generateBrachioCephalicArtery(String startID, String componentType, String componentName, String componentID,  String parentID, double[][] currentPoints) 
			throws DataException, DataSecurityException
		{	
			System.out.println("BrachioCephalicArtery: " + componentID + "   " + parentID);
			
			int bodyID = 1;
			int projectID = 1;
			String vertices = "";
			
			ArrayList mySqlList= new ArrayList();
			int returnCode = 0;
		

			
			// We can generate the AortaArtery alone, or when connected
			// The current points passed into the equation are assumed
			// to come from the base oral cavity
			if (currentPoints == null )
			{
				double radius = 0.5;
				double[] startPos = {0.75, -8.0, -6.0};
				currentPoints = BioGraphics.createCylinderInPlane(Constants.XPLANE, startPos, radius, 8);
			}
			
			// Allocate an instruction set for building it
			BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();

				int nMaxSegs = 2;
				for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
				
					// Create a place for an instruction 
					BioMightInstruction bioInstruct = new BioMightInstruction();
		       		         
					// The artery descends straight down through central core of body
					// splitting at the Elvis pelvis
		    		if (numSegs==0){
		    			bioInstruct.setTransType(Constants.TRANSLATE);
		    			bioInstruct.setTranslateMatrix(-0.75, 1.0, -0.35);
		    		}
		       		else if (numSegs==1){
		       			bioInstruct.setTransType(Constants.TRANSLATE);
		    			bioInstruct.setTranslateMatrix(-0.3750, 0.50, -0.15);
		           	}
		    		else if (numSegs==2){
		    			bioInstruct.setTransType(Constants.TRANSLATE);
		    			bioInstruct.setTranslateMatrix(-0.65, 1.0, -0.2);
		    		}
		       		else {
		       			bioInstruct.setTransType(Constants.TRANSLATE);
		    			bioInstruct.setTranslateMatrix(0.0, 1.0, 0.0);  	
		       
		    		}
			    
		    		// Add the instruction into the instruction set
		    		bioMightInstructSet.addElement(bioInstruct);
				}
			
			
		
			DBUtils.generateFacedComponents(Constants.QUADRANGLE, startID, componentType, componentName, componentID, currentPoints, bioMightInstructSet);
			System.out.println("Generating the Rows for BrachioCephalicArteryEndothelium: " + componentID + "   " + componentType);
				
			
			return returnCode;
		}


	  
    /***************************************************************************************
	 * GENERATE APPENDICULAR ARTERY
	 * 
	 * This generates the Appendicular Artery
	 *
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/
	  	
	public int generateAppendicularArtery(String startID, String componentType, String componentName, String componentID,  String parentID, double[][] currentPoints) 
		throws DataException, DataSecurityException
	{	
		System.out.println("AppendicularArtery: " + componentID + "   " + parentID);
		
		int bodyID = 1;
		int projectID = 1;
		String vertices = "";
		
		ArrayList mySqlList= new ArrayList();
		int returnCode = 0;
	

		// We can generate the AppendicularArtery alone, or when connected
		// The current points passed into the equation are assumed
		// to come from the base oral cavity
		if (currentPoints == null )
		{
			double circumference = 0.25;
			
			double x =  -0.3;
    		double y =  -17.0;
    		double z =  -3.0;
			
			// Create a equilateral octogon	
			currentPoints[0][0] =  x;
			currentPoints[0][1] =  y;
			currentPoints[0][2] =  z;
			
			currentPoints[1][0] =  x-circumference;
			currentPoints[1][1] =  y;
			currentPoints[1][2] =  z-circumference;
			
			currentPoints[2][0] =  x-circumference;
			currentPoints[2][1] =  y;
			currentPoints[2][2] =  z-circumference*2;
			
			currentPoints[3][0] =  x;
			currentPoints[3][1] =  y;
			currentPoints[3][2] =  z-circumference*3;
	
			currentPoints[4][0] =  x+circumference;
			currentPoints[4][1] =  y;
			currentPoints[4][2] =  z-circumference*3;
			
			currentPoints[5][0] =  x+circumference*2;
			currentPoints[5][1] =  y;
			currentPoints[5][2] =  z-circumference*2;
	
			currentPoints[6][0] =  x+circumference*2;
			currentPoints[6][1] =  y;
			currentPoints[6][2] =  z-circumference;

			currentPoints[7][0] =  x+circumference;
			currentPoints[7][1] =  y;
			currentPoints[7][2] =  z;
	}
		
		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();
		
		int nMaxSegs = 3;
		for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
		
			// Create a place for an instruction 
			BioMightInstruction bioInstruct = new BioMightInstruction();
       		         
			// The artery descends straight down through central core of body
			// splitting at the Elvis pelvis
    		if (numSegs==0){
    			bioInstruct.setTransType(2);
    			bioInstruct.setTranslateMatrix(-1.0, 0.0, 0.25);
    		}
       		else if (numSegs==1){
       			bioInstruct.setTransType(2);
    			bioInstruct.setTranslateMatrix(-1.0, 0.0, 0.25);
           	}
    		else if (numSegs==2){
    			bioInstruct.setTransType(2);
    			bioInstruct.setTranslateMatrix(-1.0, 0.0, 0.25);
    		}
    		else if (numSegs==3){
    			bioInstruct.setTransType(2);
    			bioInstruct.setTranslateMatrix(0.0, -2.0, 0.0);
    		}
    		else if (numSegs==4){
    			bioInstruct.setTransType(2);
    			bioInstruct.setTranslateMatrix(0.0, -2.0, 0.0);
            }
    		
    		
    		else if (numSegs==5){
    			bioInstruct.setPivotPoint(3);
    			bioInstruct.setRotateVector(0.0, 0.0, 1.0);
    			bioInstruct.setTransType(3);
    			bioInstruct.setTranslateMatrix(1.35, 1.0, 1.35);	      			
        	}
    		else if (numSegs==6){
    			bioInstruct.setPivotPoint(3);
    			bioInstruct.setRotateVector(0.0, 0.0, 1.0);
    			bioInstruct.setTransType(2);
    			bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);	   	
        	}
       		else if (numSegs==7){
    			bioInstruct.setPivotPoint(3);
    			bioInstruct.setRotateVector(0.0, 0.0, 1.0);
    			bioInstruct.setTransType(2);
    			bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);	      			     			
    		}       		
       		else if (numSegs==8){
    			bioInstruct.setPivotPoint(3);
    			bioInstruct.setRotateVector(0.0, 0.0, 1.0);
    			bioInstruct.setTransType(2);
    			bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);	      			     			
    		}
    		else {
    			bioInstruct.setPivotPoint(3);
    			bioInstruct.setRotateVector(0.0, 0.0, 1.0);
    			bioInstruct.setTransType(2);
    			bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);
    		}
	    
    		// Add the instruction into the instruction set
    		bioMightInstructSet.addElement(bioInstruct);
		}
	
		//DBUtils.generateFacedComponents(Constants.QUADRANGLE, startID, componentType, componentName, componentID, currentPoints, bioMightInstructSet);
		//System.out.println("Generating the Rows for AppendicularArteryEndothelium: " + componentID + "   " + componentType);
			
		return returnCode;
	}

	
	 /***************************************************************************************
	 * GENERATE APPENDICULAR ARTERY
	 * 
	 * This generates the Appendicular Artery
	 *
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/
	  	
	public int generateCysticArtery(String startID, String componentType, String componentName, String componentID,  String parentID, double[][] currentPoints) 
		throws DataException, DataSecurityException
	{	
		System.out.println("CysticArtery: " + componentID + "   " + parentID);
		
		int bodyID = 1;
		int projectID = 1;
		String vertices = "";
		
		ArrayList mySqlList= new ArrayList();
		int returnCode = 0;
	

		// We can generate the CysticArtery alone, or when connected
		// The current points passed into the equation are assumed
		// to come from the base oral cavity
		if (currentPoints == null )
		{
			double radius = 0.25;
    		double[] startPos = {-0.3, -17.00, -3.0};
    		currentPoints = BioGraphics.createCylinderInPlane(Constants.YPLANE, startPos, radius, 8);
		}
		
		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();
		
		int nMaxSegs = 14;
		for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
		
			// Create a place for an instruction 
			BioMightInstruction bioInstruct = new BioMightInstruction();
       		         
			// The artery descends straight down through central core of body
			// splitting at the Elvis pelvis
    		if (numSegs==0){
    			bioInstruct.setTransType(2);
    			bioInstruct.setTranslateMatrix(0.0, 0.25, 0.0);
    		}
    		else if (numSegs==1){
				BioMightOrientation orientation = new BioMightOrientation(0.0, -1.0, 0.0, 90.0);
	 			bioInstruct.setTransType(Constants.ROTATEOCTO);
    			bioInstruct.setTheta(45);	
    			bioInstruct.setPivotPoint(2);	
     			bioInstruct.setRotateVector(1.0, 0.0, 0.0);
     			bioInstruct.setOrientation(orientation);
    		}
    		else if (numSegs==2){
				BioMightOrientation orientation = new BioMightOrientation(0.0, -1.0, 0.0, 90.0);
	 			bioInstruct.setTransType(Constants.ROTATEOCTO);
    			bioInstruct.setTheta(45);	
    			bioInstruct.setPivotPoint(2);	
     			bioInstruct.setRotateVector(1.0, 0.0, 0.0);
     			bioInstruct.setOrientation(orientation);
    		}
      		else if (numSegs==3){
    			BioMightOrientation orientation = new BioMightOrientation(0.0, -1.0, 0.0, 90.0);
    			bioInstruct.setTransType(Constants.ROTATEOCTO);
        		bioInstruct.setTheta(30);	
        		bioInstruct.setPivotPoint(2);	
         		bioInstruct.setRotateVector(1.0, 0.0, 0.0);
         		bioInstruct.setOrientation(orientation);
        	}
       		else if (numSegs==4){
       			bioInstruct.setTransType(Constants.SCALE);
    			bioInstruct.setScaleMatrix(0.90, 0.90, 0.90);
    			bioInstruct.setTranslateMatrix(0.0, -0.25, 0.25);
           	}
    		else if (numSegs==5){
    			bioInstruct.setTransType(Constants.SCALE);
    			bioInstruct.setScaleMatrix(0.80, 0.80, 0.80);
    			bioInstruct.setTranslateMatrix(-0.05, -0.20, 0.45);
            }		    		
    		else if (numSegs==6){
    			BioMightOrientation orientation = new BioMightOrientation(0.0, -1.0, 0.0, 90.0);
    			bioInstruct.setTransType(Constants.ROTATEOCTO);
        		bioInstruct.setTheta(45);	
        		bioInstruct.setPivotPoint(2);	
         		bioInstruct.setRotateVector(1.0, 0.0, 0.0);
         		bioInstruct.setOrientation(orientation);
        	} 
    		else if (numSegs==7){
    			BioMightOrientation orientation = new BioMightOrientation(0.0, -1.0, 0.0, 90.0);
    			bioInstruct.setTransType(Constants.ROTATEOCTO);
        		bioInstruct.setTheta(35);	
        		bioInstruct.setPivotPoint(2);	
         		bioInstruct.setRotateVector(1.0, 0.0, 0.0);
         		bioInstruct.setOrientation(orientation);
        	}
    		else if (numSegs==8){
     			bioInstruct.setTransType(Constants.SCALE);
    			bioInstruct.setScaleMatrix(0.90, 0.90, 0.90);
    			bioInstruct.setTranslateMatrix(0.0, -0.25, 0.025);
        	}
    		else if (numSegs==9){
     			bioInstruct.setTransType(Constants.SCALE);
    			bioInstruct.setScaleMatrix(0.80, 0.80, 0.80);
    			bioInstruct.setTranslateMatrix(0.02, -0.25, 0.0);
        	}  	
    		else if (numSegs==10){
     			bioInstruct.setTransType(Constants.SCALE);
    			bioInstruct.setScaleMatrix(0.85, 0.85, 0.85);
    			bioInstruct.setTranslateMatrix(0.0, -0.25, -0.1);
        	} 
    		else if (numSegs==11){
     			bioInstruct.setTransType(Constants.SCALE);
    			bioInstruct.setScaleMatrix(0.90, 0.90, 0.90);
    			bioInstruct.setTranslateMatrix(-0.05, -0.25, -0.15);
        	} 
    		else if (numSegs==12){
    			BioMightOrientation orientation = new BioMightOrientation(0.0, -1.0, 0.0, 90.0);
    			bioInstruct.setTransType(Constants.ROTATEOCTO);
        		bioInstruct.setTheta(-45);	
        		bioInstruct.setPivotPoint(4);	
         		bioInstruct.setRotateVector(0.0, 0.0, 1.0);
         		bioInstruct.setOrientation(orientation);
        	}
     		else if (numSegs==13){
     			bioInstruct.setTransType(Constants.SCALE);
    			bioInstruct.setScaleMatrix(0.90, 0.90, 0.90);
    			bioInstruct.setTranslateMatrix(-0.30, -0.25, -0.05);
        	} 	
    		
    		
    		else {
       			bioInstruct.setTransType(2);
    			bioInstruct.setTranslateMatrix(0.0, 0.0, 0.25);
    		}
	    
    		// Add the instruction into the instruction set
    		bioMightInstructSet.addElement(bioInstruct);
		}
	
		DBUtils.generateFacedComponents(Constants.QUADRANGLE, startID, componentType, componentName, componentID, currentPoints, bioMightInstructSet);
		System.out.println("Generating the Rows for CysticArteryEndothelium: " + componentID + "   " + componentType);
		
		
		//***********************************************************
		//
		//
		//***********************************************************
		double radius = 0.030;
		double[] startPos = {-2.15, -20.75, -2.95};
		currentPoints = BioGraphics.createCylinderInPlane(Constants.YPLANE, startPos, radius, 8);
		
		// Allocate an instruction set for building it
		bioMightInstructSet = new BioMightInstructSet();
		
		nMaxSegs = 4;
		for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
		
			// Create a place for an instruction 
			BioMightInstruction bioInstruct = new BioMightInstruction();
       		         
			// The artery descends straight down through central core of body
			// splitting at the Elvis pelvis
    		if (numSegs==0){
    			bioInstruct.setTransType(Constants.TRANSLATE);
    			bioInstruct.setTranslateMatrix(-0.1, -0.25, 0.0);
    		}
       		else if (numSegs==1){
       			bioInstruct.setTransType(Constants.SCALE);
    			bioInstruct.setScaleMatrix(0.95, 0.95, 0.95);
    			bioInstruct.setTranslateMatrix(-0.25, -0.25, 0.1);
           	}
     		else if (numSegs==2){
     			bioInstruct.setTransType(Constants.SCALE);
    			bioInstruct.setScaleMatrix(0.80, 0.80, 0.80);
    			bioInstruct.setTranslateMatrix(-0.35, -0.25, 0.15);
        	} 	
    		else if (numSegs==3){
     			bioInstruct.setTransType(Constants.SCALE);
    			bioInstruct.setScaleMatrix(0.70, 0.70, 0.70);
    			bioInstruct.setTranslateMatrix(-0.20, -0.25, -0.16);
        	} 		
    		
    		else {
       			bioInstruct.setTransType(2);
    			bioInstruct.setTranslateMatrix(0.0, 0.0, 0.25);
    		}
	    
    		// Add the instruction into the instruction set
    		bioMightInstructSet.addElement(bioInstruct);
		}
		
		
		DBUtils.generateFacedComponents(Constants.QUADRANGLE, "CysticArteryEndothelium:00300", componentType, componentName, componentID, currentPoints, bioMightInstructSet);
		System.out.println("Generating the Rows for CysticArteryEndothelium2: " + componentID + "   " + componentType);

		
		//***********************************************************
		// Do third branch
		//
		//***********************************************************

		currentPoints = BioGraphics.createCylinderInPlane(Constants.XPLANE, startPos, radius, 8);
				
		// Allocate an instruction set for building it
		bioMightInstructSet = new BioMightInstructSet();
		
		nMaxSegs = 3;
		for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
		
			// Create a place for an instruction 
			BioMightInstruction bioInstruct = new BioMightInstruction();
       		         
			// The artery descends straight down through central core of body
			// splitting at the Elvis pelvis
    		if (numSegs==0){
    			bioInstruct.setTransType(Constants.TRANSLATE);
    			bioInstruct.setTranslateMatrix(-0.35, -0.10, 0.0);
    		}
       		else if (numSegs==1){
       			bioInstruct.setTransType(Constants.SCALE);
    			bioInstruct.setScaleMatrix(0.95, 0.95, 0.95);
    			bioInstruct.setTranslateMatrix(-0.25, -0.15, 0.025);
           	}
     		else if (numSegs==2){
       			bioInstruct.setTransType(Constants.SCALE);
    			bioInstruct.setScaleMatrix(0.85, 0.85, 0.85);
    			bioInstruct.setTranslateMatrix(-0.20, -0.05, 0.02);
           	}

    		
    		else {
       			bioInstruct.setTransType(2);
    			bioInstruct.setTranslateMatrix(0.0, 0.0, 0.25);
    		}
	    
    		// Add the instruction into the instruction set
    		bioMightInstructSet.addElement(bioInstruct);
		}
		
		
		DBUtils.generateFacedComponents(Constants.QUADRANGLE, "CysticArteryEndothelium:00600", componentType, componentName, componentID, currentPoints, bioMightInstructSet);
		System.out.println("Generating the Rows for CysticArteryEndothelium2: " + componentID + "   " + componentType);

		
		return returnCode;
	}
	
	
	 /***************************************************************************************
	 * GENERATE CONUS
	 * 
	 * This generates the Conus Artery
	 * Its the third coronoray artery
	 *
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/
	  	
	public int generateConusArtery(String startID, String componentType, String componentName, String componentID,  String parentID, double[][] currentPoints) 
		throws DataException, DataSecurityException
	{	
		System.out.println("ConusArtery: " + componentID + "   " + parentID);
		
 		int bodyID = 1;
		int projectID = 1;
		String vertices = "";
		
		ArrayList mySqlList= new ArrayList();
		int returnCode = 0;
		
		// We can generate the ConusArtery alone, or when connected
		if (currentPoints == null )
		{
			double circumference = 0.25;
			
			double x =  -0.3;
    		double y =  -12.0;
    		double z =  -3.0;
			
			// Create a equilateral octogon	
			currentPoints[0][0] =  x;
			currentPoints[0][1] =  y;
			currentPoints[0][2] =  z;
			
			currentPoints[1][0] =  x-circumference;
			currentPoints[1][1] =  y;
			currentPoints[1][2] =  z-circumference;
			
			currentPoints[2][0] =  x-circumference;
			currentPoints[2][1] =  y;
			currentPoints[2][2] =  z-circumference*2;
			
			currentPoints[3][0] =  x;
			currentPoints[3][1] =  y;
			currentPoints[3][2] =  z-circumference*3;
	
			currentPoints[4][0] =  x+circumference;
			currentPoints[4][1] =  y;
			currentPoints[4][2] =  z-circumference*3;
			
			currentPoints[5][0] =  x+circumference*2;
			currentPoints[5][1] =  y;
			currentPoints[5][2] =  z-circumference*2;
	
			currentPoints[6][0] =  x+circumference*2;
			currentPoints[6][1] =  y;
			currentPoints[6][2] =  z-circumference;

			currentPoints[7][0] =  x+circumference;
			currentPoints[7][1] =  y;
			currentPoints[7][2] =  z;
	}
		

		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();
		
		int nMaxSegs = 5;
		for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
		
			// Create a place for an instruction 
			BioMightInstruction bioInstruct = new BioMightInstruction();
       		         
			// The artery descends straight down through central core of body
			// splitting at the Elvis pelvis
    		if (numSegs==0){
    			bioInstruct.setTransType(2);
    			bioInstruct.setTranslateMatrix(0.25, 0.0, 0.50);
    		}
       		else if (numSegs==1){
       			bioInstruct.setTransType(2);
    			bioInstruct.setTranslateMatrix(0.25, 0.0, 0.50);
           	}
    		else if (numSegs==2){
    			bioInstruct.setTransType(2);
    			bioInstruct.setTranslateMatrix(0.25, -0.10, 0.10);
    		}
    		else if (numSegs==3){
    			bioInstruct.setTransType(2);
    			bioInstruct.setTranslateMatrix(0.25, -0.25, 0.0);
    		}
    		else if (numSegs==4){
    			bioInstruct.setTransType(2);
    			bioInstruct.setTranslateMatrix(0.25, 0.0, 0.0);
            }
    		else if (numSegs==5){
    			bioInstruct.setTransType(2);
    			bioInstruct.setTranslateMatrix(0.25, -2.0, 0.0);	      			
        	}
    		
          	else {
    			bioInstruct.setPivotPoint(3);
    			bioInstruct.setRotateVector(0.0, 0.0, 1.0);
    			bioInstruct.setTransType(2);
    			bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);
    		}
	    
    		// Add the instruction into the instruction set
    		bioMightInstructSet.addElement(bioInstruct);
		}
	
	
		DBUtils.generateFacedComponents(Constants.QUADRANGLE, startID, componentType, componentName, componentID, currentPoints, bioMightInstructSet);
		System.out.println("Generating the Rows for ConusArteryEndothelium: " + componentID + "   " + componentType);
			
		
		return returnCode;
	}
	
	
	
    /***************************************************************************************
	 * GENERATE ADRENAL ARTERY
	 * 
	 * This generates the Adrenal Arteries
	 * Eminates at the chamber of the Heart
	 *
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/
	  	
	public int generateAdrenalArtery(String startID, String componentType, String componentName, String componentID,  String parentID, double[][] currentPoints) 
		throws DataException, DataSecurityException
	{	
		System.out.println("generateAdrenalArtery: " + componentID + "   " + parentID);
		
		int bodyID = 1;
		int projectID = 1;
		String vertices = "";
		
		ArrayList mySqlList= new ArrayList();
		int returnCode = 0;
	

		if (currentPoints == null )
		{
			double radius = 0.25;

			
    		double[] startPos = {1.5, -23.0, -6.0};
			currentPoints = BioGraphics.createCylinderInPlane(Constants.XPLANE, startPos, radius, 8);
		}
		

		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();

		if (parentID.equals("AdrenalArtery:01")) 
		{	
			int nMaxSegs = 5;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
		
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
	     
				if (numSegs==0){
					bioInstruct.setTransType(2);
					bioInstruct.setTranslateMatrix(1.0, 0.0, 0.0);
				}
				else if (numSegs==1){
					bioInstruct.setTransType(2);
					bioInstruct.setTranslateMatrix(1.0, -0.25, 0.0);
				}
				else if (numSegs==2){
					bioInstruct.setTransType(2);
					bioInstruct.setTranslateMatrix(1.0, -0.25, 0.0);
				}
				else if (numSegs==3){
					bioInstruct.setTransType(2);
					bioInstruct.setTranslateMatrix(1.0, -0.15, 0.0);
				}
				else if (numSegs==4){
					bioInstruct.setTransType(2);
					bioInstruct.setTranslateMatrix(1.0, -0.10, 0.0);
				}
				
				
				else if (numSegs==5){
					bioInstruct.setTransType(2);
					bioInstruct.setTranslateMatrix(1.0, -0.25, 0.0);
				}
				else {
					bioInstruct.setPivotPoint(3);
					bioInstruct.setRotateVector(0.0, 0.0, 1.0);
					bioInstruct.setTransType(2);
					bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);
				}
				
				
	    		// Add the instruction into the instruction set
	    		bioMightInstructSet.addElement(bioInstruct);
			}
	    
		} else if (parentID.equals("AdrenalArtery:02")) {	
			int nMaxSegs = 5;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
			
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
		      
				if (numSegs==0){
					bioInstruct.setTransType(2);
					bioInstruct.setTranslateMatrix(-1.0, 0.0, 0.0);
				}
				else if (numSegs==1){
					bioInstruct.setTransType(2);
					bioInstruct.setTranslateMatrix(-1.0, -0.25, 0.0);
				}
				else if (numSegs==2){
					bioInstruct.setTransType(2);
					bioInstruct.setTranslateMatrix(-1.0, -0.25, 0.0);
				}
				else if (numSegs==3){
					bioInstruct.setTransType(2);
					bioInstruct.setTranslateMatrix(-1.0, -0.15, 0.0);
				}
				else if (numSegs==4){
					bioInstruct.setTransType(2);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
				}
				
				
				else if (numSegs==5){
					bioInstruct.setTransType(2);
					bioInstruct.setTranslateMatrix(-1.0, -0.25, 0.0);
				}
				else {
					bioInstruct.setPivotPoint(3);
					bioInstruct.setRotateVector(0.0, 0.0, 1.0);
					bioInstruct.setTransType(2);
					bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);
				}
					
					
		    	// Add the instruction into the instruction set
		    	bioMightInstructSet.addElement(bioInstruct);
			}
		    
		}
	
		
		DBUtils.generateFacedComponents(Constants.QUADRANGLE, startID, componentType, componentName, componentID, currentPoints, bioMightInstructSet);
		System.out.println("Generating the Rows for AdrenalArteryEndothelium: " + componentID + "   " + componentType);
		
	return returnCode;
}

	
    /***************************************************************************************
	 * GENERATE BRONCHIAL ARTERY
	 * 
	 * This generates the Bronchial Arteries
	 *
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/
	  	
	public int generateBronchialArtery(String startID, String componentType, String componentName, String componentID,  String parentID, double[][] currentPoints) 
		throws DataException, DataSecurityException
	{	
		System.out.println("BronchialArtery: " + componentID + "   " + parentID);
		
		int bodyID = 1;
		int projectID = 1;
		String vertices = "";
		
		ArrayList mySqlList= new ArrayList();
		int returnCode = 0;
	

		if (currentPoints == null )
		{
			double circumference = 0.25;
			
			double x =  -0.3;
    		double y =  -17.0;
    		double z =  -3.0;
			
			// Create a equilateral octogon	
			currentPoints[0][0] =  x;
			currentPoints[0][1] =  y;
			currentPoints[0][2] =  z;
			
			currentPoints[1][0] =  x-circumference;
			currentPoints[1][1] =  y;
			currentPoints[1][2] =  z-circumference;
			
			currentPoints[2][0] =  x-circumference;
			currentPoints[2][1] =  y;
			currentPoints[2][2] =  z-circumference*2;
			
			currentPoints[3][0] =  x;
			currentPoints[3][1] =  y;
			currentPoints[3][2] =  z-circumference*3;
	
			currentPoints[4][0] =  x+circumference;
			currentPoints[4][1] =  y;
			currentPoints[4][2] =  z-circumference*3;
			
			currentPoints[5][0] =  x+circumference*2;
			currentPoints[5][1] =  y;
			currentPoints[5][2] =  z-circumference*2;
	
			currentPoints[6][0] =  x+circumference*2;
			currentPoints[6][1] =  y;
			currentPoints[6][2] =  z-circumference;

			currentPoints[7][0] =  x+circumference;
			currentPoints[7][1] =  y;
			currentPoints[7][2] =  z;
		}
		

		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();

		if (parentID.equals("BronchialArtery:01")) 
		{	
			int nMaxSegs = 4;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
		
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
	     
				if (numSegs==0){
					bioInstruct.setTransType(2);
					bioInstruct.setTranslateMatrix(1.0, 0.25, 0.0);
				}
				else if (numSegs==1){
					bioInstruct.setTransType(2);
					bioInstruct.setTranslateMatrix(1.0, 0.15, 0.25);
				}
				else if (numSegs==2){
					bioInstruct.setTransType(2);
					bioInstruct.setTranslateMatrix(1.0, 0.20, 0.35);
				}
				else if (numSegs==3){
					bioInstruct.setTransType(2);
					bioInstruct.setTranslateMatrix(1.0, 0.25, 0.35);
				}
				else if (numSegs==4){
					bioInstruct.setTransType(2);
					bioInstruct.setTranslateMatrix(1.0, 0.45, 0.25);
				}
				else {
					bioInstruct.setPivotPoint(3);
					bioInstruct.setRotateVector(0.0, 0.0, 1.0);
					bioInstruct.setTransType(2);
					bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);
				}
				
				
	    		// Add the instruction into the instruction set
	    		bioMightInstructSet.addElement(bioInstruct);
			}
	    
		} else if (parentID.equals("BronchialArtery:02")) {	
			int nMaxSegs = 4;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
			
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
		      
				if (numSegs==0){
					bioInstruct.setTransType(2);
					bioInstruct.setTranslateMatrix(-1.0, 0.0, 0.25);
				}
				else if (numSegs==1){
					bioInstruct.setTransType(2);
					bioInstruct.setTranslateMatrix(-1.0, 0.25, 0.29);
	    		}
				else if (numSegs==2){
					bioInstruct.setTransType(2);
					bioInstruct.setTranslateMatrix(-1.0, 0.0, 0.15);
				}
				else if (numSegs==3){
					bioInstruct.setTransType(2);
					bioInstruct.setTranslateMatrix(-1.0, 0.25, 0.45);
				}
				else if (numSegs==4){
					bioInstruct.setTransType(2);
					bioInstruct.setTranslateMatrix(-1.0, 0.45, 0.25);
				}
				else {
					bioInstruct.setPivotPoint(3);
					bioInstruct.setRotateVector(0.0, 0.0, 1.0);
					bioInstruct.setTransType(2);
					bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);
				}
	
				
	    		// Add the instruction into the instruction set
	    		bioMightInstructSet.addElement(bioInstruct);
			}
					
		} else if (parentID.equals("BronchialArtery:03")) {	
			int nMaxSegs = 4;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
			
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
		      
				if (numSegs==0){
					bioInstruct.setTransType(2);
					bioInstruct.setTranslateMatrix(0.25, 0.0, 0.25);
				}
				else if (numSegs==1){
					bioInstruct.setTransType(2);
					bioInstruct.setTranslateMatrix(0.50, 0.5, 0.20);
	    		}
				else if (numSegs==2){
					bioInstruct.setTransType(2);
					bioInstruct.setTranslateMatrix(0.25, 0.0, 0.15);
				}
				else if (numSegs==3){
					bioInstruct.setTransType(2);
					bioInstruct.setTranslateMatrix(0.50, 0.25, 0.15);
				}
				else if (numSegs==4){
					bioInstruct.setTransType(2);
					bioInstruct.setTranslateMatrix(0.25, 0.45, 0.2);
				}
				else {
					bioInstruct.setPivotPoint(3);
					bioInstruct.setRotateVector(0.0, 0.0, 1.0);
					bioInstruct.setTransType(2);
					bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);
				}
				
				
	    		// Add the instruction into the instruction set
	    		bioMightInstructSet.addElement(bioInstruct);
			}
		} 
		else if (parentID.equals("BronchialArtery:04")) {	
			int nMaxSegs = 4;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
			
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
		      
				if (numSegs==0){
					bioInstruct.setTransType(2);
					bioInstruct.setTranslateMatrix(-0.25, 0.0, 0.25);
				}
				else if (numSegs==1){
					bioInstruct.setTransType(2);
					bioInstruct.setTranslateMatrix(-0.50, 0.25, 0.0);
	    		}
				else if (numSegs==2){
					bioInstruct.setTransType(2);
					bioInstruct.setTranslateMatrix(-0.25, 0.25, 0.15);
				}
				else if (numSegs==3){
					bioInstruct.setTransType(2);
					bioInstruct.setTranslateMatrix(-0.50, 0.25, 0.20);
				}
				else if (numSegs==4){
					bioInstruct.setTransType(2);
					bioInstruct.setTranslateMatrix(-0.25, 0.50, 0.0);
				}
				else {
					bioInstruct.setPivotPoint(3);
					bioInstruct.setRotateVector(0.0, 0.0, 1.0);
					bioInstruct.setTransType(2);
					bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);
				}
			
	    		// Add the instruction into the instruction set
	    		bioMightInstructSet.addElement(bioInstruct);
			}
		}
	    else if (parentID.equals("BronchialArtery:05")) {	
	    	int nMaxSegs = 8;
	    	for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
		
	    		// Create a place for an instruction 
	    		BioMightInstruction bioInstruct = new BioMightInstruction();
	      
	    		if (numSegs==0){
	    			bioInstruct.setTransType(2);
	    			bioInstruct.setTranslateMatrix(0.25, 0.0, 0.25);
	    		}
	    		else if (numSegs==1){
	    			bioInstruct.setTransType(2);
	    			bioInstruct.setTranslateMatrix(0.50, -0.5, 0.20);
	    		}
	    		else if (numSegs==2){
	    			bioInstruct.setTransType(2);
	    			bioInstruct.setTranslateMatrix(0.25, 0.0, 0.15);
	    		}
	    		else if (numSegs==3){
	    			bioInstruct.setTransType(2);
	    			bioInstruct.setTranslateMatrix(0.50, -0.25, 0.15);
	    		}
	    		else if (numSegs==4){
	    			bioInstruct.setTransType(2);
	    			bioInstruct.setTranslateMatrix(0.25, -0.45, 0.2);
	    		}
	    		else if (numSegs==5){
	    			bioInstruct.setTransType(2);
	    			bioInstruct.setTranslateMatrix(0.25, -0.45, 0.0);
	    		}
	    		else if (numSegs==6){
	    			bioInstruct.setTransType(2);
	    			bioInstruct.setTranslateMatrix(0.50, -0.35, 0.0);
	    		}
	    		else if (numSegs==7){
	    			bioInstruct.setTransType(2);
	    			bioInstruct.setTranslateMatrix(0.25, -0.45, 0.0);
	    		}
	    		else if (numSegs==8){
	    			bioInstruct.setTransType(2);
	    			bioInstruct.setTranslateMatrix(0.25, -0.65, 0.0);
	    		}	    		
	    		else {
	    			bioInstruct.setTransType(2);
	    			bioInstruct.setTranslateMatrix(0.25, -0.45, 0.0);
	   		}
			
			
	    		// Add the instruction into the instruction set
	    		bioMightInstructSet.addElement(bioInstruct);
	    	}
	    } 
	    else if (parentID.equals("BronchialArtery:06")) {	
	    	int nMaxSegs = 8;
	    	for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
		
			// Create a place for an instruction 
			BioMightInstruction bioInstruct = new BioMightInstruction();
	      
			if (numSegs==0){
				bioInstruct.setTransType(Constants.TRANSLATE);
				bioInstruct.setTranslateMatrix(-0.25, 0.0, 0.25);
			}
			else if (numSegs==1){
				bioInstruct.setTransType(Constants.TRANSLATE);
				bioInstruct.setTranslateMatrix(-0.50, -0.25, 0.0);
    		}
			else if (numSegs==2){
				bioInstruct.setTransType(Constants.TRANSLATE);
				bioInstruct.setTranslateMatrix(-0.25, -0.25, 0.15);
			}
			else if (numSegs==3){
				bioInstruct.setTransType(Constants.TRANSLATE);
				bioInstruct.setTranslateMatrix(-0.50, -0.25, 0.20);
			}
			else if (numSegs==4){
				bioInstruct.setTransType(Constants.TRANSLATE);
				bioInstruct.setTranslateMatrix(-0.25, -0.50, 0.0);
			}
			else if (numSegs==5){
				bioInstruct.setTransType(Constants.TRANSLATE);
				bioInstruct.setTranslateMatrix(-0.50, -0.35, 0.0);
			}			
			else if (numSegs==6){
				bioInstruct.setTransType(Constants.TRANSLATE);
				bioInstruct.setTranslateMatrix(-0.50, -0.25, 0.0);
			}
			else if (numSegs==7){
				bioInstruct.setTransType(Constants.TRANSLATE);
				bioInstruct.setTranslateMatrix(-0.25, -0.50, 0.0);
			}
			else if (numSegs==8){
				bioInstruct.setTransType(Constants.TRANSLATE);
				bioInstruct.setTranslateMatrix(-0.50, -0.60, 0.0);
			}			
			else {
				bioInstruct.setTransType(2);
				bioInstruct.setTranslateMatrix(-0.50, -0.50, 0.0);
			}
		
    		// Add the instruction into the instruction set
    		bioMightInstructSet.addElement(bioInstruct);
		}
	}

		
	//DBUtils.generateFacedComponents(Constants.QUADRANGLE, startID, componentType, componentName, componentID, currentPoints, bioMightInstructSet);
	//System.out.println("Generated the Rows for BronchialArteryEndothelium: " + componentID + "   parent: " + parentID + "   " + componentType);
		
	return returnCode;
}
	
	
	

    /***************************************************************************************
	 * GENERATE SUPERIOR VENA CAVA 
	 * 
	 * This generates the Adrenal Arteries
	 * Eminates at the chamber of the Heart
	 *
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/
	  	
	public int generateInferiorVenaCava(String startID, String componentType, String componentName, String componentID,  String parentID, double[][] currentPoints) 
		throws DataException, DataSecurityException
	{	
		System.out.println("generateInferiorVenaCava: " + componentID + "   " + parentID);
		
		int bodyID = 1;
		int projectID = 1;
		String vertices = "";
		
		ArrayList mySqlList= new ArrayList();
		int returnCode = 0;
	
		// We can generate the InferiorVenaCava alone, or when connected
		// The current points passed into the equation are assumed
		// to come from the base oral cavity
		if (currentPoints == null )
		{
			double radius = 0.25;
			double[] startPos = {0.25, -24.25, -6.0};
			currentPoints = BioGraphics.createCylinderInPlane(Constants.XPLANE, startPos, radius, 8);
		}
		

		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();

		if (componentID.equals("InferiorVenaCava:01")) 
		{	
			int nMaxSegs = 11;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
		
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
	     
				if (numSegs==0){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(0.15, -1.0, -0.40);
	    		}	
	       		else if (numSegs==1){
	       			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(0.05, -1.0, -0.40);
	           	}
	    		else if (numSegs==2){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(0.01, -1.0, -0.35);
	    		}
	    		else if (numSegs==3){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(0.0, -1.0, -0.30);
	    		}
	    		else if (numSegs==4){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-0.1, -1.0, -0.27);
	            }
	    		else if (numSegs==5){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-0.13, -1.0, -0.25);	      			
	        	}	
	    		else if (numSegs==6){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-0.12, -1.0, -0.18);	      			
	        	}	
	    		else if (numSegs==7){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-0.15, -1.0, -0.15);	      			
	        	}		
	    		else if (numSegs==8){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-0.1, -1.0, -0.13);	      			
	        	}
	    		else if (numSegs==9){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-0.05, -1.0, -0.12);	      			
	        	}				
	    		else if (numSegs==10){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(0.0, -0.5, -0.07);	      			
	        	}
				
				
	    		else if (numSegs==11){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(0.0, -0.5, 0.0);	      			
	        	}
	    		else {
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);	      
				}
				
				
	    		// Add the instruction into the instruction set
	    		bioMightInstructSet.addElement(bioInstruct);
			}
	    
		} else if (componentID.equals("InferiorVenaCava:02")) {	
			int nMaxSegs = 3;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
			
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
		      
				if (numSegs==0){
					bioInstruct.setTransType(2);
					bioInstruct.setTranslateMatrix(-1.0, 0.0, 0.0);
				}
				else if (numSegs==1){
					bioInstruct.setTransType(2);
					bioInstruct.setTranslateMatrix(-1.0, 0.0, 0.25);
	    		}
				else if (numSegs==2){
					bioInstruct.setTransType(2);
					bioInstruct.setTranslateMatrix(-1.0, 0.0, 0.0);
				}
				else if (numSegs==3){
					bioInstruct.setTransType(2);
					bioInstruct.setTranslateMatrix(-1.0, 0.0, 0.15);
				}
				else if (numSegs==4){
					bioInstruct.setTransType(2);
					bioInstruct.setTranslateMatrix(-1.0, 0.0, 0.0);
				}
				else {
					bioInstruct.setPivotPoint(3);
					bioInstruct.setRotateVector(0.0, 0.0, 1.0);
					bioInstruct.setTransType(2);
					bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);
				}
					
					
		    	// Add the instruction into the instruction set
		    	bioMightInstructSet.addElement(bioInstruct);
			}
		    
		}
	
		
		DBUtils.generateFacedComponents(Constants.QUADRANGLE, startID, componentType, componentName, componentID, currentPoints, bioMightInstructSet);
		System.out.println("Generated the Rows for InferiorVenaCavaEndothelium: " + componentID + "   parent: " + parentID + "   " + componentType);
		
	return returnCode;
}
	
	
	   /***************************************************************************************
		 * GENERATE SUPERIOR VENA CAVA 
		 * 
		 * This generates the Adrenal Arteries
		 * Eminates at the chamber of the Heart
		 *
		 * @param key
		 * @param user
		 * @return
		 * @throws DataException
		 * @throws DataSecurityException
		 ***************************************************************************************/
		  	
		public int generateSuperiorVenaCava(String startID, String componentType, String componentName, String componentID,  String parentID, double[][] currentPoints) 
			throws DataException, DataSecurityException
		{	
			System.out.println("generateSuperiorVenaCava: " + componentID + "   " + parentID);
			
			int bodyID = 1;
			int projectID = 1;
			String vertices = "";
			
			ArrayList mySqlList= new ArrayList();
			int returnCode = 0;
		
		
			if (currentPoints == null )
			{	
				double x =  -0.3;
	    		double y =  -17.0;
	    		double z =  -3.0;
				
				double radius = 0.25;
				double[] startPos = {0.25, -24.25, -6.0};
				currentPoints = BioGraphics.createCylinderInPlane(Constants.XPLANE, startPos, radius, 8);
			}
			

			// Allocate an instruction set for building it
			BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();

			if (componentID.equals("SuperiorVenaCava:01")) 
			{	
				int nMaxSegs = 3;
				for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
			
					// Create a place for an instruction 
					BioMightInstruction bioInstruct = new BioMightInstruction();
		     
					if (numSegs==0){
						bioInstruct.setTransType(2);
						bioInstruct.setTranslateMatrix(0.0, -0.5, 0.0);
					}
					else if (numSegs==1){
						bioInstruct.setTransType(2);
						bioInstruct.setTranslateMatrix(0.0, -0.5, 0.0);
		    		}
					else if (numSegs==2){
						bioInstruct.setTransType(2);
						bioInstruct.setTranslateMatrix(0.0, -0.5, 0.0);
					}
					else if (numSegs==3){
						bioInstruct.setTransType(2);
						bioInstruct.setTranslateMatrix(0.0, -0.5, 0.0);
					}
					
					else if (numSegs==4){
						bioInstruct.setTransType(2);
						bioInstruct.setTranslateMatrix(1.0, 0.0, 0.25);
					}
					else {
						bioInstruct.setPivotPoint(3);
						bioInstruct.setRotateVector(0.0, 0.0, 1.0);
						bioInstruct.setTransType(2);
						bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);
					}
					
					
		    		// Add the instruction into the instruction set
		    		bioMightInstructSet.addElement(bioInstruct);
				}
		    
			} else if (componentID.equals("SuperiorVenaCava:02")) {	
				int nMaxSegs = 3;
				for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
				
					// Create a place for an instruction 
					BioMightInstruction bioInstruct = new BioMightInstruction();
			      
					if (numSegs==0){
						bioInstruct.setTransType(2);
						bioInstruct.setTranslateMatrix(0.0, -0.5, 0.0);
					}
					else if (numSegs==1){
						bioInstruct.setTransType(2);
						bioInstruct.setTranslateMatrix(0.0, -0.5, 0.0);
		    		}
					else if (numSegs==2){
						bioInstruct.setTransType(2);
						bioInstruct.setTranslateMatrix(0.0, -0.5, 0.0);
					}
					
					
					else if (numSegs==3){
						bioInstruct.setTransType(2);
						bioInstruct.setTranslateMatrix(-1.0, 0.0, 0.15);
					}
					else if (numSegs==4){
						bioInstruct.setTransType(2);
						bioInstruct.setTranslateMatrix(-1.0, 0.0, 0.0);
					}
					else {
						bioInstruct.setPivotPoint(3);
						bioInstruct.setRotateVector(0.0, 0.0, 1.0);
						bioInstruct.setTransType(2);
						bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);
					}
						
						
			    	// Add the instruction into the instruction set
			    	bioMightInstructSet.addElement(bioInstruct);
				}
			    
			}
		
			
			DBUtils.generateFacedComponents(Constants.QUADRANGLE, startID, componentType, componentName, componentID, currentPoints, bioMightInstructSet);
			System.out.println("Generated the Rows for SuperiorVenaCavaEndothelium: " + componentID + "   parent: " + parentID + "   " + componentType);
			
		return returnCode;
	}
		

    /***************************************************************************************
	 * GENERATE GREAT CARDIAC VEIN
	 * 
	 * This generates the Adrenal Arteries
	 * Eminates at the chamber of the Heart
	 *
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/
	  	
	public int generateGreatCardiacVein(String startID, String componentType, String componentName, String componentID,  String parentID, double[][] currentPoints) 
		throws DataException, DataSecurityException
	{	
		System.out.println("generateGreatCardiacVein: " + componentID + "   " + parentID);
		
		int bodyID = 1;
		int projectID = 1;
		String vertices = "";
		
		ArrayList mySqlList= new ArrayList();
		int returnCode = 0;
	
		// We can generate the GreatCardiacVein alone, or when connected
		// The current points passed into the equation are assumed
		// to come from the base oral cavity
		if (currentPoints == null )
		{
			double circumference = 0.25;
			
			double x =  -0.3;
    		double y =  -17.0;
    		double z =  -3.0;
			
			// Create a equilateral octogon	
			currentPoints[0][0] =  x;
			currentPoints[0][1] =  y;
			currentPoints[0][2] =  z;
			
			currentPoints[1][0] =  x-circumference;
			currentPoints[1][1] =  y;
			currentPoints[1][2] =  z-circumference;
			
			currentPoints[2][0] =  x-circumference;
			currentPoints[2][1] =  y;
			currentPoints[2][2] =  z-circumference*2;
			
			currentPoints[3][0] =  x;
			currentPoints[3][1] =  y;
			currentPoints[3][2] =  z-circumference*3;
	
			currentPoints[4][0] =  x+circumference;
			currentPoints[4][1] =  y;
			currentPoints[4][2] =  z-circumference*3;
			
			currentPoints[5][0] =  x+circumference*2;
			currentPoints[5][1] =  y;
			currentPoints[5][2] =  z-circumference*2;
	
			currentPoints[6][0] =  x+circumference*2;
			currentPoints[6][1] =  y;
			currentPoints[6][2] =  z-circumference;

			currentPoints[7][0] =  x+circumference;
			currentPoints[7][1] =  y;
			currentPoints[7][2] =  z;
		}
		

		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();

		if (componentID.equals("GreatCardiacVein:01")) 
		{	
			int nMaxSegs = 4;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
		
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
	     
				if (numSegs==0){
					bioInstruct.setTransType(2);
					bioInstruct.setTranslateMatrix(0.0, -1.00, 0.75);
				}
				else if (numSegs==1){
					bioInstruct.setTransType(2);
					bioInstruct.setTranslateMatrix(0.25, -1.00, 0.55);
				}
				else if (numSegs==2){
					bioInstruct.setTransType(2);
					bioInstruct.setTranslateMatrix(0.0, -1.00, 0.20);
				}
				else if (numSegs==3){
					bioInstruct.setTransType(2);
					bioInstruct.setTranslateMatrix(0.25, -1.0, 0.15);
				}
				else if (numSegs==4){
					bioInstruct.setTransType(2);
					bioInstruct.setTranslateMatrix(0.25, -0.50, 0.0);
				}
				else {
					bioInstruct.setPivotPoint(3);
					bioInstruct.setRotateVector(0.0, 0.0, 1.0);
					bioInstruct.setTransType(2);
					bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);
				}
				
				
	    		// Add the instruction into the instruction set
	    		bioMightInstructSet.addElement(bioInstruct);
			}
	    
		} else if (componentID.equals("GreatCardiacVein:02")) {	
			int nMaxSegs = 4;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
			
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
		      
				if (numSegs==0){
					bioInstruct.setTransType(2);
					bioInstruct.setTranslateMatrix(-1.0, 0.0, 0.0);
				}
				else if (numSegs==1){
					bioInstruct.setTransType(2);
					bioInstruct.setTranslateMatrix(-1.0, 0.0, 0.25);
	    		}
				else if (numSegs==2){
					bioInstruct.setTransType(2);
					bioInstruct.setTranslateMatrix(-1.0, 0.0, 0.0);
				}
				else if (numSegs==3){
					bioInstruct.setTransType(2);
					bioInstruct.setTranslateMatrix(-1.0, 0.0, 0.15);
				}
				else if (numSegs==4){
					bioInstruct.setTransType(2);
					bioInstruct.setTranslateMatrix(-1.0, 0.0, 0.0);
				}
				else {
					bioInstruct.setPivotPoint(3);
					bioInstruct.setRotateVector(0.0, 0.0, 1.0);
					bioInstruct.setTransType(2);
					bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);
				}
					
					
		    	// Add the instruction into the instruction set
		    	bioMightInstructSet.addElement(bioInstruct);
			}
		    
		}
	
		
		DBUtils.generateFacedComponents(Constants.QUADRANGLE, startID, componentType, componentName, componentID, currentPoints, bioMightInstructSet);
		System.out.println("Generated the Rows for GreatCardiacVeinEndothelium: " + componentID + "   parent: " + parentID + "   " + componentType);
		
	return returnCode;
}
	

    /***************************************************************************************
	 * GENERATE SMALL CARDIAC VEIN 
	 * 
	 * This generates the Adrenal Arteries
	 * Eminates at the chamber of the Heart
	 *
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/
	  	
	public int generateSmallCardiacVein(String startID, String componentType, String componentName, String componentID,  String parentID, double[][] currentPoints) 
		throws DataException, DataSecurityException
	{	
		System.out.println("generateSmallCardiacVein: " + componentID + "   " + parentID);
		
		int bodyID = 1;
		int projectID = 1;
		String vertices = "";
		
		ArrayList mySqlList= new ArrayList();
		int returnCode = 0;
	
		// We can generate the SmallCardiacVein alone, or when connected
		// The current points passed into the equation are assumed
		// to come from the base oral cavity
		if (currentPoints == null )
		{
			double circumference = 0.25;
			
			double x =  -0.3;
    		double y =  -17.0;
    		double z =  -3.0;
			
			// Create a equilateral octogon	
			currentPoints[0][0] =  x;
			currentPoints[0][1] =  y;
			currentPoints[0][2] =  z;
			
			currentPoints[1][0] =  x-circumference;
			currentPoints[1][1] =  y;
			currentPoints[1][2] =  z-circumference;
			
			currentPoints[2][0] =  x-circumference;
			currentPoints[2][1] =  y;
			currentPoints[2][2] =  z-circumference*2;
			
			currentPoints[3][0] =  x;
			currentPoints[3][1] =  y;
			currentPoints[3][2] =  z-circumference*3;
	
			currentPoints[4][0] =  x+circumference;
			currentPoints[4][1] =  y;
			currentPoints[4][2] =  z-circumference*3;
			
			currentPoints[5][0] =  x+circumference*2;
			currentPoints[5][1] =  y;
			currentPoints[5][2] =  z-circumference*2;
	
			currentPoints[6][0] =  x+circumference*2;
			currentPoints[6][1] =  y;
			currentPoints[6][2] =  z-circumference;

			currentPoints[7][0] =  x+circumference;
			currentPoints[7][1] =  y;
			currentPoints[7][2] =  z;
		}
		

		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();

		if (componentID.equals("SmallCardiacVein:01")) 
		{	
			int nMaxSegs = 4;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
		
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
	     
				if (numSegs==0){
					bioInstruct.setTransType(2);
					bioInstruct.setTranslateMatrix(0.0, -1.00, 0.75);
				}
				else if (numSegs==1){
					bioInstruct.setTransType(2);
					bioInstruct.setTranslateMatrix(-0.25, -1.00, 0.50);
				}
				else if (numSegs==2){
					bioInstruct.setTransType(2);
					bioInstruct.setTranslateMatrix(-0.15, -0.75, 0.50);
				}
				else if (numSegs==3){
					bioInstruct.setTransType(2);
					bioInstruct.setTranslateMatrix(-0.25, -1.0, 0.10);
				}
				else if (numSegs==4){
					bioInstruct.setTransType(2);
					bioInstruct.setTranslateMatrix(-0.35, -0.50, 0.0);
				}
		else {
					bioInstruct.setPivotPoint(3);
					bioInstruct.setRotateVector(0.0, 0.0, 1.0);
					bioInstruct.setTransType(2);
					bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);
				}
				
				
	    		// Add the instruction into the instruction set
	    		bioMightInstructSet.addElement(bioInstruct);
			}
	    
		} else if (componentID.equals("SmallCardiacVein:02")) {	
			int nMaxSegs = 4;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
			
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
		      
				if (numSegs==0){
					bioInstruct.setTransType(2);
					bioInstruct.setTranslateMatrix(-1.0, 0.0, 0.0);
				}
				else if (numSegs==1){
					bioInstruct.setTransType(2);
					bioInstruct.setTranslateMatrix(-1.0, 0.0, 0.25);
	    		}
				else if (numSegs==2){
					bioInstruct.setTransType(2);
					bioInstruct.setTranslateMatrix(-1.0, 0.0, 0.0);
				}
				else if (numSegs==3){
					bioInstruct.setTransType(2);
					bioInstruct.setTranslateMatrix(-1.0, 0.0, 0.15);
				}
				else if (numSegs==4){
					bioInstruct.setTransType(2);
					bioInstruct.setTranslateMatrix(-1.0, 0.0, 0.0);
				}
				else {
					bioInstruct.setPivotPoint(3);
					bioInstruct.setRotateVector(0.0, 0.0, 1.0);
					bioInstruct.setTransType(2);
					bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);
				}
					
					
		    	// Add the instruction into the instruction set
		    	bioMightInstructSet.addElement(bioInstruct);
			}
		    
		}
	
		
		DBUtils.generateFacedComponents(Constants.QUADRANGLE, startID, componentType, componentName, componentID, currentPoints, bioMightInstructSet);
		System.out.println("Generated the Rows for SmallCardiacVein: " + componentID + "   parent: " + parentID + "   " + componentType);
		
	return returnCode;
}
	
    /***************************************************************************************
	 * GENERATE PULMONARY ARTERY
	 * 
	 * This generates the Adrenal Arteries
	 * Eminates at the chamber of the Heart
	 *
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/
	  	
	public int generatePulmonaryArtery(String startID, String componentType, String componentName, String componentID,  String parentID, double[][] currentPoints) 
		throws DataException, DataSecurityException
	{	
		System.out.println("PulmonaryArtery: " + componentID + "   " + parentID);
		
		int bodyID = 1;
		int projectID = 1;
		String vertices = "";
		
		ArrayList mySqlList= new ArrayList();
		int returnCode = 0;
	
		if (currentPoints == null )
		{
			double circumference = 0.25;
			
			double x =  -0.3;
    		double y =  -17.0;
    		double z =  -3.0;
			
			// Create a equilateral octogon	
			currentPoints[0][0] =  x;
			currentPoints[0][1] =  y;
			currentPoints[0][2] =  z;
			
			currentPoints[1][0] =  x-circumference;
			currentPoints[1][1] =  y;
			currentPoints[1][2] =  z-circumference;
			
			currentPoints[2][0] =  x-circumference;
			currentPoints[2][1] =  y;
			currentPoints[2][2] =  z-circumference*2;
			
			currentPoints[3][0] =  x;
			currentPoints[3][1] =  y;
			currentPoints[3][2] =  z-circumference*3;
	
			currentPoints[4][0] =  x+circumference;
			currentPoints[4][1] =  y;
			currentPoints[4][2] =  z-circumference*3;
			
			currentPoints[5][0] =  x+circumference*2;
			currentPoints[5][1] =  y;
			currentPoints[5][2] =  z-circumference*2;
	
			currentPoints[6][0] =  x+circumference*2;
			currentPoints[6][1] =  y;
			currentPoints[6][2] =  z-circumference;

			currentPoints[7][0] =  x+circumference;
			currentPoints[7][1] =  y;
			currentPoints[7][2] =  z;
		}
		

		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();

		if (parentID.equals("PulmonaryArtery:01")) 
		{	
			int nMaxSegs = 4;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
		
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
	     
				if (numSegs==0){
					bioInstruct.setTransType(2);
					bioInstruct.setTranslateMatrix(1.0, 0.25, 0.50);
				}
				else if (numSegs==1){
					bioInstruct.setTransType(2);
					bioInstruct.setTranslateMatrix(1.0, 0.15, 0.25);
				}
				else if (numSegs==2){
					bioInstruct.setTransType(2);
					bioInstruct.setTranslateMatrix(1.0, 0.20, 0.35);
				}
				else if (numSegs==3){
					bioInstruct.setTransType(2);
					bioInstruct.setTranslateMatrix(1.0, 0.0, 0.25);
				}
				else if (numSegs==4){
					bioInstruct.setTransType(2);
					bioInstruct.setTranslateMatrix(1.0, 0.0, 0.20);
				}
				else {
					bioInstruct.setPivotPoint(3);
					bioInstruct.setRotateVector(0.0, 0.0, 1.0);
					bioInstruct.setTransType(2);
					bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);
				}
				
				
	    		// Add the instruction into the instruction set
	    		bioMightInstructSet.addElement(bioInstruct);
			}
	    
		} else if (parentID.equals("PulmonaryArtery:02")) {	
			int nMaxSegs = 4;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
			
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
		      
				if (numSegs==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, 0.0, 0.50);
				}
				else if (numSegs==1){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, 0.0, 0.25);
	    		}
				else if (numSegs==2){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, 0.0, 0.35);
				}
				else if (numSegs==3){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, 0.0, 0.25);
				}
				else if (numSegs==4){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, 0.0, 0.20);
				}
				else {
					bioInstruct.setPivotPoint(3);
					bioInstruct.setRotateVector(0.0, 0.0, 1.0);
					bioInstruct.setTransType(2);
					bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);
				}
					
					
		    	// Add the instruction into the instruction set
		    	bioMightInstructSet.addElement(bioInstruct);
			}
		    
		}
	
		
		DBUtils.generateFacedComponents(Constants.QUADRANGLE, startID, componentType, componentName, componentID, currentPoints, bioMightInstructSet);
		System.out.println("Generated the Rows for PulmonaryArteryEndothelium: " + componentID + "   parent: " + parentID + "   " + componentType);
		
	return returnCode;
}

	 /***************************************************************************************
	 * GENERATE INNOMINATE VEIN
	 * 
	 * This method generates the Innominate Vein
	 *
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/
	  	
	public int generateInnominateVein(String startID, String componentType, String componentName, String componentID,  String parentID, double[][] currentPoints) 
		throws DataException, DataSecurityException
	{	
		System.out.println("generate InnominateVeinEndothelium: " + componentID + "   " + parentID);
		
		int bodyID = 1;
		int projectID = 1;
		String vertices = "";
		
		ArrayList mySqlList= new ArrayList();
		int returnCode = 0;
	
		// We can generate the InnominateVein alone, or when connected
		// The current points passed into the equation are assumed
		// to come from the base oral cavity
		if (currentPoints == null )
		{
			double circumference = 0.25;
			
			double x =  -0.3;
    		double y =  -17.0;
    		double z =  -3.0;
			
			// Create a equilateral octogon	
			currentPoints[0][0] =  x;
			currentPoints[0][1] =  y;
			currentPoints[0][2] =  z;
			
			currentPoints[1][0] =  x-circumference;
			currentPoints[1][1] =  y;
			currentPoints[1][2] =  z-circumference;
			
			currentPoints[2][0] =  x-circumference;
			currentPoints[2][1] =  y;
			currentPoints[2][2] =  z-circumference*2;
			
			currentPoints[3][0] =  x;
			currentPoints[3][1] =  y;
			currentPoints[3][2] =  z-circumference*3;
	
			currentPoints[4][0] =  x+circumference;
			currentPoints[4][1] =  y;
			currentPoints[4][2] =  z-circumference*3;
			
			currentPoints[5][0] =  x+circumference*2;
			currentPoints[5][1] =  y;
			currentPoints[5][2] =  z-circumference*2;
	
			currentPoints[6][0] =  x+circumference*2;
			currentPoints[6][1] =  y;
			currentPoints[6][2] =  z-circumference;

			currentPoints[7][0] =  x+circumference;
			currentPoints[7][1] =  y;
			currentPoints[7][2] =  z;
		}
		

		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();

		if (parentID.equals("InnominateVein:01")) 
		{	
			int nMaxSegs = 5;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
		
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
	     
				if (numSegs==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.25, 0.20, 0.15);
				}
				else if (numSegs==1){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.25, 0.20, 0.20);
				}
				else if (numSegs==2){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.25, 0.20, 0.20);
				}
				else if (numSegs==3){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.25, 0.20, 0.00);
				}
				else if (numSegs==4){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.25, 0.20, 0.20);
				}
				else if (numSegs==5){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.25, 0.25, 0.00);
				}
				
				else {
					bioInstruct.setPivotPoint(3);
					bioInstruct.setRotateVector(0.0, 0.0, 1.0);
					bioInstruct.setTransType(2);
					bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);
				}
				
				
	    		// Add the instruction into the instruction set
	    		bioMightInstructSet.addElement(bioInstruct);
			}
	    
		} else if (parentID.equals("InnominateVein:02")) {	
			int nMaxSegs = 5;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
			
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
		      
				if (numSegs==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.25, 0.20, 0.15);
				}
				else if (numSegs==1){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.25, 0.20, 0.20);
				}
				else if (numSegs==2){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.25, 0.20, 0.20);
				}
				else if (numSegs==3){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.25, 0.20, 0.20);
				}
				else if (numSegs==4){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.25, 0.20, 0.00);
				}
				else if (numSegs==5){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.25, 0.25, 0.00);
				}
				
				else {
					bioInstruct.setPivotPoint(3);
					bioInstruct.setRotateVector(0.0, 0.0, 1.0);
					bioInstruct.setTransType(2);
					bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);
				}
					
					
		    	// Add the instruction into the instruction set
		    	bioMightInstructSet.addElement(bioInstruct);
			}
		    
		}
	
		
		DBUtils.generateFacedComponents(Constants.QUADRANGLE, startID, componentType, componentName, componentID, currentPoints, bioMightInstructSet);
		System.out.println("Generated the Rows for InnominateVeinEndothelium: " + componentID + "   parent: " + parentID + "   " + componentType);
		
	return returnCode;
}


	 /***************************************************************************************
	 * GENERATE SubclavianArtery 
	 * 
	 * This method generates the SubclavianArtery
	 *
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/
	  	
	public int generateSubclavianArtery(String startID, String componentType, String componentName, String componentID,  String parentID, double[][] currentPoints) 
		throws DataException, DataSecurityException
	{	
		System.out.println("SubclavianArteryEndothelium: " + componentID + "   " + parentID);
		
		int bodyID = 1;
		int projectID = 1;
		String vertices = "";
		
		ArrayList mySqlList= new ArrayList();
		int returnCode = 0;
	
		// We can generate the SubclavianArtery alone, or when connected
		// The current points passed into the equation are assumed
		// to come from the base oral cavity
		if (currentPoints == null )
		{
			double radius = 0.25;
			
			double[] startPos = {0.75,-10.25, -3.5};
			currentPoints = BioGraphics.createCylinderInPlane(Constants.YPLANE, startPos, radius, 8);
		}
		

		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();

		//  Longer sublavian that eminates from the heart chamber
		if (parentID.equals("SubclavianArtery:01")) 
		{	
			int nMaxSegs = 9;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
		
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
	     
				if (numSegs==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.25, 1.00, -0.05);
				}
				else if (numSegs==1){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.125, 0.50, -0.1);
				}
				else if (numSegs==2){
					BioMightOrientation orientation = new BioMightOrientation(0.0, 0.0, 1.0, 90.0);
		 			bioInstruct.setTransType(Constants.ROTATEOCTO);
	    			bioInstruct.setTheta(-45);	
	    			bioInstruct.setPivotPoint(0);	
	     			bioInstruct.setRotateVector(0.0, 0.0, 1.0);
	     			bioInstruct.setOrientation(orientation);
				}	
				else if (numSegs==3){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.750, 0.50, 0.1);
				}
				else if (numSegs==4){
					BioMightOrientation orientation = new BioMightOrientation(0.0, 0.0, 1.0, 90.0);
		 			bioInstruct.setTransType(Constants.ROTATEOCTO);
	    			bioInstruct.setTheta(-45);	
	    			bioInstruct.setPivotPoint(0);	
	     			bioInstruct.setRotateVector(0.0, 0.0, 1.0);
	     			bioInstruct.setOrientation(orientation);
				}
				else if (numSegs==5){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.2, 0.15);
				}
				else if (numSegs==6){
					BioMightOrientation orientation = new BioMightOrientation(0.0, 0.0, 1.0, 90.0);
		 			bioInstruct.setTransType(Constants.ROTATEOCTO);
	    			bioInstruct.setTheta(-45);	
	    			bioInstruct.setPivotPoint(0);	
	     			bioInstruct.setRotateVector(0.0, 0.0, 1.0);
	     			bioInstruct.setOrientation(orientation);
				}
				else if (numSegs==7){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.37, 0.15);
				}
				else if (numSegs==8){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.325, -0.15, 0.0);
				}	
				
				
				else {
					bioInstruct.setPivotPoint(3);
					bioInstruct.setRotateVector(0.0, 0.0, 1.0);
					bioInstruct.setTransType(2);
					bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);
				}
				
				
	    		// Add the instruction into the instruction set
	    		bioMightInstructSet.addElement(bioInstruct);
			}
	    
		} else if (parentID.equals("SubclavianArtery:02")) {	
			int nMaxSegs = 9;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
			
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
		      
		
				if (numSegs==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.15, 0.80, -0.15);
				}
				else if (numSegs==1){
					BioMightOrientation orientation = new BioMightOrientation(0.0, 0.0, 1.0, 90.0);
		 			bioInstruct.setTransType(Constants.ROTATEOCTO);
	    			bioInstruct.setTheta(45);	
	    			bioInstruct.setPivotPoint(4);	
	     			bioInstruct.setRotateVector(0.0, 0.0, 1.0);
	     			bioInstruct.setOrientation(orientation);
				}				
				else if (numSegs==2){
					BioMightOrientation orientation = new BioMightOrientation(0.0, 0.0, 1.0, 90.0);
		 			bioInstruct.setTransType(Constants.ROTATEOCTO);
	    			bioInstruct.setTheta(45);	
	    			bioInstruct.setPivotPoint(4);	
	     			bioInstruct.setRotateVector(0.0, 0.0, 1.0);
	     			bioInstruct.setOrientation(orientation);
				}
				else if (numSegs==3){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, 0.0, -0.1);
				}
				else if (numSegs==4){
					BioMightOrientation orientation = new BioMightOrientation(0.0, 0.0, 1.0, 90.0);
		 			bioInstruct.setTransType(Constants.ROTATEOCTO);
	    			bioInstruct.setTheta(15);	
	    			bioInstruct.setPivotPoint(4);	
	     			bioInstruct.setRotateVector(0.0, 0.0, 1.0);
	     			bioInstruct.setOrientation(orientation);
				}
				else if (numSegs==5){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.35, -0.1);
				}	
				else if (numSegs==6){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.35, -0.1);
				}	
				else if (numSegs==7){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.50, -0.20, -0.05);
				}	
				else if (numSegs==8){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.45, -0.1, 0.0);
				}			
			
						
				else {
					bioInstruct.setPivotPoint(3);
					bioInstruct.setRotateVector(0.0, 0.0, 1.0);
					bioInstruct.setTransType(2);
					bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);
				}
					
					
		    	// Add the instruction into the instruction set
		    	bioMightInstructSet.addElement(bioInstruct);
			}
		    
		}
	
		
		DBUtils.generateFacedComponents(Constants.QUADRANGLE, startID, componentType, componentName, componentID, currentPoints, bioMightInstructSet);
		System.out.println("Generated the Rows for SubclavianArteryEndothelium: " + componentID + "   parent: " + parentID + "   " + componentType);
		
	return returnCode;
	}

	
	 /***************************************************************************************
	 * GENERATE SUBCLAVIAN VEIN
	 * 
	 * This method generates the Subclavian Arteries
	 *
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/
	  	
	public int generateSubclavianVein(String startID, String componentType, String componentName, String componentID,  String parentID, double[][] currentPoints) 
		throws DataException, DataSecurityException
	{	
		System.out.println("SubclavianVeinEndothelium: " + componentID + "   " + parentID);
		
		int bodyID = 1;
		int projectID = 1;
		String vertices = "";
		
		ArrayList mySqlList= new ArrayList();
		int returnCode = 0;
	
		// We can generate the SubclavianVein alone, or when connected
		// The current points passed into the equation are assumed
		// to come from the base oral cavity
		if (currentPoints == null )
		{
			double circumference = 0.25;
			
			double x =  -0.3;
  		double y =  -17.0;
  		double z =  -3.0;
			
			// Create a equilateral octogon	
			currentPoints[0][0] =  x;
			currentPoints[0][1] =  y;
			currentPoints[0][2] =  z;
			
			currentPoints[1][0] =  x-circumference;
			currentPoints[1][1] =  y;
			currentPoints[1][2] =  z-circumference;
			
			currentPoints[2][0] =  x-circumference;
			currentPoints[2][1] =  y;
			currentPoints[2][2] =  z-circumference*2;
			
			currentPoints[3][0] =  x;
			currentPoints[3][1] =  y;
			currentPoints[3][2] =  z-circumference*3;
	
			currentPoints[4][0] =  x+circumference;
			currentPoints[4][1] =  y;
			currentPoints[4][2] =  z-circumference*3;
			
			currentPoints[5][0] =  x+circumference*2;
			currentPoints[5][1] =  y;
			currentPoints[5][2] =  z-circumference*2;
	
			currentPoints[6][0] =  x+circumference*2;
			currentPoints[6][1] =  y;
			currentPoints[6][2] =  z-circumference;

			currentPoints[7][0] =  x+circumference;
			currentPoints[7][1] =  y;
			currentPoints[7][2] =  z;
		}
		

		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();

		if (parentID.equals("SubclavianVein:01")) 
		{	
			int nMaxSegs = 6;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
		
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
	     
				if (numSegs==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, 0.25, 0.25);
				}
				else if (numSegs==1){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, 0.15, 0.25);
				}
				else if (numSegs==2){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, 0.20, 0.10);
				}
				else if (numSegs==3){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, 0.0, 0.20);
				}
				else if (numSegs==4){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, 0.0, 0.50);
				}
				else if (numSegs==5){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, 0.0, 0.25);
				}
				
				else {
					bioInstruct.setPivotPoint(3);
					bioInstruct.setRotateVector(0.0, 0.0, 1.0);
					bioInstruct.setTransType(2);
					bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);
				}
				
				
	    		// Add the instruction into the instruction set
	    		bioMightInstructSet.addElement(bioInstruct);
			}
	    
		} else if (parentID.equals("SubclavianVein:02")) {	
			int nMaxSegs = 6;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
			
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
		      
				if (numSegs==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, 0.25, 0.25);
				}
				else if (numSegs==1){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, 0.15, 0.25);
				}
				else if (numSegs==2){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, 0.20, 0.10);
				}
				else if (numSegs==3){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, 0.0, 0.20);
				}
				else if (numSegs==4){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, 0.0, 0.50);
				}
				else if (numSegs==5){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, 0.0, 0.25);
				}
				else {
					bioInstruct.setPivotPoint(3);
					bioInstruct.setRotateVector(0.0, 0.0, 1.0);
					bioInstruct.setTransType(2);
					bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);
				}
					
					
		    	// Add the instruction into the instruction set
		    	bioMightInstructSet.addElement(bioInstruct);
			}
		    
		}
	
		
		DBUtils.generateFacedComponents(Constants.QUADRANGLE, startID, componentType, componentName, componentID, currentPoints, bioMightInstructSet);
		System.out.println("Generated the Rows for SubclavianVeinEndothelium: " + componentID + "   parent: " + parentID + "   " + componentType);
		
		return returnCode;
	}
	
	 /***************************************************************************************
	 * GENERATE THORACIC ARTERY
	 * 
	 * This method generates the Subclavian Arteries
	 *
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/
	  	
	public int generateThoracicArtery(String startID, String componentType, String componentName, String componentID,  String parentID, double[][] currentPoints) 
		throws DataException, DataSecurityException
	{	
		System.out.println("ThoracicArteryEndothelium: " + componentID + "   " + parentID);
		
		int bodyID = 1;
		int projectID = 1;
		String vertices = "";
		
		ArrayList mySqlList= new ArrayList();
		int returnCode = 0;
	
		// We can generate the ThoracicArteryalone, or when connected
		// The current points passed into the equation are assumed
		// to come from the base oral cavity
		if (currentPoints == null )
		{
			double circumference = 0.25;
			
			double x =  -0.3;
   		double y =  -17.0;
   		double z =  -3.0;
			
			// Create a equilateral octogon	
			currentPoints[0][0] =  x;
			currentPoints[0][1] =  y;
			currentPoints[0][2] =  z;
			
			currentPoints[1][0] =  x-circumference;
			currentPoints[1][1] =  y;
			currentPoints[1][2] =  z-circumference;
			
			currentPoints[2][0] =  x-circumference;
			currentPoints[2][1] =  y;
			currentPoints[2][2] =  z-circumference*2;
			
			currentPoints[3][0] =  x;
			currentPoints[3][1] =  y;
			currentPoints[3][2] =  z-circumference*3;
	
			currentPoints[4][0] =  x+circumference;
			currentPoints[4][1] =  y;
			currentPoints[4][2] =  z-circumference*3;
			
			currentPoints[5][0] =  x+circumference*2;
			currentPoints[5][1] =  y;
			currentPoints[5][2] =  z-circumference*2;
	
			currentPoints[6][0] =  x+circumference*2;
			currentPoints[6][1] =  y;
			currentPoints[6][2] =  z-circumference;

			currentPoints[7][0] =  x+circumference;
			currentPoints[7][1] =  y;
			currentPoints[7][2] =  z;
		}
		

		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();

		if (parentID.equals("ThoracicArtery:01")) 
		{	
			int nMaxSegs = 6;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
		
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
	     
				if (numSegs==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, 0.25, 0.25);
				}
				else if (numSegs==1){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, 0.15, 0.25);
				}
				else if (numSegs==2){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, 0.20, 0.10);
				}
				else if (numSegs==3){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, 0.0, 0.20);
				}
				else if (numSegs==4){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, 0.0, 0.50);
				}
				else if (numSegs==5){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, 0.0, 0.25);
				}
				
				else {
					bioInstruct.setPivotPoint(3);
					bioInstruct.setRotateVector(0.0, 0.0, 1.0);
					bioInstruct.setTransType(2);
					bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);
				}
				
				
	    		// Add the instruction into the instruction set
	    		bioMightInstructSet.addElement(bioInstruct);
			}
	    
		} else if (parentID.equals("ThoracicArtery:02")) {	
			int nMaxSegs = 6;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
			
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
		      
				if (numSegs==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, 0.25, 0.25);
				}
				else if (numSegs==1){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, 0.15, 0.25);
				}
				else if (numSegs==2){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, 0.20, 0.10);
				}
				else if (numSegs==3){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, 0.0, 0.20);
				}
				else if (numSegs==4){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, 0.0, 0.50);
				}
				else if (numSegs==5){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, 0.0, 0.25);
				}
				else {
					bioInstruct.setPivotPoint(3);
					bioInstruct.setRotateVector(0.0, 0.0, 1.0);
					bioInstruct.setTransType(2);
					bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);
				}
					
					
		    	// Add the instruction into the instruction set
		    	bioMightInstructSet.addElement(bioInstruct);
			}
		    
		}
	
		
		DBUtils.generateFacedComponents(Constants.QUADRANGLE, startID, componentType, componentName, componentID, currentPoints, bioMightInstructSet);
		System.out.println("Generated the Rows for ThoracicArteryEndothelium: " + componentID + "   parent: " + parentID + "   " + componentType);
		
		return returnCode;
	}
	

	 /***************************************************************************************
	 * GENERATE INFERIOR EPIGASTRIC ARTERY
	 * 
	 * This generates the Epigastric Artery
	 *
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/
	  			
	public int generateInferiorEpigastricArtery(String startID, String componentType, String componentName, String componentID,  String parentID, double[][] currentPoints) 
			throws DataException, DataSecurityException
		{	
		System.out.println("generateInferiorEpigastricArtery: " + componentID + "   " + parentID + "   " + componentName);
		
		int bodyID = 1;
		int projectID = 1;
		String vertices = "";
		
		ArrayList mySqlList= new ArrayList();
		int returnCode = 0;
	
		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();

		// Right FacialArtery - Move inward toward the front of Jaw
		if (componentID.equals("InferiorEpigastricArtery:01") || parentID.equals("InferiorEpigastricArtery:01")) 
		{	
			// We can generate the Artery
			if (currentPoints == null )
			{
				double radius = 0.00625;
				double[] startPos = {3.65, -35.0, -6.0};
				currentPoints = BioGraphics.createCylinderInPlane(Constants.YPLANE, startPos, radius, 8);
	
			}
			
			if (componentName.equals("Main")) {
				
				int nMaxSegs = 15;
				for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
			
					// Create a place for an instruction 
					BioMightInstruction bioInstruct = new BioMightInstruction();
		     
					if (numSegs==0){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.50, 0.0, 0.1);
					}
					else if (numSegs==1){
						BioMightOrientation orientation = new BioMightOrientation(0.0, -1.0, 0.0, 90.0);
			 			bioInstruct.setTransType(Constants.ROTATEOCTO);
		    			bioInstruct.setTheta(-45);	
		    			bioInstruct.setPivotPoint(2);	
		     			bioInstruct.setRotateVector(0.0, 0.0, 1.0);
		     			bioInstruct.setOrientation(orientation);
		     			bioInstruct.setScaleMatrix(0.90, 0.90, 0.90);
					}
					else if (numSegs==2){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.50, 0.50, 0.0);
					}
					else if (numSegs==3){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.50, 0.35, 0.0);
					}
					else if (numSegs==4){
						BioMightOrientation orientation = new BioMightOrientation(0.0, -1.0, 0.0, 90.0);
			 			bioInstruct.setTransType(Constants.ROTATEOCTO);
		    			bioInstruct.setTheta(-25);	
		    			bioInstruct.setPivotPoint(2);	
		     			bioInstruct.setRotateVector(0.0, 0.0, 1.0);
		     			bioInstruct.setOrientation(orientation);
		     			bioInstruct.setScaleMatrix(0.90, 0.90, 0.90);
					}
					else if (numSegs==5){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.40, 0.50, 0.0);
					}
					else if (numSegs==6){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.35, 0.50, 0.0);
					}
					else if (numSegs==7){
						BioMightOrientation orientation = new BioMightOrientation(0.0, -1.0, 0.0, 90.0);
			 			bioInstruct.setTransType(Constants.ROTATEOCTO);
		    			bioInstruct.setTheta(-15);	
		    			bioInstruct.setPivotPoint(2);	
		     			bioInstruct.setRotateVector(0.0, 0.0, 1.0);
		     			bioInstruct.setOrientation(orientation);
		     			bioInstruct.setScaleMatrix(0.90, 0.90, 0.90);
					}
					else if (numSegs==8){
						bioInstruct.setTransType(Constants.SCALE);
		    			bioInstruct.setScaleMatrix(0.95, 0.95, 0.95);
						bioInstruct.setTranslateMatrix(-0.2, 0.50, 0.0);
					}
					else if (numSegs==9){
						bioInstruct.setTransType(Constants.SCALE);
		    			bioInstruct.setScaleMatrix(0.95, 0.95, 0.95);
						bioInstruct.setTranslateMatrix(-0.1, 0.50, 0.0);
					}
					else if (numSegs==10){
						bioInstruct.setTransType(Constants.SCALE);
		    			bioInstruct.setScaleMatrix(0.95, 0.95, 0.95);
						bioInstruct.setTranslateMatrix(-0.02, 0.50, 0.05);
					}
					else if (numSegs==11){
						bioInstruct.setTransType(Constants.SCALE);
		    			bioInstruct.setScaleMatrix(0.95, 0.95, 0.95);
		    			bioInstruct.setTranslateMatrix(-0.02, 0.50, 0.0);
					}
					else if (numSegs==12){
						bioInstruct.setTransType(Constants.SCALE);
		    			bioInstruct.setScaleMatrix(0.95, 0.95, 0.95);
		    			bioInstruct.setTranslateMatrix(-0.02, 0.50, 0.0);
					}
					else if (numSegs==13){
						bioInstruct.setTransType(Constants.SCALE);
		    			bioInstruct.setScaleMatrix(0.95, 0.95, 0.95);
		    			bioInstruct.setTranslateMatrix(-0.01, 0.50, 0.0);
					}		
					else if (numSegs==14){
						bioInstruct.setTransType(Constants.SCALE);
		    			bioInstruct.setScaleMatrix(0.95, 0.95, 0.95);
		    			bioInstruct.setTranslateMatrix(-0.01, 0.50, 0.0);
					}
			
					else {
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.15, 0.0, 0.5);
					}
					
					
		    		// Add the instruction into the instruction set
		    		bioMightInstructSet.addElement(bioInstruct);
				}   
			}
			else if (componentName.equals("Top")) {
				
				int nMaxSegs = 4;
				for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
			
					// Create a place for an instruction 
					BioMightInstruction bioInstruct = new BioMightInstruction();
		     
					if (numSegs==0){
						bioInstruct.setTransType(Constants.SCALE);
		    			bioInstruct.setScaleMatrix(0.95, 0.95, 0.95);
						bioInstruct.setTranslateMatrix(0.5, 0.1, -0.1);
					}
					else if (numSegs==1){
						bioInstruct.setTransType(Constants.SCALE);
		    			bioInstruct.setScaleMatrix(0.95, 0.95, 0.95);
						bioInstruct.setTranslateMatrix(0.5, 0.15, -0.15);
					}
					else if (numSegs==2){
						bioInstruct.setTransType(Constants.SCALE);
		    			bioInstruct.setScaleMatrix(0.95, 0.95, 0.95);
						bioInstruct.setTranslateMatrix(0.5, 0.15, -0.10);
					}
					else if (numSegs==3){
						bioInstruct.setTransType(Constants.SCALE);
		    			bioInstruct.setScaleMatrix(0.95, 0.95, 0.95);
						bioInstruct.setTranslateMatrix(0.5, 0.25, 0.0);
					}
				
				
					else {
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.15, 0.0, 0.5);
					}
					
					
		    		// Add the instruction into the instruction set
		    		bioMightInstructSet.addElement(bioInstruct);
				}   
			}
			else if (componentName.equals("TopB1")) {
				
				int nMaxSegs = 6;
				for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
			
					// Create a place for an instruction 
					BioMightInstruction bioInstruct = new BioMightInstruction();
		     
					if (numSegs==0){
						bioInstruct.setTransType(Constants.SCALE);
		    			bioInstruct.setScaleMatrix(0.95, 0.95, 0.95);
						bioInstruct.setTranslateMatrix(0.0, 0.1, 0.0);
					}
					else if (numSegs==1){
						BioMightOrientation orientation = new BioMightOrientation(0.0, -1.0, 0.0, 90.0);
			 			bioInstruct.setTransType(Constants.ROTATEOCTO);
		    			bioInstruct.setTheta(-45);	
		    			bioInstruct.setPivotPoint(0);	
		     			bioInstruct.setRotateVector(0.0, 0.0, 1.0);
		     			bioInstruct.setOrientation(orientation);
		     			bioInstruct.setScaleMatrix(0.90, 0.90, 0.90);
					}
					else if (numSegs==2){
						bioInstruct.setTransType(Constants.SCALE);
		    			bioInstruct.setScaleMatrix(0.95, 0.95, 0.95);
						bioInstruct.setTranslateMatrix(0.50, 0.50, 0.0);
					}
					else if (numSegs==3){
						BioMightOrientation orientation = new BioMightOrientation(0.0, -1.0, 0.0, 90.0);
			 			bioInstruct.setTransType(Constants.ROTATEOCTO);
		    			bioInstruct.setTheta(-45);	
		    			bioInstruct.setPivotPoint(0);	
		     			bioInstruct.setRotateVector(0.0, 0.0, 1.0);
		     			bioInstruct.setOrientation(orientation);
		     			bioInstruct.setScaleMatrix(0.90, 0.90, 0.90);
					}
					else if (numSegs==4){
						bioInstruct.setTransType(Constants.SCALE);
		    			bioInstruct.setScaleMatrix(0.90, 0.90, 0.90);
						bioInstruct.setTranslateMatrix(0.25, 0.10, 0.0);
					}
					else if (numSegs==5){
						bioInstruct.setTransType(Constants.SCALE);
		    			bioInstruct.setScaleMatrix(0.85, 0.85, 0.85);
						bioInstruct.setTranslateMatrix(0.25, 0.15, 0.0);
					}
					
					
					else {
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.15, 0.0, 0.5);
					}
					
					
		    		// Add the instruction into the instruction set
		    		bioMightInstructSet.addElement(bioInstruct);
				}   
			}
			else if (componentName.equals("TopB2")) {
				
				int nMaxSegs = 6;
				for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
			
					// Create a place for an instruction 
					BioMightInstruction bioInstruct = new BioMightInstruction();
		     
					if (numSegs==0){
						bioInstruct.setTransType(Constants.SCALE);
		    			bioInstruct.setScaleMatrix(0.95, 0.95, 0.95);
						bioInstruct.setTranslateMatrix(0.0, -0.10, 0.0);
					}
					else if (numSegs==1){
						BioMightOrientation orientation = new BioMightOrientation(0.0, -1.0, 0.0, 90.0);
			 			bioInstruct.setTransType(Constants.ROTATEOCTO);
		    			bioInstruct.setTheta(45);	
		    			bioInstruct.setPivotPoint(0);	
		     			bioInstruct.setRotateVector(0.0, 0.0, 1.0);
		     			bioInstruct.setOrientation(orientation);
		     			bioInstruct.setScaleMatrix(0.90, 0.90, 0.90);
					}
					else if (numSegs==2){
						bioInstruct.setTransType(Constants.SCALE);
		    			bioInstruct.setScaleMatrix(0.95, 0.95, 0.95);
						bioInstruct.setTranslateMatrix(0.35, -0.1, -0.15);
					}
					else if (numSegs==3){
						BioMightOrientation orientation = new BioMightOrientation(0.0, -1.0, 0.0, 90.0);
			 			bioInstruct.setTransType(Constants.ROTATEOCTO);
		    			bioInstruct.setTheta(45);	
		    			bioInstruct.setPivotPoint(0);	
		     			bioInstruct.setRotateVector(0.0, 0.0, 1.0);
		     			bioInstruct.setOrientation(orientation);
		     			bioInstruct.setScaleMatrix(0.90, 0.90, 0.90);
					}
					else if (numSegs==4){
						bioInstruct.setTransType(Constants.SCALE);
		    			bioInstruct.setScaleMatrix(0.95, 0.95, 0.95);
						bioInstruct.setTranslateMatrix(0.25, 0.0, -0.05);
					}
					else if (numSegs==5){
						bioInstruct.setTransType(Constants.SCALE);
		    			bioInstruct.setScaleMatrix(0.95, 0.95, 0.95);
						bioInstruct.setTranslateMatrix(0.25, 0.05, 0.0);
					}
					
			
					else {
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.15, 0.0, 0.5);
					}
					
					
		    		// Add the instruction into the instruction set
		    		bioMightInstructSet.addElement(bioInstruct);
				}   
			}
			else if (componentName.equals("Middle")) {
				
				int nMaxSegs = 4;
				for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
			
					// Create a place for an instruction 
					BioMightInstruction bioInstruct = new BioMightInstruction();
		     
					if (numSegs==0){
						bioInstruct.setTransType(Constants.SCALE);
		    			bioInstruct.setScaleMatrix(0.95, 0.95, 0.95);
						bioInstruct.setTranslateMatrix(0.5, 0.1, -0.1);
					}
					else if (numSegs==1){
						bioInstruct.setTransType(Constants.SCALE);
		    			bioInstruct.setScaleMatrix(0.95, 0.95, 0.95);
						bioInstruct.setTranslateMatrix(0.5, 0.15, -0.15);
					}
					else if (numSegs==2){
						bioInstruct.setTransType(Constants.SCALE);
		    			bioInstruct.setScaleMatrix(0.95, 0.95, 0.95);
						bioInstruct.setTranslateMatrix(0.5, 0.0, -0.10);
					}
					else if (numSegs==3){
						bioInstruct.setTransType(Constants.SCALE);
		    			bioInstruct.setScaleMatrix(0.95, 0.95, 0.95);
						bioInstruct.setTranslateMatrix(0.5, -0.15, 0.0);
					}
					
					
		    		// Add the instruction into the instruction set
		    		bioMightInstructSet.addElement(bioInstruct);
				}   
			}			
			else if (componentName.equals("MiddleB1")) {
				
				int nMaxSegs = 5;
				for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
			
					// Create a place for an instruction 
					BioMightInstruction bioInstruct = new BioMightInstruction();
		     
					if (numSegs==0){
						bioInstruct.setTransType(Constants.SCALE);
		    			bioInstruct.setScaleMatrix(0.95, 0.95, 0.95);
						bioInstruct.setTranslateMatrix(0.05, 0.15, 0.0);
					}
					else if (numSegs==1){
						BioMightOrientation orientation = new BioMightOrientation(0.0, -1.0, 0.0, 90.0);
			 			bioInstruct.setTransType(Constants.ROTATEOCTO);
		    			bioInstruct.setTheta(-30);	
		    			bioInstruct.setPivotPoint(0);	
		     			bioInstruct.setRotateVector(0.0, 0.0, 1.0);
		     			bioInstruct.setOrientation(orientation);
		     			bioInstruct.setScaleMatrix(0.90, 0.90, 0.90);
					}
					else if (numSegs==2){
						BioMightOrientation orientation = new BioMightOrientation(0.0, -1.0, 0.0, 90.0);
			 			bioInstruct.setTransType(Constants.ROTATEOCTO);
		    			bioInstruct.setTheta(-30);	
		    			bioInstruct.setPivotPoint(0);	
		     			bioInstruct.setRotateVector(0.0, 0.0, 1.0);
		     			bioInstruct.setOrientation(orientation);
		     			bioInstruct.setScaleMatrix(0.90, 0.90, 0.90);
					}
					else if (numSegs==3){
						bioInstruct.setTransType(Constants.SCALE);
		    			bioInstruct.setScaleMatrix(0.95, 0.95, 0.95);
						bioInstruct.setTranslateMatrix(0.50, 0.20, 0.0);
					}
					else if (numSegs==4){
						bioInstruct.setTransType(Constants.SCALE);
		    			bioInstruct.setScaleMatrix(0.85, 0.85, 0.85);
						bioInstruct.setTranslateMatrix(0.5, 0.10, 0.0);
					}
					
					
		    		// Add the instruction into the instruction set
		    		bioMightInstructSet.addElement(bioInstruct);
				}   
			}
			else if (componentName.equals("Bottom")) {
				
				int nMaxSegs = 3;
				for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
			
					// Create a place for an instruction 
					BioMightInstruction bioInstruct = new BioMightInstruction();
		     
					if (numSegs==0){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.5, 0.0, 0.05);
					}
					else if (numSegs==1){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.5, 0.05, 0.15);
					}
					else if (numSegs==2){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.5, 0.20, 0.10);
					}
					
					else {
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.15, 0.0, 0.5);
					}
					
					
		    		// Add the instruction into the instruction set
		    		bioMightInstructSet.addElement(bioInstruct);
				}   
			}
			else if (componentName.equals("BottomB1")) {
				
				int nMaxSegs = 6;
				for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
			
					// Create a place for an instruction 
					BioMightInstruction bioInstruct = new BioMightInstruction();
		     
					if (numSegs==0){
						bioInstruct.setTransType(Constants.SCALE);
		    			bioInstruct.setScaleMatrix(0.95, 0.95, 0.95);
						bioInstruct.setTranslateMatrix(0.0, 0.1, 0.0);
					}
					else if (numSegs==1){
						BioMightOrientation orientation = new BioMightOrientation(0.0, -1.0, 0.0, 90.0);
			 			bioInstruct.setTransType(Constants.ROTATEOCTO);
		    			bioInstruct.setTheta(-45);	
		    			bioInstruct.setPivotPoint(0);	
		     			bioInstruct.setRotateVector(0.0, 0.0, 1.0);
		     			bioInstruct.setOrientation(orientation);
		     			bioInstruct.setScaleMatrix(0.90, 0.90, 0.90);
					}
					else if (numSegs==2){
						bioInstruct.setTransType(Constants.SCALE);
		    			bioInstruct.setScaleMatrix(0.95, 0.95, 0.95);
						bioInstruct.setTranslateMatrix(0.50, 0.50, 0.0);
					}
					else if (numSegs==3){
						BioMightOrientation orientation = new BioMightOrientation(0.0, -1.0, 0.0, 90.0);
			 			bioInstruct.setTransType(Constants.ROTATEOCTO);
		    			bioInstruct.setTheta(-45);	
		    			bioInstruct.setPivotPoint(0);	
		     			bioInstruct.setRotateVector(0.0, 0.0, 1.0);
		     			bioInstruct.setOrientation(orientation);
		     			bioInstruct.setScaleMatrix(0.90, 0.90, 0.90);
					}
					else if (numSegs==4){
						bioInstruct.setTransType(Constants.SCALE);
		    			bioInstruct.setScaleMatrix(0.90, 0.90, 0.90);
						bioInstruct.setTranslateMatrix(0.25, 0.10, 0.0);
					}
					else if (numSegs==5){
						bioInstruct.setTransType(Constants.SCALE);
		    			bioInstruct.setScaleMatrix(0.85, 0.85, 0.85);
						bioInstruct.setTranslateMatrix(0.25, 0.15, 0.0);
					}
					
					
					else {
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.15, 0.0, 0.5);
					}
					
					
		    		// Add the instruction into the instruction set
		    		bioMightInstructSet.addElement(bioInstruct);
				}   
			}
			else if (componentName.equals("BottomB2")) {
				
				int nMaxSegs = 6;
				for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
			
					// Create a place for an instruction 
					BioMightInstruction bioInstruct = new BioMightInstruction();
		     
					if (numSegs==0){
						bioInstruct.setTransType(Constants.SCALE);
		    			bioInstruct.setScaleMatrix(0.95, 0.95, 0.95);
						bioInstruct.setTranslateMatrix(0.05, -0.10, 0.0);
					}
					else if (numSegs==1){
						BioMightOrientation orientation = new BioMightOrientation(0.0, -1.0, 0.0, 90.0);
			 			bioInstruct.setTransType(Constants.ROTATEOCTO);
		    			bioInstruct.setTheta(45);	
		    			bioInstruct.setPivotPoint(0);	
		     			bioInstruct.setRotateVector(0.0, 0.0, 1.0);
		     			bioInstruct.setOrientation(orientation);
		     			bioInstruct.setScaleMatrix(0.90, 0.90, 0.90);
					}
					else if (numSegs==2){
						bioInstruct.setTransType(Constants.SCALE);
		    			bioInstruct.setScaleMatrix(0.95, 0.95, 0.95);
						bioInstruct.setTranslateMatrix(0.35, -0.1, -0.15);
					}
					else if (numSegs==3){
						BioMightOrientation orientation = new BioMightOrientation(0.0, -1.0, 0.0, 90.0);
			 			bioInstruct.setTransType(Constants.ROTATEOCTO);
		    			bioInstruct.setTheta(45);	
		    			bioInstruct.setPivotPoint(0);	
		     			bioInstruct.setRotateVector(0.0, 0.0, 1.0);
		     			bioInstruct.setOrientation(orientation);
		     			bioInstruct.setScaleMatrix(0.90, 0.90, 0.90);
					}
					else if (numSegs==4){
						bioInstruct.setTransType(Constants.SCALE);
		    			bioInstruct.setScaleMatrix(0.95, 0.95, 0.95);
						bioInstruct.setTranslateMatrix(0.25, 0.0, -0.05);
					}
					else if (numSegs==5){
						bioInstruct.setTransType(Constants.SCALE);
		    			bioInstruct.setScaleMatrix(0.95, 0.95, 0.95);
						bioInstruct.setTranslateMatrix(0.25, 0.05, 0.0);
					}
					
			
					else {
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.15, 0.0, 0.5);
					}
					
					
		    		// Add the instruction into the instruction set
		    		bioMightInstructSet.addElement(bioInstruct);
				}   
			}

		} 		
		else if (componentID.equals("InferiorEpigastricArtery:02") || parentID.equals("InferiorEpigastricArtery:02")) {	
			
	
			if (currentPoints == null )
			{
				double circumference = 0.00625;
				double[] startPos = {-1.5, 0.25, 0.00};
				currentPoints = BioGraphics.octogonYPlane(startPos, circumference);
			}
		
			if (componentName.equals("Main")) {
				
				int nMaxSegs = 15;
				for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
			
					// Create a place for an instruction 
					BioMightInstruction bioInstruct = new BioMightInstruction();
		     
					if (numSegs==0){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.50, 0.0, 0.1);
					}
					else if (numSegs==1){
						BioMightOrientation orientation = new BioMightOrientation(0.0, -1.0, 0.0, 90.0);
			 			bioInstruct.setTransType(Constants.ROTATEOCTO);
		    			bioInstruct.setTheta(45);	
		    			bioInstruct.setPivotPoint(2);	
		     			bioInstruct.setRotateVector(0.0, 0.0, 1.0);
		     			bioInstruct.setOrientation(orientation);
		     			bioInstruct.setScaleMatrix(0.90, 0.90, 0.90);
					}
					else if (numSegs==2){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.50, 0.50, 0.0);
					}
					else if (numSegs==3){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.50, 0.35, 0.0);
					}
					else if (numSegs==4){
						BioMightOrientation orientation = new BioMightOrientation(0.0, -1.0, 0.0, 90.0);
			 			bioInstruct.setTransType(Constants.ROTATEOCTO);
		    			bioInstruct.setTheta(25);	
		    			bioInstruct.setPivotPoint(2);	
		     			bioInstruct.setRotateVector(0.0, 0.0, 1.0);
		     			bioInstruct.setOrientation(orientation);
		     			bioInstruct.setScaleMatrix(0.90, 0.90, 0.90);
					}
					else if (numSegs==5){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.40, 0.50, 0.0);
					}
					else if (numSegs==6){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.35, 0.50, 0.0);
					}
					else if (numSegs==7){
						BioMightOrientation orientation = new BioMightOrientation(0.0, -1.0, 0.0, 90.0);
			 			bioInstruct.setTransType(Constants.ROTATEOCTO);
		    			bioInstruct.setTheta(15);	
		    			bioInstruct.setPivotPoint(2);	
		     			bioInstruct.setRotateVector(0.0, 0.0, 1.0);
		     			bioInstruct.setOrientation(orientation);
		     			bioInstruct.setScaleMatrix(0.90, 0.90, 0.90);
					}
					else if (numSegs==8){
						bioInstruct.setTransType(Constants.SCALE);
		    			bioInstruct.setScaleMatrix(0.95, 0.95, 0.95);
						bioInstruct.setTranslateMatrix(0.2, 0.50, 0.0);
					}
					else if (numSegs==9){
						bioInstruct.setTransType(Constants.SCALE);
		    			bioInstruct.setScaleMatrix(0.95, 0.95, 0.95);
						bioInstruct.setTranslateMatrix(0.1, 0.50, 0.0);
					}
					else if (numSegs==10){
						bioInstruct.setTransType(Constants.SCALE);
		    			bioInstruct.setScaleMatrix(0.95, 0.95, 0.95);
						bioInstruct.setTranslateMatrix(0.02, 0.50, 0.05);
					}
					else if (numSegs==11){
						bioInstruct.setTransType(Constants.SCALE);
		    			bioInstruct.setScaleMatrix(0.95, 0.95, 0.95);
		    			bioInstruct.setTranslateMatrix(0.02, 0.50, 0.0);
					}
					else if (numSegs==12){
						bioInstruct.setTransType(Constants.SCALE);
		    			bioInstruct.setScaleMatrix(0.95, 0.95, 0.95);
		    			bioInstruct.setTranslateMatrix(0.02, 0.50, 0.0);
					}
					else if (numSegs==13){
						bioInstruct.setTransType(Constants.SCALE);
		    			bioInstruct.setScaleMatrix(0.95, 0.95, 0.95);
		    			bioInstruct.setTranslateMatrix(0.01, 0.50, 0.0);
					}
					else if (numSegs==14){
						bioInstruct.setTransType(Constants.SCALE);
		    			bioInstruct.setScaleMatrix(0.95, 0.95, 0.95);
		    			bioInstruct.setTranslateMatrix(0.01, 0.50, 0.0);
					}
					
					else {
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.15, 0.0, 0.5);
					}
				
			    	// Add the instruction into the instruction set
			    	bioMightInstructSet.addElement(bioInstruct);
				}
			}
			else if (componentName.equals("Top")) {
				
				int nMaxSegs = 4;
				for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
			
					// Create a place for an instruction 
					BioMightInstruction bioInstruct = new BioMightInstruction();
		     
					if (numSegs==0){
						bioInstruct.setTransType(Constants.SCALE);
		    			bioInstruct.setScaleMatrix(0.95, 0.95, 0.95);
						bioInstruct.setTranslateMatrix(-0.5, 0.1, -0.1);
					}
					else if (numSegs==1){
						bioInstruct.setTransType(Constants.SCALE);
		    			bioInstruct.setScaleMatrix(0.95, 0.95, 0.95);
						bioInstruct.setTranslateMatrix(-0.5, 0.15, -0.15);
					}
					else if (numSegs==2){
						bioInstruct.setTransType(Constants.SCALE);
		    			bioInstruct.setScaleMatrix(0.95, 0.95, 0.95);
						bioInstruct.setTranslateMatrix(-0.5, 0.15, -0.10);
					}
					else if (numSegs==3){
						bioInstruct.setTransType(Constants.SCALE);
		    			bioInstruct.setScaleMatrix(0.95, 0.95, 0.95);
						bioInstruct.setTranslateMatrix(-0.5, 0.25, 0.0);
					}
				
				
					else {
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.15, 0.0, 0.5);
					}
					
					
		    		// Add the instruction into the instruction set
		    		bioMightInstructSet.addElement(bioInstruct);
				}   
			}
			else if (componentName.equals("TopB1")) {
				
				int nMaxSegs = 6;
				for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
			
					// Create a place for an instruction 
					BioMightInstruction bioInstruct = new BioMightInstruction();
		     
					if (numSegs==0){
						bioInstruct.setTransType(Constants.SCALE);
		    			bioInstruct.setScaleMatrix(0.95, 0.95, 0.95);
						bioInstruct.setTranslateMatrix(0.0, 0.1, 0.0);
					}
					else if (numSegs==1){
						BioMightOrientation orientation = new BioMightOrientation(0.0, -1.0, 0.0, 90.0);
			 			bioInstruct.setTransType(Constants.ROTATEOCTO);
		    			bioInstruct.setTheta(45);	
		    			bioInstruct.setPivotPoint(0);	
		     			bioInstruct.setRotateVector(0.0, 0.0, 1.0);
		     			bioInstruct.setOrientation(orientation);
		     			bioInstruct.setScaleMatrix(0.90, 0.90, 0.90);
					}
					else if (numSegs==2){
						bioInstruct.setTransType(Constants.SCALE);
		    			bioInstruct.setScaleMatrix(0.95, 0.95, 0.95);
						bioInstruct.setTranslateMatrix(-0.50, 0.50, 0.0);
					}
					else if (numSegs==3){
						BioMightOrientation orientation = new BioMightOrientation(0.0, -1.0, 0.0, 90.0);
			 			bioInstruct.setTransType(Constants.ROTATEOCTO);
		    			bioInstruct.setTheta(45);	
		    			bioInstruct.setPivotPoint(0);	
		     			bioInstruct.setRotateVector(0.0, 0.0, 1.0);
		     			bioInstruct.setOrientation(orientation);
		     			bioInstruct.setScaleMatrix(0.90, 0.90, 0.90);
					}
					else if (numSegs==4){
						bioInstruct.setTransType(Constants.SCALE);
		    			bioInstruct.setScaleMatrix(0.90, 0.90, 0.90);
						bioInstruct.setTranslateMatrix(-0.25, 0.10, 0.0);
					}
					else if (numSegs==5){
						bioInstruct.setTransType(Constants.SCALE);
		    			bioInstruct.setScaleMatrix(0.85, 0.85, 0.85);
						bioInstruct.setTranslateMatrix(-0.25, 0.15, 0.0);
					}
					
					
					else {
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.15, 0.0, 0.5);
					}
					
					
		    		// Add the instruction into the instruction set
		    		bioMightInstructSet.addElement(bioInstruct);
				}   
			}
			else if (componentName.equals("TopB2")) {
				
				int nMaxSegs = 6;
				for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
			
					// Create a place for an instruction 
					BioMightInstruction bioInstruct = new BioMightInstruction();
		     
					if (numSegs==0){
						bioInstruct.setTransType(Constants.SCALE);
		    			bioInstruct.setScaleMatrix(0.95, 0.95, 0.95);
						bioInstruct.setTranslateMatrix(0.0, -0.10, 0.0);
					}
					else if (numSegs==1){
						BioMightOrientation orientation = new BioMightOrientation(0.0, -1.0, 0.0, 90.0);
			 			bioInstruct.setTransType(Constants.ROTATEOCTO);
		    			bioInstruct.setTheta(-45);	
		    			bioInstruct.setPivotPoint(0);	
		     			bioInstruct.setRotateVector(0.0, 0.0, 1.0);
		     			bioInstruct.setOrientation(orientation);
		     			bioInstruct.setScaleMatrix(0.90, 0.90, 0.90);
					}
					else if (numSegs==2){
						bioInstruct.setTransType(Constants.SCALE);
		    			bioInstruct.setScaleMatrix(0.95, 0.95, 0.95);
						bioInstruct.setTranslateMatrix(-0.35, -0.1, -0.15);
					}
					else if (numSegs==3){
						BioMightOrientation orientation = new BioMightOrientation(0.0, -1.0, 0.0, 90.0);
			 			bioInstruct.setTransType(Constants.ROTATEOCTO);
		    			bioInstruct.setTheta(-45);	
		    			bioInstruct.setPivotPoint(0);	
		     			bioInstruct.setRotateVector(0.0, 0.0, 1.0);
		     			bioInstruct.setOrientation(orientation);
		     			bioInstruct.setScaleMatrix(0.90, 0.90, 0.90);
					}
					else if (numSegs==4){
						bioInstruct.setTransType(Constants.SCALE);
		    			bioInstruct.setScaleMatrix(0.95, 0.95, 0.95);
						bioInstruct.setTranslateMatrix(-0.25, 0.0, -0.05);
					}
					else if (numSegs==5){
						bioInstruct.setTransType(Constants.SCALE);
		    			bioInstruct.setScaleMatrix(0.95, 0.95, 0.95);
						bioInstruct.setTranslateMatrix(-0.25, 0.05, 0.0);
					}
					
			
					else {
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.15, 0.0, 0.5);
					}
					
					
		    		// Add the instruction into the instruction set
		    		bioMightInstructSet.addElement(bioInstruct);
				}   
			}
			else if (componentName.equals("Middle")) {
				
				int nMaxSegs = 4;
				for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
			
					// Create a place for an instruction 
					BioMightInstruction bioInstruct = new BioMightInstruction();
		     
					if (numSegs==0){
						bioInstruct.setTransType(Constants.SCALE);
		    			bioInstruct.setScaleMatrix(0.95, 0.95, 0.95);
						bioInstruct.setTranslateMatrix(-0.5, 0.1, -0.1);
					}
					else if (numSegs==1){
						bioInstruct.setTransType(Constants.SCALE);
		    			bioInstruct.setScaleMatrix(0.95, 0.95, 0.95);
						bioInstruct.setTranslateMatrix(-0.5, 0.15, -0.15);
					}
					else if (numSegs==2){
						bioInstruct.setTransType(Constants.SCALE);
		    			bioInstruct.setScaleMatrix(0.95, 0.95, 0.95);
						bioInstruct.setTranslateMatrix(-0.5, 0.0, -0.10);
					}
					else if (numSegs==3){
						bioInstruct.setTransType(Constants.SCALE);
		    			bioInstruct.setScaleMatrix(0.95, 0.95, 0.95);
						bioInstruct.setTranslateMatrix(-0.5, -0.15, 0.0);
					}
					
					
		    		// Add the instruction into the instruction set
		    		bioMightInstructSet.addElement(bioInstruct);
				}   
			}			
			else if (componentName.equals("MiddleB1")) {
				
				int nMaxSegs = 5;
				for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
			
					// Create a place for an instruction 
					BioMightInstruction bioInstruct = new BioMightInstruction();
		     
					if (numSegs==0){
						bioInstruct.setTransType(Constants.SCALE);
		    			bioInstruct.setScaleMatrix(0.95, 0.95, 0.95);
						bioInstruct.setTranslateMatrix(-0.05, 0.15, 0.0);
					}
					else if (numSegs==1){
						BioMightOrientation orientation = new BioMightOrientation(0.0, -1.0, 0.0, 90.0);
			 			bioInstruct.setTransType(Constants.ROTATEOCTO);
		    			bioInstruct.setTheta(30);	
		    			bioInstruct.setPivotPoint(0);	
		     			bioInstruct.setRotateVector(0.0, 0.0, 1.0);
		     			bioInstruct.setOrientation(orientation);
		     			bioInstruct.setScaleMatrix(0.90, 0.90, 0.90);
					}
					else if (numSegs==2){
						BioMightOrientation orientation = new BioMightOrientation(0.0, -1.0, 0.0, 90.0);
			 			bioInstruct.setTransType(Constants.ROTATEOCTO);
		    			bioInstruct.setTheta(30);	
		    			bioInstruct.setPivotPoint(0);	
		     			bioInstruct.setRotateVector(0.0, 0.0, 1.0);
		     			bioInstruct.setOrientation(orientation);
		     			bioInstruct.setScaleMatrix(0.90, 0.90, 0.90);
					}
					else if (numSegs==3){
						bioInstruct.setTransType(Constants.SCALE);
		    			bioInstruct.setScaleMatrix(0.95, 0.95, 0.95);
						bioInstruct.setTranslateMatrix(-0.50, 0.20, 0.0);
					}
					else if (numSegs==4){
						bioInstruct.setTransType(Constants.SCALE);
		    			bioInstruct.setScaleMatrix(0.85, 0.85, 0.85);
						bioInstruct.setTranslateMatrix(-0.5, 0.10, 0.0);
					}
					
					
		    		// Add the instruction into the instruction set
		    		bioMightInstructSet.addElement(bioInstruct);
				}   
			}
			else if (componentName.equals("Bottom")) {
				
				int nMaxSegs = 3;
				for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
			
					// Create a place for an instruction 
					BioMightInstruction bioInstruct = new BioMightInstruction();
		     
					if (numSegs==0){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.5, 0.0, 0.05);
					}
					else if (numSegs==1){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.5, 0.05, 0.15);
					}
					else if (numSegs==2){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.5, 0.20, 0.10);
					}
					
					else {
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.15, 0.0, 0.5);
					}
					
					
		    		// Add the instruction into the instruction set
		    		bioMightInstructSet.addElement(bioInstruct);
				}   
			}
			else if (componentName.equals("BottomB1")) {
				
				int nMaxSegs = 6;
				for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
			
					// Create a place for an instruction 
					BioMightInstruction bioInstruct = new BioMightInstruction();
		     
					if (numSegs==0){
						bioInstruct.setTransType(Constants.SCALE);
		    			bioInstruct.setScaleMatrix(0.95, 0.95, 0.95);
						bioInstruct.setTranslateMatrix(0.0, 0.1, 0.0);
					}
					else if (numSegs==1){
						BioMightOrientation orientation = new BioMightOrientation(0.0, -1.0, 0.0, 90.0);
			 			bioInstruct.setTransType(Constants.ROTATEOCTO);
		    			bioInstruct.setTheta(45);	
		    			bioInstruct.setPivotPoint(0);	
		     			bioInstruct.setRotateVector(0.0, 0.0, 1.0);
		     			bioInstruct.setOrientation(orientation);
		     			bioInstruct.setScaleMatrix(0.90, 0.90, 0.90);
					}
					else if (numSegs==2){
						bioInstruct.setTransType(Constants.SCALE);
		    			bioInstruct.setScaleMatrix(0.95, 0.95, 0.95);
						bioInstruct.setTranslateMatrix(-0.50, 0.50, 0.0);
					}
					else if (numSegs==3){
						BioMightOrientation orientation = new BioMightOrientation(0.0, -1.0, 0.0, 90.0);
			 			bioInstruct.setTransType(Constants.ROTATEOCTO);
		    			bioInstruct.setTheta(45);	
		    			bioInstruct.setPivotPoint(0);	
		     			bioInstruct.setRotateVector(0.0, 0.0, 1.0);
		     			bioInstruct.setOrientation(orientation);
		     			bioInstruct.setScaleMatrix(0.90, 0.90, 0.90);
					}
					else if (numSegs==4){
						bioInstruct.setTransType(Constants.SCALE);
		    			bioInstruct.setScaleMatrix(0.90, 0.90, 0.90);
						bioInstruct.setTranslateMatrix(-0.25, 0.10, 0.0);
					}
					else if (numSegs==5){
						bioInstruct.setTransType(Constants.SCALE);
		    			bioInstruct.setScaleMatrix(0.85, 0.85, 0.85);
						bioInstruct.setTranslateMatrix(-0.25, 0.15, 0.0);
					}
					
					
					else {
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.15, 0.0, 0.5);
					}
					
					
		    		// Add the instruction into the instruction set
		    		bioMightInstructSet.addElement(bioInstruct);
				}   
			}
			else if (componentName.equals("BottomB2")) {
				
				int nMaxSegs = 6;
				for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
			
					// Create a place for an instruction 
					BioMightInstruction bioInstruct = new BioMightInstruction();
		     
					if (numSegs==0){
						bioInstruct.setTransType(Constants.SCALE);
		    			bioInstruct.setScaleMatrix(0.95, 0.95, 0.95);
						bioInstruct.setTranslateMatrix(-0.05, -0.10, 0.0);
					}
					else if (numSegs==1){
						BioMightOrientation orientation = new BioMightOrientation(0.0, -1.0, 0.0, 90.0);
			 			bioInstruct.setTransType(Constants.ROTATEOCTO);
		    			bioInstruct.setTheta(-45);	
		    			bioInstruct.setPivotPoint(0);	
		     			bioInstruct.setRotateVector(0.0, 0.0, 1.0);
		     			bioInstruct.setOrientation(orientation);
		     			bioInstruct.setScaleMatrix(0.90, 0.90, 0.90);
					}
					else if (numSegs==2){
						bioInstruct.setTransType(Constants.SCALE);
		    			bioInstruct.setScaleMatrix(0.95, 0.95, 0.95);
						bioInstruct.setTranslateMatrix(-0.35, -0.1, -0.15);
					}
					else if (numSegs==3){
						BioMightOrientation orientation = new BioMightOrientation(0.0, -1.0, 0.0, 90.0);
			 			bioInstruct.setTransType(Constants.ROTATEOCTO);
		    			bioInstruct.setTheta(-45);	
		    			bioInstruct.setPivotPoint(0);	
		     			bioInstruct.setRotateVector(0.0, 0.0, 1.0);
		     			bioInstruct.setOrientation(orientation);
		     			bioInstruct.setScaleMatrix(0.90, 0.90, 0.90);
					}
					else if (numSegs==4){
						bioInstruct.setTransType(Constants.SCALE);
		    			bioInstruct.setScaleMatrix(0.95, 0.95, 0.95);
						bioInstruct.setTranslateMatrix(-0.25, 0.0, -0.05);
					}
					else if (numSegs==5){
						bioInstruct.setTransType(Constants.SCALE);
		    			bioInstruct.setScaleMatrix(0.95, 0.95, 0.95);
						bioInstruct.setTranslateMatrix(-0.25, 0.05, 0.0);
					}
					
			
					else {
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.15, 0.0, 0.5);
					}
					
					
		    		// Add the instruction into the instruction set
		    		bioMightInstructSet.addElement(bioInstruct);
				}   
			}
		
		}
						
		DBUtils.generateFacedComponents(Constants.QUADRANGLE, startID, componentType, componentName, componentID, currentPoints, bioMightInstructSet);
		System.out.println("Generating the Rows for InferiorEpigastricArteryEndothelium: " + componentID + "   " + componentType);

		
		return returnCode;
	}

	 /***************************************************************************************
	 * GENERATE SUPERIOR EPIGASTRIC ARTERY
	 * 
	 * This generates the SuperiorEpigastricArtery
	 *
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/
	  			
	public int generateSuperiorEpigastricArtery(String startID, String componentType, String componentName, String componentID,  String parentID, double[][] currentPoints) 
			throws DataException, DataSecurityException
		{	
		System.out.println("generateSuperiorEpigastricArtery: " + componentID + "   " + parentID + "   " + componentName);
		
		int bodyID = 1;
		int projectID = 1;
		String vertices = "";
		
		ArrayList mySqlList= new ArrayList();
		int returnCode = 0;
	
		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();

		// Right FacialArtery - Move inward toward the front of Jaw
		if (componentID.equals("SuperiorEpigastricArtery:01") || parentID.equals("SuperiorEpigastricArtery:01")) 
		{	
			// We can generate the Artery
			if (currentPoints == null )
			{
				double radius = 0.00625;
				double[] startPos = {3.65, -35.0, -6.0};
				currentPoints = BioGraphics.createCylinderInPlane(Constants.YPLANE, startPos, radius, 8);
	
			}
			
			if (componentName.equals("Main")) {
				
				int nMaxSegs = 15;
				for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
			
					// Create a place for an instruction 
					BioMightInstruction bioInstruct = new BioMightInstruction();
		     
					if (numSegs==0){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.50, 0.0, 0.1);
					}
					else if (numSegs==1){
						BioMightOrientation orientation = new BioMightOrientation(0.0, -1.0, 0.0, 90.0);
			 			bioInstruct.setTransType(Constants.ROTATEOCTO);
		    			bioInstruct.setTheta(-45);	
		    			bioInstruct.setPivotPoint(2);	
		     			bioInstruct.setRotateVector(0.0, 0.0, 1.0);
		     			bioInstruct.setOrientation(orientation);
		     			bioInstruct.setScaleMatrix(0.90, 0.90, 0.90);
					}
					else if (numSegs==2){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.50, 0.50, 0.0);
					}
					else if (numSegs==3){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.50, 0.35, 0.0);
					}
					else if (numSegs==4){
						BioMightOrientation orientation = new BioMightOrientation(0.0, -1.0, 0.0, 90.0);
			 			bioInstruct.setTransType(Constants.ROTATEOCTO);
		    			bioInstruct.setTheta(-25);	
		    			bioInstruct.setPivotPoint(2);	
		     			bioInstruct.setRotateVector(0.0, 0.0, 1.0);
		     			bioInstruct.setOrientation(orientation);
		     			bioInstruct.setScaleMatrix(0.90, 0.90, 0.90);
					}
					else if (numSegs==5){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.40, 0.50, 0.0);
					}
					else if (numSegs==6){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.35, 0.50, 0.0);
					}
					else if (numSegs==7){
						BioMightOrientation orientation = new BioMightOrientation(0.0, -1.0, 0.0, 90.0);
			 			bioInstruct.setTransType(Constants.ROTATEOCTO);
		    			bioInstruct.setTheta(-15);	
		    			bioInstruct.setPivotPoint(2);	
		     			bioInstruct.setRotateVector(0.0, 0.0, 1.0);
		     			bioInstruct.setOrientation(orientation);
		     			bioInstruct.setScaleMatrix(0.90, 0.90, 0.90);
					}
					else if (numSegs==8){
						bioInstruct.setTransType(Constants.SCALE);
		    			bioInstruct.setScaleMatrix(0.95, 0.95, 0.95);
						bioInstruct.setTranslateMatrix(-0.2, 0.50, 0.0);
					}
					else if (numSegs==9){
						bioInstruct.setTransType(Constants.SCALE);
		    			bioInstruct.setScaleMatrix(0.95, 0.95, 0.95);
						bioInstruct.setTranslateMatrix(-0.1, 0.50, 0.0);
					}
					else if (numSegs==10){
						bioInstruct.setTransType(Constants.SCALE);
		    			bioInstruct.setScaleMatrix(0.95, 0.95, 0.95);
						bioInstruct.setTranslateMatrix(-0.02, 0.50, 0.05);
					}
					else if (numSegs==11){
						bioInstruct.setTransType(Constants.SCALE);
		    			bioInstruct.setScaleMatrix(0.95, 0.95, 0.95);
		    			bioInstruct.setTranslateMatrix(-0.02, 0.50, 0.0);
					}
					else if (numSegs==12){
						bioInstruct.setTransType(Constants.SCALE);
		    			bioInstruct.setScaleMatrix(0.95, 0.95, 0.95);
		    			bioInstruct.setTranslateMatrix(-0.02, 0.50, 0.0);
					}
					else if (numSegs==13){
						bioInstruct.setTransType(Constants.SCALE);
		    			bioInstruct.setScaleMatrix(0.95, 0.95, 0.95);
		    			bioInstruct.setTranslateMatrix(-0.01, 0.50, 0.0);
					}		
					else if (numSegs==14){
						bioInstruct.setTransType(Constants.SCALE);
		    			bioInstruct.setScaleMatrix(0.95, 0.95, 0.95);
		    			bioInstruct.setTranslateMatrix(-0.01, 0.50, 0.0);
					}
			
		
					else {
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.15, 0.0, 0.5);
					}
					
					
		    		// Add the instruction into the instruction set
		    		bioMightInstructSet.addElement(bioInstruct);
				}   
			}
			else if (componentName.equals("Top")) {
				
				int nMaxSegs = 4;
				for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
			
					// Create a place for an instruction 
					BioMightInstruction bioInstruct = new BioMightInstruction();
		     
					if (numSegs==0){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.5, 0.1, -0.01);
					}
					else if (numSegs==1){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.5, 0.15, -0.05);
					}
					else if (numSegs==2){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.5, 0.15, 0.10);
					}
					else if (numSegs==3){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.5, 0.25, 0.10);
					}
				
				
					else {
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.15, 0.0, 0.5);
					}
					
					
		    		// Add the instruction into the instruction set
		    		bioMightInstructSet.addElement(bioInstruct);
				}   
			}
			else if (componentName.equals("Middle")) {
				
				int nMaxSegs = 4;
				for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
			
					// Create a place for an instruction 
					BioMightInstruction bioInstruct = new BioMightInstruction();
		     
					if (numSegs==0){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.5, 0.1, -0.01);
					}
					else if (numSegs==1){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.5, 0.20, -0.05);
					}
					else if (numSegs==2){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.5, 0.15, 0.10);
					}
					else if (numSegs==3){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.5, 0.10, 0.10);
					}
					
					
		    		// Add the instruction into the instruction set
		    		bioMightInstructSet.addElement(bioInstruct);
				}   
			}
			else if (componentName.equals("Bottom")) {
				
				int nMaxSegs = 3;
				for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
			
					// Create a place for an instruction 
					BioMightInstruction bioInstruct = new BioMightInstruction();
		     
					if (numSegs==0){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.5, 0.0, 0.05);
					}
					else if (numSegs==1){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.5, 0.05, 0.15);
					}
					else if (numSegs==2){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.5, 0.25, 0.10);
					}
					
					else {
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.15, 0.0, 0.5);
					}
					
					
		    		// Add the instruction into the instruction set
		    		bioMightInstructSet.addElement(bioInstruct);
				}   
			}
			
		} 
		
		else if (componentID.equals("SuperiorEpigastricArtery:02") || parentID.equals("SuperiorEpigastricArtery:02")) {	
			
	
			if (currentPoints == null )
			{
				double circumference = 0.00625;
				double[] startPos = {-1.5, 0.25, 0.00};
				currentPoints = BioGraphics.octogonYPlane(startPos, circumference);
			}
		
			if (componentName.equals("Main")) {
				
				int nMaxSegs = 15;
				for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
			
					// Create a place for an instruction 
					BioMightInstruction bioInstruct = new BioMightInstruction();
		     
					if (numSegs==0){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.50, 0.0, 0.1);
					}
					else if (numSegs==1){
						BioMightOrientation orientation = new BioMightOrientation(0.0, -1.0, 0.0, 90.0);
			 			bioInstruct.setTransType(Constants.ROTATEOCTO);
		    			bioInstruct.setTheta(45);	
		    			bioInstruct.setPivotPoint(2);	
		     			bioInstruct.setRotateVector(0.0, 0.0, 1.0);
		     			bioInstruct.setOrientation(orientation);
		     			bioInstruct.setScaleMatrix(0.90, 0.90, 0.90);
					}
					else if (numSegs==2){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.50, 0.50, 0.0);
					}
					else if (numSegs==3){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.50, 0.35, 0.0);
					}
					else if (numSegs==4){
						BioMightOrientation orientation = new BioMightOrientation(0.0, -1.0, 0.0, 90.0);
			 			bioInstruct.setTransType(Constants.ROTATEOCTO);
		    			bioInstruct.setTheta(25);	
		    			bioInstruct.setPivotPoint(2);	
		     			bioInstruct.setRotateVector(0.0, 0.0, 1.0);
		     			bioInstruct.setOrientation(orientation);
		     			bioInstruct.setScaleMatrix(0.90, 0.90, 0.90);
					}
					else if (numSegs==5){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.40, 0.50, 0.0);
					}
					else if (numSegs==6){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.35, 0.50, 0.0);
					}
					else if (numSegs==7){
						BioMightOrientation orientation = new BioMightOrientation(0.0, -1.0, 0.0, 90.0);
			 			bioInstruct.setTransType(Constants.ROTATEOCTO);
		    			bioInstruct.setTheta(15);	
		    			bioInstruct.setPivotPoint(2);	
		     			bioInstruct.setRotateVector(0.0, 0.0, 1.0);
		     			bioInstruct.setOrientation(orientation);
		     			bioInstruct.setScaleMatrix(0.90, 0.90, 0.90);
					}
					else if (numSegs==8){
						bioInstruct.setTransType(Constants.SCALE);
		    			bioInstruct.setScaleMatrix(0.95, 0.95, 0.95);
						bioInstruct.setTranslateMatrix(0.2, 0.50, 0.0);
					}
					else if (numSegs==9){
						bioInstruct.setTransType(Constants.SCALE);
		    			bioInstruct.setScaleMatrix(0.95, 0.95, 0.95);
						bioInstruct.setTranslateMatrix(0.1, 0.50, 0.0);
					}
					else if (numSegs==10){
						bioInstruct.setTransType(Constants.SCALE);
		    			bioInstruct.setScaleMatrix(0.95, 0.95, 0.95);
						bioInstruct.setTranslateMatrix(0.02, 0.50, 0.05);
					}
					else if (numSegs==11){
						bioInstruct.setTransType(Constants.SCALE);
		    			bioInstruct.setScaleMatrix(0.95, 0.95, 0.95);
		    			bioInstruct.setTranslateMatrix(0.02, 0.50, 0.0);
					}
					else if (numSegs==12){
						bioInstruct.setTransType(Constants.SCALE);
		    			bioInstruct.setScaleMatrix(0.95, 0.95, 0.95);
		    			bioInstruct.setTranslateMatrix(0.02, 0.50, 0.0);
					}
					else if (numSegs==13){
						bioInstruct.setTransType(Constants.SCALE);
		    			bioInstruct.setScaleMatrix(0.95, 0.95, 0.95);
		    			bioInstruct.setTranslateMatrix(0.01, 0.50, 0.0);
					}
					else if (numSegs==14){
						bioInstruct.setTransType(Constants.SCALE);
		    			bioInstruct.setScaleMatrix(0.95, 0.95, 0.95);
		    			bioInstruct.setTranslateMatrix(0.01, 0.50, 0.0);
					}
					
					else {
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.15, 0.0, 0.5);
					}
				
			    	// Add the instruction into the instruction set
			    	bioMightInstructSet.addElement(bioInstruct);
				}
			}
		else if (componentName.equals("Top")) {
				
				int nMaxSegs = 4;
				for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
			
					// Create a place for an instruction 
					BioMightInstruction bioInstruct = new BioMightInstruction();
		     
					if (numSegs==0){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.25, 0.02, 0.15);
					}
					else if (numSegs==1){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.25, 0.00, 0.15);
					}
					else if (numSegs==2){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.25, 0.0, 0.20);
					}
					else if (numSegs==3){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.25, -0.01, 0.20);
					}
				
				
					else {
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.15, 0.0, 0.5);
					}
					
					
		    		// Add the instruction into the instruction set
		    		bioMightInstructSet.addElement(bioInstruct);
				}   
			}
			else if (componentName.equals("Middle")) {
				
				int nMaxSegs = 4;
				for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
			
					// Create a place for an instruction 
					BioMightInstruction bioInstruct = new BioMightInstruction();
		     
					if (numSegs==0){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.25, -0.02, 0.1);
					}
					else if (numSegs==1){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.25, -0.01, 0.05);
					}
					else if (numSegs==2){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.25, 0.01, 0.05);
					}
					else if (numSegs==3){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.25, 0.05, 0.1);
					}
					else {
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.15, 0.0, 0.5);
					}
					
					
		    		// Add the instruction into the instruction set
		    		bioMightInstructSet.addElement(bioInstruct);
				}   
			}
			else if (componentName.equals("Bottom")) {
				
				int nMaxSegs = 3;
				for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
			
					// Create a place for an instruction 
					BioMightInstruction bioInstruct = new BioMightInstruction();
		     
					if (numSegs==0){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.25, -0.03, 0.05);
					}
					else if (numSegs==1){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.25, -0.02, 0.15);
					}
					else if (numSegs==2){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.25, 0.01, 0.10);
					}
					
					else {
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.15, 0.0, 0.5);
					}
					
					
		    		// Add the instruction into the instruction set
		    		bioMightInstructSet.addElement(bioInstruct);
				}   
			}
		
		}
						
		DBUtils.generateFacedComponents(Constants.QUADRANGLE, startID, componentType, componentName, componentID, currentPoints, bioMightInstructSet);
		System.out.println("Generating the Rows for SuperiorEpigastricArteryEndothelium: " + componentID + "   " + componentType);

		
		return returnCode;
	}	
	

	 /***************************************************************************************
	 * GENERATE SUPERIOR EPIGASTRIC ARTERY
	 * 
	 * This generates the SuperficialEpigastricArtery
	 *
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/
	  			
	public int generateSuperficialEpigastricArtery(String startID, String componentType, String componentName, String componentID,  String parentID, double[][] currentPoints) 
			throws DataException, DataSecurityException
		{	
		System.out.println("generateSuperficialEpigastricArtery: " + componentID + "   " + parentID + "   " + componentName);
		
		int bodyID = 1;
		int projectID = 1;
		String vertices = "";
		
		ArrayList mySqlList= new ArrayList();
		int returnCode = 0;
	
		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();

		// Right FacialArtery - Move inward toward the front of Jaw
		if (componentID.equals("SuperficialEpigastricArtery:01") || parentID.equals("SuperficialEpigastricArtery:01")) 
		{	
			// We can generate the Artery
			if (currentPoints == null )
			{
				double radius = 0.00625;
				double[] startPos = {3.65, -35.0, -6.0};
				currentPoints = BioGraphics.createCylinderInPlane(Constants.YPLANE, startPos, radius, 8);
	
			}
			
			if (componentName.equals("Main")) {
				
				int nMaxSegs = 15;
				for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
			
					// Create a place for an instruction 
					BioMightInstruction bioInstruct = new BioMightInstruction();
		     
					if (numSegs==0){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.50, 0.0, 0.1);
					}
					else if (numSegs==1){
						BioMightOrientation orientation = new BioMightOrientation(0.0, -1.0, 0.0, 90.0);
			 			bioInstruct.setTransType(Constants.ROTATEOCTO);
		    			bioInstruct.setTheta(-45);	
		    			bioInstruct.setPivotPoint(2);	
		     			bioInstruct.setRotateVector(0.0, 0.0, 1.0);
		     			bioInstruct.setOrientation(orientation);
		     			bioInstruct.setScaleMatrix(0.90, 0.90, 0.90);
					}
					else if (numSegs==2){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.50, 0.50, 0.0);
					}
					else if (numSegs==3){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.50, 0.35, 0.0);
					}
					else if (numSegs==4){
						BioMightOrientation orientation = new BioMightOrientation(0.0, -1.0, 0.0, 90.0);
			 			bioInstruct.setTransType(Constants.ROTATEOCTO);
		    			bioInstruct.setTheta(-25);	
		    			bioInstruct.setPivotPoint(2);	
		     			bioInstruct.setRotateVector(0.0, 0.0, 1.0);
		     			bioInstruct.setOrientation(orientation);
		     			bioInstruct.setScaleMatrix(0.90, 0.90, 0.90);
					}
					else if (numSegs==5){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.40, 0.50, 0.0);
					}
					else if (numSegs==6){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.35, 0.50, 0.0);
					}
					else if (numSegs==7){
						BioMightOrientation orientation = new BioMightOrientation(0.0, -1.0, 0.0, 90.0);
			 			bioInstruct.setTransType(Constants.ROTATEOCTO);
		    			bioInstruct.setTheta(-15);	
		    			bioInstruct.setPivotPoint(2);	
		     			bioInstruct.setRotateVector(0.0, 0.0, 1.0);
		     			bioInstruct.setOrientation(orientation);
		     			bioInstruct.setScaleMatrix(0.90, 0.90, 0.90);
					}
					else if (numSegs==8){
						bioInstruct.setTransType(Constants.SCALE);
		    			bioInstruct.setScaleMatrix(0.95, 0.95, 0.95);
						bioInstruct.setTranslateMatrix(-0.2, 0.50, 0.0);
					}
					else if (numSegs==9){
						bioInstruct.setTransType(Constants.SCALE);
		    			bioInstruct.setScaleMatrix(0.95, 0.95, 0.95);
						bioInstruct.setTranslateMatrix(-0.1, 0.50, 0.0);
					}
					else if (numSegs==10){
						bioInstruct.setTransType(Constants.SCALE);
		    			bioInstruct.setScaleMatrix(0.95, 0.95, 0.95);
						bioInstruct.setTranslateMatrix(-0.02, 0.50, 0.05);
					}
					else if (numSegs==11){
						bioInstruct.setTransType(Constants.SCALE);
		    			bioInstruct.setScaleMatrix(0.95, 0.95, 0.95);
		    			bioInstruct.setTranslateMatrix(-0.02, 0.50, 0.0);
					}
					else if (numSegs==12){
						bioInstruct.setTransType(Constants.SCALE);
		    			bioInstruct.setScaleMatrix(0.95, 0.95, 0.95);
		    			bioInstruct.setTranslateMatrix(-0.02, 0.50, 0.0);
					}
					else if (numSegs==13){
						bioInstruct.setTransType(Constants.SCALE);
		    			bioInstruct.setScaleMatrix(0.95, 0.95, 0.95);
		    			bioInstruct.setTranslateMatrix(-0.01, 0.50, 0.0);
					}		
					else if (numSegs==14){
						bioInstruct.setTransType(Constants.SCALE);
		    			bioInstruct.setScaleMatrix(0.95, 0.95, 0.95);
		    			bioInstruct.setTranslateMatrix(-0.01, 0.50, 0.0);
					}
			
		
					else {
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.15, 0.0, 0.5);
					}
					
					
		    		// Add the instruction into the instruction set
		    		bioMightInstructSet.addElement(bioInstruct);
				}   
			}
			else if (componentName.equals("Top")) {
				
				int nMaxSegs = 4;
				for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
			
					// Create a place for an instruction 
					BioMightInstruction bioInstruct = new BioMightInstruction();
		     
					if (numSegs==0){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.5, 0.1, -0.01);
					}
					else if (numSegs==1){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.5, 0.15, -0.05);
					}
					else if (numSegs==2){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.5, 0.15, 0.10);
					}
					else if (numSegs==3){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.5, 0.25, 0.10);
					}
				
				
					else {
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.15, 0.0, 0.5);
					}
					
					
		    		// Add the instruction into the instruction set
		    		bioMightInstructSet.addElement(bioInstruct);
				}   
			}
			else if (componentName.equals("Middle")) {
				
				int nMaxSegs = 4;
				for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
			
					// Create a place for an instruction 
					BioMightInstruction bioInstruct = new BioMightInstruction();
		     
					if (numSegs==0){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.5, 0.1, -0.01);
					}
					else if (numSegs==1){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.5, 0.20, -0.05);
					}
					else if (numSegs==2){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.5, 0.15, 0.10);
					}
					else if (numSegs==3){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.5, 0.10, 0.10);
					}
					
					
		    		// Add the instruction into the instruction set
		    		bioMightInstructSet.addElement(bioInstruct);
				}   
			}
			else if (componentName.equals("Bottom")) {
				
				int nMaxSegs = 3;
				for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
			
					// Create a place for an instruction 
					BioMightInstruction bioInstruct = new BioMightInstruction();
		     
					if (numSegs==0){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.5, 0.0, 0.05);
					}
					else if (numSegs==1){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.5, 0.05, 0.15);
					}
					else if (numSegs==2){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.5, 0.25, 0.10);
					}
					
					else {
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.15, 0.0, 0.5);
					}
					
					
		    		// Add the instruction into the instruction set
		    		bioMightInstructSet.addElement(bioInstruct);
				}   
			}
			
		} 
		
		else if (componentID.equals("SuperficialEpigastricArtery:02") || parentID.equals("SuperficialEpigastricArtery:02")) {	
			
	
			if (currentPoints == null )
			{
				double circumference = 0.00625;
				double[] startPos = {-1.5, 0.25, 0.00};
				currentPoints = BioGraphics.octogonYPlane(startPos, circumference);
			}
		
			if (componentName.equals("Main")) {
				
				int nMaxSegs = 15;
				for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
			
					// Create a place for an instruction 
					BioMightInstruction bioInstruct = new BioMightInstruction();
		     
					if (numSegs==0){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.50, 0.0, 0.1);
					}
					else if (numSegs==1){
						BioMightOrientation orientation = new BioMightOrientation(0.0, -1.0, 0.0, 90.0);
			 			bioInstruct.setTransType(Constants.ROTATEOCTO);
		    			bioInstruct.setTheta(45);	
		    			bioInstruct.setPivotPoint(2);	
		     			bioInstruct.setRotateVector(0.0, 0.0, 1.0);
		     			bioInstruct.setOrientation(orientation);
		     			bioInstruct.setScaleMatrix(0.90, 0.90, 0.90);
					}
					else if (numSegs==2){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.50, 0.50, 0.0);
					}
					else if (numSegs==3){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.50, 0.35, 0.0);
					}
					else if (numSegs==4){
						BioMightOrientation orientation = new BioMightOrientation(0.0, -1.0, 0.0, 90.0);
			 			bioInstruct.setTransType(Constants.ROTATEOCTO);
		    			bioInstruct.setTheta(25);	
		    			bioInstruct.setPivotPoint(2);	
		     			bioInstruct.setRotateVector(0.0, 0.0, 1.0);
		     			bioInstruct.setOrientation(orientation);
		     			bioInstruct.setScaleMatrix(0.90, 0.90, 0.90);
					}
					else if (numSegs==5){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.40, 0.50, 0.0);
					}
					else if (numSegs==6){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.35, 0.50, 0.0);
					}
					else if (numSegs==7){
						BioMightOrientation orientation = new BioMightOrientation(0.0, -1.0, 0.0, 90.0);
			 			bioInstruct.setTransType(Constants.ROTATEOCTO);
		    			bioInstruct.setTheta(15);	
		    			bioInstruct.setPivotPoint(2);	
		     			bioInstruct.setRotateVector(0.0, 0.0, 1.0);
		     			bioInstruct.setOrientation(orientation);
		     			bioInstruct.setScaleMatrix(0.90, 0.90, 0.90);
					}
					else if (numSegs==8){
						bioInstruct.setTransType(Constants.SCALE);
		    			bioInstruct.setScaleMatrix(0.95, 0.95, 0.95);
						bioInstruct.setTranslateMatrix(0.2, 0.50, 0.0);
					}
					else if (numSegs==9){
						bioInstruct.setTransType(Constants.SCALE);
		    			bioInstruct.setScaleMatrix(0.95, 0.95, 0.95);
						bioInstruct.setTranslateMatrix(0.1, 0.50, 0.0);
					}
					else if (numSegs==10){
						bioInstruct.setTransType(Constants.SCALE);
		    			bioInstruct.setScaleMatrix(0.95, 0.95, 0.95);
						bioInstruct.setTranslateMatrix(0.02, 0.50, 0.05);
					}
					else if (numSegs==11){
						bioInstruct.setTransType(Constants.SCALE);
		    			bioInstruct.setScaleMatrix(0.95, 0.95, 0.95);
		    			bioInstruct.setTranslateMatrix(0.02, 0.50, 0.0);
					}
					else if (numSegs==12){
						bioInstruct.setTransType(Constants.SCALE);
		    			bioInstruct.setScaleMatrix(0.95, 0.95, 0.95);
		    			bioInstruct.setTranslateMatrix(0.02, 0.50, 0.0);
					}
					else if (numSegs==13){
						bioInstruct.setTransType(Constants.SCALE);
		    			bioInstruct.setScaleMatrix(0.95, 0.95, 0.95);
		    			bioInstruct.setTranslateMatrix(0.01, 0.50, 0.0);
					}
					else if (numSegs==14){
						bioInstruct.setTransType(Constants.SCALE);
		    			bioInstruct.setScaleMatrix(0.95, 0.95, 0.95);
		    			bioInstruct.setTranslateMatrix(0.01, 0.50, 0.0);
					}
					
					else {
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.15, 0.0, 0.5);
					}
				
			    	// Add the instruction into the instruction set
			    	bioMightInstructSet.addElement(bioInstruct);
				}
			}
		else if (componentName.equals("Top")) {
				
				int nMaxSegs = 4;
				for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
			
					// Create a place for an instruction 
					BioMightInstruction bioInstruct = new BioMightInstruction();
		     
					if (numSegs==0){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.25, 0.02, 0.15);
					}
					else if (numSegs==1){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.25, 0.00, 0.15);
					}
					else if (numSegs==2){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.25, 0.0, 0.20);
					}
					else if (numSegs==3){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.25, -0.01, 0.20);
					}
				
				
					else {
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.15, 0.0, 0.5);
					}
					
					
		    		// Add the instruction into the instruction set
		    		bioMightInstructSet.addElement(bioInstruct);
				}   
			}
			else if (componentName.equals("Middle")) {
				
				int nMaxSegs = 4;
				for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
			
					// Create a place for an instruction 
					BioMightInstruction bioInstruct = new BioMightInstruction();
		     
					if (numSegs==0){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.25, -0.02, 0.1);
					}
					else if (numSegs==1){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.25, -0.01, 0.05);
					}
					else if (numSegs==2){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.25, 0.01, 0.05);
					}
					else if (numSegs==3){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.25, 0.05, 0.1);
					}
					else {
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.15, 0.0, 0.5);
					}
					
					
		    		// Add the instruction into the instruction set
		    		bioMightInstructSet.addElement(bioInstruct);
				}   
			}
			else if (componentName.equals("Bottom")) {
				
				int nMaxSegs = 3;
				for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
			
					// Create a place for an instruction 
					BioMightInstruction bioInstruct = new BioMightInstruction();
		     
					if (numSegs==0){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.25, -0.03, 0.05);
					}
					else if (numSegs==1){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.25, -0.02, 0.15);
					}
					else if (numSegs==2){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.25, 0.01, 0.10);
					}
					
					else {
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.15, 0.0, 0.5);
					}
					
					
		    		// Add the instruction into the instruction set
		    		bioMightInstructSet.addElement(bioInstruct);
				}   
			}
		
		}
						
		DBUtils.generateFacedComponents(Constants.QUADRANGLE, startID, componentType, componentName, componentID, currentPoints, bioMightInstructSet);
		System.out.println("Generating the Rows for SuperficialEpigastricArteryEndothelium: " + componentID + "   " + componentType);

		
		return returnCode;
	}	
	
	
	 	/***************************************************************************************
		 * GENERATE INFERIOR LATERAL ARTERY
		 * 
		 * This generates the LateralSacral Artery
		 *
		 * @param key
		 * @param user
		 * @return
		 * @throws DataException
		 * @throws DataSecurityException
		 ***************************************************************************************/
		  			
		public int generateInferiorLateralSacralArtery(String startID, String componentType, String componentName, String componentID,  String parentID, double[][] currentPoints) 
				throws DataException, DataSecurityException
		{	
		System.out.println("generateInferiorLateralSacralArtery: " + componentID + "   " + parentID + "   " + componentName);
		
		int bodyID = 1;
		int projectID = 1;
		String vertices = "";
		
		ArrayList mySqlList= new ArrayList();
		int returnCode = 0;
	
		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();

		// Right FacialArtery - Move inward toward the front of Jaw
		if (componentID.equals("InferiorLateralSacralArtery:01") || parentID.equals("InferiorLateralSacralArtery:01")) 
		{	
			// We can generate the Artery
			if (currentPoints == null )
			{
				double radius = 0.00625;
				double[] startPos = {3.65, -35.0, -6.0};
				currentPoints = BioGraphics.createCylinderInPlane(Constants.YPLANE, startPos, radius, 8);
	
			}
			
			if (componentName.equals("Main")) {
				
				int nMaxSegs = 16;
				for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
			
					// Create a place for an instruction 
					BioMightInstruction bioInstruct = new BioMightInstruction();
		     
					if (numSegs==0){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.50, 0.0, 0.1);
					}
					else if (numSegs==1){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.50, 0.0, 0.1);
					}
					else if (numSegs==2){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.50, 0.0, 0.1);
					}
					else if (numSegs==3){
						BioMightOrientation orientation = new BioMightOrientation(0.0, -1.0, 0.0, 90.0);
			 			bioInstruct.setTransType(Constants.ROTATEOCTO);
		    			bioInstruct.setTheta(-45);	
		    			bioInstruct.setPivotPoint(2);	
		     			bioInstruct.setRotateVector(0.0, 0.0, 1.0);
		     			bioInstruct.setOrientation(orientation);
		     			bioInstruct.setScaleMatrix(0.90, 0.90, 0.90);
					}
					else if (numSegs==4){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.50, 0.50, 0.0);
					}
					else if (numSegs==5){
						BioMightOrientation orientation = new BioMightOrientation(0.0, -1.0, 0.0, 90.0);
			 			bioInstruct.setTransType(Constants.ROTATEOCTO);
		    			bioInstruct.setTheta(-45);	
		    			bioInstruct.setPivotPoint(2);	
		     			bioInstruct.setRotateVector(0.0, 0.0, 1.0);
		     			bioInstruct.setOrientation(orientation);
		     			bioInstruct.setScaleMatrix(0.90, 0.90, 0.90);
					}
					else if (numSegs==6){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.0, 0.50, -0.1);
					}
					else if (numSegs==7){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.0, 0.50, 0.0);
					}
					else if (numSegs==8){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.0, 0.50, 0.0);
					}
					else if (numSegs==9){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.0, 0.50, 0.0);
					}
					else if (numSegs==10){
						bioInstruct.setTransType(Constants.SCALE);
		    			bioInstruct.setScaleMatrix(0.98, 0.98, 0.98);
						bioInstruct.setTranslateMatrix(0.0, 0.50, 0.05);
					}
					else if (numSegs==11){
						bioInstruct.setTransType(Constants.SCALE);
		    			bioInstruct.setScaleMatrix(0.98, 0.98, 0.98);
		    			bioInstruct.setTranslateMatrix(0.0, 0.50, 0.0);
					}
					else if (numSegs==12){
						bioInstruct.setTransType(Constants.SCALE);
		    			bioInstruct.setScaleMatrix(0.98, 0.98, 0.98);
		    			bioInstruct.setTranslateMatrix(0.0, 0.50, 0.0);
					}
					else if (numSegs==13){
						bioInstruct.setTransType(Constants.SCALE);
		    			bioInstruct.setScaleMatrix(0.95, 0.95, 0.95);
		    			bioInstruct.setTranslateMatrix(0.0, 0.50, 0.0);
					}
					else if (numSegs==14){
						bioInstruct.setTransType(Constants.SCALE);
		    			bioInstruct.setScaleMatrix(0.95, 0.95, 0.95);
		    			bioInstruct.setTranslateMatrix(0.0, 0.50, 0.0);
					}
					else if (numSegs==15){
						bioInstruct.setTransType(Constants.SCALE);
		    			bioInstruct.setScaleMatrix(0.95, 0.95, 0.95);
		    			bioInstruct.setTranslateMatrix(0.0, 0.50, 0.0);
					}
		
					else {
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.15, 0.0, 0.5);
					}
					
					
		    		// Add the instruction into the instruction set
		    		bioMightInstructSet.addElement(bioInstruct);
				}   
			}
			else if (componentName.equals("Top")) {
				
				int nMaxSegs = 4;
				for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
			
					// Create a place for an instruction 
					BioMightInstruction bioInstruct = new BioMightInstruction();
		     
					if (numSegs==0){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.25, 0.02, 0.15);
					}
					else if (numSegs==1){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.25, 0.00, 0.15);
					}
					else if (numSegs==2){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.25, 0.0, 0.20);
					}
					else if (numSegs==3){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.25, -0.01, 0.20);
					}
				
				
					else {
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.15, 0.0, 0.5);
					}
					
					
		    		// Add the instruction into the instruction set
		    		bioMightInstructSet.addElement(bioInstruct);
				}   
			}
			else if (componentName.equals("Middle")) {
				
				int nMaxSegs = 4;
				for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
			
					// Create a place for an instruction 
					BioMightInstruction bioInstruct = new BioMightInstruction();
		     
					if (numSegs==0){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.25, -0.02, 0.1);
					}
					else if (numSegs==1){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.25, -0.01, 0.05);
					}
					else if (numSegs==2){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.25, 0.01, 0.05);
					}
					else if (numSegs==3){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.25, 0.05, 0.1);
					}
					else {
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.15, 0.0, 0.5);
					}
					
					
		    		// Add the instruction into the instruction set
		    		bioMightInstructSet.addElement(bioInstruct);
				}   
			}
			else if (componentName.equals("Bottom")) {
				
				int nMaxSegs = 3;
				for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
			
					// Create a place for an instruction 
					BioMightInstruction bioInstruct = new BioMightInstruction();
		     
					if (numSegs==0){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.25, -0.03, 0.05);
					}
					else if (numSegs==1){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.25, -0.02, 0.15);
					}
					else if (numSegs==2){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.25, 0.01, 0.10);
					}
					
					else {
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.15, 0.0, 0.5);
					}
					
					
		    		// Add the instruction into the instruction set
		    		bioMightInstructSet.addElement(bioInstruct);
				}   
			}
			
		} 
		
		else if (componentID.equals("InferiorLateralSacralArtery:02") || parentID.equals("InferiorLateralSacralArtery:02")) {	
			
	
			if (currentPoints == null )
			{
				double circumference = 0.00625;
				double[] startPos = {-1.5, 0.25, 0.00};
				currentPoints = BioGraphics.octogonYPlane(startPos, circumference);
			}
		
			if (componentName.equals("Main")) {
				
				int nMaxSegs = 16;
				for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
			
					// Create a place for an instruction 
					BioMightInstruction bioInstruct = new BioMightInstruction();
		     
					  
					if (numSegs==0){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.50, 0.0, 0.0);
					}
					else if (numSegs==1){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.25, 0.0, 0.0);
					}
					else if (numSegs==2){
						BioMightOrientation orientation = new BioMightOrientation(0.0, -1.0, 0.0, 90.0);
			 			bioInstruct.setTransType(Constants.ROTATEOCTO);
		    			bioInstruct.setTheta(45);	
		    			bioInstruct.setPivotPoint(2);	
		     			bioInstruct.setRotateVector(0.0, 0.0, 1.0);
		     			bioInstruct.setOrientation(orientation);
					}
					else if (numSegs==3){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.50, 0.50, 0.0);
					}
					else if (numSegs==4){
						BioMightOrientation orientation = new BioMightOrientation(0.0, -1.0, 0.0, 90.0);
			 			bioInstruct.setTransType(Constants.ROTATEOCTO);
		    			bioInstruct.setTheta(45);	
		    			bioInstruct.setPivotPoint(2);	
		     			bioInstruct.setRotateVector(0.0, 0.0, 1.0);
		     			bioInstruct.setOrientation(orientation);
					}
					else if (numSegs==5){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.0, 0.50, 0.0);
					}
					
					else if (numSegs==6){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.0, 0.50, -0.1);
					}
					else if (numSegs==7){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.0, 0.50, 0.0);
					}
					else if (numSegs==8){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.0, 0.50, 0.0);
					}
					else if (numSegs==9){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.0, 0.50, 0.0);
					}
					else if (numSegs==10){
						bioInstruct.setTransType(Constants.SCALE);
		    			bioInstruct.setScaleMatrix(0.98, 0.98, 0.98);
						bioInstruct.setTranslateMatrix(-0.08, -0.50, 0.05);
					}
					else if (numSegs==11){
						bioInstruct.setTransType(Constants.SCALE);
		    			bioInstruct.setScaleMatrix(0.98, 0.98, 0.98);
		    			bioInstruct.setTranslateMatrix(0.0, 0.50, 0.0);
					}
					else if (numSegs==12){
						bioInstruct.setTransType(Constants.SCALE);
		    			bioInstruct.setScaleMatrix(0.98, 0.98, 0.98);
		    			bioInstruct.setTranslateMatrix(0.0, 0.50, 0.0);
					}
					else if (numSegs==13){
						bioInstruct.setTransType(Constants.SCALE);
		    			bioInstruct.setScaleMatrix(0.95, 0.95, 0.95);
		    			bioInstruct.setTranslateMatrix(0.0, 0.50, 0.0);
					}
					else if (numSegs==14){
						bioInstruct.setTransType(Constants.SCALE);
		    			bioInstruct.setScaleMatrix(0.95, 0.95, 0.95);
		    			bioInstruct.setTranslateMatrix(0.0, 0.50, 0.0);
					}
					else if (numSegs==15){
						bioInstruct.setTransType(Constants.SCALE);
		    			bioInstruct.setScaleMatrix(0.95, 0.95, 0.95);
		    			bioInstruct.setTranslateMatrix(0.0, 0.50, 0.0);
					}	
					
					else {
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.15, 0.0, 0.5);
					}
				
			    	// Add the instruction into the instruction set
			    	bioMightInstructSet.addElement(bioInstruct);
				}
			}
		else if (componentName.equals("Top")) {
				
				int nMaxSegs = 4;
				for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
			
					// Create a place for an instruction 
					BioMightInstruction bioInstruct = new BioMightInstruction();
		     
					if (numSegs==0){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.25, 0.02, 0.15);
					}
					else if (numSegs==1){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.25, 0.00, 0.15);
					}
					else if (numSegs==2){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.25, 0.0, 0.20);
					}
					else if (numSegs==3){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.25, -0.01, 0.20);
					}
				
				
					else {
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.15, 0.0, 0.5);
					}
					
					
		    		// Add the instruction into the instruction set
		    		bioMightInstructSet.addElement(bioInstruct);
				}   
			}
			else if (componentName.equals("Middle")) {
				
				int nMaxSegs = 4;
				for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
			
					// Create a place for an instruction 
					BioMightInstruction bioInstruct = new BioMightInstruction();
		     
					if (numSegs==0){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.25, -0.02, 0.1);
					}
					else if (numSegs==1){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.25, -0.01, 0.05);
					}
					else if (numSegs==2){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.25, 0.01, 0.05);
					}
					else if (numSegs==3){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.25, 0.05, 0.1);
					}
					else {
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.15, 0.0, 0.5);
					}
					
					
		    		// Add the instruction into the instruction set
		    		bioMightInstructSet.addElement(bioInstruct);
				}   
			}
			else if (componentName.equals("Bottom")) {
				
				int nMaxSegs = 3;
				for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
			
					// Create a place for an instruction 
					BioMightInstruction bioInstruct = new BioMightInstruction();
		     
					if (numSegs==0){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.25, -0.03, 0.05);
					}
					else if (numSegs==1){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.25, -0.02, 0.15);
					}
					else if (numSegs==2){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.25, 0.01, 0.10);
					}
					
					else {
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.15, 0.0, 0.5);
					}
					
					
		    		// Add the instruction into the instruction set
		    		bioMightInstructSet.addElement(bioInstruct);
				}   
			}
		
		}
						
		DBUtils.generateFacedComponents(Constants.QUADRANGLE, startID, componentType, componentName, componentID, currentPoints, bioMightInstructSet);
		System.out.println("Generating the Rows for InferiorLateralSacralArteryEndothelium: " + componentID + "   " + componentType);

		
		return returnCode;
	}
	
		/***************************************************************************************
		 * GENERATE INFERIOR LATERAL ARTERY
		 * 
		 * This generates the LateralSacral Artery
		 *
		 * @param key
		 * @param user
		 * @return
		 * @throws DataException
		 * @throws DataSecurityException
		 ***************************************************************************************/
		  			
		public int generateSuperiorLateralSacralArtery(String startID, String componentType, String componentName, String componentID,  String parentID, double[][] currentPoints) 
				throws DataException, DataSecurityException
		{	
		System.out.println("generateSuperiorLateralSacralArtery: " + componentID + "   " + parentID + "   " + componentName);
		
		int bodyID = 1;
		int projectID = 1;
		String vertices = "";
		
		ArrayList mySqlList= new ArrayList();
		int returnCode = 0;
	
		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();

		// Right FacialArtery - Move inward toward the front of Jaw
		if (componentID.equals("SuperiorLateralSacralArtery:01") || parentID.equals("SuperiorLateralSacralArtery:01")) 
		{	
			// We can generate the Artery
			if (currentPoints == null )
			{
				double radius = 0.00625;
				double[] startPos = {3.65, -35.0, -6.0};
				currentPoints = BioGraphics.createCylinderInPlane(Constants.YPLANE, startPos, radius, 8);
	
			}
			
			if (componentName.equals("Main")) {
				
				int nMaxSegs = 16;
				for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
			
					// Create a place for an instruction 
					BioMightInstruction bioInstruct = new BioMightInstruction();
		     
					if (numSegs==0){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.50, 0.0, 0.1);
					}
					else if (numSegs==1){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.50, 0.0, 0.1);
					}
					else if (numSegs==2){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.50, 0.0, 0.1);
					}
					else if (numSegs==3){
						BioMightOrientation orientation = new BioMightOrientation(0.0, -1.0, 0.0, 90.0);
			 			bioInstruct.setTransType(Constants.ROTATEOCTO);
		    			bioInstruct.setTheta(-45);	
		    			bioInstruct.setPivotPoint(2);	
		     			bioInstruct.setRotateVector(0.0, 0.0, 1.0);
		     			bioInstruct.setOrientation(orientation);
		     			bioInstruct.setScaleMatrix(0.90, 0.90, 0.90);
					}
					else if (numSegs==4){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.50, 0.50, 0.0);
					}
					else if (numSegs==5){
						BioMightOrientation orientation = new BioMightOrientation(0.0, -1.0, 0.0, 90.0);
			 			bioInstruct.setTransType(Constants.ROTATEOCTO);
		    			bioInstruct.setTheta(-45);	
		    			bioInstruct.setPivotPoint(2);	
		     			bioInstruct.setRotateVector(0.0, 0.0, 1.0);
		     			bioInstruct.setOrientation(orientation);
		     			bioInstruct.setScaleMatrix(0.90, 0.90, 0.90);
					}
					else if (numSegs==6){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.0, 0.50, -0.1);
					}
					else if (numSegs==7){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.0, 0.50, 0.0);
					}
					else if (numSegs==8){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.0, 0.50, 0.0);
					}
					else if (numSegs==9){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.0, 0.50, 0.0);
					}
					else if (numSegs==10){
						bioInstruct.setTransType(Constants.SCALE);
		    			bioInstruct.setScaleMatrix(0.98, 0.98, 0.98);
						bioInstruct.setTranslateMatrix(0.0, 0.50, 0.05);
					}
					else if (numSegs==11){
						bioInstruct.setTransType(Constants.SCALE);
		    			bioInstruct.setScaleMatrix(0.98, 0.98, 0.98);
		    			bioInstruct.setTranslateMatrix(0.0, 0.50, 0.0);
					}
					else if (numSegs==12){
						bioInstruct.setTransType(Constants.SCALE);
		    			bioInstruct.setScaleMatrix(0.98, 0.98, 0.98);
		    			bioInstruct.setTranslateMatrix(0.0, 0.50, 0.0);
					}
					else if (numSegs==13){
						bioInstruct.setTransType(Constants.SCALE);
		    			bioInstruct.setScaleMatrix(0.95, 0.95, 0.95);
		    			bioInstruct.setTranslateMatrix(0.0, 0.50, 0.0);
					}
					else if (numSegs==14){
						bioInstruct.setTransType(Constants.SCALE);
		    			bioInstruct.setScaleMatrix(0.95, 0.95, 0.95);
		    			bioInstruct.setTranslateMatrix(0.0, 0.50, 0.0);
					}
					else if (numSegs==15){
						bioInstruct.setTransType(Constants.SCALE);
		    			bioInstruct.setScaleMatrix(0.95, 0.95, 0.95);
		    			bioInstruct.setTranslateMatrix(0.0, 0.50, 0.0);
					}
		
					else {
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.15, 0.0, 0.5);
					}
					
					
		    		// Add the instruction into the instruction set
		    		bioMightInstructSet.addElement(bioInstruct);
				}   
			}
			else if (componentName.equals("Top")) {
				
				int nMaxSegs = 4;
				for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
			
					// Create a place for an instruction 
					BioMightInstruction bioInstruct = new BioMightInstruction();
		     
					if (numSegs==0){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.25, 0.02, 0.15);
					}
					else if (numSegs==1){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.25, 0.00, 0.15);
					}
					else if (numSegs==2){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.25, 0.0, 0.20);
					}
					else if (numSegs==3){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.25, -0.01, 0.20);
					}
				
				
					else {
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.15, 0.0, 0.5);
					}
					
					
		    		// Add the instruction into the instruction set
		    		bioMightInstructSet.addElement(bioInstruct);
				}   
			}
			else if (componentName.equals("Middle")) {
				
				int nMaxSegs = 4;
				for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
			
					// Create a place for an instruction 
					BioMightInstruction bioInstruct = new BioMightInstruction();
		     
					if (numSegs==0){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.25, -0.02, 0.1);
					}
					else if (numSegs==1){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.25, -0.01, 0.05);
					}
					else if (numSegs==2){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.25, 0.01, 0.05);
					}
					else if (numSegs==3){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.25, 0.05, 0.1);
					}
					else {
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.15, 0.0, 0.5);
					}
					
					
		    		// Add the instruction into the instruction set
		    		bioMightInstructSet.addElement(bioInstruct);
				}   
			}
			else if (componentName.equals("Bottom")) {
				
				int nMaxSegs = 3;
				for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
			
					// Create a place for an instruction 
					BioMightInstruction bioInstruct = new BioMightInstruction();
		     
					if (numSegs==0){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.25, -0.03, 0.05);
					}
					else if (numSegs==1){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.25, -0.02, 0.15);
					}
					else if (numSegs==2){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.25, 0.01, 0.10);
					}
					
					else {
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.15, 0.0, 0.5);
					}
					
					
		    		// Add the instruction into the instruction set
		    		bioMightInstructSet.addElement(bioInstruct);
				}   
			}
			
		} 
		
		else if (componentID.equals("SuperiorLateralSacralArtery:02") || parentID.equals("SuperiorLateralSacralArtery:02")) {	
			
	
			if (currentPoints == null )
			{
				double circumference = 0.00625;
				double[] startPos = {-1.5, 0.25, 0.00};
				currentPoints = BioGraphics.octogonYPlane(startPos, circumference);
			}
		
			if (componentName.equals("Main")) {
				
				int nMaxSegs = 16;
				for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
			
					// Create a place for an instruction 
					BioMightInstruction bioInstruct = new BioMightInstruction();
		     
					  
					if (numSegs==0){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.50, 0.0, 0.0);
					}
					else if (numSegs==1){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.25, 0.0, 0.0);
					}
					else if (numSegs==2){
						BioMightOrientation orientation = new BioMightOrientation(0.0, -1.0, 0.0, 90.0);
			 			bioInstruct.setTransType(Constants.ROTATEOCTO);
		    			bioInstruct.setTheta(45);	
		    			bioInstruct.setPivotPoint(2);	
		     			bioInstruct.setRotateVector(0.0, 0.0, 1.0);
		     			bioInstruct.setOrientation(orientation);
					}
					else if (numSegs==3){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.50, 0.50, 0.0);
					}
					else if (numSegs==4){
						BioMightOrientation orientation = new BioMightOrientation(0.0, -1.0, 0.0, 90.0);
			 			bioInstruct.setTransType(Constants.ROTATEOCTO);
		    			bioInstruct.setTheta(45);	
		    			bioInstruct.setPivotPoint(2);	
		     			bioInstruct.setRotateVector(0.0, 0.0, 1.0);
		     			bioInstruct.setOrientation(orientation);
					}
					else if (numSegs==5){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.0, 0.50, 0.0);
					}
					
					else if (numSegs==6){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.0, 0.50, -0.1);
					}
					else if (numSegs==7){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.0, 0.50, 0.0);
					}
					else if (numSegs==8){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.0, 0.50, 0.0);
					}
					else if (numSegs==9){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.0, 0.50, 0.0);
					}
					else if (numSegs==10){
						bioInstruct.setTransType(Constants.SCALE);
		    			bioInstruct.setScaleMatrix(0.98, 0.98, 0.98);
						bioInstruct.setTranslateMatrix(-0.08, -0.50, 0.05);
					}
					else if (numSegs==11){
						bioInstruct.setTransType(Constants.SCALE);
		    			bioInstruct.setScaleMatrix(0.98, 0.98, 0.98);
		    			bioInstruct.setTranslateMatrix(0.0, 0.50, 0.0);
					}
					else if (numSegs==12){
						bioInstruct.setTransType(Constants.SCALE);
		    			bioInstruct.setScaleMatrix(0.98, 0.98, 0.98);
		    			bioInstruct.setTranslateMatrix(0.0, 0.50, 0.0);
					}
					else if (numSegs==13){
						bioInstruct.setTransType(Constants.SCALE);
		    			bioInstruct.setScaleMatrix(0.95, 0.95, 0.95);
		    			bioInstruct.setTranslateMatrix(0.0, 0.50, 0.0);
					}
					else if (numSegs==14){
						bioInstruct.setTransType(Constants.SCALE);
		    			bioInstruct.setScaleMatrix(0.95, 0.95, 0.95);
		    			bioInstruct.setTranslateMatrix(0.0, 0.50, 0.0);
					}
					else if (numSegs==15){
						bioInstruct.setTransType(Constants.SCALE);
		    			bioInstruct.setScaleMatrix(0.95, 0.95, 0.95);
		    			bioInstruct.setTranslateMatrix(0.0, 0.50, 0.0);
					}	
					
					else {
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.15, 0.0, 0.5);
					}
				
			    	// Add the instruction into the instruction set
			    	bioMightInstructSet.addElement(bioInstruct);
				}
			}
		else if (componentName.equals("Top")) {
				
				int nMaxSegs = 4;
				for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
			
					// Create a place for an instruction 
					BioMightInstruction bioInstruct = new BioMightInstruction();
		     
					if (numSegs==0){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.25, 0.02, 0.15);
					}
					else if (numSegs==1){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.25, 0.00, 0.15);
					}
					else if (numSegs==2){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.25, 0.0, 0.20);
					}
					else if (numSegs==3){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.25, -0.01, 0.20);
					}
				
				
					else {
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.15, 0.0, 0.5);
					}
					
					
		    		// Add the instruction into the instruction set
		    		bioMightInstructSet.addElement(bioInstruct);
				}   
			}
			else if (componentName.equals("Middle")) {
				
				int nMaxSegs = 4;
				for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
			
					// Create a place for an instruction 
					BioMightInstruction bioInstruct = new BioMightInstruction();
		     
					if (numSegs==0){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.25, -0.02, 0.1);
					}
					else if (numSegs==1){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.25, -0.01, 0.05);
					}
					else if (numSegs==2){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.25, 0.01, 0.05);
					}
					else if (numSegs==3){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.25, 0.05, 0.1);
					}
					else {
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.15, 0.0, 0.5);
					}
					
					
		    		// Add the instruction into the instruction set
		    		bioMightInstructSet.addElement(bioInstruct);
				}   
			}
			else if (componentName.equals("Bottom")) {
				
				int nMaxSegs = 3;
				for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
			
					// Create a place for an instruction 
					BioMightInstruction bioInstruct = new BioMightInstruction();
		     
					if (numSegs==0){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.25, -0.03, 0.05);
					}
					else if (numSegs==1){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.25, -0.02, 0.15);
					}
					else if (numSegs==2){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.25, 0.01, 0.10);
					}
					
					else {
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.15, 0.0, 0.5);
					}
					
					
		    		// Add the instruction into the instruction set
		    		bioMightInstructSet.addElement(bioInstruct);
				}   
			}
		
		}
						
		DBUtils.generateFacedComponents(Constants.QUADRANGLE, startID, componentType, componentName, componentID, currentPoints, bioMightInstructSet);
		System.out.println("Generating the Rows for SuperiorLateralSacralArteryEndothelium: " + componentID + "   " + componentType);

		
		return returnCode;
	}
	
	 /***************************************************************************************
	 * GENERATE  Gastro Epiploic Artery
	 * 
	 * This generates the Epigastric Artery
	 *
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/
	  	
	public int generateGastroEpiploicArtery(String startID, String componentType, String componentName, String componentID,  String parentID, double[][] currentPoints) 
		throws DataException, DataSecurityException
	{	
		System.out.println("generateGastroEpiploicArtery: " + componentID + "   " + parentID);
		
		int bodyID = 1;
		int projectID = 1;
		String vertices = "";
		
		ArrayList mySqlList= new ArrayList();
		int returnCode = 0;
		
		// We can generate the GastricArtery
		if (currentPoints == null )
		{
			double circumference = 0.00625;
			double[] startPos = {1.5, 0.25, 0.00};
			currentPoints = BioGraphics.octogonYPlane(startPos, circumference);
		}
	
		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();
		
		if (parentID.equals("GastroEpiploicArtery:01")) 
		{
		
			int numInstructions = 12;
			//BioMightOrientation bioMightOrientation = new BioMightOrientation(0.0, 0.0, 1.0, 90);
			for (int instructCount=0; instructCount<numInstructions; instructCount++)
			{
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
									
				// Place the appendage into the instruction set
				bioInstruct.setBioMightAppendage(null);
				bioInstruct.setFillAppendage(false); 
				
				if (instructCount==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.20, -0.30, 0.35);
				}
				else if (instructCount==1){				
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.05, -0.40, 0.30);
				}
				else if (instructCount==2){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.20, -0.5, 0.25);
				}
				else if (instructCount==3){				
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.22, -0.5, 0.0);
				}	
				else if (instructCount==4){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.20, -0.5, 0.0);
				}	
				else if (instructCount==5){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.25, -0.6, 0.0);
				}	
				else if (instructCount==6){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.24, -0.55, 0.0);
				}
				else if (instructCount==7){
					BioMightOrientation orientation = new BioMightOrientation(0.0, -1.0, 0.0, 90.0);
		 			bioInstruct.setTransType(Constants.ROTATEOCTO);
	    			bioInstruct.setTheta(-45);	
	    			bioInstruct.setPivotPoint(0);	
	     			bioInstruct.setRotateVector(0.0, 0.0, 1.0);
	     			bioInstruct.setOrientation(orientation);
				}
				else if (instructCount==8){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.50, -0.5, 0.0);
				}
				else if (instructCount==9){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.5, -0.25, 0.0);
				}
				else if (instructCount==10){
					BioMightOrientation orientation = new BioMightOrientation(0.0, -1.0, 0.0, 90.0);
		 			bioInstruct.setTransType(Constants.ROTATEOCTO);
	    			bioInstruct.setTheta(-45);	
	    			bioInstruct.setPivotPoint(0);	
	     			bioInstruct.setRotateVector(0.0, 0.0, 1.0);
	     			bioInstruct.setOrientation(orientation);
				}
				else if (instructCount==11){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.4, -0.075, -0.075);
				}
				
				
		
					
				else {
	    			bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.15, -0.2, 0.0);
	    		}
		
				
	    		// Add the instruction into the instruction set
	    		bioMightInstructSet.addElement(bioInstruct);
			}
		}
		else if (parentID.equals("GastroEpiploicArtery:02")) 
		{
			
			int numInstructions = 7;
			//BioMightOrientation bioMightOrientation = new BioMightOrientation(0.0, 0.0, 1.0, 90);
			for (int instructCount=0; instructCount<numInstructions; instructCount++)
			{
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
									
				// Place the appendage into the instruction set
				bioInstruct.setBioMightAppendage(null);
				bioInstruct.setFillAppendage(false); 
				
				if (instructCount==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.5, 0.0, -0.0);
				}
				else if (instructCount==1){			
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.5, -0.05, -0.0);
				}
				else if (instructCount==2){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.5, -0.02, -0.05);
				}
				else if (instructCount==3){				
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.25, 0.0, 0.01);
				}	
				else if (instructCount==4){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.35, 0.1, -0.03);
				}	
				else if (instructCount==5){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.45, 0.40, -0.05);
				}				
				else if (instructCount==6){
					BioMightOrientation orientation = new BioMightOrientation(0.0, -1.0, 0.0, 90.0);
		 			bioInstruct.setTransType(Constants.ROTATEOCTO);
	    			bioInstruct.setTheta(-45);	
	    			bioInstruct.setPivotPoint(0);	
	     			bioInstruct.setRotateVector(0.0, 0.0, 1.0);
	     			bioInstruct.setOrientation(orientation);
				}	
				
		
				
	    		else {
	    			bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.01, 0.15, -0.27);
	    		}
		    
	    		// Add the instruction into the instruction set
	    		bioMightInstructSet.addElement(bioInstruct);
			}
		}
		
		DBUtils.generateFacedComponents(Constants.QUADRANGLE, startID, componentType, componentName, componentID, currentPoints, bioMightInstructSet);
		System.out.println("Generating the Rows for GastroEpiploicArtery: " + componentID + "   " + componentType);
			
		return returnCode;
	}
	

	
	 /***************************************************************************************
	 * GENERATE UGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG
	 * 
	 * This generates the Epigastric Artery
	 *
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/
	  	
	public int generateSuperiorThyroidArtery(String startID, String componentType, String componentName, String componentID,  String parentID, double[][] currentPoints) 
		throws DataException, DataSecurityException
	{	
		System.out.println("GastroEpiploicArtery: " + componentID + "   " + parentID);
		
		int bodyID = 1;
		int projectID = 1;
		String vertices = "";
		
		ArrayList mySqlList= new ArrayList();
		int returnCode = 0;
		
		// We can generate the GastroEpiploicArtery alone, or when connected
		// The current points passed into the equation are assumed
		// to come from the base oral cavity
		if (currentPoints == null )
		{
			double circumference = 0.25;
			
			double x =  -0.3;
   		double y =  -17.0;
   		double z =  -3.0;
			
			// Create a equilateral octogon	
			currentPoints[0][0] =  x;
			currentPoints[0][1] =  y;
			currentPoints[0][2] =  z;
			
			currentPoints[1][0] =  x-circumference;
			currentPoints[1][1] =  y;
			currentPoints[1][2] =  z-circumference;
			
			currentPoints[2][0] =  x-circumference;
			currentPoints[2][1] =  y;
			currentPoints[2][2] =  z-circumference*2;
			
			currentPoints[3][0] =  x;
			currentPoints[3][1] =  y;
			currentPoints[3][2] =  z-circumference*3;
	
			currentPoints[4][0] =  x+circumference;
			currentPoints[4][1] =  y;
			currentPoints[4][2] =  z-circumference*3;
			
			currentPoints[5][0] =  x+circumference*2;
			currentPoints[5][1] =  y;
			currentPoints[5][2] =  z-circumference*2;
	
			currentPoints[6][0] =  x+circumference*2;
			currentPoints[6][1] =  y;
			currentPoints[6][2] =  z-circumference;

			currentPoints[7][0] =  x+circumference;
			currentPoints[7][1] =  y;
			currentPoints[7][2] =  z;
	}
		
		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();
		
		int nMaxSegs = 5;
		for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
		
			// Create a place for an instruction 
			BioMightInstruction bioInstruct = new BioMightInstruction();
      		         
			// The artery descends straight down through central core of body
			// splitting at the Elvis pelvis
   		if (numSegs==0){
   			bioInstruct.setTransType(2);
   			bioInstruct.setTranslateMatrix(0.0, -2.0, 0.0);
   		}
      		else if (numSegs==1){
      			bioInstruct.setTransType(2);
   			bioInstruct.setTranslateMatrix(0.0, -2.0, 0.0);
          	}
   		else if (numSegs==2){
   			bioInstruct.setTransType(2);
   			bioInstruct.setTranslateMatrix(0.0, -2.0, 0.0);
   		}
   		else if (numSegs==3){
   			bioInstruct.setTransType(2);
   			bioInstruct.setTranslateMatrix(0.0, -2.0, 0.0);
   		}
   		else if (numSegs==4){
   			bioInstruct.setTransType(2);
   			bioInstruct.setTranslateMatrix(0.0, -2.0, 0.0);
           }
   		
   		
   		else if (numSegs==5){
   			bioInstruct.setPivotPoint(3);
   			bioInstruct.setRotateVector(0.0, 0.0, 1.0);
   			bioInstruct.setTransType(3);
   			bioInstruct.setTranslateMatrix(1.35, 1.0, 1.35);	      			
       	}
   		else if (numSegs==6){
   			bioInstruct.setPivotPoint(3);
   			bioInstruct.setRotateVector(0.0, 0.0, 1.0);
   			bioInstruct.setTransType(2);
   			bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);	   	
       	}
      		else if (numSegs==7){
   			bioInstruct.setPivotPoint(3);
   			bioInstruct.setRotateVector(0.0, 0.0, 1.0);
   			bioInstruct.setTransType(2);
   			bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);	      			     			
   		}       		
      		else if (numSegs==8){
   			bioInstruct.setPivotPoint(3);
   			bioInstruct.setRotateVector(0.0, 0.0, 1.0);
   			bioInstruct.setTransType(2);
   			bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);	      			     			
   		}
   		else {
   			bioInstruct.setPivotPoint(3);
   			bioInstruct.setRotateVector(0.0, 0.0, 1.0);
   			bioInstruct.setTransType(2);
   			bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);
   		}
	    
   		// Add the instruction into the instruction set
   		bioMightInstructSet.addElement(bioInstruct);
		}
	
		//DBUtils.generateFacedComponents(Constants.QUADRANGLE, startID, componentType, componentName, componentID, currentPoints, bioMightInstructSet);
		System.out.println("Generating the Rows for GastroEpiploicArteryEndothelium: " + componentID + "   " + componentType);
			
		return returnCode;
	}
	 /***************************************************************************************
	 * GENERATE COMMON HEPATIC ARTERY
	 * 
	 * This generates the Appendicular Artery
	 *
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/
	  	
	public int generateCommonHepaticArtery(String startID, String componentType, String componentName, String componentID,  String parentID, double[][] currentPoints) 
		throws DataException, DataSecurityException
	{	
		System.out.println("CommonHepaticArtery: " + componentID + "   " + parentID);
		
		int bodyID = 1;
		int projectID = 1;
		String vertices = "";
		
		ArrayList mySqlList= new ArrayList();
		int returnCode = 0;
		
		// We can generate the CommonHepaticArtery
		if (currentPoints == null )
		{
			double circumference = 0.00625;
			double[] startPos = {1.5, 0.25, 0.00};
			currentPoints = BioGraphics.octogonYPlane(startPos, circumference);
		}
	
		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();
		
		int numInstructions = 7;
		//BioMightOrientation bioMightOrientation = new BioMightOrientation(0.0, 0.0, 1.0, 90);
		for (int instructCount=0; instructCount<numInstructions; instructCount++)
		{
			// Create a place for an instruction 
			BioMightInstruction bioInstruct = new BioMightInstruction();
								
			// Place the appendage into the instruction set
			bioInstruct.setBioMightAppendage(null);
			bioInstruct.setFillAppendage(false); 
			
			if (instructCount==0){
				bioInstruct.setTransType(Constants.TRANSLATE);
				bioInstruct.setTranslateMatrix(-0.30, -0.25, 0.25);
			}
			else if (instructCount==1){			
				bioInstruct.setTransType(Constants.TRANSLATE);
				bioInstruct.setTranslateMatrix(-0.5, -0.20, 0.40);
			}
			else if (instructCount==2){
				
				BioMightOrientation orientation = new BioMightOrientation(0.0, -1.0, 0.0, 90.0);
	 			bioInstruct.setTransType(Constants.ROTATEOCTO);
    			bioInstruct.setTheta(-45);	
    			bioInstruct.setPivotPoint(4);	
     			bioInstruct.setRotateVector(0.0, 0.0, 1.0);
     			bioInstruct.setOrientation(orientation);		
			}
			else if (instructCount==3){				
				bioInstruct.setTransType(Constants.SCALE);
				bioInstruct.setScaleMatrix(0.95, 0.95, 0.95);
				bioInstruct.setTranslateMatrix(-0.35, 0.0, 0.40);
			}	
			else if (instructCount==4){				
				bioInstruct.setTransType(Constants.SCALE);
				bioInstruct.setScaleMatrix(0.95, 0.95, 0.95);
				bioInstruct.setTranslateMatrix(-0.5, 0.03, 0.35);
			}
			else if (instructCount==5){
				BioMightOrientation orientation = new BioMightOrientation(0.0, -1.0, 0.0, 90.0);
	 			bioInstruct.setTransType(Constants.ROTATEOCTO);
    			bioInstruct.setTheta(-45);	
    			bioInstruct.setPivotPoint(4);	
     			bioInstruct.setRotateVector(0.0, 0.0, 1.0);
     			bioInstruct.setOrientation(orientation);
			}	
			else if (instructCount==6){
				BioMightOrientation orientation = new BioMightOrientation(0.0, -1.0, 0.0, 90.0);
	 			bioInstruct.setTransType(Constants.ROTATEOCTO);
    			bioInstruct.setTheta(-15);	
    			bioInstruct.setPivotPoint(4);	
     			bioInstruct.setRotateVector(0.0, 0.0, 1.0);
     			bioInstruct.setOrientation(orientation);
			}	
			
    		
    		else {
    			bioInstruct.setPivotPoint(3);
    			bioInstruct.setRotateVector(0.0, 0.0, 1.0);
    			bioInstruct.setTransType(2);
    			bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);
    		}
	    
    		// Add the instruction into the instruction set
    		bioMightInstructSet.addElement(bioInstruct);
		}
		
	
		
		DBUtils.generateFacedComponents(Constants.QUADRANGLE, startID, componentType, componentName, componentID, currentPoints, bioMightInstructSet);
		System.out.println("Generating the Rows for CommonHepaticArtery: " + componentID + "   " + componentType);
			
		return returnCode;
	}


	 /***************************************************************************************
	 * GENERATE PROPER HEPATIC ARTERY
	 * 
	 * This generates the Appendicular Artery
	 *
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/
	  	
	public int generateProperHepaticArtery(String startID, String componentType, String componentName, String componentID,  String parentID, double[][] currentPoints) 
		throws DataException, DataSecurityException
	{	
		System.out.println("ProperHepaticArtery: " + componentID + "   " + parentID);
		
		int bodyID = 1;
		int projectID = 1;
		String vertices = "";
		
		ArrayList mySqlList= new ArrayList();
		int returnCode = 0;
		
		// We can generate the DeepBrachialArtery
		if (currentPoints == null )
		{
			double circumference = 0.00625;
			double[] startPos = {1.5, 0.25, 0.00};
			currentPoints = BioGraphics.octogonYPlane(startPos, circumference);
		}
	
		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();
		
		int numInstructions = 3;
		//BioMightOrientation bioMightOrientation = new BioMightOrientation(0.0, 0.0, 1.0, 90);
		for (int instructCount=0; instructCount<numInstructions; instructCount++)
		{
			// Create a place for an instruction 
			BioMightInstruction bioInstruct = new BioMightInstruction();
								
			// Place the appendage into the instruction set
			bioInstruct.setBioMightAppendage(null);
			bioInstruct.setFillAppendage(false); 
			
			if (instructCount==0){
				bioInstruct.setTransType(Constants.TRANSLATE);
				bioInstruct.setTranslateMatrix(-0.1, 0.25, -0.05);
			}
			else if (instructCount==1){			
				bioInstruct.setTransType(Constants.TRANSLATE);
				bioInstruct.setTranslateMatrix(-0.2, 0.25, 0.0);
			}
			else if (instructCount==2){
				bioInstruct.setTransType(Constants.TRANSLATE);
				bioInstruct.setTranslateMatrix(-0.1, 0.25, -0.05);
			}

    		
    		else {
    			bioInstruct.setPivotPoint(3);
    			bioInstruct.setRotateVector(0.0, 0.0, 1.0);
    			bioInstruct.setTransType(2);
    			bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);
    		}
	    
    		// Add the instruction into the instruction set
    		bioMightInstructSet.addElement(bioInstruct);
		}
		
	
		DBUtils.generateFacedComponents(Constants.QUADRANGLE, startID, componentType, componentName, componentID, currentPoints, bioMightInstructSet);
		System.out.println("Generating the Rows for ProperHepaticArtery: " + componentID + "   " + componentType);
			
		return returnCode;
	}


	 /***************************************************************************************
		 * GENERATE SPLENIC ARTERY
		 * 
		 * This generates the Splenic Artery
		 *
		 * @param key
		 * @param user
		 * @return
		 * @throws DataException
		 * @throws DataSecurityException
		 ***************************************************************************************/
		  	
		public int generateSplenicArtery(String startID, String componentType, String componentName, String componentID,  String parentID, double[][] currentPoints) 
			throws DataException, DataSecurityException
		{	
			System.out.println("SplenicArtery: " + componentID + "   " + parentID);
			
			int bodyID = 1;
			int projectID = 1;
			String vertices = "";
			
			ArrayList mySqlList= new ArrayList();
			int returnCode = 0;
			
			// We can generate the DeepBrachialArtery
			if (currentPoints == null )
			{
				double circumference = 0.00625;
				double[] startPos = {1.5, 0.25, 0.00};
				currentPoints = BioGraphics.octogonYPlane(startPos, circumference);
			}
		
			// Allocate an instruction set for building it
			BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();
			
			int numInstructions = 8;
			//BioMightOrientation bioMightOrientation = new BioMightOrientation(0.0, 0.0, 1.0, 90);
			for (int instructCount=0; instructCount<numInstructions; instructCount++)
			{
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
									
				// Place the appendage into the instruction set
				bioInstruct.setBioMightAppendage(null);
				bioInstruct.setFillAppendage(false); 
				
				if (instructCount==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.35, -0.15, -0.2);
				}
				else if (instructCount==1){			
					BioMightOrientation orientation = new BioMightOrientation(0.0, -1.0, 0.0, 90.0);
		 			bioInstruct.setTransType(Constants.ROTATEOCTO);
	    			bioInstruct.setTheta(45);	
	    			bioInstruct.setPivotPoint(0);	
	     			bioInstruct.setRotateVector(0.0, 0.0, 1.0);
	     			bioInstruct.setOrientation(orientation);
				}
				else if (instructCount==2){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.5, 0.15, 0.0);
				}
				else if (instructCount==3){				
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.5, 0.24, 0.0);
				}	
				else if (instructCount==4){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.5, 0.30, 0.15);
				}		
				else if (instructCount==5){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.5, 0.40, 0.18);
				}	
				else if (instructCount==6){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.5, 0.32, 0.20);
				}
				else if (instructCount==7){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.30, 0.10, 0.15);
				}	
				
						
				
	    		else {
	    			bioInstruct.setPivotPoint(3);
	    			bioInstruct.setRotateVector(0.0, 0.0, 1.0);
	    			bioInstruct.setTransType(2);
	    			bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);
	    		}
		    
	    		// Add the instruction into the instruction set
	    		bioMightInstructSet.addElement(bioInstruct);
			}
			
		
			DBUtils.generateFacedComponents(Constants.QUADRANGLE, startID, componentType, componentName, componentID, currentPoints, bioMightInstructSet);
			System.out.println("Generating the Rows for SplenicArtery: " + componentID + "   " + componentType);
				
			return returnCode;
		}

		 /***************************************************************************************
		 * GENERATE GASTRODUONDENAL ARTERY
		 * 
		 * This generates the GastroDuodenal Artery
		 *
		 * @param key
		 * @param user
		 * @return
		 * @throws DataException
		 * @throws DataSecurityException
		 ***************************************************************************************/
		  	
		public int generateGastroDuodenalArtery(String startID, String componentType, String componentName, String componentID,  String parentID, double[][] currentPoints) 
			throws DataException, DataSecurityException
		{	
			System.out.println("GastroDuodenalArtery: " + componentID + "   " + parentID);
			
			int bodyID = 1;
			int projectID = 1;
			String vertices = "";
			
			ArrayList mySqlList= new ArrayList();
			int returnCode = 0;
			
			// We can generate the DeepBrachialArtery
			if (currentPoints == null )
			{
				double circumference = 0.00625;
				double[] startPos = {1.5, 0.25, 0.00};
				currentPoints = BioGraphics.octogonYPlane(startPos, circumference);
			}
		
			// Allocate an instruction set for building it
			BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();
			
			int numInstructions = 11;
			//BioMightOrientation bioMightOrientation = new BioMightOrientation(0.0, 0.0, 1.0, 90);
			for (int instructCount=0; instructCount<numInstructions; instructCount++)
			{
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
									
				// Place the appendage into the instruction set
				bioInstruct.setBioMightAppendage(null);
				bioInstruct.setFillAppendage(false); 
				
				if (instructCount==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.25, -0.10, -0.1);
				}
				else if (instructCount==1){				
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.25, -0.04, 0.0);
				}
				else if (instructCount==2){				
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.20, -0.01, -0.15);
				}
				else if (instructCount==3){			
					BioMightOrientation orientation = new BioMightOrientation(0.0, -1.0, 0.0, 90.0);
		 			bioInstruct.setTransType(Constants.ROTATEOCTO);
	    			bioInstruct.setTheta(45);	
	    			bioInstruct.setPivotPoint(6);	
	     			bioInstruct.setRotateVector(0.0, 0.0, 1.0);
	     			bioInstruct.setOrientation(orientation);
				}
				else if (instructCount==4){
					BioMightOrientation orientation = new BioMightOrientation(0.0, -1.0, 0.0, 90.0);
		 			bioInstruct.setTransType(Constants.ROTATEOCTO);
	    			bioInstruct.setTheta(45);	
	    			bioInstruct.setPivotPoint(6);	
	     			bioInstruct.setRotateVector(0.0, 0.0, 1.0);
	     			bioInstruct.setOrientation(orientation);
				}
				else if (instructCount==5){				
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.15, -0.5, -0.16);
				}	
				else if (instructCount==6){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.20, -0.65, -0.015);
				}		
				else if (instructCount==7){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.28, -0.50, 0.16);
				}
				else if (instructCount==8){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.22, -0.45, 0.46);
				}
				else if (instructCount==9){
					BioMightOrientation orientation = new BioMightOrientation(0.0, -1.0, 0.0, 90.0);
		 			bioInstruct.setTransType(Constants.ROTATEOCTO);
	    			bioInstruct.setTheta(45);	
	    			bioInstruct.setPivotPoint(6);	
	     			bioInstruct.setRotateVector(0.0, 0.0, 1.0);
	     			bioInstruct.setOrientation(orientation);
				}
				else if (instructCount==10){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.15, -0.25, 0.0);
				}
				
		
		
	    		else {
	    			bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -0.5, 0.22);
	    		}
		    
	    		// Add the instruction into the instruction set
	    		bioMightInstructSet.addElement(bioInstruct);
			}
			
		
			DBUtils.generateFacedComponents(Constants.QUADRANGLE, startID, componentType, componentName, componentID, currentPoints, bioMightInstructSet);
			System.out.println("Generating the Rows for GastroDuodenalArtery: " + componentID + "   " + componentType);
				
			return returnCode;
		}


		 /***************************************************************************************
		 * GENERATE SUPIORPANCREATICODUONDENAL ARTERY
		 * 
		 * This generates the SuperiorPancreaticoDuodenal Artery
		 *
		 * @param key
		 * @param user
		 * @return
		 * @throws DataException
		 * @throws DataSecurityException
		 ***************************************************************************************/
		  	
		public int generateSuperiorPancreaticoDuodenalArtery(String startID, String componentType, String componentName, String componentID,  String parentID, double[][] currentPoints) 
			throws DataException, DataSecurityException
		{	
			System.out.println("SuperiorPancreaticoDuodenalArtery: " + componentID + "   " + parentID);
			
			int bodyID = 1;
			int projectID = 1;
			String vertices = "";
			
			ArrayList mySqlList= new ArrayList();
			int returnCode = 0;
			
			// We can generate the DeepBrachialArtery
			if (currentPoints == null )
			{
				double circumference = 0.00625;
				double[] startPos = {1.5, 0.25, 0.00};
				currentPoints = BioGraphics.octogonYPlane(startPos, circumference);
			}
		
			// Allocate an instruction set for building it
			BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();
			
			int numInstructions = 12;
			//BioMightOrientation bioMightOrientation = new BioMightOrientation(0.0, 0.0, 1.0, 90);
			for (int instructCount=0; instructCount<numInstructions; instructCount++)
			{
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
									
				// Place the appendage into the instruction set
				bioInstruct.setBioMightAppendage(null);
				bioInstruct.setFillAppendage(false); 
				
				if (instructCount==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.25, -0.25, 0.0);
				}
				else if (instructCount==1){			
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.45, -0.5, 0.0);			
				}
				else if (instructCount==2){
					BioMightOrientation orientation = new BioMightOrientation(0.0, -1.0, 0.0, 90.0);
		 			bioInstruct.setTransType(Constants.ROTATEOCTO);
	    			bioInstruct.setTheta(15);	
	    			bioInstruct.setPivotPoint(6);	
	     			bioInstruct.setRotateVector(0.0, 0.0, 1.0);
	     			bioInstruct.setOrientation(orientation);
				}
				else if (instructCount==3){				
					BioMightOrientation orientation = new BioMightOrientation(0.0, -1.0, 0.0, 90.0);
		 			bioInstruct.setTransType(Constants.ROTATEOCTO);
	    			bioInstruct.setTheta(45);	
	    			bioInstruct.setPivotPoint(6);	
	     			bioInstruct.setRotateVector(0.0, 0.0, 1.0);
	     			bioInstruct.setOrientation(orientation);
				}	
				else if (instructCount==4){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.02, -0.5, -0.1);
				}		
				else if (instructCount==5){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.01, -0.25, -0.13);
				}	
				else if (instructCount==6){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.1, -0.25, -0.05);
				}
				else if (instructCount==7){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.15, -0.25, -0.05);
				}	
				else if (instructCount==8){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.05, -0.25, -0.08);
				}
				else if (instructCount==9){
					BioMightOrientation orientation = new BioMightOrientation(0.0, -1.0, 0.0, 90.0);
		 			bioInstruct.setTransType(Constants.ROTATEOCTO);
	    			bioInstruct.setTheta(45);	
	    			bioInstruct.setPivotPoint(6);	
	     			bioInstruct.setRotateVector(0.0, 0.0, 1.0);
	     			bioInstruct.setOrientation(orientation);
				}	
				else if (instructCount==10){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.2, -0.25, 0.0);
				}
				else if (instructCount==11){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.05, -0.25, 0.0);
				}
				
	    		else {
	    			bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -0.5, 0.22);
	    		}
		    
	    		// Add the instruction into the instruction set
	    		bioMightInstructSet.addElement(bioInstruct);
			}
			
		
			DBUtils.generateFacedComponents(Constants.QUADRANGLE, startID, componentType, componentName, componentID, currentPoints, bioMightInstructSet);
			System.out.println("Generating the Rows for SuperiorPancreaticoDuodenalArtery: " + componentID + "   " + componentType);
				
			return returnCode;
		}
		
		 /***************************************************************************************
		 * GENERATE GASTRIC ARTERY
		 * 
		 * This generates the Gastric Artery
		 *
		 * @param key
		 * @param user
		 * @return
		 * @throws DataException
		 * @throws DataSecurityException
		 ***************************************************************************************/
		  	
		public int generateGastricArtery(String startID, String componentType, String componentName, String componentID,  String parentID, double[][] currentPoints) 
			throws DataException, DataSecurityException
		{	
			System.out.println("GastricArtery: " + componentID + "   " + parentID);
			
			int bodyID = 1;
			int projectID = 1;
			String vertices = "";
			
			ArrayList mySqlList= new ArrayList();
			int returnCode = 0;
			
			// We can generate the GastricArtery
			if (currentPoints == null )
			{
				double circumference = 0.00625;
				double[] startPos = {1.5, 0.25, 0.00};
				currentPoints = BioGraphics.octogonYPlane(startPos, circumference);
			}
		
			// Allocate an instruction set for building it
			BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();
			
			if (parentID.equals("GastricArtery:01")) 
			{
				int numInstructions = 16;
				//BioMightOrientation bioMightOrientation = new BioMightOrientation(0.0, 0.0, 1.0, 90);
				for (int instructCount=0; instructCount<numInstructions; instructCount++)
				{
					// Create a place for an instruction 
					BioMightInstruction bioInstruct = new BioMightInstruction();
										
					// Place the appendage into the instruction set
					bioInstruct.setBioMightAppendage(null);
					bioInstruct.setFillAppendage(false); 
					
					if (instructCount==0){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.0, 0.0, 0.2);
					}
					else if (instructCount==1){			
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.01, 0.05, 0.22);
					}
					else if (instructCount==2){
						BioMightOrientation orientation = new BioMightOrientation(0.0, -1.0, 0.0, 90.0);
			 			bioInstruct.setTransType(Constants.ROTATEOCTO);
		    			bioInstruct.setTheta(-45);	
		    			bioInstruct.setPivotPoint(2);	
		     			bioInstruct.setRotateVector(1.0, 0.0, 0.0);
		     			bioInstruct.setOrientation(orientation);
					}
					else if (instructCount==3){				
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.015, 0.25, 0.20);
					}
					else if (instructCount==4){				
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.05, 0.30, 0.15);
					}
					else if (instructCount==5){
						BioMightOrientation orientation = new BioMightOrientation(0.0, -1.0, 0.0, 90.0);
			 			bioInstruct.setTransType(Constants.ROTATEOCTO);
		    			bioInstruct.setTheta(-15);	
		    			bioInstruct.setPivotPoint(2);	
		     			bioInstruct.setRotateVector(1.0, 0.0, 0.0);
		     			bioInstruct.setOrientation(orientation);
					}
					else if (instructCount==6){
						BioMightOrientation orientation = new BioMightOrientation(0.0, -1.0, 0.0, 90.0);
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.1, 0.5, 0.0);
					}
					else if (instructCount==7){
						BioMightOrientation orientation = new BioMightOrientation(0.0, -1.0, 0.0, 90.0);
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.10, 0.25, 0.0);
					}	
					else if (instructCount==8){
						BioMightOrientation orientation = new BioMightOrientation(0.0, -1.0, 0.0, 90.0);
			 			bioInstruct.setTransType(Constants.ROTATEOCTO);
		    			bioInstruct.setTheta(45);	
		    			bioInstruct.setPivotPoint(6);	
		     			bioInstruct.setRotateVector(1.0, 0.0, 0.0);
		     			bioInstruct.setOrientation(orientation);
					}				
					else if (instructCount==9){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.0, 0.20, 0.35);
					}	
					else if (instructCount==10){
						BioMightOrientation orientation = new BioMightOrientation(0.0, -1.0, 0.0, 90.0);
			 			bioInstruct.setTransType(Constants.ROTATEOCTO);
		    			bioInstruct.setTheta(45);	
		    			bioInstruct.setPivotPoint(6);	
		     			bioInstruct.setRotateVector(1.0, 0.0, 0.0);
		     			bioInstruct.setOrientation(orientation);
					}			
					else if (instructCount==11){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.0, -0.25, 0.25);
					}
					else if (instructCount==12){
						BioMightOrientation orientation = new BioMightOrientation(0.0, -1.0, 0.0, 90.0);
			 			bioInstruct.setTransType(Constants.ROTATEOCTO);
		    			bioInstruct.setTheta(60);	
		    			bioInstruct.setPivotPoint(6);	
		     			bioInstruct.setRotateVector(1.0, 0.0, 0.0);
		     			bioInstruct.setOrientation(orientation);
					}		
					else if (instructCount==13){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.0, -0.5, 0.05);
					}	
					else if (instructCount==14){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.0, -0.5, -0.01);
					}
					else if (instructCount==15){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.12, -0.5, 0.0);
					}
					else {
		    			bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.15, -0.2, -0.02);
		    		}
		
					
					
		    		// Add the instruction into the instruction set
		    		bioMightInstructSet.addElement(bioInstruct);
				}
			}
			else if (parentID.equals("GastricArtery:02")) 
			{
				
				int numInstructions = 9;
				//BioMightOrientation bioMightOrientation = new BioMightOrientation(0.0, 0.0, 1.0, 90);
				for (int instructCount=0; instructCount<numInstructions; instructCount++)
				{
					// Create a place for an instruction 
					BioMightInstruction bioInstruct = new BioMightInstruction();
										
					// Place the appendage into the instruction set
					bioInstruct.setBioMightAppendage(null);
					bioInstruct.setFillAppendage(false); 
					
					if (instructCount==0){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.12, -0.25, 0.0);
					}
					else if (instructCount==1){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.20, -0.35, -0.15);
					}
					else if (instructCount==2){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.05, -0.15, -0.05);
					}
					else if (instructCount==3){
						BioMightOrientation orientation = new BioMightOrientation(0.0, -1.0, 0.0, 90.0);
			 			bioInstruct.setTransType(Constants.ROTATEOCTO);
		    			bioInstruct.setTheta(-45);	
		    			bioInstruct.setPivotPoint(4);	
		     			bioInstruct.setRotateVector(0.0, 0.0, 1.0);
		     			bioInstruct.setOrientation(orientation);
					}	
					else if (instructCount==4){
						BioMightOrientation orientation = new BioMightOrientation(0.0, -1.0, 0.0, 90.0);
			 			bioInstruct.setTransType(Constants.ROTATEOCTO);
		    			bioInstruct.setTheta(-45);	
		    			bioInstruct.setPivotPoint(4);	
		     			bioInstruct.setRotateVector(0.0, 0.0, 1.0);
		     			bioInstruct.setOrientation(orientation);
					}
					else if (instructCount==5){
						bioInstruct.setTransType(Constants.SCALE);
						bioInstruct.setScaleMatrix(0.95, 0.95, 0.95);
						bioInstruct.setTranslateMatrix(-0.5, 0.10, -0.15);
					}
					else if (instructCount==6){
						bioInstruct.setTransType(Constants.SCALE);
						bioInstruct.setScaleMatrix(0.95, 0.95, 0.95);
						bioInstruct.setTranslateMatrix(-0.25, 0.05, -0.15);
					}
					else if (instructCount==7){
						BioMightOrientation orientation = new BioMightOrientation(0.0, -1.0, 0.0, 90.0);
			 			bioInstruct.setTransType(Constants.ROTATEOCTO);
		    			bioInstruct.setTheta(-45);	
		    			bioInstruct.setPivotPoint(4);	
		     			bioInstruct.setRotateVector(0.0, 0.0, 1.0);
		     			bioInstruct.setOrientation(orientation);
					}
					else if (instructCount==8){
						bioInstruct.setTransType(Constants.SCALE);
						bioInstruct.setScaleMatrix(0.95, 0.95, 0.95);
						bioInstruct.setTranslateMatrix(-0.25, 0.40, -0.15);
					}
					
					
				
		    		else 
		    		{
		    			bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.01, 0.15, -0.27);
		    		}
			    
		    		// Add the instruction into the instruction set
		    		bioMightInstructSet.addElement(bioInstruct);
				}
			}
			
			//System.out.println("----- Updating the BioCode ---- ");
			//DBUtils.insertBioCode(componentType, parentID, startID, bioMightInstructSet); 
			
			DBUtils.generateFacedComponents(Constants.QUADRANGLE, startID, componentType, componentName, componentID, currentPoints, bioMightInstructSet);
			System.out.println("Generating the Rows for GastricArtery: " + componentID + "   " + componentType);
				
			return returnCode;
		}

		
	 /***************************************************************************************
	 * GENERATE INFERIOR MESENTERIC ARTERY
	 * 
	 * This generates the InferiorMesenteric
	 *
	 * @param key
	 * @param user
	u * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/
	  	
	public int generateInferiorMesentericArtery(String startID, String componentType, String componentName, String componentID,  String parentID, double[][] currentPoints) 
		throws DataException, DataSecurityException
	{	
		System.out.println("InferiorMesentericArtery: " + componentID + "   " + parentID);
		
		int bodyID = 1;
		int projectID = 1;
		String vertices = "";
		
		ArrayList mySqlList= new ArrayList();
		int returnCode = 0;

		if (currentPoints == null )
		{
			double circumference = 0.25;
			
			double x =  -0.3;
    		double y =  -17.0;
    		double z =  -3.0;
			
			// Create a equilateral octogon	
			currentPoints[0][0] =  x;
			currentPoints[0][1] =  y;
			currentPoints[0][2] =  z;
			
			currentPoints[1][0] =  x-circumference;
			currentPoints[1][1] =  y;
			currentPoints[1][2] =  z-circumference;
			
			currentPoints[2][0] =  x-circumference;
			currentPoints[2][1] =  y;
			currentPoints[2][2] =  z-circumference*2;
			
			currentPoints[3][0] =  x;
			currentPoints[3][1] =  y;
			currentPoints[3][2] =  z-circumference*3;
	
			currentPoints[4][0] =  x+circumference;
			currentPoints[4][1] =  y;
			currentPoints[4][2] =  z-circumference*3;
			
			currentPoints[5][0] =  x+circumference*2;
			currentPoints[5][1] =  y;
			currentPoints[5][2] =  z-circumference*2;
	
			currentPoints[6][0] =  x+circumference*2;
			currentPoints[6][1] =  y;
			currentPoints[6][2] =  z-circumference;

			currentPoints[7][0] =  x+circumference;
			currentPoints[7][1] =  y;
			currentPoints[7][2] =  z;
	}
		
		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();
		
		int nMaxSegs = 5;
		for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
		
			// Create a place for an instruction 
			BioMightInstruction bioInstruct = new BioMightInstruction();
       		         
			// The artery descends straight down through central core of body
			// splitting at the Elvis pelvis
    		if (numSegs==0){
    			bioInstruct.setTransType(2);
    			bioInstruct.setTranslateMatrix(0.0, -2.0, 0.0);
    		}
       		else if (numSegs==1){
       			bioInstruct.setTransType(2);
    			bioInstruct.setTranslateMatrix(0.0, -2.0, 0.0);
           	}
    		else if (numSegs==2){
    			bioInstruct.setTransType(2);
    			bioInstruct.setTranslateMatrix(0.0, -2.0, 0.0);
    		}
    		else if (numSegs==3){
    			bioInstruct.setTransType(2);
    			bioInstruct.setTranslateMatrix(0.0, -2.0, 0.0);
    		}
    		else if (numSegs==4){
    			bioInstruct.setTransType(2);
    			bioInstruct.setTranslateMatrix(0.0, -2.0, 0.0);
            }
    		
    		
    		else if (numSegs==5){
    			bioInstruct.setPivotPoint(3);
    			bioInstruct.setRotateVector(0.0, 0.0, 1.0);
    			bioInstruct.setTransType(3);
    			bioInstruct.setTranslateMatrix(1.35, 1.0, 1.35);	      			
        	}
    		else if (numSegs==6){
    			bioInstruct.setPivotPoint(3);
    			bioInstruct.setRotateVector(0.0, 0.0, 1.0);
    			bioInstruct.setTransType(2);
    			bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);	   	
        	}
       		else if (numSegs==7){
    			bioInstruct.setPivotPoint(3);
    			bioInstruct.setRotateVector(0.0, 0.0, 1.0);
    			bioInstruct.setTransType(2);
    			bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);	      			     			
    		}       		
       		else if (numSegs==8){
    			bioInstruct.setPivotPoint(3);
    			bioInstruct.setRotateVector(0.0, 0.0, 1.0);
    			bioInstruct.setTransType(2);
    			bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);	      			     			
    		}
    		else {
    			bioInstruct.setPivotPoint(3);
    			bioInstruct.setRotateVector(0.0, 0.0, 1.0);
    			bioInstruct.setTransType(2);
    			bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);
    		}
	    
    		// Add the instruction into the instruction set
    		bioMightInstructSet.addElement(bioInstruct);
		}
	
		//DBUtils.generateFacedComponents(Constants.QUADRANGLE, startID, componentType, componentName, componentID, currentPoints, bioMightInstructSet);
		//System.out.println("Generating the Rows for InferiorMesentericArteryEndothelium: " + componentID + "   " + componentType);
			
		return returnCode;
	}
	

	 /***************************************************************************************
	 * GENERATE INFERIOR PANCREATICO DUODENAL ARTERY
	 * 
	 * This generates the Inferior Pancreatico Duodenal Artery
	 *
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/
	  	
	public int generateInferiorPancreaticoDuodenalArtery(String startID, String componentType, String componentName, String componentID,  String parentID, double[][] currentPoints) 
		throws DataException, DataSecurityException
	{	
		System.out.println("InferiorPancreaticoDuodenalArtery: " + componentID + "   " + parentID);
		
		int bodyID = 1;
		int projectID = 1;
		String vertices = "";
		
		ArrayList mySqlList= new ArrayList();
		int returnCode = 0;
		
		// We can generate the InferiorPancreaticoDuodenalArtery alone, or when connected
		// The current points passed into the equation are assumed
		// to come from the base oral cavity
		if (currentPoints == null )
		{
			double circumference = 0.25;
			
			double x =  -0.3;
    		double y =  -17.0;
    		double z =  -3.0;
			
			// Create a equilateral octogon	
			currentPoints[0][0] =  x;
			currentPoints[0][1] =  y;
			currentPoints[0][2] =  z;
			
			currentPoints[1][0] =  x-circumference;
			currentPoints[1][1] =  y;
			currentPoints[1][2] =  z-circumference;
			
			currentPoints[2][0] =  x-circumference;
			currentPoints[2][1] =  y;
			currentPoints[2][2] =  z-circumference*2;
			
			currentPoints[3][0] =  x;
			currentPoints[3][1] =  y;
			currentPoints[3][2] =  z-circumference*3;
	
			currentPoints[4][0] =  x+circumference;
			currentPoints[4][1] =  y;
			currentPoints[4][2] =  z-circumference*3;
			
			currentPoints[5][0] =  x+circumference*2;
			currentPoints[5][1] =  y;
			currentPoints[5][2] =  z-circumference*2;
	
			currentPoints[6][0] =  x+circumference*2;
			currentPoints[6][1] =  y;
			currentPoints[6][2] =  z-circumference;

			currentPoints[7][0] =  x+circumference;
			currentPoints[7][1] =  y;
			currentPoints[7][2] =  z;
	}
		
		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();
		
		int nMaxSegs = 5;
		for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
		
			// Create a place for an instruction 
			BioMightInstruction bioInstruct = new BioMightInstruction();
       		         
			// The artery descends straight down through central core of body
			// splitting at the Elvis pelvis
    		if (numSegs==0){
    			bioInstruct.setTransType(2);
    			bioInstruct.setTranslateMatrix(0.0, -2.0, 0.0);
    		}
       		else if (numSegs==1){
       			bioInstruct.setTransType(2);
    			bioInstruct.setTranslateMatrix(0.0, -2.0, 0.0);
           	}
    		else if (numSegs==2){
    			bioInstruct.setTransType(2);
    			bioInstruct.setTranslateMatrix(0.0, -2.0, 0.0);
    		}
    		else if (numSegs==3){
    			bioInstruct.setTransType(2);
    			bioInstruct.setTranslateMatrix(0.0, -2.0, 0.0);
    		}
    		else if (numSegs==4){
    			bioInstruct.setTransType(2);
    			bioInstruct.setTranslateMatrix(0.0, -2.0, 0.0);
            }
    		
    		
    		else if (numSegs==5){
    			bioInstruct.setPivotPoint(3);
    			bioInstruct.setRotateVector(0.0, 0.0, 1.0);
    			bioInstruct.setTransType(3);
    			bioInstruct.setTranslateMatrix(1.35, 1.0, 1.35);	      			
        	}
    		else if (numSegs==6){
    			bioInstruct.setPivotPoint(3);
    			bioInstruct.setRotateVector(0.0, 0.0, 1.0);
    			bioInstruct.setTransType(2);
    			bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);	   	
        	}
       		else if (numSegs==7){
    			bioInstruct.setPivotPoint(3);
    			bioInstruct.setRotateVector(0.0, 0.0, 1.0);
    			bioInstruct.setTransType(2);
    			bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);	      			     			
    		}       		
       		else if (numSegs==8){
    			bioInstruct.setPivotPoint(3);
    			bioInstruct.setRotateVector(0.0, 0.0, 1.0);
    			bioInstruct.setTransType(2);
    			bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);	      			     			
    		}
    		else {
    			bioInstruct.setPivotPoint(3);
    			bioInstruct.setRotateVector(0.0, 0.0, 1.0);
    			bioInstruct.setTransType(2);
    			bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);
    		}
	    
    		// Add the instruction into the instruction set
    		bioMightInstructSet.addElement(bioInstruct);
		}
	
		//DBUtils.generateFacedComponents(Constants.QUADRANGLE, startID, componentType, componentName, componentID, currentPoints, bioMightInstructSet);
		//System.out.println("Generating the Rows for InferiorPancreaticoDuodenalArtery: " + componentID + "   " + componentType);
			
		return returnCode;
	}
	

	
	 /***************************************************************************************
		 * GENERATE RENAL ARTERY
		 * 
		 * This generates the Renal Artery
		 *
		 * @param key
		 * @param user
		 * @return
		 * @throws DataException
		 * @throws DataSecurityException
		 ***************************************************************************************/
		  	
		public int generateRenalArtery(String startID, String componentType, String componentName, String componentID,  String parentID, double[][] currentPoints) 
			throws DataException, DataSecurityException
		{	
			System.out.println("generateRenalArtery: " + componentID + "   " + parentID);
			
			int bodyID = 1;
			int projectID = 1;
			String vertices = "";
			
			ArrayList mySqlList= new ArrayList();
			int returnCode = 0;
			
			// We can generate the AppendicularArtery alone, or when connected
			// The current points passed into the equation are assumed
			// to come from the base oral cavity
			if (currentPoints == null )
			{
				double radius = 0.25;
				
				double[] startPos = {-2.75,-24.0, -3.0};
				currentPoints = BioGraphics.createCylinderInPlane(Constants.XPLANE, startPos, radius, 8);
				
			}
			
			// Allocate an instruction set for building it
			BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();
			
			
			if (parentID.equals("RenalArtery:01")) 
			{
				int nMaxSegs = 4;
				for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
				
					// Create a place for an instruction 
					BioMightInstruction bioInstruct = new BioMightInstruction();
		       		         
					// The artery descends straight down through central core of body
					// splitting at the Elvis pelvis
		    		if (numSegs==0){
		    			bioInstruct.setTransType(2);
		    			bioInstruct.setTranslateMatrix(0.5, 0.01, 0.0);
		    		}
		       		else if (numSegs==1){
		       			bioInstruct.setTransType(2);
		    			bioInstruct.setTranslateMatrix(0.5, 0.0, 0.0);
		           	}
		    		else if (numSegs==2){
		    			bioInstruct.setTransType(2);
		    			bioInstruct.setTranslateMatrix(0.5, -0.01, 0.0);
		    		}
		    		else if (numSegs==3){
		    			bioInstruct.setTransType(2);
		    			bioInstruct.setTranslateMatrix(0.5, 0.0, 0.0);
		    		}
		  		
		   
	
		    		else {
		    			bioInstruct.setTransType(2);
		    			bioInstruct.setTranslateMatrix(0.5, 0.0, 0.0);
		    		}
			    
		    		// Add the instruction into the instruction set
		    		bioMightInstructSet.addElement(bioInstruct);
				}
		
			}
			if (parentID.equals("RenalArtery:02")) 
			{
				int nMaxSegs = 3;
				for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
				
					// Create a place for an instruction 
					BioMightInstruction bioInstruct = new BioMightInstruction();
		       		         

		    		if (numSegs==0){
		    			bioInstruct.setTransType(2);
		    			bioInstruct.setTranslateMatrix(0.65, 0.35, 0.0);
		    		}
		       		else if (numSegs==1){
		       			bioInstruct.setTransType(2);
		    			bioInstruct.setTranslateMatrix(0.25, 0.35, 0.0);
		           	}
		    		else if (numSegs==2){
		    			bioInstruct.setTransType(2);
		    			bioInstruct.setTranslateMatrix(0.15, 0.45, 0.0);
		    		}
	
		  		
		    		else {
		    			bioInstruct.setTransType(2);
		    			bioInstruct.setTranslateMatrix(0.5, 0.0, 0.0);
		    		}
			    
		    		// Add the instruction into the instruction set
		    		bioMightInstructSet.addElement(bioInstruct);
				}
		
			}			
			
			if (parentID.equals("RenalArtery:03")) 
			{
				int nMaxSegs = 3;
				for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
				
					// Create a place for an instruction 
					BioMightInstruction bioInstruct = new BioMightInstruction();
		       		         
		    		if (numSegs==0){
		    			bioInstruct.setTransType(Constants.TRANSLATE);
		    			bioInstruct.setTranslateMatrix(0.65, -0.30, 0.0);
		    		}
		       		else if (numSegs==1){
		       			bioInstruct.setTransType(Constants.TRANSLATE);
		    			bioInstruct.setTranslateMatrix(0.25, -0.35, 0.0);
		           	}
		    		else if (numSegs==2){
		    			bioInstruct.setTransType(Constants.TRANSLATE);
		    			bioInstruct.setTranslateMatrix(0.15, -0.40, 0.0);
		    		}
		  		
		    		else {
		    			bioInstruct.setTransType(2);
		    			bioInstruct.setTranslateMatrix(0.5, 0.0, 0.0);
		    		}
			    
		    		// Add the instruction into the instruction set
		    		bioMightInstructSet.addElement(bioInstruct);
				}
		
			}
			
			// ********************
			// RIGHT SIDE
			// ********************
			else if (parentID.equals("RenalArtery:04")) 
			{
				int nMaxSegs = 4;
				for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
				
					// Create a place for an instruction 
					BioMightInstruction bioInstruct = new BioMightInstruction();
		       		         
					// The artery descends straight down through central core of body
					// splitting at the Elvis pelvis
		    		if (numSegs==0){
		    			bioInstruct.setTransType(2);
		    			bioInstruct.setTranslateMatrix(-0.5, 0.0, 0.0);
		    		}
		       		else if (numSegs==1){
		       			bioInstruct.setTransType(2);
		    			bioInstruct.setTranslateMatrix(-0.5, 0.0, 0.0);
		           	}
		    		else if (numSegs==2){
		    			bioInstruct.setTransType(2);
		    			bioInstruct.setTranslateMatrix(-0.5, 0.0, 0.0);
		    		}
		    		else if (numSegs==3){
		    			bioInstruct.setTransType(2);
		    			bioInstruct.setTranslateMatrix(-0.5, 0.00, 0.0);
		    		}
		    		

		    		else {
		    			bioInstruct.setTransType(2);
		    			bioInstruct.setTranslateMatrix(0.5, 0.0, 0.0);
		    		}
			    
		    		// Add the instruction into the instruction set
		    		bioMightInstructSet.addElement(bioInstruct);
				}
		
			}		
			
			if (parentID.equals("RenalArtery:05")) 
			{
				int nMaxSegs = 3;
				for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
				
					// Create a place for an instruction 
					BioMightInstruction bioInstruct = new BioMightInstruction();
		       		         

		    		if (numSegs==0){
		    			bioInstruct.setTransType(2);
		    			bioInstruct.setTranslateMatrix(-0.5, 0.35, 0.0);
		    		}
		       		else if (numSegs==1){
		       			bioInstruct.setTransType(2);
		    			bioInstruct.setTranslateMatrix(-0.25, 0.35, 0.0);
		           	}
		    		else if (numSegs==2){
		    			bioInstruct.setTransType(2);
		    			bioInstruct.setTranslateMatrix(-0.25, 0.45, 0.0);
		    		}
	
		  		
		    		else {
		    			bioInstruct.setTransType(2);
		    			bioInstruct.setTranslateMatrix(0.5, 0.0, 0.0);
		    		}
			    
		    		// Add the instruction into the instruction set
		    		bioMightInstructSet.addElement(bioInstruct);
				}
		
			}			
			
			if (parentID.equals("RenalArtery:06")) 
			{
				int nMaxSegs = 3;
				for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
				
					// Create a place for an instruction 
					BioMightInstruction bioInstruct = new BioMightInstruction();
		       		         
		    		if (numSegs==0){
		    			bioInstruct.setTransType(Constants.TRANSLATE);
		    			bioInstruct.setTranslateMatrix(-0.65, -0.30, 0.0);
		    		}
		       		else if (numSegs==1){
		       			bioInstruct.setTransType(Constants.TRANSLATE);
		    			bioInstruct.setTranslateMatrix(-0.25, -0.35, 0.0);
		           	}
		    		else if (numSegs==2){
		    			bioInstruct.setTransType(Constants.TRANSLATE);
		    			bioInstruct.setTranslateMatrix(-0.15, -0.40, 0.0);
		    		}
		  		
		    		else {
		    			bioInstruct.setTransType(2);
		    			bioInstruct.setTranslateMatrix(0.5, 0.0, 0.0);
		    		}
			    
		    		// Add the instruction into the instruction set
		    		bioMightInstructSet.addElement(bioInstruct);
				}
		
			}
			
			DBUtils.generateFacedComponents(Constants.QUADRANGLE, startID, componentType, componentName, componentID, currentPoints, bioMightInstructSet);
			System.out.println("Generating the Rows for RenalArteryEndothelium: " + componentID + "   " + componentType);
				
			return returnCode;
		}
		

	
	
    /***************************************************************************************
	 * GENERATE INFERIOR SUPRARENAL ARTERY
	 * 
	 * This generates the Inferior Supra Renal Artery
	 *
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/
	  	
	public int generateInferiorSupraRenalArtery(String startID, String componentType, String componentName, String componentID,  String parentID, double[][] currentPoints) 
		throws DataException, DataSecurityException
	{	
		System.out.println("generate InferiorSupraRenalArtery: " + componentID + "   " + parentID);
		
		int bodyID = 1;
		int projectID = 1;
		String vertices = "";
		
		ArrayList mySqlList= new ArrayList();
		int returnCode = 0;
		
		// We can generate the InferiorSupraRenalArtery alone, or when connected
		// The current points passed into the equation are assumed
		// to come from the base oral cavity
		if (currentPoints == null )
		{
			double radius = 0.25;
			
			double[] startPos = {-2.75,-24.0, -3.0};
			currentPoints = BioGraphics.createCylinderInPlane(Constants.XPLANE, startPos, radius, 8);
			
		}
		
		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();
		
		
		if (parentID.equals("InferiorSupraRenalArtery:01")) 
		{
			int nMaxSegs = 4;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
			
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
	       		         
				// The artery descends straight down through central core of body
				// splitting at the Elvis pelvis
	    		if (numSegs==0){
	    			bioInstruct.setTransType(2);
	    			bioInstruct.setTranslateMatrix(0.35, 0.10, 0.0);
	    		}
	       		else if (numSegs==1){
	       			bioInstruct.setTransType(2);
	    			bioInstruct.setTranslateMatrix(0.25, 0.25, 0.0);
	           	}
	    		else if (numSegs==2){
	    			bioInstruct.setTransType(2);
	    			bioInstruct.setTranslateMatrix(0.25, 0.20, 0.0);
	    		}
	    		else if (numSegs==3){
	    			bioInstruct.setTransType(2);
	    			bioInstruct.setTranslateMatrix(0.25, 0.1, 0.0);
	    		}
	   		
	    		else if (numSegs==4){
	    			bioInstruct.setTransType(2);
	    			bioInstruct.setTranslateMatrix(0.5, 0.0, 0.0);
	            }
	    		
	    	
	    		else {
	    			bioInstruct.setPivotPoint(3);
	    			bioInstruct.setRotateVector(0.0, 0.0, 1.0);
	    			bioInstruct.setTransType(2);
	    			bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);
	    		}
		    
	    		// Add the instruction into the instruction set
	    		bioMightInstructSet.addElement(bioInstruct);
			}
	
		}
		else if (parentID.equals("InferiorSupraRenalArtery:02")) 
		{
			int nMaxSegs = 4;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
			
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
	       		         
				// The artery descends straight down through central core of body
				// splitting at the Elvis pelvis
				if (numSegs==0){
	    			bioInstruct.setTransType(2);
	    			bioInstruct.setTranslateMatrix(-0.25, 0.25, 0.0);
	    		}
	       		else if (numSegs==1){
	       			bioInstruct.setTransType(2);
	    			bioInstruct.setTranslateMatrix(-0.25, 0.35, 0.0);
	           	}
	    		else if (numSegs==2){
	    			bioInstruct.setTransType(2);
	    			bioInstruct.setTranslateMatrix(-0.25, 0.20, 0.0);
	    		}
	    		else if (numSegs==3){
	    			bioInstruct.setTransType(2);
	    			bioInstruct.setTranslateMatrix(-0.25, 0.15, 0.0);
	    		}
	    		
	    		else if (numSegs==4){
	    			bioInstruct.setTransType(2);
	    			bioInstruct.setTranslateMatrix(0.5, 0.0, 0.0);
	            }
	    			
	    		else {
	    			bioInstruct.setPivotPoint(3);
	    			bioInstruct.setRotateVector(0.0, 0.0, 1.0);
	    			bioInstruct.setTransType(2);
	    			bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);
	    		}
		    
	    		// Add the instruction into the instruction set
	    		bioMightInstructSet.addElement(bioInstruct);
			}
	
		}		
		
		DBUtils.generateFacedComponents(Constants.QUADRANGLE, startID, componentType, componentName, componentID, currentPoints, bioMightInstructSet);
		System.out.println("Generating the Rows for InferiorSupraRenalArteryEndothelium: " + componentID + "   " + componentType);
			
		return returnCode;
	}
	
	 /***************************************************************************************
	 * GENERATE MIDDLE SUPRARENAL ARTERY
	 * 
	 * This generates the Appendicular Artery
	 *
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/
	  	
	public int generateMiddleSupraRenalArtery(String startID, String componentType, String componentName, String componentID,  String parentID, double[][] currentPoints) 
		throws DataException, DataSecurityException
	{	
		System.out.println("generateMiddleSupraRenalArtery: " + componentID + "   " + parentID);
		
		int bodyID = 1;
		int projectID = 1;
		String vertices = "";
		
		ArrayList mySqlList= new ArrayList();
		int returnCode = 0;
		
		// We can generate the AppendicularArtery alone, or when connected
		// The current points passed into the equation are assumed
		// to come from the base oral cavity
		if (currentPoints == null )
		{
			double radius = 0.25;
			
			double[] startPos = {-2.75,-24.0, -3.0};
			currentPoints = BioGraphics.createCylinderInPlane(Constants.XPLANE, startPos, radius, 8);
			
		}
		
		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();
		
		
		if (parentID.equals("MiddleSupraRenalArtery:01")) 
		{
			int nMaxSegs = 5;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
			
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
	       		         
				// The artery descends straight down through central core of body
				// splitting at the Elvis pelvis
	    		if (numSegs==0){
	    			bioInstruct.setTransType(2);
	    			bioInstruct.setTranslateMatrix(0.5, 0.10, 0.0);
	    		}
	       		else if (numSegs==1){
	       			bioInstruct.setTransType(2);
	    			bioInstruct.setTranslateMatrix(0.5, 0.20, 0.0);
	           	}
	    		else if (numSegs==2){
	    			bioInstruct.setTransType(2);
	    			bioInstruct.setTranslateMatrix(0.5, 0.15, 0.0);
	    		}
	    		else if (numSegs==3){
	    			bioInstruct.setTransType(2);
	    			bioInstruct.setTranslateMatrix(0.5, 0.20, 0.0);
	    		}
	    		else if (numSegs==4){
	    			bioInstruct.setTransType(2);
	    			bioInstruct.setTranslateMatrix(0.5, 0.35, 0.0);
	            }
	   		
	    		else {
	    			bioInstruct.setPivotPoint(3);
	    			bioInstruct.setRotateVector(0.0, 0.0, 1.0);
	    			bioInstruct.setTransType(2);
	    			bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);
	    		}
		    
	    		// Add the instruction into the instruction set
	    		bioMightInstructSet.addElement(bioInstruct);
			}
	
		}
		else if (parentID.equals("MiddleSupraRenalArtery:02")) 
		{
			int nMaxSegs = 5;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
			
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
	       		         
				// The artery descends straight down through central core of body
				// splitting at the Elvis pelvis
	    		if (numSegs==0){
	    			bioInstruct.setTransType(2);
	    			bioInstruct.setTranslateMatrix(-0.5, 0.20, 0.0);
	    		}
	       		else if (numSegs==1){
	       			bioInstruct.setTransType(2);
	    			bioInstruct.setTranslateMatrix(-0.5, 0.25, 0.0);
	           	}
	    		else if (numSegs==2){
	    			bioInstruct.setTransType(2);
	    			bioInstruct.setTranslateMatrix(-0.5, 0.20, 0.0);
	    		}
	    		else if (numSegs==3){
	    			bioInstruct.setTransType(2);
	    			bioInstruct.setTranslateMatrix(-0.5, 0.15, 0.0);
	    		}
	    		else if (numSegs==4){
	    			bioInstruct.setTransType(2);
	    			bioInstruct.setTranslateMatrix(-0.5, 0.35, 0.0);
	            }
	 	    		

	    		else {
	    			bioInstruct.setPivotPoint(3);
	    			bioInstruct.setRotateVector(0.0, 0.0, 1.0);
	    			bioInstruct.setTransType(2);
	    			bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);
	    		}
		    
	    		// Add the instruction into the instruction set
	    		bioMightInstructSet.addElement(bioInstruct);
			}
	
		}		
		
		DBUtils.generateFacedComponents(Constants.QUADRANGLE, startID, componentType, componentName, componentID, currentPoints, bioMightInstructSet);
		System.out.println("Generating the Rows for MiddleSupraRenalArteryEndothelium: " + componentID + "   " + componentType);
			
		return returnCode;
	}
	
	 /***************************************************************************************
	 * GENERATE SUPERIOR SUPRARENAL ARTERY
	 * 
	 * This generates the SuperiorSupraRenal Artery
	 *
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/
	  	
	public int generateSuperiorSupraRenalArtery(String startID, String componentType, String componentName, String componentID,  String parentID, double[][] currentPoints) 
		throws DataException, DataSecurityException
	{	
		System.out.println("generateSuperiorSupraRenalArtery: " + componentID + "   " + parentID);
		
		int bodyID = 1;
		int projectID = 1;
		String vertices = "";
		
		ArrayList mySqlList= new ArrayList();
		int returnCode = 0;
		
		// We can generate the AppendicularArtery alone, or when connected
		// The current points passed into the equation are assumed
		// to come from the base oral cavity
		if (currentPoints == null )
		{
			double radius = 0.25;
			
			double[] startPos = {-2.75,-24.0, -3.0};
			currentPoints = BioGraphics.createCylinderInPlane(Constants.XPLANE, startPos, radius, 8);
			
		}
		
		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();
		
		
		if (parentID.equals("SuperiorSupraRenalArtery:01")) 
		{
			int nMaxSegs = 1;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
			
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
	       		         
				// The artery descends straight down through central core of body
				// splitting at the Elvis pelvis
	    		if (numSegs==0){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(0.5, -0.025, 0.05);
	    		}
	       		else if (numSegs==1){
	       			bioInstruct.setTransType(2);
	    			bioInstruct.setTranslateMatrix(-0.01, 0.20, 0.0);
	           	}
	    		else {
	    			bioInstruct.setPivotPoint(3);
	    			bioInstruct.setRotateVector(0.0, 0.0, 1.0);
	    			bioInstruct.setTransType(2);
	    			bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);
	    		}
		    
	    		// Add the instruction into the instruction set
	    		bioMightInstructSet.addElement(bioInstruct);
			}
	
		}
		else if (parentID.equals("SuperiorSupraRenalArtery:02")) 
		{
			int nMaxSegs = 1;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
			
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
	       		         
				// The artery descends straight down through central core of body
				// splitting at the Elvis pelvis
	    		if (numSegs==0)
	    		{
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(0.35, -0.025, 0.05);
	    		}
	       		else if (numSegs==1){
	       			bioInstruct.setTransType(2);
	    			bioInstruct.setTranslateMatrix(0.1, 0.20, 0.0);
	           	}
	    		else {
	    			bioInstruct.setPivotPoint(3);
	    			bioInstruct.setRotateVector(0.0, 0.0, 1.0);
	    			bioInstruct.setTransType(2);
	    			bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);
	    		}
		    
	    		// Add the instruction into the instruction set
	    		bioMightInstructSet.addElement(bioInstruct);
			}
	
		}		
		else if (parentID.equals("SuperiorSupraRenalArtery:03")) 
		{
			int nMaxSegs = 1;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
			
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
	       		         
				// The artery descends straight down through central core of body
				// splitting at the Elvis pelvis
	    		if (numSegs==0){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(0.30, -0.05, 0.0);
	    		}
	       		else if (numSegs==1){
	       			bioInstruct.setTransType(2);
	    			bioInstruct.setTranslateMatrix(0.5, 0.20, 0.0);
	           	}
	    		else {
	    			bioInstruct.setPivotPoint(3);
	    			bioInstruct.setRotateVector(0.0, 0.0, 1.0);
	    			bioInstruct.setTransType(2);
	    			bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);
	    		}
		    
	    		// Add the instruction into the instruction set
	    		bioMightInstructSet.addElement(bioInstruct);
			}
	
		}
		else if (parentID.equals("SuperiorSupraRenalArtery:04")) 
		{
			int nMaxSegs = 1;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
			
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
	       		         
				// The artery descends straight down through central core of body
				// splitting at the Elvis pelvis
	    		if (numSegs==0){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(0.25, -0.1, 0.0);
	    		}
	       		else if (numSegs==1){
	       			bioInstruct.setTransType(2);
	    			bioInstruct.setTranslateMatrix(0.5, 0.20, 0.0);
	           	}
	    		else {
	    			bioInstruct.setPivotPoint(3);
	    			bioInstruct.setRotateVector(0.0, 0.0, 1.0);
	    			bioInstruct.setTransType(2);
	    			bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);
	    		}
		    
	    		// Add the instruction into the instruction set
	    		bioMightInstructSet.addElement(bioInstruct);
			}
	
		}
		else if (parentID.equals("SuperiorSupraRenalArtery:05")) 
		{
			int nMaxSegs = 3;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
			
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
	       		         
				// The artery descends straight down through central core of body
				// splitting at the Elvis pelvis
	    		if (numSegs==0){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(0.25, -0.1, 0.0);
	    		}
	       		else if (numSegs==1){
	       			bioInstruct.setTransType(2);
	    			bioInstruct.setTranslateMatrix(0.5, -0.25, 0.0);
	           	}
	       		else if (numSegs==2){
	       			bioInstruct.setTransType(2);
	    			bioInstruct.setTranslateMatrix(0.5, -0.35, 0.0);
	           	}

	       		
	       		else if (numSegs==3){
	       			bioInstruct.setTransType(2);
	    			bioInstruct.setTranslateMatrix(-0.5, 0.20, 0.0);
	           	}
	    		else {
	    			bioInstruct.setPivotPoint(3);
	    			bioInstruct.setRotateVector(0.0, 0.0, 1.0);
	    			bioInstruct.setTransType(2);
	    			bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);
	    		}
		    
	    		// Add the instruction into the instruction set
	    		bioMightInstructSet.addElement(bioInstruct);
			}
	
		}
		
		
		else if (parentID.equals("SuperiorSupraRenalArtery:06")) 
		{
			int nMaxSegs = 1;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
			
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
	       		         
				// The artery descends straight down through central core of body
				// splitting at the Elvis pelvis
	    		if (numSegs==0){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-0.5, -0.025, 0.05);
	    		}
	       		else if (numSegs==1){
	       			bioInstruct.setTransType(2);
	    			bioInstruct.setTranslateMatrix(-0.5, 0.20, 0.0);
	           	}
	    		else {
	    			bioInstruct.setPivotPoint(3);
	    			bioInstruct.setRotateVector(0.0, 0.0, 1.0);
	    			bioInstruct.setTransType(2);
	    			bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);
	    		}
		    
	    		// Add the instruction into the instruction set
	    		bioMightInstructSet.addElement(bioInstruct);
			}
	
		}
		else if (parentID.equals("SuperiorSupraRenalArtery:07")) 
		{
			int nMaxSegs = 1;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
			
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
	       		         
				// The artery descends straight down through central core of body
				// splitting at the Elvis pelvis
	    		if (numSegs==0){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-0.35, -0.01, 0.05);
	    		}
	       		else if (numSegs==1){
	       			bioInstruct.setTransType(2);
	    			bioInstruct.setTranslateMatrix(-0.5, 0.20, 0.0);
	           	}
	    		else {
	    			bioInstruct.setPivotPoint(3);
	    			bioInstruct.setRotateVector(0.0, 0.0, 1.0);
	    			bioInstruct.setTransType(2);
	    			bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);
	    		}
		    
	    		// Add the instruction into the instruction set
	    		bioMightInstructSet.addElement(bioInstruct);
			}
	
		}
		else if (parentID.equals("SuperiorSupraRenalArtery:08")) 
		{
			int nMaxSegs = 1;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
			
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
	       		         
				// The artery descends straight down through central core of body
				// splitting at the Elvis pelvis
	    		if (numSegs==0){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-0.35, -0.1, 0.05);
	    		}
	       		else if (numSegs==1){
	       			bioInstruct.setTransType(2);
	    			bioInstruct.setTranslateMatrix(-0.5, 0.20, 0.0);
	           	}
	    		else {
	    			bioInstruct.setPivotPoint(3);
	    			bioInstruct.setRotateVector(0.0, 0.0, 1.0);
	    			bioInstruct.setTransType(2);
	    			bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);
	    		}
		    
	    		// Add the instruction into the instruction set
	    		bioMightInstructSet.addElement(bioInstruct);
			}
	
	
		}
		else if (parentID.equals("SuperiorSupraRenalArtery:09")) 
		{
			int nMaxSegs = 3;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
			
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
	       		 
	    		if (numSegs==0){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-0.35, -0.1, 0.05);
	    		}
	       		else if (numSegs==1){
	       			bioInstruct.setTransType(2);
	    			bioInstruct.setTranslateMatrix(-0.5, -0.30, 0.0);
	           	}
	      		else if (numSegs==2){
	       			bioInstruct.setTransType(2);
	    			bioInstruct.setTranslateMatrix(-0.5, -0.40, 0.0);
	           	}
	    		
	    		else {
	    			bioInstruct.setPivotPoint(3);
	    			bioInstruct.setRotateVector(0.0, 0.0, 1.0);
	    			bioInstruct.setTransType(2);
	    			bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);
	    		}
		    
	    		// Add the instruction into the instruction set
	    		bioMightInstructSet.addElement(bioInstruct);
			}
	
	
		}
		
		DBUtils.generateFacedComponents(Constants.QUADRANGLE, startID, componentType, componentName, componentID, currentPoints, bioMightInstructSet);
		System.out.println("Generating the Rows for SuperiorSupraRenalArteryEndothelium: " + componentID + "   " + componentType);
			
		return returnCode;
	}
	
	
	 /***************************************************************************************
		 * GENERATE INFERIOR PHRENIC ARTERY
		 * 
		 * This generates the InferiorPhrenic Artery
		 *
		 * @param key
		 * @param user
		 * @return
		 * @throws DataException
		 * @throws DataSecurityException
		 ***************************************************************************************/
		  	
		public int generateInferiorPhrenicArtery(String startID, String componentType, String componentName, String componentID,  String parentID, double[][] currentPoints) 
			throws DataException, DataSecurityException
		{	
			System.out.println("generateInferiorPhrenicArtery: " + componentID + "   " + parentID);
			
			int bodyID = 1;
			int projectID = 1;
			String vertices = "";
			
			ArrayList mySqlList= new ArrayList();
			int returnCode = 0;
			
			// We can generate the AppendicularArtery alone, or when connected
			// The current points passed into the equation are assumed
			// to come from the base oral cavity
			if (currentPoints == null )
			{
				double radius = 0.25;
				
				double[] startPos = {-2.75,-24.0, -3.0};
				currentPoints = BioGraphics.createCylinderInPlane(Constants.XPLANE, startPos, radius, 8);
				
			}
			
			// Allocate an instruction set for building it
			BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();
			
			
			if (parentID.equals("InferiorPhrenicArtery:01")) 
			{
				int nMaxSegs = 9;
				for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
				
					// Create a place for an instruction 
					BioMightInstruction bioInstruct = new BioMightInstruction();
		       		         
					// The artery descends straight down through central core of body
					// splitting at the Elvis pelvis
		    		if (numSegs==0){
		    			bioInstruct.setTransType(2);
		    			bioInstruct.setTranslateMatrix(0.5, 0.05, 0.0);
		    		}
		       		else if (numSegs==1){
		       			bioInstruct.setTransType(2);
		    			bioInstruct.setTranslateMatrix(0.25, 0.10, 0.0);
		           	}
		    		else if (numSegs==2){
		    			BioMightOrientation orientation = new BioMightOrientation(0.0, -1.0, 0.0, 90.0);
			 			bioInstruct.setTransType(Constants.ROTATEOCTO);
		    			bioInstruct.setTheta(45);	
		    			bioInstruct.setPivotPoint(2);	
		     			bioInstruct.setRotateVector(0.0, 0.0, 1.0);
		     			bioInstruct.setOrientation(orientation); 			
		        	}
		    		else if (numSegs==3){
		    			BioMightOrientation orientation = new BioMightOrientation(0.0, -1.0, 0.0, 90.0);
			 			bioInstruct.setTransType(Constants.ROTATEOCTO);
		    			bioInstruct.setTheta(45);	
		    			bioInstruct.setPivotPoint(2);	
		     			bioInstruct.setRotateVector(0.0, 0.0, 1.0);
		     			bioInstruct.setOrientation(orientation); 			
		        	}
		    		else if (numSegs==4){
		    			bioInstruct.setTransType(2);
		    			bioInstruct.setTranslateMatrix(0.20, 0.45, 0.0);
		    		}
		    		else if (numSegs==5){
		    			bioInstruct.setTransType(2);
		    			bioInstruct.setTranslateMatrix(0.10, 0.45, 0.0);
		            }
		    		else if (numSegs==6){
		    			bioInstruct.setTransType(2);
		    			bioInstruct.setTranslateMatrix(0.075, 0.25, 0.0);
		            }	
		    		else if (numSegs==7){
		    			bioInstruct.setTransType(2);
		    			bioInstruct.setTranslateMatrix(0.075, 0.25, 0.0);
		            }		
		    		else if (numSegs==8){
		    			bioInstruct.setTransType(2);
		    			bioInstruct.setTranslateMatrix(0.05, 0.35, 0.0);
		            }	

		    		else {
		    			bioInstruct.setPivotPoint(3);
		    			bioInstruct.setRotateVector(0.0, 0.0, 1.0);
		    			bioInstruct.setTransType(2);
		    			bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);
		    		}
			    
		    		// Add the instruction into the instruction set
		    		bioMightInstructSet.addElement(bioInstruct);
				}
		
			}
			else if (parentID.equals("InferiorPhrenicArtery:02")) 
			{
				int nMaxSegs = 10;
				for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
				
					// Create a place for an instruction 
					BioMightInstruction bioInstruct = new BioMightInstruction();
		       		         
					// The artery descends straight down through central core of body
					// splitting at the Elvis pelvis
		    		if (numSegs==0){
		    			bioInstruct.setTransType(2);
		    			bioInstruct.setTranslateMatrix(-0.5, 0.10, 0.0);
		    		}
		       		else if (numSegs==1){
		       			bioInstruct.setTransType(2);
		    			bioInstruct.setTranslateMatrix(-0.35, 0.05, 0.0);
		           	}
		       		else if (numSegs==2){
		       			bioInstruct.setTransType(2);
		    			bioInstruct.setTranslateMatrix(-0.25, 0.1, 0.0);
		           	}
		    		else if (numSegs==3){
		    			BioMightOrientation orientation = new BioMightOrientation(0.0, -1.0, 0.0, 90.0);
			 			bioInstruct.setTransType(Constants.ROTATEOCTO);
		    			bioInstruct.setTheta(-30);	
		    			bioInstruct.setPivotPoint(2);	
		     			bioInstruct.setRotateVector(0.0, 0.0, 1.0);
		     			bioInstruct.setOrientation(orientation); 			
		        	}
		    		else if (numSegs==4){
		    			BioMightOrientation orientation = new BioMightOrientation(0.0, -1.0, 0.0, 90.0);
			 			bioInstruct.setTransType(Constants.ROTATEOCTO);
		    			bioInstruct.setTheta(-30);	
		    			bioInstruct.setPivotPoint(2);	
		     			bioInstruct.setRotateVector(0.0, 0.0, 1.0);
		     			bioInstruct.setOrientation(orientation); 			
		        	}
		    		else if (numSegs==5){
		    			bioInstruct.setTransType(2);
		    			bioInstruct.setTranslateMatrix(-0.20, 0.35, 0.0);
		    		}
		    		else if (numSegs==6){
		    			bioInstruct.setTransType(2);
		    			bioInstruct.setTranslateMatrix(-0.10, 0.35, 0.0);
		            }
		    		else if (numSegs==7){
		    			bioInstruct.setTransType(2);
		    			bioInstruct.setTranslateMatrix(-0.05, 0.25, 0.0);
		            }	
		    		else if (numSegs==8){
		    			bioInstruct.setTransType(2);
		    			bioInstruct.setTranslateMatrix(-0.05, 0.25, 0.0);
		            }		
		    		else if (numSegs==9){
		    			bioInstruct.setTransType(2);
		    			bioInstruct.setTranslateMatrix(-0.07, 0.35, 0.0);
		            }	
		    		
		    		else {
		    			bioInstruct.setPivotPoint(3);
		    			bioInstruct.setRotateVector(0.0, 0.0, 1.0);
		    			bioInstruct.setTransType(2);
		    			bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);
		    		}
			    
		    		// Add the instruction into the instruction set
		    		bioMightInstructSet.addElement(bioInstruct);
				}
		
			}		
			
			DBUtils.generateFacedComponents(Constants.QUADRANGLE, startID, componentType, componentName, componentID, currentPoints, bioMightInstructSet);
			System.out.println("Generating the Rows for InferiorPhrenicArteryEndothelium: " + componentID + "   " + componentType);
				
			return returnCode;
		}
		
	
	 /***************************************************************************************
	 * GENERATE SPLEEN CENTRAL ARTERY
	 * 
	 * This generates the Appendicular Artery
	 *
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/
	  	
	public int generateSpleenCentralArtery(String startID, String componentType, String componentName, String componentID,  String parentID, double[][] currentPoints) 
		throws DataException, DataSecurityException
	{	
		System.out.println("generateSpleenCentralArtery: " + componentID + "   " + parentID);
		
		int bodyID = 1;
		int projectID = 1;
		String vertices = "";
		
		ArrayList mySqlList= new ArrayList();
		int returnCode = 0;
		
		// We can generate the SpleenCentralArtery alone, or when connected
		// The current points passed into the equation are assumed
		// to come from the base oral cavity
		if (currentPoints == null )
		{
			double radius = 0.090;
			
			double[] startPos = {3.25, -19.20, -5.5};
			currentPoints = BioGraphics.createCylinderInPlane(Constants.YPLANE, startPos, radius, 8);
		
		}
		
		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();
		
		                     
		if (parentID.equals("SpleenCentralArtery:01")) 
		{		
			int nMaxSegs = 3;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
			
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
	      		         
				// The artery descends straight down through central core of body
				// splitting at the Elvis pelvis
		   		if (numSegs==0){
		   			bioInstruct.setTransType(Constants.SCALE);
		   			bioInstruct.setScaleMatrix(0.90, 0.90, 0.90);
		   			bioInstruct.setTranslateMatrix(0.25, 0.20, 0.0);
		   		}
		      	else if (numSegs==1){
		   			bioInstruct.setTransType(Constants.SCALE);
		   			bioInstruct.setScaleMatrix(0.80, 0.80, 0.80);
		   			bioInstruct.setTranslateMatrix(0.25, 0.25, 0.0);
		       	}
		   		else if (numSegs==2){
		   			bioInstruct.setTransType(Constants.SCALE);
		   			bioInstruct.setScaleMatrix(0.70, 0.70, 0.70);
		   			bioInstruct.setTranslateMatrix(0.20, 0.20, 0.01);
		   		}
		   		else {
		   			bioInstruct.setTransType(2);
	      			bioInstruct.setTranslateMatrix(0.15, -0.25, 0.25);
		   		}
		    
		   		// Add the instruction into the instruction set
		   		bioMightInstructSet.addElement(bioInstruct);
			}
		}
		else if (parentID.equals("SpleenCentralArtery:02")) 
		{
			int nMaxSegs = 3;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
		
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
      		         
				// The artery descends straight down through central core of body
				// splitting at the Elvis pelvis
				if (numSegs==0){
					bioInstruct.setTransType(Constants.SCALE);
					bioInstruct.setScaleMatrix(0.90, 0.90, 0.90);
					bioInstruct.setTranslateMatrix(0.12, -0.30, 0.05);
				}
	      		else if (numSegs==1){
	      			bioInstruct.setTransType(Constants.SCALE);
	      			bioInstruct.setScaleMatrix(0.80, 0.80, 0.80);
	      			bioInstruct.setTranslateMatrix(0.18, -0.40, 0.15);
	          	}
	      		else if (numSegs==2){
	      			bioInstruct.setTransType(Constants.SCALE);
	      			bioInstruct.setTranslateMatrix(-0.08, -0.25, 0.0);
	      			bioInstruct.setScaleMatrix(0.70, 0.70, 0.70);
	      		}
	    	
	   		
	      		else {
	      			bioInstruct.setTransType(2);
	      			bioInstruct.setTranslateMatrix(0.15, -0.25, 0.25);
	      		}
		    
				// Add the instruction into the instruction set
				bioMightInstructSet.addElement(bioInstruct);
			}
		}		
	
		DBUtils.generateFacedComponents(Constants.QUADRANGLE, startID, componentType, componentName, componentID, currentPoints, bioMightInstructSet);
		System.out.println("Generating the Rows for SpleenCentralArteryEndothelium: " + componentID + "   " + componentType);
			
		return returnCode;
	}
		
	
	 /***************************************************************************************
	 * GENERATE TRABECULAR ARTERY
	 * 
	 * This generates the Appendicular Artery
	 *
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/
	  	
	public int generateTrabecularArtery(String startID, String componentType, String componentName, String componentID,  String parentID, double[][] currentPoints) 
		throws DataException, DataSecurityException
	{	
		System.out.println("generateTrabecularArtery: " + componentID + "   " + parentID);
		
		int bodyID = 1;
		int projectID = 1;
		String vertices = "";
		
		ArrayList mySqlList= new ArrayList();
		int returnCode = 0;
		
		// We can generate the TrabecularArtery alone, or when connected
		// The current points passed into the equation are assumed
		// to come from the base oral cavity
		if (currentPoints == null )
		{
			double circumference = 0.25;
			
			double x =  -0.3;
    		double y =  -17.0;
    		double z =  -3.0;
			
			// Create a equilateral octogon	
			currentPoints[0][0] =  x;
			currentPoints[0][1] =  y;
			currentPoints[0][2] =  z;
			
			currentPoints[1][0] =  x-circumference;
			currentPoints[1][1] =  y;
			currentPoints[1][2] =  z-circumference;
			
			currentPoints[2][0] =  x-circumference;
			currentPoints[2][1] =  y;
			currentPoints[2][2] =  z-circumference*2;
			
			currentPoints[3][0] =  x;
			currentPoints[3][1] =  y;
			currentPoints[3][2] =  z-circumference*3;
	
			currentPoints[4][0] =  x+circumference;
			currentPoints[4][1] =  y;
			currentPoints[4][2] =  z-circumference*3;
			
			currentPoints[5][0] =  x+circumference*2;
			currentPoints[5][1] =  y;
			currentPoints[5][2] =  z-circumference*2;
	
			currentPoints[6][0] =  x+circumference*2;
			currentPoints[6][1] =  y;
			currentPoints[6][2] =  z-circumference;

			currentPoints[7][0] =  x+circumference;
			currentPoints[7][1] =  y;
			currentPoints[7][2] =  z;
	}
		
		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();
		
		int nMaxSegs = 5;
		for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
		
			// Create a place for an instruction 
			BioMightInstruction bioInstruct = new BioMightInstruction();
       		         
			// The artery descends straight down through central core of body
			// splitting at the Elvis pelvis
    		if (numSegs==0){
    			bioInstruct.setTransType(2);
    			bioInstruct.setTranslateMatrix(0.0, -2.0, 0.0);
    		}
       		else if (numSegs==1){
       			bioInstruct.setTransType(2);
    			bioInstruct.setTranslateMatrix(0.0, -2.0, 0.0);
           	}
    		else if (numSegs==2){
    			bioInstruct.setTransType(2);
    			bioInstruct.setTranslateMatrix(0.0, -2.0, 0.0);
    		}
    		else if (numSegs==3){
    			bioInstruct.setTransType(2);
    			bioInstruct.setTranslateMatrix(0.0, -2.0, 0.0);
    		}
    		else if (numSegs==4){
    			bioInstruct.setTransType(2);
    			bioInstruct.setTranslateMatrix(0.0, -2.0, 0.0);
            }
    		
    		
    		else if (numSegs==5){
    			bioInstruct.setPivotPoint(3);
    			bioInstruct.setRotateVector(0.0, 0.0, 1.0);
    			bioInstruct.setTransType(3);
    			bioInstruct.setTranslateMatrix(1.35, 1.0, 1.35);	      			
        	}
    		else if (numSegs==6){
    			bioInstruct.setPivotPoint(3);
    			bioInstruct.setRotateVector(0.0, 0.0, 1.0);
    			bioInstruct.setTransType(2);
    			bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);	   	
        	}
       		else if (numSegs==7){
    			bioInstruct.setPivotPoint(3);
    			bioInstruct.setRotateVector(0.0, 0.0, 1.0);
    			bioInstruct.setTransType(2);
    			bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);	      			     			
    		}       		
       		else if (numSegs==8){
    			bioInstruct.setPivotPoint(3);
    			bioInstruct.setRotateVector(0.0, 0.0, 1.0);
    			bioInstruct.setTransType(2);
    			bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);	      			     			
    		}
    		else {
    			bioInstruct.setPivotPoint(3);
    			bioInstruct.setRotateVector(0.0, 0.0, 1.0);
    			bioInstruct.setTransType(2);
    			bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);
    		}
	    
    		// Add the instruction into the instruction set
    		bioMightInstructSet.addElement(bioInstruct);
		}
	
		//DBUtils.generateFacedComponents(Constants.QUADRANGLE, startID, componentType, componentName, componentID, currentPoints, bioMightInstructSet);
		//System.out.println("Generating the Rows for TrabecularArteryEndothelium: " + componentID + "   " + componentType);
			
		return returnCode;
	}
	
	

	
	 /***************************************************************************************
	 * GENERATE COLIC VEIN
	 * 
	 * This generates the Colic Vein
	 *
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/
	  	
	public int generateColicVein(String startID, String componentType, String componentName, String componentID,  String parentID, double[][] currentPoints) 
		throws DataException, DataSecurityException
	{	
		System.out.println("generateColicVein: " + componentID + "   " + parentID);
		
		int bodyID = 1;
		int projectID = 1;
		String vertices = "";
		
		ArrayList mySqlList= new ArrayList();
		int returnCode = 0;
		
		// We can generate the ColicVein alone, or when connected
		// The current points passed into the equation are assumed
		// to come from the base oral cavity
		if (currentPoints == null )
		{
			double circumference = 0.25;
			
			double x =  -0.3;
   		double y =  -17.0;
   		double z =  -3.0;
			
			// Create a equilateral octogon	
			currentPoints[0][0] =  x;
			currentPoints[0][1] =  y;
			currentPoints[0][2] =  z;
			
			currentPoints[1][0] =  x-circumference;
			currentPoints[1][1] =  y;
			currentPoints[1][2] =  z-circumference;
			
			currentPoints[2][0] =  x-circumference;
			currentPoints[2][1] =  y;
			currentPoints[2][2] =  z-circumference*2;
			
			currentPoints[3][0] =  x;
			currentPoints[3][1] =  y;
			currentPoints[3][2] =  z-circumference*3;
	
			currentPoints[4][0] =  x+circumference;
			currentPoints[4][1] =  y;
			currentPoints[4][2] =  z-circumference*3;
			
			currentPoints[5][0] =  x+circumference*2;
			currentPoints[5][1] =  y;
			currentPoints[5][2] =  z-circumference*2;
	
			currentPoints[6][0] =  x+circumference*2;
			currentPoints[6][1] =  y;
			currentPoints[6][2] =  z-circumference;

			currentPoints[7][0] =  x+circumference;
			currentPoints[7][1] =  y;
			currentPoints[7][2] =  z;
	}
		
		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();
		
		int nMaxSegs = 5;
		for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
		
			// Create a place for an instruction 
			BioMightInstruction bioInstruct = new BioMightInstruction();
      		         
			// The artery descends straight down through central core of body
			// splitting at the Elvis pelvis
   		if (numSegs==0){
   			bioInstruct.setTransType(2);
   			bioInstruct.setTranslateMatrix(0.0, -2.0, 0.0);
   		}
      		else if (numSegs==1){
      			bioInstruct.setTransType(2);
   			bioInstruct.setTranslateMatrix(0.0, -2.0, 0.0);
          	}
   		else if (numSegs==2){
   			bioInstruct.setTransType(2);
   			bioInstruct.setTranslateMatrix(0.0, -2.0, 0.0);
   		}
   		else if (numSegs==3){
   			bioInstruct.setTransType(2);
   			bioInstruct.setTranslateMatrix(0.0, -2.0, 0.0);
   		}
   		else if (numSegs==4){
   			bioInstruct.setTransType(2);
   			bioInstruct.setTranslateMatrix(0.0, -2.0, 0.0);
           }
   		
   		
   		else if (numSegs==5){
   			bioInstruct.setPivotPoint(3);
   			bioInstruct.setRotateVector(0.0, 0.0, 1.0);
   			bioInstruct.setTransType(3);
   			bioInstruct.setTranslateMatrix(1.35, 1.0, 1.35);	      			
       	}
   		else if (numSegs==6){
   			bioInstruct.setPivotPoint(3);
   			bioInstruct.setRotateVector(0.0, 0.0, 1.0);
   			bioInstruct.setTransType(2);
   			bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);	   	
       	}
      		else if (numSegs==7){
   			bioInstruct.setPivotPoint(3);
   			bioInstruct.setRotateVector(0.0, 0.0, 1.0);
   			bioInstruct.setTransType(2);
   			bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);	      			     			
   		}       		
      		else if (numSegs==8){
   			bioInstruct.setPivotPoint(3);
   			bioInstruct.setRotateVector(0.0, 0.0, 1.0);
   			bioInstruct.setTransType(2);
   			bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);	      			     			
   		}
   		else {
   			bioInstruct.setPivotPoint(3);
   			bioInstruct.setRotateVector(0.0, 0.0, 1.0);
   			bioInstruct.setTransType(2);
   			bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);
   		}
	    
   		// Add the instruction into the instruction set
   		bioMightInstructSet.addElement(bioInstruct);
		}
	
		//DBUtils.generateFacedComponents(Constants.QUADRANGLE, startID, componentType, componentName, componentID, currentPoints, bioMightInstructSet);
		//System.out.println("Generating the Rows for ColicVeinEndothelium: " + componentID + "   " + componentType);
			
		return returnCode;
	}
	
	 /***************************************************************************************
	 * GENERATE CORONARY ARTERY
	 * 
	 * This method generates the Coronary Arteries
	 *
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/
	  	
	public int generateCoronaryArtery(String startID, String componentType, String componentName, String componentID,  String parentID, double[][] currentPoints) 
		throws DataException, DataSecurityException
	{	
		System.out.println("CoronaryArteryEndothelium: " + componentID + "   " + parentID);
		
		int bodyID = 1;
		int projectID = 1;
		String vertices = "";
		
		ArrayList mySqlList= new ArrayList();
		int returnCode = 0;
	
		// We can generate the CoronaryArteryalone, or when connected
		// The current points passed into the equation are assumed
		// to come from the base oral cavity
		if (currentPoints == null )
		{
			double radius = 0.25;
			double[] startPos = {-0.3, -17.0, -3.0};
			currentPoints = BioGraphics.createCylinderInPlane(Constants.YPLANE, startPos, radius, 8);
		}
		

		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();

		// Left Coronary Artery
		if (parentID.equals("CoronaryArtery:01")) 
		{	
			int nMaxSegs = 4;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
		
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
	     
				if (numSegs==0){
					bioInstruct.setTransType(2);
					bioInstruct.setTranslateMatrix(0.0, -0.50, 0.75);
				}
				else if (numSegs==1){
					bioInstruct.setTransType(2);
					bioInstruct.setTranslateMatrix(0.25, -0.50, 0.55);
				}
				else if (numSegs==2){
					bioInstruct.setTransType(2);
					bioInstruct.setTranslateMatrix(0.0, -0.250, 0.20);
				}
				else if (numSegs==3){
					bioInstruct.setTransType(2);
					bioInstruct.setTranslateMatrix(0.25, -0.25, 0.15);
				}
		
				
				else {
					bioInstruct.setPivotPoint(3);
					bioInstruct.setRotateVector(0.0, 0.0, 1.0);
					bioInstruct.setTransType(2);
					bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);
				}
								
				
	    		// Add the instruction into the instruction set
	    		bioMightInstructSet.addElement(bioInstruct);
			}
	    
		// Left Main Coronary Artery
		} else if (parentID.equals("CoronaryArtery:02")) {
			int nMaxSegs = 4;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
		
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
	     
				if (numSegs==0){
					bioInstruct.setTransType(2);
					bioInstruct.setTranslateMatrix(0.0, -0.50, 0.75);
				}
				else if (numSegs==1){
					bioInstruct.setTransType(2);
					bioInstruct.setTranslateMatrix(0.25, -0.50, 0.55);
				}
				else if (numSegs==2){
					bioInstruct.setTransType(2);
					bioInstruct.setTranslateMatrix(0.0, -0.250, 0.20);
				}
				else if (numSegs==3){
					bioInstruct.setTransType(2);
					bioInstruct.setTranslateMatrix(0.25, -0.25, 0.15);
				}
		
				else {
					bioInstruct.setPivotPoint(3);
					bioInstruct.setRotateVector(0.0, 0.0, 1.0);
					bioInstruct.setTransType(2);
					bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);
				}
				
					
					
		    	// Add the instruction into the instruction set
		    	bioMightInstructSet.addElement(bioInstruct);
			}		    
		}
		// Right CoronaryArtery
		else if (parentID.equals("CoronaryArtery:03")) {	
			int nMaxSegs = 4;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
		
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
		
				if (numSegs==0){
					bioInstruct.setTransType(2);
					bioInstruct.setTranslateMatrix(0.0, -0.50, 0.75);
				}
				else if (numSegs==1){
					bioInstruct.setTransType(2);
					bioInstruct.setTranslateMatrix(0.25, -0.50, 0.55);
				}
				else if (numSegs==2){
					bioInstruct.setTransType(2);
					bioInstruct.setTranslateMatrix(0.0, -0.250, 0.20);
				}
				else if (numSegs==3){
					bioInstruct.setTransType(2);
					bioInstruct.setTranslateMatrix(0.25, -0.25, 0.15);
				}
		
				else {
					bioInstruct.setPivotPoint(3);
					bioInstruct.setRotateVector(0.0, 0.0, 1.0);
					bioInstruct.setTransType(2);
					bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);
				}
								
					
		    	// Add the instruction into the instruction set
		    	bioMightInstructSet.addElement(bioInstruct);
			}
		    
		}
		// Diagonal Coronary Artery
		else if (parentID.equals("CoronaryArtery:04")) {	
			int nMaxSegs = 4;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
		
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
	     
				if (numSegs==0){
					bioInstruct.setTransType(2);
					bioInstruct.setTranslateMatrix(0.0, -0.50, 0.75);
				}
				else if (numSegs==1){
					bioInstruct.setTransType(2);
					bioInstruct.setTranslateMatrix(0.25, -0.50, 0.55);
				}
				else if (numSegs==2){
					bioInstruct.setTransType(2);
					bioInstruct.setTranslateMatrix(0.0, -0.250, 0.20);
				}
				else if (numSegs==3){
					bioInstruct.setTransType(2);
					bioInstruct.setTranslateMatrix(0.25, -0.25, 0.15);
				}
		
				else {
					bioInstruct.setPivotPoint(3);
					bioInstruct.setRotateVector(0.0, 0.0, 1.0);
					bioInstruct.setTransType(2);
					bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);
				}
				
									
		    	// Add the instruction into the instruction set
		    	bioMightInstructSet.addElement(bioInstruct);
			}   
		}	
		// Conus Artery
		else if (parentID.equals("CoronaryArtery:05")) {	
			int nMaxSegs = 4;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
		
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
	     
				if (numSegs==0){
					bioInstruct.setTransType(2);
					bioInstruct.setTranslateMatrix(0.0, -1.00, 0.75);
				}
				else if (numSegs==1){
					bioInstruct.setTransType(2);
					bioInstruct.setTranslateMatrix(0.25, -1.00, 0.55);
				}
				else if (numSegs==2){
					bioInstruct.setTransType(2);
					bioInstruct.setTranslateMatrix(0.0, -1.00, 0.20);
				}
				else if (numSegs==3){
					bioInstruct.setTransType(2);
					bioInstruct.setTranslateMatrix(0.25, -1.0, 0.15);
				}
				else if (numSegs==4){
					bioInstruct.setTransType(2);
					bioInstruct.setTranslateMatrix(0.25, -0.50, 0.0);
				}
				else {
					bioInstruct.setPivotPoint(3);
					bioInstruct.setRotateVector(0.0, 0.0, 1.0);
					bioInstruct.setTransType(2);
					bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);
				}
				
								
		    	// Add the instruction into the instruction set
		    	bioMightInstructSet.addElement(bioInstruct);
			}
		    
		}		
		else if (parentID.equals("CoronaryArtery:06")) {	
			int nMaxSegs = 6;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
			
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
		      
				if (numSegs==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, 0.25, 0.25);
				}
				else if (numSegs==1){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, 0.15, 0.25);
				}
				else if (numSegs==2){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, 0.20, 0.10);
				}
				else if (numSegs==3){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, 0.0, 0.20);
				}
				else if (numSegs==4){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, 0.0, 0.50);
				}
				else if (numSegs==5){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, 0.0, 0.25);
				}
				else {
					bioInstruct.setPivotPoint(3);
					bioInstruct.setRotateVector(0.0, 0.0, 1.0);
					bioInstruct.setTransType(2);
					bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);
				}
					
					
		    	// Add the instruction into the instruction set
		    	bioMightInstructSet.addElement(bioInstruct);
			}
		    
		}

		
		DBUtils.generateFacedComponents(Constants.QUADRANGLE, startID, componentType, componentName, componentID, currentPoints, bioMightInstructSet);
		System.out.println("Generated the Rows for CoronaryArteryEndothelium: " + componentID + "   parent: " + parentID + "   " + componentType);
		
		return returnCode;
	}
	
	
	
	 /***************************************************************************************
	 * GENERATE CELIAC ARTERY
	 * 
	 * This generates the Colic Vein
	 *
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/
	  	
	public int generateCeliacArtery(String startID, String componentType, String componentName, String componentID,  String parentID, double[][] currentPoints) 
		throws DataException, DataSecurityException
	{	
		System.out.println("generateCeliacArtery: " + componentID + "   " + parentID);
		
		int bodyID = 1;
		int projectID = 1;
		String vertices = "";
		
		ArrayList mySqlList= new ArrayList();
		int returnCode = 0;
		
		// We can generate the CeliacArtery alone, or when connected
		// The current points passed into the equation are assumed
		// to come from the base oral cavity
		if (currentPoints == null )
		{
			double radius = 0.25;
			double[] startPos = {0.0, -19.50, -6.0};
			double orient[] = {0, 0, -45.0};  
			currentPoints = BioGraphics.createCylinderInPlane(Constants.ZPLANE, startPos, radius, 8);
		}
		
		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();
		
		int nMaxSegs = 3;
		for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
		
			// Create a place for an instruction 
			BioMightInstruction bioInstruct = new BioMightInstruction();
      		         
   		if (numSegs==0){
   			bioInstruct.setTransType(Constants.TRANSLATE);
   			bioInstruct.setTranslateMatrix(0.0, 0.0, 0.5);
   		}
     	else if (numSegs==1){
    		bioInstruct.setTransType(Constants.SCALE);
			bioInstruct.setScaleMatrix(0.98, 0.98, 0.98);
   			bioInstruct.setTranslateMatrix(0.0, -0.05, 0.5);
        }
     	else if (numSegs==2){
     		bioInstruct.setTransType(Constants.SCALE);
			bioInstruct.setScaleMatrix(0.98, 0.98, 0.98);
   			bioInstruct.setTranslateMatrix(0.0, -0.03, 0.25);
        }
   		
   		
   		else {
   			bioInstruct.setPivotPoint(3);
   			bioInstruct.setRotateVector(0.0, 0.0, 1.0);
   			bioInstruct.setTransType(2);
   			bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);
   		}
	    
   		// Add the instruction into the instruction set
   		bioMightInstructSet.addElement(bioInstruct);
		}
	
		DBUtils.generateFacedComponents(Constants.QUADRANGLE, startID, componentType, componentName, componentID, currentPoints, bioMightInstructSet);
		//System.out.println("Generating the Rows for CeliacArteryEndothelium: " + componentID + "   " + componentType);
			
		return returnCode;
	}
	
	 /***************************************************************************************
	 * GENERATE GASTRO EPIPOLOIC VEIN
	 * 
	 * This generates the Colic Vein
	 *
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/
	  	
	public int generateGastroEpiploicVein(String startID, String componentType, String componentName, String componentID,  String parentID, double[][] currentPoints) 
		throws DataException, DataSecurityException
	{	
		System.out.println("generateGastroEpiploicVein: " + componentID + "   " + parentID);
		
		int bodyID = 1;
		int projectID = 1;
		String vertices = "";
		
		ArrayList mySqlList= new ArrayList();
		int returnCode = 0;
		
		// We can generate the ColicVein alone, or when connected
		// The current points passed into the equation are assumed
		// to come from the base oral cavity
		if (currentPoints == null )
		{
			double circumference = 0.25;
			
			double x =  -0.3;
   		double y =  -17.0;
   		double z =  -3.0;
			
			// Create a equilateral octogon	
			currentPoints[0][0] =  x;
			currentPoints[0][1] =  y;
			currentPoints[0][2] =  z;
			
			currentPoints[1][0] =  x-circumference;
			currentPoints[1][1] =  y;
			currentPoints[1][2] =  z-circumference;
			
			currentPoints[2][0] =  x-circumference;
			currentPoints[2][1] =  y;
			currentPoints[2][2] =  z-circumference*2;
			
			currentPoints[3][0] =  x;
			currentPoints[3][1] =  y;
			currentPoints[3][2] =  z-circumference*3;
	
			currentPoints[4][0] =  x+circumference;
			currentPoints[4][1] =  y;
			currentPoints[4][2] =  z-circumference*3;
			
			currentPoints[5][0] =  x+circumference*2;
			currentPoints[5][1] =  y;
			currentPoints[5][2] =  z-circumference*2;
	
			currentPoints[6][0] =  x+circumference*2;
			currentPoints[6][1] =  y;
			currentPoints[6][2] =  z-circumference;

			currentPoints[7][0] =  x+circumference;
			currentPoints[7][1] =  y;
			currentPoints[7][2] =  z;
	}
		
		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();
		
		int nMaxSegs = 5;
		for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
		
			// Create a place for an instruction 
			BioMightInstruction bioInstruct = new BioMightInstruction();
      		         
			// The artery descends straight down through central core of body
			// splitting at the Elvis pelvis
	   		if (numSegs==0){
	   			bioInstruct.setTransType(2);
	   			bioInstruct.setTranslateMatrix(0.0, -2.0, 0.0);
	   		}
	  		else if (numSegs==1){
	  			bioInstruct.setTransType(2);
			bioInstruct.setTranslateMatrix(0.0, -2.0, 0.0);
	      	}
	  		else if (numSegs==2){
	   			bioInstruct.setTransType(2);
	   			bioInstruct.setTranslateMatrix(0.0, -2.0, 0.0);
	   		}
	   		else if (numSegs==3){
	   			bioInstruct.setTransType(2);
	   			bioInstruct.setTranslateMatrix(0.0, -2.0, 0.0);
	   		}
	   		else if (numSegs==4){
	   			bioInstruct.setTransType(2);
	   			bioInstruct.setTranslateMatrix(0.0, -2.0, 0.0);
	           }
	   		
	   		
	   		else if (numSegs==5){
	   			bioInstruct.setPivotPoint(3);
	   			bioInstruct.setRotateVector(0.0, 0.0, 1.0);
	   			bioInstruct.setTransType(3);
	   			bioInstruct.setTranslateMatrix(1.35, 1.0, 1.35);	      			
	       	}
	   		else if (numSegs==6){
	   			bioInstruct.setPivotPoint(3);
	   			bioInstruct.setRotateVector(0.0, 0.0, 1.0);
	   			bioInstruct.setTransType(2);
	   			bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);	   	
	       	}
	      		else if (numSegs==7){
	   			bioInstruct.setPivotPoint(3);
	   			bioInstruct.setRotateVector(0.0, 0.0, 1.0);
	   			bioInstruct.setTransType(2);
	   			bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);	      			     			
	   		}       		
	      		else if (numSegs==8){
	   			bioInstruct.setPivotPoint(3);
	   			bioInstruct.setRotateVector(0.0, 0.0, 1.0);
	   			bioInstruct.setTransType(2);
	   			bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);	      			     			
	   		}
	   		else {
	   			bioInstruct.setPivotPoint(3);
	   			bioInstruct.setRotateVector(0.0, 0.0, 1.0);
	   			bioInstruct.setTransType(2);
	   			bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);
	   		}
		    
	   		// Add the instruction into the instruction set
	   		bioMightInstructSet.addElement(bioInstruct);
			}
		
		//DBUtils.generateFacedComponents(Constants.QUADRANGLE, startID, componentType, componentName, componentID, currentPoints, bioMightInstructSet);
		//System.out.println("Generating the Rows for ColicVeinEndothelium: " + componentID + "   " + componentType);
			
		return returnCode;
	}
	
	
	 /***************************************************************************************
	 * GENERATE TRABECULAR VEIN
	 * 
	 * This generates the Trabecular Vein
	 *
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/
	  	
	public int generateTrabecularVein(String startID, String componentType, String componentName, String componentID,  String parentID, double[][] currentPoints) 
		throws DataException, DataSecurityException
	{	
		System.out.println("generateTrabecularVein: " + componentID + "   " + parentID);
		
		int bodyID = 1;
		int projectID = 1;
		String vertices = "";
		
		ArrayList mySqlList= new ArrayList();
		int returnCode = 0;
		
		// We can generate the TrabecularVein alone, or when connected
		// The current points passed into the equation are assumed
		// to come from the base oral cavity
		if (currentPoints == null )
		{
			double circumference = 0.25;
			
			double x =  -0.3;
   		double y =  -17.0;
   		double z =  -3.0;
			
			// Create a equilateral octogon	
			currentPoints[0][0] =  x;
			currentPoints[0][1] =  y;
			currentPoints[0][2] =  z;
			
			currentPoints[1][0] =  x-circumference;
			currentPoints[1][1] =  y;
			currentPoints[1][2] =  z-circumference;
			
			currentPoints[2][0] =  x-circumference;
			currentPoints[2][1] =  y;
			currentPoints[2][2] =  z-circumference*2;
			
			currentPoints[3][0] =  x;
			currentPoints[3][1] =  y;
			currentPoints[3][2] =  z-circumference*3;
	
			currentPoints[4][0] =  x+circumference;
			currentPoints[4][1] =  y;
			currentPoints[4][2] =  z-circumference*3;
			
			currentPoints[5][0] =  x+circumference*2;
			currentPoints[5][1] =  y;
			currentPoints[5][2] =  z-circumference*2;
	
			currentPoints[6][0] =  x+circumference*2;
			currentPoints[6][1] =  y;
			currentPoints[6][2] =  z-circumference;

			currentPoints[7][0] =  x+circumference;
			currentPoints[7][1] =  y;
			currentPoints[7][2] =  z;
	}
		
		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();
		
		int nMaxSegs = 5;
		for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
		
			// Create a place for an instruction 
			BioMightInstruction bioInstruct = new BioMightInstruction();
      		         
			// The artery descends straight down through central core of body
			// splitting at the Elvis pelvis
   		if (numSegs==0){
   			bioInstruct.setTransType(2);
   			bioInstruct.setTranslateMatrix(0.0, -2.0, 0.0);
   		}
      		else if (numSegs==1){
      			bioInstruct.setTransType(2);
   			bioInstruct.setTranslateMatrix(0.0, -2.0, 0.0);
          	}
   		else if (numSegs==2){
   			bioInstruct.setTransType(2);
   			bioInstruct.setTranslateMatrix(0.0, -2.0, 0.0);
   		}
   		else if (numSegs==3){
   			bioInstruct.setTransType(2);
   			bioInstruct.setTranslateMatrix(0.0, -2.0, 0.0);
   		}
   		else if (numSegs==4){
   			bioInstruct.setTransType(2);
   			bioInstruct.setTranslateMatrix(0.0, -2.0, 0.0);
           }
   		
   		
   		else if (numSegs==5){
   			bioInstruct.setPivotPoint(3);
   			bioInstruct.setRotateVector(0.0, 0.0, 1.0);
   			bioInstruct.setTransType(3);
   			bioInstruct.setTranslateMatrix(1.35, 1.0, 1.35);	      			
       	}
   		else if (numSegs==6){
   			bioInstruct.setPivotPoint(3);
   			bioInstruct.setRotateVector(0.0, 0.0, 1.0);
   			bioInstruct.setTransType(2);
   			bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);	   	
       	}
      		else if (numSegs==7){
   			bioInstruct.setPivotPoint(3);
   			bioInstruct.setRotateVector(0.0, 0.0, 1.0);
   			bioInstruct.setTransType(2);
   			bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);	      			     			
   		}       		
      		else if (numSegs==8){
   			bioInstruct.setPivotPoint(3);
   			bioInstruct.setRotateVector(0.0, 0.0, 1.0);
   			bioInstruct.setTransType(2);
   			bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);	      			     			
   		}
   		else {
   			bioInstruct.setPivotPoint(3);
   			bioInstruct.setRotateVector(0.0, 0.0, 1.0);
   			bioInstruct.setTransType(2);
   			bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);
   		}
	    
   		// Add the instruction into the instruction set
   		bioMightInstructSet.addElement(bioInstruct);
		}
	
		//DBUtils.generateFacedComponents(Constants.QUADRANGLE, startID, componentType, componentName, componentID, currentPoints, bioMightInstructSet);
		//System.out.println("Generating the Rows for TrabecularVeinEndothelium: " + componentID + "   " + componentType);
			
		return returnCode;
	}
	

	/***************************************************************************************
	 * GENERATE COMMON ILIAC ARTERY
	 * 
	 * This generates the CommonIliac Artery. 
	 *
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/
	  	
	public int generateCommonIliacArtery(String startID, String componentType, String componentName, String componentID,  String parentID, double[][] currentPoints) 
		throws DataException, DataSecurityException
	{	
		System.out.println("EJB-generateCommonIliacArtery: " + componentID + "   " + parentID);
		
		int bodyID = 1;
		int projectID = 1;
		String vertices = "";
		
		ArrayList mySqlList= new ArrayList();
		int returnCode = 0;
	
		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();

		// Right FacialArtery - Move inward toward the front of Jaw
		if (componentID.equals("CommonIliacArtery:01") || parentID.equals("CommonIliacArtery:01")) 
		{	
			// We can generate the FacialArtery
			if (currentPoints == null )
			{
				double circumference = 0.00625;
				double[] startPos = {1.5, 0.25, 0.00};
				currentPoints = BioGraphics.octogonYPlane(startPos, circumference);
			}
			
			int nMaxSegs = 6;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
		
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
	    
				if (numSegs==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.40, -0.50, 0.15);
				}
				else if (numSegs==1){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.35, -0.50, 0.20);
				}
				else if (numSegs==2){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.30, -0.50, 0.25);
				}
				else if (numSegs==3){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.25, -0.50, 0.35);
				}
				else if (numSegs==4){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.20, -0.50, 0.0);
				}
				else if (numSegs==5){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.10, -0.50, 0.0);
				}
				
				
				else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -0.50, 0.0);
				}
				
				
	    		// Add the instruction into the instruction set
	    		bioMightInstructSet.addElement(bioInstruct);
			}    
		} 
		
		else if (componentID.equals("CommonIliacArtery:02") || parentID.equals("CommonIliacArtery:02")) {	
			int nMaxSegs = 6;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
				
				
				if (currentPoints == null )
				{
					double circumference = 0.00625;
					double[] startPos = {-1.5, 0.25, 0.00};
					currentPoints = BioGraphics.octogonYPlane(startPos, circumference);
				}
			
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
				if (numSegs==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.40, -0.50, 0.15);
				}
				else if (numSegs==1){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.35, -0.50, 0.20);
				}
				else if (numSegs==2){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.30, -0.50, 0.25);
				}
				else if (numSegs==3){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.25, -0.50, 0.35);
				}
				else if (numSegs==4){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.20, -0.50, 0.0);
				}
				else if (numSegs==5){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.10, -0.50, 0.0);
				}			
		    	// Add the instruction into the instruction set
		    	bioMightInstructSet.addElement(bioInstruct);
			}
		}
					
		DBUtils.generateFacedComponents(Constants.QUADRANGLE, startID, componentType, componentName, componentID, currentPoints, bioMightInstructSet);
		System.out.println("Generating the Rows for CommonIliacArteryEndothelium: " + componentID + "   " + componentType);

		
		return returnCode;
	}
	
	/***************************************************************************************
	 * GENERATE COMMON ILIAC VEIN
	 * 
	 * This generates the CommonIliac Vein. 
	 *
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/
	  	
	public int generateCommonIliacVein(String startID, String componentType, String componentName, String componentID,  String parentID, double[][] currentPoints) 
		throws DataException, DataSecurityException
	{	
		System.out.println("EJB-generateCommonIliacVein: " + componentID + "   " + parentID);
		
		int bodyID = 1;
		int projectID = 1;
		String vertices = "";
		
		ArrayList mySqlList= new ArrayList();
		int returnCode = 0;
	
		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();

		// Right FacialVein - Move inward toward the front of Jaw
		if (componentID.equals("CommonIliacVein:01") || parentID.equals("CommonIliacVein:01")) 
		{	
			// We can generate the FacialVein
			if (currentPoints == null )
			{
				double circumference = 0.00625;
				double[] startPos = {1.5, 0.25, 0.00};
				currentPoints = BioGraphics.octogonYPlane(startPos, circumference);
			}
			
			int nMaxSegs = 6;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
		
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
	    
				if (numSegs==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.40, -0.50, 0.15);
				}
				else if (numSegs==1){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.35, -0.50, 0.20);
				}
				else if (numSegs==2){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.30, -0.50, 0.30);
				}
				else if (numSegs==3){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.25, -0.50, 0.35);
				}
				else if (numSegs==4){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.20, -0.50, 0.0);
				}
				else if (numSegs==5){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.10, -0.50, 0.0);
				}

				
				else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -0.50, 0.0);
				}
				
				
	    		// Add the instruction into the instruction set
	    		bioMightInstructSet.addElement(bioInstruct);
			}    
		} 
		
		else if (componentID.equals("CommonIliacVein:02") || parentID.equals("CommonIliacVein:02")) {	
			int nMaxSegs = 6;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
				
				
				if (currentPoints == null )
				{
					double circumference = 0.00625;
					double[] startPos = {-1.5, 0.25, 0.00};
					currentPoints = BioGraphics.octogonYPlane(startPos, circumference);
				}
			
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
				if (numSegs==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.40, -0.50, 0.15);
				}
				else if (numSegs==1){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.35, -0.50, 0.20);
				}
				else if (numSegs==2){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.30, -0.50, 0.30);
				}
				else if (numSegs==3){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.25, -0.50, 0.35);
				}
				else if (numSegs==4){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.20, -0.50, 0.0);
				}
				else if (numSegs==5){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.10, -0.50, 0.0);
				}			
		    	// Add the instruction into the instruction set    
		    	bioMightInstructSet.addElement(bioInstruct);
			}
		}
					
		DBUtils.generateFacedComponents(Constants.QUADRANGLE, startID, componentType, componentName, componentID, currentPoints, bioMightInstructSet);
		System.out.println("Generating the Rows for CommonIliacVeinEndothelium: " + componentID + "   " + componentType);

		
		return returnCode;
	}
	
	/***************************************************************************************
	 * GENERATE EXTERNAL ILIAC ARTERY
	 * 
	 * This generates the ExternalIliac Artery. 
	 *
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/
	  	
	public int generateExternalIliacArtery(String startID, String componentType, String componentName, String componentID,  String parentID, double[][] currentPoints) 
		throws DataException, DataSecurityException
	{	
		System.out.println("ExternalIliacArtery: " + componentID + "   " + parentID);
		
		int bodyID = 1;
		int projectID = 1;
		String vertices = "";
		
		ArrayList mySqlList= new ArrayList();
		int returnCode = 0;
	
		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();

		// Right FacialArtery - Move inward toward the front of Jaw
		if (componentID.equals("ExternalIliacArtery:01") || parentID.equals("ExternalIliacArtery:01")) 
		{	
			// We can generate the FacialArtery
			if (currentPoints == null )
			{
				double circumference = 0.00625;
				double[] startPos = {1.5, 0.25, 0.00};
				currentPoints = BioGraphics.octogonYPlane(startPos, circumference);
			}
			
			int nMaxSegs = 5;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
		
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
	     
				if (numSegs==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.25, -0.50, 0.25);
				}
				else if (numSegs==1){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.20, -0.50, 0.21);
				}
				else if (numSegs==2){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.15, -0.50, 0.15);
				}
				else if (numSegs==3){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.10, -0.50, 0.20);
				}
				else if (numSegs==4){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.05, -0.50, 0.0);
				}
				else if (numSegs==5){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -0.50, 0.00);
				}
		
				else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -0.50, 0.5);
				}
				
	
				
	    		// Add the instruction into the instruction set
	    		bioMightInstructSet.addElement(bioInstruct);
			}    
		} 
		
		else if (componentID.equals("ExternalIliacArtery:02") || parentID.equals("ExternalIliacArtery:02")) {	
			int nMaxSegs = 5;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
				
				// We can generate the FacialArtery
				if (currentPoints == null )
				{
					double circumference = 0.00625;
					double[] startPos = {-1.5, 0.25, 0.00};
					currentPoints = BioGraphics.octogonYPlane(startPos, circumference);
				}
			
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
		      
			     
				if (numSegs==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.35, -0.50, 0.2);
				}
				else if (numSegs==1){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.30, -0.50, 0.21);
				}
				else if (numSegs==2){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.25, -0.50, 0.25);
				}
				else if (numSegs==3){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.30, -0.50, 0.15);
				}
				else if (numSegs==4){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.15, -0.50, 0.0);
				}
				else if (numSegs==5){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.08, -0.50, 0.0);
				}
		
				
		    	// Add the instruction into the instruction set
		    	bioMightInstructSet.addElement(bioInstruct);
			}
		}
					
		DBUtils.generateFacedComponents(Constants.QUADRANGLE, startID, componentType, componentName, componentID, currentPoints, bioMightInstructSet);
		System.out.println("Generating the Rows for ExternalIliacArteryEndothelium: " + componentID + "   " + componentType);

		
		return returnCode;
	}

	
	/***************************************************************************************
	 * GENERATE EXTERNAL ILIAC VEIN
	 * 
	 * This generates the ExternalIliac Vein 
	 *
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/
	  	
	public int generateExternalIliacVein(String startID, String componentType, String componentName, String componentID,  String parentID, double[][] currentPoints) 
		throws DataException, DataSecurityException
	{	
		System.out.println("ExternalIliacVein: " + componentID + "   " + parentID);
		
		int bodyID = 1;
		int projectID = 1;
		String vertices = "";
		
		ArrayList mySqlList= new ArrayList();
		int returnCode = 0;
	
		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();

		// Right FacialVein - Move inward toward the front of Jaw
		if (componentID.equals("ExternalIliacVein:01") || parentID.equals("ExternalIliacVein:01")) 
		{	
			// We can generate the FacialVein
			if (currentPoints == null )
			{
				double circumference = 0.00625;
				double[] startPos = {1.5, 0.25, 0.00};
				currentPoints = BioGraphics.octogonYPlane(startPos, circumference);
			}
			
			int nMaxSegs = 5;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
		
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
	     
				if (numSegs==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.25, -0.50, 0.2);
				}
				else if (numSegs==1){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.20, -0.50, 0.3);
				}
				else if (numSegs==2){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.15, -0.50, 0.25);
				}
				else if (numSegs==3){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.10, -0.50, 0.25);
				}
				else if (numSegs==4){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.05, -0.50, 0.0);
				}
				else if (numSegs==5){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -0.50, 0.0);
				}
		
				else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -0.50, 0.5);
				}
				
	
				
	    		// Add the instruction into the instruction set
	    		bioMightInstructSet.addElement(bioInstruct);
			}    
		} 
		
		else if (componentID.equals("ExternalIliacVein:02") || parentID.equals("ExternalIliacVein:02")) {	
			int nMaxSegs = 5;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
				
				// We can generate the FacialVein
				if (currentPoints == null )
				{
					double circumference = 0.00625;
					double[] startPos = {-1.5, 0.25, 0.00};
					currentPoints = BioGraphics.octogonYPlane(startPos, circumference);
				}
			
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
		      
			     
				if (numSegs==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.25, -0.50, 0.2);
				}
				else if (numSegs==1){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.20, -0.50, 0.3);
				}
				else if (numSegs==2){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.15, -0.50, 0.25);
				}
				else if (numSegs==3){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.10, -0.50, 0.25);
				}
				else if (numSegs==4){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.05, -0.50, 0.0);
				}
				else if (numSegs==5){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.0, -0.50, 0.0);
				}
		
				
		    	// Add the instruction into the instruction set
		    	bioMightInstructSet.addElement(bioInstruct);
			}
		}
					
		DBUtils.generateFacedComponents(Constants.QUADRANGLE, startID, componentType, componentName, componentID, currentPoints, bioMightInstructSet);
		System.out.println("Generating the Rows for ExternalIliacVeinEndothelium: " + componentID + "   " + componentType);

		
		return returnCode;
	}

	
	/***************************************************************************************
	 * GENERATE INTERNAL ILIAC ARTERY
	 * 
	 * This generates the InternalIliac Artery. 
	 *
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/
	  	
	public int generateInternalIliacArtery(String startID, String componentType, String componentName, String componentID,  String parentID, double[][] currentPoints) 
		throws DataException, DataSecurityException
	{	
		System.out.println("InternalIliacArtery: " + componentID + "   " + parentID);
		
		int bodyID = 1;
		int projectID = 1;
		String vertices = "";
		
		ArrayList mySqlList= new ArrayList();
		int returnCode = 0;
	
		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();

		// Right FacialArtery - Move inward toward the front of Jaw
		if (componentID.equals("InternalIliacArtery:01") || parentID.equals("InternalIliacArtery:01")) 
		{	
			// We can generate the InternalIliacArtery
			if (currentPoints == null )
			{
				double circumference = 0.00625;
				double[] startPos = {1.5, 0.25, 0.00};
				currentPoints = BioGraphics.octogonYPlane(startPos, circumference);
			}
			
			int nMaxSegs = 6;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
		
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
	     
				if (numSegs==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -0.50, 0.0);
				}
				else if (numSegs==1){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.1, -0.50, 0.0);
				}
				else if (numSegs==2){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -0.50, 0.0);
				}
				else if (numSegs==3){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.05, -0.50, 0.0);
				}
				else if (numSegs==4){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.15, -0.50, 0.0);
				}
				else if (numSegs==5){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.05, -0.50, 0.0);
				}
		
		
				
				else {
					bioInstruct.setPivotPoint(3);
					bioInstruct.setRotateVector(0.0, 0.0, 1.0);
					bioInstruct.setTransType(2);
					bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);
				}
				
				
	    		// Add the instruction into the instruction set
	    		bioMightInstructSet.addElement(bioInstruct);
			}    
		} 
		
		else if (componentID.equals("InternalIliacArtery:02") || parentID.equals("InternalIliacArtery:02")) {	
			int nMaxSegs = 6;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
				
				// We can generate the InternalIliacArtery
				if (currentPoints == null )
				{
					double circumference = 0.00625;
					double[] startPos = {-1.5, 0.25, 0.00};
					currentPoints = BioGraphics.octogonYPlane(startPos, circumference);
				}
			
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
		      

				if (numSegs==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -0.50, 0.0);
				}
				else if (numSegs==1){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.1, -0.50, 0.0);
				}
				else if (numSegs==2){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -0.50, 0.0);
				}
				else if (numSegs==3){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.05, -0.50, 0.0);
				}
				else if (numSegs==4){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.15, -0.50, 0.0);
				}
				else if (numSegs==5){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.05, -0.50, 0.0);
				}
		
				
		    	// Add the instruction into the instruction set
		    	bioMightInstructSet.addElement(bioInstruct);
			}
		}

		else if (componentID.equals("InternalIliacArtery:03") || parentID.equals("InternalIliacArtery:03")) {	
			int nMaxSegs = 2;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
				
				// We can generate the FacialArtery
				if (currentPoints == null )
				{
					double circumference = 0.00625;
					double[] startPos = {-1.5, 0.25, 0.00};
					currentPoints = BioGraphics.octogonYPlane(startPos, circumference);
				}
			
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
		      

				if (numSegs==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.1, 0.01, 0.25);
				}
				else if (numSegs==1){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.15, 0.0, 0.25);
				}
				else if (numSegs==2){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.10, 0.10, 0.50);
				}
				
	
		    	// Add the instruction into the instruction set
		    	bioMightInstructSet.addElement(bioInstruct);
			}
		}
		
		else if (componentID.equals("InternalIliacArtery:04") ||parentID.equals("InternalIliacArtery:04")) 
		{	
			// We can generate the FacialArtery
			if (currentPoints == null )
			{
				double circumference = 0.00625;
				double[] startPos = {1.5, 0.25, 0.00};
				currentPoints = BioGraphics.octogonYPlane(startPos, circumference);
			}
			
			int nMaxSegs = 8;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
		
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
	     
				if (numSegs==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, 0.20, 0.25);
				}
				else if (numSegs==1){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, 0.0, 0.20);
				}
				else if (numSegs==2){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -0.10, 0.25);
				}
				else if (numSegs==3){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.05, -0.1, 0.50);
				}
				else if (numSegs==4){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.1, -0.1, 0.50);
				}
				else if (numSegs==5){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.15, -0.10, 0.5);
				}
				else if (numSegs==6){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.08, -0.05, 0.5);
				}
				else if (numSegs==7){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.25, 0.0, 0.40);
				}
		
				
				else {
					bioInstruct.setPivotPoint(3);
					bioInstruct.setRotateVector(0.0, 0.0, 1.0);
					bioInstruct.setTransType(2);
					bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);
				}
				
				
	    		// Add the instruction into the instruction set
	    		bioMightInstructSet.addElement(bioInstruct);
			}    
		} 
		
		else if (componentID.equals("InternalIliacArtery:05") || parentID.equals("InternalIliacArtery:05")) {	
			int nMaxSegs = 11;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
				
				// We can generate the FacialArtery
				if (currentPoints == null )
				{
					double circumference = 0.00625;
					double[] startPos = {-1.5, 0.25, 0.00};
					currentPoints = BioGraphics.octogonYPlane(startPos, circumference);
				}
			
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
		      

				if (numSegs==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, 0.25, 0.20);
				}
				else if (numSegs==1){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.05, 0.25, 0.25);
				}
				else if (numSegs==2){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.1, 0.25, 0.15);
				}
				else if (numSegs==3){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.08, 0.25, 0.15);
				}
				else if (numSegs==4){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.07, 0.25, 0.18);
				}
				else if (numSegs==5){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.06, 0.25, 0.21);
				}
				else if (numSegs==6){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.1, 0.25, 0.15);
				}
				else if (numSegs==7){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.15, 0.20, 0.20);
				}
				else if (numSegs==8){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.11, 0.20, 0.15);
				}
				else if (numSegs==9){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.05, 0.25, 0.00);
				}
				else if (numSegs==10) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.05, 0.10, 0.00);
				}	
				
		    	// Add the instruction into the instruction set
		    	bioMightInstructSet.addElement(bioInstruct);
			}
		}

		else if (componentID.equals("InternalIliacArtery:06") || parentID.equals("InternalIliacArtery:06")) {	
			int nMaxSegs = 2;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
				
				// We can generate the FacialArtery
				if (currentPoints == null )
				{
					double circumference = 0.00625;
					double[] startPos = {-1.5, 0.25, 0.00};
					currentPoints = BioGraphics.octogonYPlane(startPos, circumference);
				}
			
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
		      

				if (numSegs==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.1, 0.01, 0.25);
				}
				else if (numSegs==1){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.15, 0.0, 0.25);
				}
				else if (numSegs==2){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.10, 0.10, 0.50);
				}
				
	
		    	// Add the instruction into the instruction set
		    	bioMightInstructSet.addElement(bioInstruct);
			}
		}
				
			
		DBUtils.generateFacedComponents(Constants.QUADRANGLE, startID, componentType, componentName, componentID, currentPoints, bioMightInstructSet);
		System.out.println("Generating the Rows for InternalIliacArteryEndothelium: " + componentID + "   " + componentType);

		
		return returnCode;
	}
	

	/***************************************************************************************
	 * GENERATE INTERNAL ILIAC VEIN
	 * 	  
	 * This generates the InternalIliac Vein. 
	 *
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/
	  	
	public int generateInternalIliacVein(String startID, String componentType, String componentName, String componentID,  String parentID, double[][] currentPoints) 
		throws DataException, DataSecurityException
	{	
		System.out.println("InternalIliacVein: " + componentID + "   " + parentID);
		
		int bodyID = 1;
		int projectID = 1;
		String vertices = "";
		
		ArrayList mySqlList= new ArrayList();
		int returnCode = 0;
	
		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();

		// Right FacialVein - Move inward toward the front of Jaw
		if (componentID.equals("InternalIliacVein:01") || parentID.equals("InternalIliacVein:01")) 
		{	
			// We can generate the InternalIliacVein
			if (currentPoints == null )
			{
				double circumference = 0.00625;
				double[] startPos = {1.5, 0.25, 0.00};
				currentPoints = BioGraphics.octogonYPlane(startPos, circumference);
			}
			
			int nMaxSegs = 6;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
		
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
	     
				if (numSegs==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -0.50, 0.0);
				}
				else if (numSegs==1){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.1, -0.50, 0.0);
				}
				else if (numSegs==2){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -0.50, 0.0);
				}
				else if (numSegs==3){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.05, -0.50, 0.0);
				}
				else if (numSegs==4){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.15, -0.50, 0.0);
				}
				else if (numSegs==5){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.05, -0.50, 0.0);
				}
		
		
				
				else {
					bioInstruct.setPivotPoint(3);
					bioInstruct.setRotateVector(0.0, 0.0, 1.0);
					bioInstruct.setTransType(2);
					bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);
				}
				
				
	    		// Add the instruction into the instruction set
	    		bioMightInstructSet.addElement(bioInstruct);
			}    
		} 
		
		else if (componentID.equals("InternalIliacVein:02") || parentID.equals("InternalIliacVein:02")) {	
			int nMaxSegs = 6;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
				
				// We can generate the InternalIliacVein
				if (currentPoints == null )
				{
					double circumference = 0.00625;
					double[] startPos = {-1.5, 0.25, 0.00};
					currentPoints = BioGraphics.octogonYPlane(startPos, circumference);
				}
			
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
		      

				if (numSegs==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -0.50, 0.0);
				}
				else if (numSegs==1){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.1, -0.50, 0.0);
				}
				else if (numSegs==2){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -0.50, 0.0);
				}
				else if (numSegs==3){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.05, -0.50, 0.0);
				}
				else if (numSegs==4){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.15, -0.50, 0.0);
				}
				else if (numSegs==5){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.05, -0.50, 0.0);
				}
		
				
		    	// Add the instruction into the instruction set
		    	bioMightInstructSet.addElement(bioInstruct);
			}
		}

		else if (componentID.equals("InternalIliacVein:03") || parentID.equals("InternalIliacVein:03")) {	
			int nMaxSegs = 2;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
				
				// We can generate the FacialVein
				if (currentPoints == null )
				{
					double circumference = 0.00625;
					double[] startPos = {-1.5, 0.25, 0.00};
					currentPoints = BioGraphics.octogonYPlane(startPos, circumference);
				}
			
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
		      

				if (numSegs==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.1, 0.01, 0.25);
				}
				else if (numSegs==1){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.15, 0.0, 0.25);
				}
				else if (numSegs==2){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.10, 0.10, 0.50);
				}
				
	
		    	// Add the instruction into the instruction set
		    	bioMightInstructSet.addElement(bioInstruct);
			}
		}
		
		else if (componentID.equals("InternalIliacVein:04") ||parentID.equals("InternalIliacVein:04")) 
		{	
			// We can generate the FacialVein
			if (currentPoints == null )
			{
				double circumference = 0.00625;
				double[] startPos = {1.5, 0.25, 0.00};
				currentPoints = BioGraphics.octogonYPlane(startPos, circumference);
			}
			
			int nMaxSegs = 8;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
		
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
	     
				if (numSegs==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, 0.20, 0.25);
				}
				else if (numSegs==1){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, 0.0, 0.20);
				}
				else if (numSegs==2){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -0.10, 0.25);
				}
				else if (numSegs==3){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.05, -0.1, 0.50);
				}
				else if (numSegs==4){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.1, -0.1, 0.50);
				}
				else if (numSegs==5){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.15, -0.10, 0.5);
				}
				else if (numSegs==6){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.08, -0.05, 0.5);
				}
				else if (numSegs==7){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.25, 0.0, 0.40);
				}
		
				
				else {
					bioInstruct.setPivotPoint(3);
					bioInstruct.setRotateVector(0.0, 0.0, 1.0);
					bioInstruct.setTransType(2);
					bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);
				}
				
				
	    		// Add the instruction into the instruction set
	    		bioMightInstructSet.addElement(bioInstruct);
			}    
		} 
		
		else if (componentID.equals("InternalIliacVein:05") || parentID.equals("InternalIliacVein:05")) {	
			int nMaxSegs = 11;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
				
				// We can generate the FacialVein
				if (currentPoints == null )
				{
					double circumference = 0.00625;
					double[] startPos = {-1.5, 0.25, 0.00};
					currentPoints = BioGraphics.octogonYPlane(startPos, circumference);
				}
			
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
		      

				if (numSegs==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, 0.25, 0.20);
				}
				else if (numSegs==1){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.05, 0.25, 0.25);
				}
				else if (numSegs==2){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.1, 0.25, 0.15);
				}
				else if (numSegs==3){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.08, 0.25, 0.15);
				}
				else if (numSegs==4){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.07, 0.25, 0.18);
				}
				else if (numSegs==5){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.06, 0.25, 0.21);
				}
				else if (numSegs==6){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.1, 0.25, 0.15);
				}
				else if (numSegs==7){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.15, 0.20, 0.20);
				}
				else if (numSegs==8){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.11, 0.20, 0.15);
				}
				else if (numSegs==9){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.05, 0.25, 0.00);
				}
				else if (numSegs==10) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.05, 0.10, 0.00);
				}	
				
		    	// Add the instruction into the instruction set
		    	bioMightInstructSet.addElement(bioInstruct);
			}
		}

		else if (componentID.equals("InternalIliacVein:06") || parentID.equals("InternalIliacVein:06")) {	
			int nMaxSegs = 2;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
				
				// We can generate the FacialVein
				if (currentPoints == null )
				{
					double circumference = 0.00625;
					double[] startPos = {-1.5, 0.25, 0.00};
					currentPoints = BioGraphics.octogonYPlane(startPos, circumference);
				}
			
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
		      

				if (numSegs==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.1, 0.01, 0.25);
				}
				else if (numSegs==1){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.15, 0.0, 0.25);
				}
				else if (numSegs==2){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.10, 0.10, 0.50);
				}
				
	
		    	// Add the instruction into the instruction set
		    	bioMightInstructSet.addElement(bioInstruct);
			}
		}
				
			
		DBUtils.generateFacedComponents(Constants.QUADRANGLE, startID, componentType, componentName, componentID, currentPoints, bioMightInstructSet);
		System.out.println("Generating the Rows for InternalIliacVeinEndothelium: " + componentID + "   " + componentType);

		
		return returnCode;
	}

	
	/***************************************************************************************
	 * GENERATE COMMON FEMORAL ARTERY
	 * 
	 * This generates the CommonFemoral Artery. 
	 *
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/
	  	
	public int generateCommonFemoralArtery(String startID, String componentType, String componentName, String componentID,  String parentID, double[][] currentPoints) 
		throws DataException, DataSecurityException
	{	
		System.out.println("CommonFemoralArtery: " + componentID + "   " + parentID);
		
		int bodyID = 1;
		int projectID = 1;
		String vertices = "";
		
		ArrayList mySqlList= new ArrayList();
		int returnCode = 0;
	
		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();

		// Right FacialArtery - Move inward toward the front of Jaw
		if (componentID.equals("CommonFemoralArtery:01") || parentID.equals("CommonFemoralArtery:01")) 
		{	
			if (currentPoints == null )
			{
				double circumference = 0.00625;
				double[] startPos = {1.5, 0.25, 0.00};
				currentPoints = BioGraphics.octogonYPlane(startPos, circumference);
			}
			
			int nMaxSegs = 4;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
		
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
	     
				  
				if (numSegs==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.20, -0.50, 0.0);
				}
				else if (numSegs==1){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.20, -0.50, -0.15);
				}
				else if (numSegs==2){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.23, -0.50, -0.20);
				}
				else if (numSegs==3){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.15, -0.50, -0.10);
				}
			
			
				else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -0.50, 0.0);
				}
				
	    		// Add the instruction into the instruction set
	    		bioMightInstructSet.addElement(bioInstruct);
			}    
		} 
		
		else if (componentID.equals("CommonFemoralArtery:02") || parentID.equals("CommonFemoralArtery:02")) {	
	
			// We can generate the FacialArtery
			if (currentPoints == null )
			{
				double circumference = 0.00625;
				double[] startPos = {-1.5, 0.25, 0.00};
				currentPoints = BioGraphics.octogonYPlane(startPos, circumference);
			}

			
			
			int nMaxSegs = 4;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
				
					
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
				if (numSegs==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.20, -0.50, 0.0);
				}
				else if (numSegs==1){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.20, -0.50, -0.15);
				}
				else if (numSegs==2){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.23, -0.50, -0.20);
				}
				else if (numSegs==3){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.15, -0.50, -0.10);
				}
				
				
				// Add the instruction into the instruction set
	    		bioMightInstructSet.addElement(bioInstruct);
			}
		}
		
		DBUtils.generateFacedComponents(Constants.QUADRANGLE, startID, componentType, componentName, componentID, currentPoints, bioMightInstructSet);
		System.out.println("Generating the Rows for CommonFemoralArteryEndothelium: " + componentID + "   " + componentType);

		
		return returnCode;
	}
	
	
	/***************************************************************************************
	 * GENERATE DEEP FEMORAL ARTERY
	 * 
	 * This generates the DeepFemoral Artery. 
	 *
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/
	  	
	public int generateDeepFemoralArtery(String startID, String componentType, String componentName, String componentID,  String parentID, double[][] currentPoints) 
		throws DataException, DataSecurityException
	{	
		System.out.println("generateDeepFemoralArtery: " + componentID + "   " + parentID + "   " + componentName);
		
		int bodyID = 1;
		int projectID = 1;
		String vertices = "";
		
		ArrayList mySqlList= new ArrayList();
		int returnCode = 0;
	
		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();

		// Right FacialArtery - Move inward toward the front of Jaw
		if (componentID.equals("DeepFemoralArtery:01") || parentID.equals("DeepFemoralArtery:01")) 
		{	
			// We can generate the Artery
			if (currentPoints == null )
			{
				double radius = 0.00625;
				double[] startPos = {3.65, -35.0, -6.0};
				currentPoints = BioGraphics.createCylinderInPlane(Constants.YPLANE, startPos, radius, 8);
	
			}
			
			if (componentName.equals("Main")) {
				
				int nMaxSegs = 16;
				for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
			
					// Create a place for an instruction 
					BioMightInstruction bioInstruct = new BioMightInstruction();
		     
					if (numSegs==0){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.25, -0.50, -0.25);
					}
					else if (numSegs==1){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.30, -0.50, -0.20);
					}
					else if (numSegs==2){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.20, -0.50, -0.15);
					}
					else if (numSegs==3){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.17, -0.50, -0.08);
					}
					else if (numSegs==4){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.10, -0.50, -0.02);
					}
					else if (numSegs==5){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.05, -0.50, 0.0);
					}
					else if (numSegs==6){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.02, -0.50, 0.05);
					}
					else if (numSegs==7){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.05, -0.50, 0.02);
					}
					else if (numSegs==8){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.08, -0.50, 0.05);
					}
					else if (numSegs==9){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.07, -0.50, 0.15);
					}
					else if (numSegs==10){
						bioInstruct.setTransType(Constants.SCALE);
		    			bioInstruct.setScaleMatrix(0.95, 0.95, 0.95);
						bioInstruct.setTranslateMatrix(-0.1, -0.50, 0.20);
					}
					else if (numSegs==11){
						bioInstruct.setTransType(Constants.SCALE);
		    			bioInstruct.setScaleMatrix(0.98, 0.98, 0.98);
						bioInstruct.setTranslateMatrix(0.08, -0.50, 0.20);
					}
					else if (numSegs==12){
						bioInstruct.setTransType(Constants.SCALE);
		    			bioInstruct.setScaleMatrix(0.98, 0.98, 0.98);
						bioInstruct.setTranslateMatrix(0.15, -0.50, 0.11);
					}
					else if (numSegs==13){
						bioInstruct.setTransType(Constants.SCALE);
		    			bioInstruct.setScaleMatrix(0.95, 0.95, 0.95);
						bioInstruct.setTranslateMatrix(0.20, -0.50, 0.08);
					}
					else if (numSegs==14){
						bioInstruct.setTransType(Constants.SCALE);
		    			bioInstruct.setScaleMatrix(0.95, 0.95, 0.95);
						bioInstruct.setTranslateMatrix(0.20, -0.50, 0.07);
					}
					else if (numSegs==15){
						bioInstruct.setTransType(Constants.SCALE);
		    			bioInstruct.setScaleMatrix(0.95, 0.95, 0.95);
						bioInstruct.setTranslateMatrix(0.20, -0.50, 0.05);
					}
		
					else {
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.15, 0.0, 0.5);
					}
					
					
		    		// Add the instruction into the instruction set
		    		bioMightInstructSet.addElement(bioInstruct);
				}   
			}
			else if (componentName.equals("Top")) {
				
				int nMaxSegs = 4;
				for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
			
					// Create a place for an instruction 
					BioMightInstruction bioInstruct = new BioMightInstruction();
		     
					if (numSegs==0){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.25, 0.02, 0.15);
					}
					else if (numSegs==1){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.25, 0.00, 0.15);
					}
					else if (numSegs==2){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.25, 0.0, 0.20);
					}
					else if (numSegs==3){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.25, -0.01, 0.20);
					}
				
				
					else {
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.15, 0.0, 0.5);
					}
					
					
		    		// Add the instruction into the instruction set
		    		bioMightInstructSet.addElement(bioInstruct);
				}   
			}
			else if (componentName.equals("Middle")) {
				
				int nMaxSegs = 4;
				for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
			
					// Create a place for an instruction 
					BioMightInstruction bioInstruct = new BioMightInstruction();
		     
					if (numSegs==0){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.25, -0.02, 0.1);
					}
					else if (numSegs==1){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.25, -0.01, 0.05);
					}
					else if (numSegs==2){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.25, 0.01, 0.05);
					}
					else if (numSegs==3){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.25, 0.05, 0.1);
					}
					else {
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.15, 0.0, 0.5);
					}
					
					
		    		// Add the instruction into the instruction set
		    		bioMightInstructSet.addElement(bioInstruct);
				}   
			}
			else if (componentName.equals("Bottom")) {
				
				int nMaxSegs = 3;
				for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
			
					// Create a place for an instruction 
					BioMightInstruction bioInstruct = new BioMightInstruction();
		     
					if (numSegs==0){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.25, -0.03, 0.05);
					}
					else if (numSegs==1){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.25, -0.02, 0.15);
					}
					else if (numSegs==2){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.25, 0.01, 0.10);
					}
					
					else {
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.15, 0.0, 0.5);
					}
					
					
		    		// Add the instruction into the instruction set
		    		bioMightInstructSet.addElement(bioInstruct);
				}   
			}
			
		} 
		
		else if (componentID.equals("DeepFemoralArtery:02") || parentID.equals("DeepFemoralArtery:02")) {	
			
			// We can generate the FacialArtery
			if (currentPoints == null )
			{
				double circumference = 0.00625;
				double[] startPos = {-1.5, 0.25, 0.00};
				currentPoints = BioGraphics.octogonYPlane(startPos, circumference);
			}
		
			if (componentName.equals("Main")) {
				
				int nMaxSegs = 16;
				for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
			
					// Create a place for an instruction 
					BioMightInstruction bioInstruct = new BioMightInstruction();
		     
					if (numSegs==0){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.25, -0.50, -0.25);
					}
					else if (numSegs==1){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.30, -0.50, -0.20);
					}
					else if (numSegs==2){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.20, -0.50, -0.15);
					}
					else if (numSegs==3){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.17, -0.50, -0.08);
					}
					else if (numSegs==4){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.10, -0.50, -0.02);
					}
					else if (numSegs==5){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.05, -0.50, 0.0);
					}
					else if (numSegs==6){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.02, -0.50, 0.05);
					}
					else if (numSegs==7){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.05, -0.50, 0.02);
					}
					else if (numSegs==8){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.08, -0.50, 0.05);
					}
					else if (numSegs==9){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.07, -0.50, 0.15);
					}
					else if (numSegs==10){
						bioInstruct.setTransType(Constants.SCALE);
		    			bioInstruct.setScaleMatrix(0.95, 0.95, 0.95);
						bioInstruct.setTranslateMatrix(0.1, -0.50, 0.20);
					}
					else if (numSegs==11){
						bioInstruct.setTransType(Constants.SCALE);
		    			bioInstruct.setScaleMatrix(0.98, 0.98, 0.98);
						bioInstruct.setTranslateMatrix(-0.08, -0.50, 0.20);
					}
					else if (numSegs==12){
						bioInstruct.setTransType(Constants.SCALE);
		    			bioInstruct.setScaleMatrix(0.98, 0.98, 0.98);
						bioInstruct.setTranslateMatrix(-0.15, -0.50, 0.11);
					}
					else if (numSegs==13){
						bioInstruct.setTransType(Constants.SCALE);
		    			bioInstruct.setScaleMatrix(0.95, 0.95, 0.95);
						bioInstruct.setTranslateMatrix(-0.20, -0.50, 0.08);
					}
					else if (numSegs==14){
						bioInstruct.setTransType(Constants.SCALE);
		    			bioInstruct.setScaleMatrix(0.95, 0.95, 0.95);
						bioInstruct.setTranslateMatrix(-0.20, -0.50, 0.07);
					}
					else if (numSegs==15){
						bioInstruct.setTransType(Constants.SCALE);
		    			bioInstruct.setScaleMatrix(0.95, 0.95, 0.95);
						bioInstruct.setTranslateMatrix(-0.20, -0.50, 0.05);
					}
					
					
					else {
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.15, 0.0, 0.5);
					}
				
			    	// Add the instruction into the instruction set
			    	bioMightInstructSet.addElement(bioInstruct);
				}
			}
		else if (componentName.equals("Top")) {
				
				int nMaxSegs = 4;
				for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
			
					// Create a place for an instruction 
					BioMightInstruction bioInstruct = new BioMightInstruction();
		     
					if (numSegs==0){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.25, 0.02, 0.15);
					}
					else if (numSegs==1){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.25, 0.00, 0.15);
					}
					else if (numSegs==2){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.25, 0.0, 0.20);
					}
					else if (numSegs==3){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.25, -0.01, 0.20);
					}
				
				
					else {
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.15, 0.0, 0.5);
					}
					
					
		    		// Add the instruction into the instruction set
		    		bioMightInstructSet.addElement(bioInstruct);
				}   
			}
			else if (componentName.equals("Middle")) {
				
				int nMaxSegs = 4;
				for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
			
					// Create a place for an instruction 
					BioMightInstruction bioInstruct = new BioMightInstruction();
		     
					if (numSegs==0){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.25, -0.02, 0.1);
					}
					else if (numSegs==1){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.25, -0.01, 0.05);
					}
					else if (numSegs==2){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.25, 0.01, 0.05);
					}
					else if (numSegs==3){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.25, 0.05, 0.1);
					}
					else {
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.15, 0.0, 0.5);
					}
					
					
		    		// Add the instruction into the instruction set
		    		bioMightInstructSet.addElement(bioInstruct);
				}   
			}
			else if (componentName.equals("Bottom")) {
				
				int nMaxSegs = 3;
				for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
			
					// Create a place for an instruction 
					BioMightInstruction bioInstruct = new BioMightInstruction();
		     
					if (numSegs==0){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.25, -0.03, 0.05);
					}
					else if (numSegs==1){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.25, -0.02, 0.15);
					}
					else if (numSegs==2){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.25, 0.01, 0.10);
					}
					
					else {
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.15, 0.0, 0.5);
					}
					
					
		    		// Add the instruction into the instruction set
		    		bioMightInstructSet.addElement(bioInstruct);
				}   
			}
		
		}
						
		DBUtils.generateFacedComponents(Constants.QUADRANGLE, startID, componentType, componentName, componentID, currentPoints, bioMightInstructSet);
		System.out.println("Generating the Rows for DeepFemoralArteryEndothelium: " + componentID + "   " + componentType);

		
		return returnCode;
	}
	
	/***************************************************************************************
	 * GENERATE PERONEAL ARTERY
	 * 
	 * This generates the Peroneal Artery 
	 *
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/
	  	
	public int generatePeronealArtery(String startID, String componentType, String componentName, String componentID,  String parentID, double[][] currentPoints) 
		throws DataException, DataSecurityException
	{	
		System.out.println("generatePeronealArtery() " + componentID + "   " + parentID);
		
		int bodyID = 1;
		int projectID = 1;
		String vertices = "";
		
		ArrayList mySqlList= new ArrayList();
		int returnCode = 0;
	
		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();

		// Right FacialVein - Move inward toward the front of Jaw
		if (componentID.equals("PeronealArtery:01") || parentID.equals("PeronealArtery:01")) 
		{	
			// We can generate the FacialVein
			if (currentPoints == null )
			{
				double circumference = 0.00625;
				double[] startPos = {1.5, 0.25, 0.00};
				currentPoints = BioGraphics.octogonYPlane(startPos, circumference);
			}
			
			int nMaxSegs = 20;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
		
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
	    
				if (numSegs==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.25, -0.50, 0.1);
				}
				else if (numSegs==1){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.25, -0.50, 0.1);
				}
				else if (numSegs==2){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.20, -0.50, 0.0);
				}
				else if (numSegs==3){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.15, -0.50, 0.0);
				}
				else if (numSegs==4){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.1, -0.50, 0.0);
				}
				else if (numSegs==5){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.05, -0.50, 0.0);
				}
				else if (numSegs==6){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -0.50, 0.0);
				}
				else if (numSegs==7){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -0.50, 0.0);
				}
				else if (numSegs==8){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -0.50, 0.0);
				}
				else if (numSegs==9){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -0.50, 0.0);
				}
				else if (numSegs==10){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -0.50, 0.0);
				}
				else if (numSegs==11){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -0.50, 0.0);
				}
				else if (numSegs==12){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.02, -0.50, 0.0);
				}
				else if (numSegs==13){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.02, -0.50, 0.0);
				}
				else if (numSegs==14){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.02, -0.50, 0.0);
				}
				else if (numSegs==15){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.02, -0.50, 0.0);
				}
				else if (numSegs==16){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.02, -0.50, 0.0);
				}
				else if (numSegs==17){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.02, -0.50, 0.0);
				}
				else if (numSegs==18){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.02, -0.50, 0.0);
				}
				else if (numSegs==19){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.02, -0.20, 0.0);
				}
				
	    		// Add the instruction into the instruction set
	    		bioMightInstructSet.addElement(bioInstruct);
			}    
		} 
		
		else if (componentID.equals("PeronealArtery:02") || parentID.equals("PeronealArtery:02")) {	
			int nMaxSegs = 20;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
				
				
				if (currentPoints == null )
				{
					double circumference = 0.00625;
					double[] startPos = {-1.5, 0.25, 0.00};
					currentPoints = BioGraphics.octogonYPlane(startPos, circumference);
				}
			
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
				if (numSegs==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.25, -0.50, 0.1);
				}
				else if (numSegs==1){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.25, -0.50, 0.1);
				}
				else if (numSegs==2){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.20, -0.50, 0.0);
				}
				else if (numSegs==3){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.15, -0.50, 0.0);
				}
				else if (numSegs==4){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.1, -0.50, 0.0);
				}
				else if (numSegs==5){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.05, -0.50, 0.0);
				}
				else if (numSegs==6){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -0.50, 0.0);
				}
				else if (numSegs==7){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -0.50, 0.0);
				}
				else if (numSegs==8){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -0.50, 0.0);
				}
				else if (numSegs==9){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -0.50, 0.0);
				}
				else if (numSegs==10){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -0.50, 0.0);
				}
				else if (numSegs==11){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -0.50, 0.0);
				}
				else if (numSegs==12){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.02, -0.50, 0.0);
				}
				else if (numSegs==13){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.02, -0.50, 0.0);
				}
				else if (numSegs==14){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.02, -0.50, 0.0);
				}
				else if (numSegs==15){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.02, -0.50, 0.0);
				}
				else if (numSegs==16){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.02, -0.50, 0.0);
				}
				else if (numSegs==17){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.02, -0.50, 0.0);
				}
				else if (numSegs==18){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.02, -0.50, 0.0);
				}
				else if (numSegs==19){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.02, -0.20, 0.0);
				}
				else{
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.10, -0.50, 0.0);
				}			
		    	// Add the instruction into the instruction set
		    	bioMightInstructSet.addElement(bioInstruct);
			}
		}
					
		DBUtils.generateFacedComponents(Constants.QUADRANGLE, startID, componentType, componentName, componentID, currentPoints, bioMightInstructSet);
		System.out.println("Generating the Rows for PeronealArteryEndothelium: " + componentID + "   " + componentType);

		
		return returnCode;
	}

	/***************************************************************************************
	 * GENERATE PERONEAL VEIN
	 * 
	 * This generates the Peroneal Vein 
	 *
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/
	  	
	public int generatePeronealVein(String startID, String componentType, String componentName, String componentID,  String parentID, double[][] currentPoints) 
		throws DataException, DataSecurityException
	{	
		System.out.println("generatePeronealVein() " + componentID + "   " + parentID);
		
		int bodyID = 1;
		int projectID = 1;
		String vertices = "";
		
		ArrayList mySqlList= new ArrayList();
		int returnCode = 0;
	
		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();

		// Right FacialVein - Move inward toward the front of Jaw
		if (componentID.equals("PeronealVein:01") || parentID.equals("PeronealVein:01")) 
		{	
			// We can generate the FacialVein
			if (currentPoints == null )
			{
				double circumference = 0.00625;
				double[] startPos = {1.5, 0.25, 0.00};
				currentPoints = BioGraphics.octogonYPlane(startPos, circumference);
			}
			
			int nMaxSegs = 20;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
		
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
	    
				if (numSegs==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.25, -0.50, 0.1);
				}
				else if (numSegs==1){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.25, -0.50, 0.1);
				}
				else if (numSegs==2){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.20, -0.50, 0.0);
				}
				else if (numSegs==3){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.15, -0.50, 0.0);
				}
				else if (numSegs==4){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.1, -0.50, 0.0);
				}
				else if (numSegs==5){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.05, -0.50, 0.0);
				}
				else if (numSegs==6){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -0.50, 0.0);
				}
				else if (numSegs==7){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -0.50, 0.0);
				}
				else if (numSegs==8){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -0.50, 0.0);
				}
				else if (numSegs==9){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -0.50, 0.0);
				}
				else if (numSegs==10){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -0.50, 0.0);
				}
				else if (numSegs==11){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -0.50, 0.0);
				}
				else if (numSegs==12){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.02, -0.50, 0.0);
				}
				else if (numSegs==13){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.02, -0.50, 0.0);
				}
				else if (numSegs==14){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.02, -0.50, 0.0);
				}
				else if (numSegs==15){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.02, -0.50, 0.0);
				}
				else if (numSegs==16){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.02, -0.50, 0.0);
				}
				else if (numSegs==17){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.02, -0.50, 0.0);
				}
				else if (numSegs==18){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.02, -0.50, 0.0);
				}
				else if (numSegs==19){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.02, -0.20, 0.0);
				}
				
	    		// Add the instruction into the instruction set
	    		bioMightInstructSet.addElement(bioInstruct);
			}    
		} 
		
		else if (componentID.equals("PeronealVein:02") || parentID.equals("PeronealVein:02")) {	
			int nMaxSegs = 20;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
				
				
				if (currentPoints == null )
				{
					double circumference = 0.00625;
					double[] startPos = {-1.5, 0.25, 0.00};
					currentPoints = BioGraphics.octogonYPlane(startPos, circumference);
				}
			
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
				if (numSegs==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.25, -0.50, 0.1);
				}
				else if (numSegs==1){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.25, -0.50, 0.1);
				}
				else if (numSegs==2){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.20, -0.50, 0.0);
				}
				else if (numSegs==3){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.15, -0.50, 0.0);
				}
				else if (numSegs==4){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.1, -0.50, 0.0);
				}
				else if (numSegs==5){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.05, -0.50, 0.0);
				}
				else if (numSegs==6){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -0.50, 0.0);
				}
				else if (numSegs==7){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -0.50, 0.0);
				}
				else if (numSegs==8){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -0.50, 0.0);
				}
				else if (numSegs==9){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -0.50, 0.0);
				}
				else if (numSegs==10){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -0.50, 0.0);
				}
				else if (numSegs==11){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -0.50, 0.0);
				}
				else if (numSegs==12){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.02, -0.50, 0.0);
				}
				else if (numSegs==13){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.02, -0.50, 0.0);
				}
				else if (numSegs==14){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.02, -0.50, 0.0);
				}
				else if (numSegs==15){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.02, -0.50, 0.0);
				}
				else if (numSegs==16){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.02, -0.50, 0.0);
				}
				else if (numSegs==17){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.02, -0.50, 0.0);
				}
				else if (numSegs==18){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.02, -0.50, 0.0);
				}
				else if (numSegs==19){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.02, -0.20, 0.0);
				}
				else{
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.10, -0.50, 0.0);
				}			
		    	// Add the instruction into the instruction set
		    	bioMightInstructSet.addElement(bioInstruct);
			}
		}
					
		DBUtils.generateFacedComponents(Constants.QUADRANGLE, startID, componentType, componentName, componentID, currentPoints, bioMightInstructSet);
		System.out.println("Generating the Rows for PeronealVeinEndothelium: " + componentID + "   " + componentType);

		
		return returnCode;
	}

	/***************************************************************************************
	 * GENERATE POPLITEAL ARTERY
	 * 
	 * This generates the Popliteal Artery. 
	 *
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/
	  	
	public int generatePoplitealArtery(String startID, String componentType, String componentName, String componentID,  String parentID, double[][] currentPoints) 
		throws DataException, DataSecurityException
	{	
		System.out.println("PoplitealArtery: " + componentID + "   " + parentID);
		
		int bodyID = 1;
		int projectID = 1;
		String vertices = "";
		
		ArrayList mySqlList= new ArrayList();
		int returnCode = 0;
	
		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();

		// Right FacialArtery - Move inward toward the front of Jaw
		if (componentID.equals("PoplitealArtery:01") || parentID.equals("PoplitealArtery:01")) 
		{	
			// We can generate the FacialArtery
			if (currentPoints == null )
			{
				double circumference = 0.00625;
				double[] startPos = {1.5, 0.25, 0.00};
				currentPoints = BioGraphics.octogonYPlane(startPos, circumference);
			}
			
			int nMaxSegs = 4;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
		
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
	    
				if (numSegs==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.05, -0.50, -0.15);
				}
				else if (numSegs==1){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.02, -0.50, -0.10);
				}
				else if (numSegs==2){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.01, -0.50, -0.15);
				}
				else if (numSegs==3){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.02, -0.50, -0.08);
				}
	

				
				else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -0.50, 0.0);
				}
				
				
	    		// Add the instruction into the instruction set
	    		bioMightInstructSet.addElement(bioInstruct);
			}    
		} 
		
		else if (componentID.equals("PoplitealArtery:02") || parentID.equals("PoplitealArtery:02")) {	
			
			if (currentPoints == null )
			{
				double circumference = 0.00625;
				double[] startPos = {-1.5, 0.25, 0.00};
				currentPoints = BioGraphics.octogonYPlane(startPos, circumference);
			}
			
			int nMaxSegs = 4;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
				
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
				if (numSegs==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.05, -0.50, -0.15);
				}
				else if (numSegs==1){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.02, -0.50, -0.10);
				}
				else if (numSegs==2){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.03, -0.50, -0.15);
				}
				else if (numSegs==3){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.01, -0.50, -0.08);
				}
		
				
		    	// Add the instruction into the instruction set
		    	bioMightInstructSet.addElement(bioInstruct);
			}
		}
		
		else if (componentID.equals("PoplitealArtery:03") || parentID.equals("PoplitealArtery:03")) {	
			int nMaxSegs = 6;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
				
				
				if (currentPoints == null )
				{
					double circumference = 0.00625;
					double[] startPos = {-1.5, 0.25, 0.00};
					currentPoints = BioGraphics.octogonYPlane(startPos, circumference);
				}
			
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
				if (numSegs==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.03, -0.50, -0.1);
				}
				else if (numSegs==1){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.03, -0.50, -0.08);
				}
				else if (numSegs==2){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.04, -0.50, -0.07);
				}
				else if (numSegs==3){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.04, -0.50, -0.06);
				}
				else if (numSegs==4){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.05, -0.50, -0.05);
				}
				else if (numSegs==5){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -0.50, -0.03);
				}
				
		    	// Add the instruction into the instruction set
		    	bioMightInstructSet.addElement(bioInstruct);
			}
		}
		
		else if (componentID.equals("PoplitealArtery:04") || parentID.equals("PoplitealArtery:04")) {	
			int nMaxSegs = 6;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
				
				
				if (currentPoints == null )
				{
					double circumference = 0.00625;
					double[] startPos = {-1.5, 0.25, 0.00};
					currentPoints = BioGraphics.octogonYPlane(startPos, circumference);
				}
			
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
				if (numSegs==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.03, -0.50, -0.1);
				}
				else if (numSegs==1){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.03, -0.50, -0.08);
				}
				else if (numSegs==2){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.04, -0.50, -0.07);
				}
				else if (numSegs==3){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.04, -0.50, -0.06);
				}
				else if (numSegs==4){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.05, -0.50, -0.03);
				}
				else if (numSegs==5){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -0.50, 0.0);
				}
				
		    	// Add the instruction into the instruction set
		    	bioMightInstructSet.addElement(bioInstruct);
			}
		}
					
		DBUtils.generateFacedComponents(Constants.QUADRANGLE, startID, componentType, componentName, componentID, currentPoints, bioMightInstructSet);
		System.out.println("Generating the Rows for PoplitealArteryEndothelium: " + componentID + "   " + componentType);

		
		return returnCode;
	}
	
	
	/***************************************************************************************
	 * GENERATE POPLITEAL ARTERY
	 * 
	 * This generates the Popliteal Artery. 
	 *
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/
	  	
	public int generatePoplitealVein(String startID, String componentType, String componentName, String componentID,  String parentID, double[][] currentPoints) 
		throws DataException, DataSecurityException
	{	
		System.out.println("PoplitealVein: " + componentID + "   " + parentID);
		
		int bodyID = 1;
		int projectID = 1;
		String vertices = "";
		
		ArrayList mySqlList= new ArrayList();
		int returnCode = 0;
	
		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();

		// Right FacialVein - Move inward toward the front of Jaw
		if (componentID.equals("PoplitealVein:01") || parentID.equals("PoplitealVein:01")) 
		{	
			// We can generate the FacialVein
			if (currentPoints == null )
			{
				double circumference = 0.00625;
				double[] startPos = {1.5, 0.25, 0.00};
				currentPoints = BioGraphics.octogonYPlane(startPos, circumference);
			}
			
			int nMaxSegs = 6;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
		
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
	    
				if (numSegs==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.40, -0.50, 0.0);
				}
				else if (numSegs==1){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.35, -0.50, 0.0);
				}
				else if (numSegs==2){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.30, -0.50, 0.0);
				}
				else if (numSegs==3){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.25, -0.50, 0.0);
				}
				else if (numSegs==4){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.20, -0.50, 0.0);
				}
				else if (numSegs==5){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.10, -0.50, 0.0);
				}

				
				else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -0.50, 0.0);
				}
				
				
	    		// Add the instruction into the instruction set
	    		bioMightInstructSet.addElement(bioInstruct);
			}    
		} 
		
		else if (componentID.equals("PoplitealVein:02") || parentID.equals("PoplitealVein:02")) {	
			int nMaxSegs = 6;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
				
				
				if (currentPoints == null )
				{
					double circumference = 0.00625;
					double[] startPos = {-1.5, 0.25, 0.00};
					currentPoints = BioGraphics.octogonYPlane(startPos, circumference);
				}
			
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
				if (numSegs==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.40, -0.50, 0.0);
				}
				else if (numSegs==1){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.35, -0.50, 0.0);
				}
				else if (numSegs==2){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.30, -0.50, 0.0);
				}
				else if (numSegs==3){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.25, -0.50, 0.0);
				}
				else if (numSegs==4){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.20, -0.50, 0.0);
				}
				else if (numSegs==5){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.10, -0.50, 0.0);
				}			
		    	// Add the instruction into the instruction set
		    	bioMightInstructSet.addElement(bioInstruct);
			}
		}
					
		DBUtils.generateFacedComponents(Constants.QUADRANGLE, startID, componentType, componentName, componentID, currentPoints, bioMightInstructSet);
		System.out.println("Generating the Rows for PoplitealVeinEndothelium: " + componentID + "   " + componentType);

		
		return returnCode;
	}
	
	
	/***************************************************************************************
	 * GENERATE SMALL SAPHENUS VEIN
	 * 
	 * This generates the SmallSaphenousVein 
	 *
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/
	  	
	public int generateSmallSaphenousVein(String startID, String componentType, String componentName, String componentID,  String parentID, double[][] currentPoints) 
		throws DataException, DataSecurityException
	{	
		System.out.println("generateSmallSaphenousVein: " + componentID + "   " + parentID + "   " + componentName);
		
		int bodyID = 1;
		int projectID = 1;
		String vertices = "";
		
		ArrayList mySqlList= new ArrayList();
		int returnCode = 0;
	
		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();

		// Right FacialArtery - Move inward toward the front of Jaw
		if (componentID.equals("SmallSaphenousVein:01") || parentID.equals("SmallSaphenousVein:01")) 
		{	
			// We can generate the Artery
			if (currentPoints == null )
			{
				double radius = 0.00625;
				double[] startPos = {3.65, -35.0, -6.0};
				currentPoints = BioGraphics.createCylinderInPlane(Constants.YPLANE, startPos, radius, 8);
	
			}
			
			if (componentName.equals("Main")) {
				
				int nMaxSegs = 12;
				for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
			
					// Create a place for an instruction 
					BioMightInstruction bioInstruct = new BioMightInstruction();
		     
					if (numSegs==0){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.0, -1.00, 0.0);
					}
					else if (numSegs==1){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.0, -1.00, 0.0);
					}
					else if (numSegs==2){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.0, -1.00, 0.0);
					}
					else if (numSegs==3){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.02, -1.00, 0.0);
					}
					else if (numSegs==4){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.01, -1.00, 0.0);
					}
					else if (numSegs==5){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.0, -1.00, 0.0);
					}
					else if (numSegs==6){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.15, -1.00, 0.0);
					}
					else if (numSegs==7){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.1, -1.00, 0.0);
					}
					else if (numSegs==8){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.03, -1.00, 0.0);
					}
					else if (numSegs==9){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.10, -1.00, 0.0);
					}
					else if (numSegs==10){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.17, -1.00, 0.0);
					}
					else if (numSegs==11){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.05, -1.00, 0.0);
					}
					
					
					else if (numSegs==12){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.0, -1.00, 0.0);
					}
					else {
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.15, 0.0, 0.5);
					}
					
					
		    		// Add the instruction into the instruction set
		    		bioMightInstructSet.addElement(bioInstruct);
				}   
			}
			else if (componentName.equals("Top")) {
				
				int nMaxSegs = 3;
				for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
			
					// Create a place for an instruction 
					BioMightInstruction bioInstruct = new BioMightInstruction();
		     
					if (numSegs==0){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.25, -0.15, 0.0);
					}
					else if (numSegs==1){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.25, -0.20, 0.0);
					}
					else if (numSegs==2){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.25, 0.0, 0.0);
					}
				
				
					else {
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.15, 0.0, 0.5);
					}
					
					
		    		// Add the instruction into the instruction set
		    		bioMightInstructSet.addElement(bioInstruct);
				}   
			}
			else if (componentName.equals("Middle")) {
				
				int nMaxSegs = 4;
				for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
			
					// Create a place for an instruction 
					BioMightInstruction bioInstruct = new BioMightInstruction();
		     
					if (numSegs==0){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.25, -0.15, 0.0);
					}
					else if (numSegs==1){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.25, -0.09, 0.0);
					}
					else if (numSegs==2){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.25, 0.0, 0.0);
					}
					else if (numSegs==3){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.25, 0.05, 0.0);
					}
					else {
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.15, 0.0, 0.5);
					}
					
					
		    		// Add the instruction into the instruction set
		    		bioMightInstructSet.addElement(bioInstruct);
				}   
			}
			else if (componentName.equals("Bottom")) {
				
				int nMaxSegs = 3;
				for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
			
					// Create a place for an instruction 
					BioMightInstruction bioInstruct = new BioMightInstruction();
		     
					if (numSegs==0){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.25, -0.15, 0.0);
					}
					else if (numSegs==1){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.25, -0.20, 0.0);
					}
					else if (numSegs==2){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.25, 0.0, 0.0);
					}
					
					else {
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.15, 0.0, 0.5);
					}
					
					
		    		// Add the instruction into the instruction set
		    		bioMightInstructSet.addElement(bioInstruct);
				}   
			}
			
		} 
		
		else if (componentID.equals("SmallSaphenousVein:02") || parentID.equals("SmallSaphenousVein:02")) {	
			
			// We can generate the FacialArtery
			if (currentPoints == null )
			{
				double circumference = 0.00625;
				double[] startPos = {-1.5, 0.25, 0.00};
				currentPoints = BioGraphics.octogonYPlane(startPos, circumference);
			}
		
			if (componentName.equals("Main")) {
				
				int nMaxSegs = 12;
				for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
			
					// Create a place for an instruction 
					BioMightInstruction bioInstruct = new BioMightInstruction();
		     
					if (numSegs==0){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.0, -1.00, 0.0);
					}
					else if (numSegs==1){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.0, -1.00, 0.0);
					}
					else if (numSegs==2){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.0, -1.00, 0.0);
					}
					else if (numSegs==3){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.02, -1.00, 0.0);
					}
					else if (numSegs==4){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.01, -1.00, 0.0);
					}
					else if (numSegs==5){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.0, -1.00, 0.0);
					}
					else if (numSegs==6){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.15, -1.00, 0.0);
					}
					else if (numSegs==7){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.1, -1.00, 0.0);
					}
					else if (numSegs==8){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.02, -1.00, 0.0);
					}
					else if (numSegs==9){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.05, -1.00, 0.0);
					}
					else if (numSegs==10){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.15, -1.00, 0.0);
					}
					else if (numSegs==11){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.1, -1.00, 0.0);
					}
					
			
				
					else {
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.15, 0.0, 0.5);
					}
				
			    	// Add the instruction into the instruction set
			    	bioMightInstructSet.addElement(bioInstruct);
				}
			}
			else if (componentName.equals("Top")) {
				
				int nMaxSegs = 3;
				for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
			
					// Create a place for an instruction 
					BioMightInstruction bioInstruct = new BioMightInstruction();
		     
					if (numSegs==0){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.25, -0.12, 0.0);
					}
					else if (numSegs==1){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.25, -0.17, 0.0);
					}
					else if (numSegs==2){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.25, 0.0, 0.0);
					}
				
				
					else {
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.15, 0.0, 0.5);
					}
					
					
		    		// Add the instruction into the instruction set
		    		bioMightInstructSet.addElement(bioInstruct);
				}   
			}
			else if (componentName.equals("Middle")) {
				
				int nMaxSegs = 4;
				for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
			
					// Create a place for an instruction 
					BioMightInstruction bioInstruct = new BioMightInstruction();
		     
					if (numSegs==0){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.25, -0.13, 0.0);
					}
					else if (numSegs==1){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.25, -0.11, 0.0);
					}
					else if (numSegs==2){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.25, 0.0, 0.0);
					}
					else if (numSegs==3){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.25, 0.05, 0.0);
					}
					else {
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.15, 0.0, 0.5);
					}
					
					
		    		// Add the instruction into the instruction set
		    		bioMightInstructSet.addElement(bioInstruct);
				}   
			}
			else if (componentName.equals("Bottom")) {
				
				int nMaxSegs = 3;
				for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
			
					// Create a place for an instruction 
					BioMightInstruction bioInstruct = new BioMightInstruction();
		     
					if (numSegs==0){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.25, -0.10, 0.0);
					}
					else if (numSegs==1){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.25, -0.15, 0.0);
					}
					else if (numSegs==2){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.25, 0.0, 0.0);
					}
					
					else {
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.15, 0.0, 0.5);
					}
					
					
		    		// Add the instruction into the instruction set
		    		bioMightInstructSet.addElement(bioInstruct);
				}   
			}
		}
						
		DBUtils.generateFacedComponents(Constants.QUADRANGLE, startID, componentType, componentName, componentID, currentPoints, bioMightInstructSet);
		System.out.println("Generating the Rows for SmallSaphenousVeinEndothelium: " + componentID + "   " + componentType);

		
		return returnCode;
	}
	
	/***************************************************************************************
	 * GENERATE GREAT SAPHENUS VEIN
	 * 
	 * This generates the reatSaphenousVein 
	 *
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/
	  	
	public int generateGreatSaphenousVein(String startID, String componentType, String componentName, String componentID,  String parentID, double[][] currentPoints) 
		throws DataException, DataSecurityException
	{	
		System.out.println("generateGreatSaphenousVein: " + componentID + "   " + parentID + "   " + componentName);
		
		int bodyID = 1;
		int projectID = 1;
		String vertices = "";
		
		ArrayList mySqlList= new ArrayList();
		int returnCode = 0;
	
		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();

		// RIGHT FEMUR
		if (componentID.equals("GreatSaphenousVein:01") || parentID.equals("GreatSaphenousVein:01")) 
		{	
			// We can generate the Artery
			if (currentPoints == null )
			{
				double radius = 0.00625;
				double[] startPos = {3.65, -35.0, -6.0};
				currentPoints = BioGraphics.createCylinderInPlane(Constants.YPLANE, startPos, radius, 8);
	
			}
			
			if (componentName.equals("Main")) {
				
				int nMaxSegs = 12;
				for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
			
					// Create a place for an instruction 
					BioMightInstruction bioInstruct = new BioMightInstruction();
		     
					if (numSegs==0){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.25, -1.00, 0.0);
					}
					else if (numSegs==1){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.1, -1.00, 0.0);
					}
					else if (numSegs==2){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.0, -1.00, 0.0);
					}
					else if (numSegs==3){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.05, -1.00, 0.0);
					}
					else if (numSegs==4){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.04, -1.00, 0.0);
					}
					else if (numSegs==5){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.0, -1.00, 0.0);
					}
					else if (numSegs==6){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.07, -1.00, 0.0);
					}
					else if (numSegs==7){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.01, -1.00, 0.0);
					}
					else if (numSegs==8){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.05, -1.00, 0.0);
					}
					else if (numSegs==9){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.10, -1.00, 0.0);
					}
					else if (numSegs==10){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.25, -1.00, 0.0);
					}
					else if (numSegs==11){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.1, -1.00, 0.0);
					}
					
					
					else if (numSegs==12){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.01, -1.00, 0.0);
					}
					else {
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.15, 0.0, 0.5);
					}
					
					
		    		// Add the instruction into the instruction set
		    		bioMightInstructSet.addElement(bioInstruct);
				}   
			}
			else if (componentName.equals("Top")) {
				
				int nMaxSegs = 3;
				for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
			
					// Create a place for an instruction 
					BioMightInstruction bioInstruct = new BioMightInstruction();
		     
					if (numSegs==0){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.25, -0.15, 0.0);
					}
					else if (numSegs==1){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.25, -0.20, 0.0);
					}
					else if (numSegs==2){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.25, 0.0, 0.0);
					}
				
				
					else {
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.15, 0.0, 0.5);
					}
					
					
		    		// Add the instruction into the instruction set
		    		bioMightInstructSet.addElement(bioInstruct);
				}   
			}
			else if (componentName.equals("Middle")) {
				
				int nMaxSegs = 4;
				for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
			
					// Create a place for an instruction 
					BioMightInstruction bioInstruct = new BioMightInstruction();
		     
					if (numSegs==0){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.25, -0.15, 0.0);
					}
					else if (numSegs==1){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.25, -0.09, 0.0);
					}
					else if (numSegs==2){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.25, 0.0, 0.0);
					}
					else if (numSegs==3){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.25, 0.05, 0.0);
					}
					else {
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.15, 0.0, 0.5);
					}
					
					
		    		// Add the instruction into the instruction set
		    		bioMightInstructSet.addElement(bioInstruct);
				}   
			}
			else if (componentName.equals("Bottom")) {
				
				int nMaxSegs = 3;
				for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
			
					// Create a place for an instruction 
					BioMightInstruction bioInstruct = new BioMightInstruction();
		     
					if (numSegs==0){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.25, -0.15, 0.0);
					}
					else if (numSegs==1){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.25, -0.20, 0.0);
					}
					else if (numSegs==2){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.25, 0.0, 0.0);
					}
					
					else {
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.15, 0.0, 0.5);
					}
					
					
		    		// Add the instruction into the instruction set
		    		bioMightInstructSet.addElement(bioInstruct);
				}   
			}
			
		} 
		// LEFT FEMUR
		else if (componentID.equals("GreatSaphenousVein:02") || parentID.equals("GreatSaphenousVein:02")) {	
			
			// We can generate the FacialArtery
			if (currentPoints == null )
			{
				double circumference = 0.00625;
				double[] startPos = {-1.5, 0.25, 0.00};
				currentPoints = BioGraphics.octogonYPlane(startPos, circumference);
			}
		
			if (componentName.equals("Main")) {
				
				int nMaxSegs = 12;
				for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
			
					// Create a place for an instruction 
					BioMightInstruction bioInstruct = new BioMightInstruction();
		     
					if (numSegs==0){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.25, -1.00, 0.0);
					}
					else if (numSegs==1){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.1, -1.00, 0.0);
					}
					else if (numSegs==2){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.0, -1.00, 0.0);
					}
					else if (numSegs==3){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.01, -1.00, 0.0);
					}
					else if (numSegs==4){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.0, -1.00, 0.0);
					}
					else if (numSegs==5){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.01, -1.00, 0.0);
					}
					else if (numSegs==6){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.0, -1.00, 0.0);
					}
					else if (numSegs==7){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.01, -1.00, 0.0);
					}
					else if (numSegs==8){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.0, -1.00, 0.0);
					}
					else if (numSegs==9){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.05, -1.00, 0.0);
					}
					else if (numSegs==10){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.25, -1.00, 0.0);
					}
					else if (numSegs==11){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.1, -1.00, 0.0);
					}
					
					
					else if (numSegs==12){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.01, -1.00, 0.0);
					}
					else {
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.15, 0.0, 0.5);
					}
				
			    	// Add the instruction into the instruction set
			    	bioMightInstructSet.addElement(bioInstruct);
				}
			}
			else if (componentName.equals("Top")) {
				
				int nMaxSegs = 3;
				for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
			
					// Create a place for an instruction 
					BioMightInstruction bioInstruct = new BioMightInstruction();
		     
					if (numSegs==0){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.25, -0.12, 0.0);
					}
					else if (numSegs==1){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.25, -0.17, 0.0);
					}
					else if (numSegs==2){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.25, 0.0, 0.0);
					}
				
				
					else {
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.15, 0.0, 0.5);
					}
					
					
		    		// Add the instruction into the instruction set
		    		bioMightInstructSet.addElement(bioInstruct);
				}   
			}
			else if (componentName.equals("Middle")) {
				
				int nMaxSegs = 4;
				for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
			
					// Create a place for an instruction 
					BioMightInstruction bioInstruct = new BioMightInstruction();
		     
					if (numSegs==0){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.25, -0.13, 0.0);
					}
					else if (numSegs==1){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.25, -0.11, 0.0);
					}
					else if (numSegs==2){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.25, 0.0, 0.0);
					}
					else if (numSegs==3){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.25, 0.05, 0.0);
					}
					else {
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.15, 0.0, 0.5);
					}
					
					
		    		// Add the instruction into the instruction set
		    		bioMightInstructSet.addElement(bioInstruct);
				}   
			}
			else if (componentName.equals("Bottom")) {
				
				int nMaxSegs = 3;
				for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
			
					// Create a place for an instruction 
					BioMightInstruction bioInstruct = new BioMightInstruction();
		     
					if (numSegs==0){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.25, -0.10, 0.0);
					}
					else if (numSegs==1){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.25, -0.15, 0.0);
					}
					else if (numSegs==2){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.25, 0.0, 0.0);
					}
					
					else {
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.15, 0.0, 0.5);
					}
					
					
		    		// Add the instruction into the instruction set
		    		bioMightInstructSet.addElement(bioInstruct);
				}   
			}
		}
		
		// LEFT KNEE
		else if (componentID.equals("GreatSaphenousVein:03") || parentID.equals("GreatSaphenousVein:03")) {	
		
			
			if (currentPoints == null )
			{
				double circumference = 0.00625;
				double[] startPos = {-1.5, 0.25, 0.00};
				currentPoints = BioGraphics.octogonYPlane(startPos, circumference);
			}
		
			if (componentName.equals("Main")) {
				
				int nMaxSegs = 4;
				for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
			
					// Create a place for an instruction 
					BioMightInstruction bioInstruct = new BioMightInstruction();
		     
					if (numSegs==0){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.01, -1.00, 0.0);
					}
					else if (numSegs==1){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.01, -1.00, 0.0);
					}
					else if (numSegs==2){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);
					}
					else if (numSegs==3){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.01, -0.50, 0.0);
					}			
					else if (numSegs==4){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.0, -1.00, 0.0);
					}
					else if (numSegs==5){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.01, -1.00, -0.1);
					}
		
			
				else {
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.15, 0.0, 0.5);
					}
				
			    	// Add the instruction into the instruction set
			    	bioMightInstructSet.addElement(bioInstruct);
				}
			}
		}
		// RIGHT KNEE
		else if (componentID.equals("GreatSaphenousVein:04") || parentID.equals("GreatSaphenousVein:04")) {	
			
			if (currentPoints == null )
			{
				double circumference = 0.00625;
				double[] startPos = {-1.5, 0.25, 0.00};
				currentPoints = BioGraphics.octogonYPlane(startPos, circumference);
			}
		
			if (componentName.equals("Main")) {
				
				int nMaxSegs = 4;
				for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
			
					// Create a place for an instruction 
					BioMightInstruction bioInstruct = new BioMightInstruction();
		     
					if (numSegs==0){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.01, -1.00, 0.0);
					}
					else if (numSegs==1){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.01, -1.00, 0.0);
					}
					else if (numSegs==2){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.0, -1.00, 0.0);
					}
					else if (numSegs==3){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.01, -0.50, 0.0);
					}
					else if (numSegs==4){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.0, -1.00, 0.0);
					}
					else if (numSegs==5){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.01, -1.00, 0.0);
					}
					else if (numSegs==6){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.0, -1.00, 0.0);
					}
					else {
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.15, 0.0, 0.5);
					}
				
			    	// Add the instruction into the instruction set
			    	bioMightInstructSet.addElement(bioInstruct);
				}
			}
		}
		
		// LEFT CNEMIS
		else if (componentID.equals("GreatSaphenousVein:05") || parentID.equals("GreatSaphenousVein:05")) {	
		
			
			if (currentPoints == null )
			{
				double circumference = 0.00625;
				double[] startPos = {-1.5, 0.25, 0.00};
				currentPoints = BioGraphics.octogonYPlane(startPos, circumference);
			}
		
			if (componentName.equals("Main")) {
				
				int nMaxSegs = 12;
				for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
			
					// Create a place for an instruction 
					BioMightInstruction bioInstruct = new BioMightInstruction();
		     
					if (numSegs==0){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.01, -1.00, 0.0);
					}
					else if (numSegs==1){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.01, -1.00, 0.0);
					}
					else if (numSegs==2){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.0, -1.00, 0.0);
					}
					else if (numSegs==3){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.01, -1.00, 0.0);
					}
					else if (numSegs==4){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.0, -1.00, 0.0);
					}
					else if (numSegs==5){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.01, -1.00, -0.1);
					}
					else if (numSegs==6){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.0, -1.00, 0.01);
					}
					else if (numSegs==7){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.01, -1.00, 0.04);
					}
					else if (numSegs==8){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.0, -1.00, -0.05);
					}
					else if (numSegs==9){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.05, -1.00, -0.1);
					}
					else if (numSegs==10){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.2, -1.00, -0.1);
					}
					else if (numSegs==11){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.1, -1.00, 0.0);
					}
					
					
					else if (numSegs==12){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.01, -1.00, 0.0);
					}
					else {
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.15, 0.0, 0.5);
					}
				
			    	// Add the instruction into the instruction set
			    	bioMightInstructSet.addElement(bioInstruct);
				}
			}
			else if (componentName.equals("Top")) {
				
				int nMaxSegs = 3;
				for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
			
					// Create a place for an instruction 
					BioMightInstruction bioInstruct = new BioMightInstruction();
		     
					if (numSegs==0){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.25, -0.12, 0.0);
					}
					else if (numSegs==1){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.25, -0.17, 0.0);
					}
					else if (numSegs==2){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.25, 0.0, 0.0);
					}
				
				
					else {
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.15, 0.0, 0.5);
					}
					
					
		    		// Add the instruction into the instruction set
		    		bioMightInstructSet.addElement(bioInstruct);
				}   
			}
			else if (componentName.equals("Middle")) {
				
				int nMaxSegs = 4;
				for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
			
					// Create a place for an instruction 
					BioMightInstruction bioInstruct = new BioMightInstruction();
		     
					if (numSegs==0){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.25, -0.13, 0.0);
					}
					else if (numSegs==1){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.25, -0.11, 0.0);
					}
					else if (numSegs==2){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.25, 0.0, 0.0);
					}
					else if (numSegs==3){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.25, 0.05, 0.0);
					}
					else {
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.15, 0.0, 0.5);
					}
					
					
		    		// Add the instruction into the instruction set
		    		bioMightInstructSet.addElement(bioInstruct);
				}   
			}
			else if (componentName.equals("Bottom")) {
				
				int nMaxSegs = 3;
				for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
			
					// Create a place for an instruction 
					BioMightInstruction bioInstruct = new BioMightInstruction();
		     
					if (numSegs==0){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.25, -0.10, 0.0);
					}
					else if (numSegs==1){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.25, -0.15, 0.0);
					}
					else if (numSegs==2){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.25, 0.0, 0.0);
					}
					
					else {
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.15, 0.0, 0.5);
					}
					
					
		    		// Add the instruction into the instruction set
		    		bioMightInstructSet.addElement(bioInstruct);
				}   
			}
		}
		// RIGHT CNEMIS
		else if (componentID.equals("GreatSaphenousVein:06") || parentID.equals("GreatSaphenousVein:06")) {	
			
			if (currentPoints == null )
			{
				double circumference = 0.00625;
				double[] startPos = {-1.5, 0.25, 0.00};
				currentPoints = BioGraphics.octogonYPlane(startPos, circumference);
			}
		
			if (componentName.equals("Main")) {
				
				int nMaxSegs = 12;
				for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
			
					// Create a place for an instruction 
					BioMightInstruction bioInstruct = new BioMightInstruction();
		     
					if (numSegs==0){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.01, -1.00, 0.0);
					}
					else if (numSegs==1){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.01, -1.00, 0.0);
					}
					else if (numSegs==2){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.0, -1.00, 0.0);
					}
					else if (numSegs==3){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.01, -1.00, 0.0);
					}
					else if (numSegs==4){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.0, -1.00, 0.0);
					}
					else if (numSegs==5){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.01, -1.00, 0.0);
					}
					else if (numSegs==6){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.0, -1.00, 0.0);
					}
					else if (numSegs==5){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.01, -1.00, -0.1);
					}
					else if (numSegs==6){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.0, -1.00, 0.01);
					}
					else if (numSegs==7){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.01, -1.00, 0.04);
					}
					else if (numSegs==8){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.0, -1.00, -0.05);
					}
					else if (numSegs==9){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.05, -1.00, -0.1);
					}
					else if (numSegs==10){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.2, -1.00, -0.1);
					}
					else if (numSegs==11){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.1, -1.00, 0.0);
					}
					
					
					else if (numSegs==12){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.01, -1.00, 0.0);
					}
					else {
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.15, 0.0, 0.5);
					}
				
			    	// Add the instruction into the instruction set
			    	bioMightInstructSet.addElement(bioInstruct);
				}
			}
			else if (componentName.equals("Top")) {
				
				int nMaxSegs = 3;
				for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
			
					// Create a place for an instruction 
					BioMightInstruction bioInstruct = new BioMightInstruction();
		     
					if (numSegs==0){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.25, -0.12, 0.0);
					}
					else if (numSegs==1){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.25, -0.17, 0.0);
					}
					else if (numSegs==2){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.25, 0.0, 0.0);
					}
				
				
					else {
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.15, 0.0, 0.5);
					}
					
					
		    		// Add the instruction into the instruction set
		    		bioMightInstructSet.addElement(bioInstruct);
				}   
			}
			else if (componentName.equals("Middle")) {
				
				int nMaxSegs = 4;
				for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
			
					// Create a place for an instruction 
					BioMightInstruction bioInstruct = new BioMightInstruction();
		     
					if (numSegs==0){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.25, -0.13, 0.0);
					}
					else if (numSegs==1){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.25, -0.11, 0.0);
					}
					else if (numSegs==2){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.25, 0.0, 0.0);
					}
					else if (numSegs==3){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.25, 0.05, 0.0);
					}
					else {
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.15, 0.0, 0.5);
					}
					
					
		    		// Add the instruction into the instruction set
		    		bioMightInstructSet.addElement(bioInstruct);
				}   
			}
			else if (componentName.equals("Bottom")) {
				
				int nMaxSegs = 3;
				for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
			
					// Create a place for an instruction 
					BioMightInstruction bioInstruct = new BioMightInstruction();
		     
					if (numSegs==0){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.25, -0.10, 0.0);
					}
					else if (numSegs==1){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.25, -0.15, 0.0);
					}
					else if (numSegs==2){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.25, 0.0, 0.0);
					}
					
					else {
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.15, 0.0, 0.5);
					}
					
					
		    		// Add the instruction into the instruction set
		    		bioMightInstructSet.addElement(bioInstruct);
				}   
			}
		}

		
		DBUtils.generateFacedComponents(Constants.QUADRANGLE, startID, componentType, componentName, componentID, currentPoints, bioMightInstructSet);
		System.out.println("Generating the Rows for GreatSaphenousVeinEndothelium: " + componentID + "   " + componentType);

		
		return returnCode;
	}
		
	/***************************************************************************************
	 * GENERATE ANTERIOR TIBIAL VEIN2
	 * 
	 * This generates the AnteriorTibialVein
	 *
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/
	  	
	public int generateAnteriorTibialVein2(String startID, String componentType, String componentName, String componentID,  String parentID, double[][] currentPoints) 
		throws DataException, DataSecurityException
	{	
		System.out.println("generateAnteriorTibialVein: " + componentID + "   " + parentID + "   " + componentName);
		
		int bodyID = 1;
		int projectID = 1;
		String vertices = "";
		
		ArrayList mySqlList= new ArrayList();
		int returnCode = 0;
	
		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();

		// Right FacialArtery - Move inward toward the front of Jaw
		if (componentID.equals("AnteriorTibialVein:01") || parentID.equals("AnteriorTibialVein:01")) 
		{	
			// We can generate the Artery
			if (currentPoints == null )
			{
				double radius = 0.00625;
				double[] startPos = {3.65, -35.0, -6.0};
				currentPoints = BioGraphics.createCylinderInPlane(Constants.YPLANE, startPos, radius, 8);
	
			}
			
			if (componentName.equals("Main")) {
				
				int nMaxSegs = 26;
				for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
			
					// Create a place for an instruction 
					BioMightInstruction bioInstruct = new BioMightInstruction();
		     
					if (numSegs==0){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.15, -0.50, 0.0);
					}
					else if (numSegs==1){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.10, -0.50, 0.0);
					}
					else if (numSegs==2){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.11, -0.50, 0.0);
					}
					else if (numSegs==3){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.05, -0.50, 0.0);
					}
					else if (numSegs==4){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.1, -0.50, 0.0);
					}
					else if (numSegs==5){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.08, -0.50, 0.0);
					}
					else if (numSegs==6){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.1, -0.50, 0.0);
					}
					else if (numSegs==7){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.07, -0.50, 0.0);
					}
					else if (numSegs==8){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.11, -0.50, 0.0);
					}
					else if (numSegs==9){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.08, -0.50, 0.0);
					}
					else if (numSegs==10){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.09, -0.50, 0.0);
					}
					else if (numSegs==11){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.01, -0.50, 0.0);
					}
					else if (numSegs==12){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.02, -0.50, 0.0);
					}
					else if (numSegs==13){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.0, -0.50, 0.0);
					}
					else if (numSegs==14){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.05, -0.50, 0.0);
					}
					else if (numSegs==15){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.03, -0.50, -0.05);
					}
					else if (numSegs==16){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.05, -0.50, 0.0);
					}
					else if (numSegs==17){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.0, -0.50, 0.0);
					}
					else if (numSegs==18){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.1, -0.50, 0.0);
					}
					else if (numSegs==19){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.0, -0.50, 0.0);
					}
					else if (numSegs==20){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.0, -0.50, 0.0);
					}
					else if (numSegs==21){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.03, -0.50, 0.0);
					}
					else if (numSegs==22){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.03, -0.50, 0.0);
					}
					else if (numSegs==23){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.02, -0.50, 0.0);
					}
					else if (numSegs==24){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.05, -0.50, 0.0);
					}
					else if (numSegs==25){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.1, -0.50, 0.0);
					}
					
					
		    		// Add the instruction into the instruction set
		    		bioMightInstructSet.addElement(bioInstruct);
				}   
			}
			else if (componentName.equals("Top")) {
				
				int nMaxSegs = 3;
				for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
			
					// Create a place for an instruction 
					BioMightInstruction bioInstruct = new BioMightInstruction();
		     
					if (numSegs==0){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.25, -0.15, 0.0);
					}
					else if (numSegs==1){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.25, -0.20, 0.0);
					}
					else if (numSegs==2){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.25, 0.0, 0.0);
					}
				
				
					else {
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.15, 0.0, 0.5);
					}
					
					
		    		// Add the instruction into the instruction set
		    		bioMightInstructSet.addElement(bioInstruct);
				}   
			}
			else if (componentName.equals("Middle")) {
				
				int nMaxSegs = 4;
				for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
			
					// Create a place for an instruction 
					BioMightInstruction bioInstruct = new BioMightInstruction();
		     
					if (numSegs==0){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.25, -0.15, 0.0);
					}
					else if (numSegs==1){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.25, -0.09, 0.0);
					}
					else if (numSegs==2){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.25, 0.0, 0.0);
					}
					else if (numSegs==3){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.25, 0.05, 0.0);
					}
					else {
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.15, 0.0, 0.5);
					}
					
					
		    		// Add the instruction into the instruction set
		    		bioMightInstructSet.addElement(bioInstruct);
				}   
			}
	
			
		} 
		
		else if (componentID.equals("AnteriorTibialVein:02") || parentID.equals("AnteriorTibialVein:02")) {	
			
			// We can generate the FacialArtery
			if (currentPoints == null )
			{
				double circumference = 0.00625;
				double[] startPos = {-1.5, 0.25, 0.00};
				currentPoints = BioGraphics.octogonYPlane(startPos, circumference);
			}
		
			if (componentName.equals("Main")) {
				
				int nMaxSegs = 26;
				for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
			
					// Create a place for an instruction 
					BioMightInstruction bioInstruct = new BioMightInstruction();
		     
					if (numSegs==0){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.15, -0.50, 0.0);
					}
					else if (numSegs==1){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.10, -0.50, 0.0);
					}
					else if (numSegs==2){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.11, -0.50, 0.0);
					}
					else if (numSegs==3){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.05, -0.50, 0.0);
					}
					else if (numSegs==4){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.1, -0.50, 0.0);
					}
					else if (numSegs==5){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.08, -0.50, 0.0);
					}
					else if (numSegs==6){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.1, -0.50, 0.0);
					}
					else if (numSegs==7){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.07, -0.50, 0.0);
					}
					else if (numSegs==8){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.11, -0.50, 0.0);
					}
					else if (numSegs==9){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.08, -0.50, 0.0);
					}
					else if (numSegs==10){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.09, -0.50, 0.0);
					}
					else if (numSegs==11){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.01, -0.50, 0.0);
					}
					else if (numSegs==12){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.02, -0.50, 0.0);
					}
					else if (numSegs==13){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.0, -0.50, 0.0);
					}
					else if (numSegs==14){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.05, -0.50, 0.0);
					}
					else if (numSegs==15){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.03, -0.50, -0.05);
					}
					else if (numSegs==16){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.05, -0.50, 0.0);
					}
					else if (numSegs==17){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.0, -0.50, 0.0);
					}
					else if (numSegs==18){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.1, -0.50, 0.0);
					}
					else if (numSegs==19){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.0, -0.50, 0.0);
					}
					else if (numSegs==20){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.0, -0.50, 0.0);
					}
					else if (numSegs==21){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.03, -0.50, 0.0);
					}
					else if (numSegs==22){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.03, -0.50, 0.0);
					}
					else if (numSegs==23){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.02, -0.50, 0.0);
					}
					else if (numSegs==24){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.05, -0.50, 0.0);
					}
					else if (numSegs==25){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.1, -0.50, 0.0);
					}
		
				
					else {
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.15, 0.0, 0.5);
					}
				
			    	// Add the instruction into the instruction set
			    	bioMightInstructSet.addElement(bioInstruct);
				}
			}
			else if (componentName.equals("Top")) {
				
				int nMaxSegs = 3;
				for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
			
					// Create a place for an instruction 
					BioMightInstruction bioInstruct = new BioMightInstruction();
		     
					if (numSegs==0){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.25, -0.12, 0.0);
					}
					else if (numSegs==1){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.25, -0.17, 0.0);
					}
					else if (numSegs==2){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.25, 0.0, 0.0);
					}
				
				
					else {
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.15, 0.0, 0.5);
					}
					
					
		    		// Add the instruction into the instruction set
		    		bioMightInstructSet.addElement(bioInstruct);
				}   
			}
			else if (componentName.equals("Middle")) {
				
				int nMaxSegs = 4;
				for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
			
					// Create a place for an instruction 
					BioMightInstruction bioInstruct = new BioMightInstruction();
		     
					if (numSegs==0){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.25, -0.13, 0.0);
					}
					else if (numSegs==1){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.25, -0.11, 0.0);
					}
					else if (numSegs==2){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.25, 0.0, 0.0);
					}
					else if (numSegs==3){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.25, 0.05, 0.0);
					}
					else {
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.15, 0.0, 0.5);
					}
					
					
		    		// Add the instruction into the instruction set
		    		bioMightInstructSet.addElement(bioInstruct);
				}   
			}
			else if (componentName.equals("Bottom")) {
				
				int nMaxSegs = 3;
				for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
			
					// Create a place for an instruction 
					BioMightInstruction bioInstruct = new BioMightInstruction();
		     
					if (numSegs==0){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.25, -0.10, 0.0);
					}
					else if (numSegs==1){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.25, -0.15, 0.0);
					}
					else if (numSegs==2){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.25, 0.0, 0.0);
					}
					
					else {
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.15, 0.0, 0.5);
					}
					
					
		    		// Add the instruction into the instruction set
		    		bioMightInstructSet.addElement(bioInstruct);
				}   
			}
		}
						
		DBUtils.generateFacedComponents(Constants.QUADRANGLE, startID, componentType, componentName, componentID, currentPoints, bioMightInstructSet);
		System.out.println("Generating the Rows for AnteriorTibialVeinEndothelium: " + componentID + "   " + componentType);

		
		return returnCode;
	}
	
	
	/***************************************************************************************
	 * GENERATE SUPERFICIAL FEMORAL ARTERY
	 * 
	 * This generates the DeepFemoral Artery. 
	 *
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/
	  	

	public int generateSuperficialFemoralArtery(String startID, String componentType, String componentName, String componentID,  String parentID, double[][] currentPoints) 
			throws DataException, DataSecurityException
	{	
		System.out.println("Bean:generateSuperficialFemoralArtery() : " + componentID + "   " + parentID);
		
		int bodyID = 1;
		int projectID = 1;
		String vertices = "";
		
		ArrayList mySqlList= new ArrayList();
		int returnCode = 0;
	
		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();

		// Right SuperficialFemoralArtery - Move inward toward the front of Jaw
		if (componentID.equals("SuperficialFemoralArtery:01") || parentID.equals("SuperficialFemoralArtery:01")) 
		{	
			if (currentPoints == null )
			{
				double circumference = 0.00625;
				double[] startPos = {1.5, 0.25, 0.00};
				currentPoints = BioGraphics.octogonYPlane(startPos, circumference);
			}
			
			int nMaxSegs = 12;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
		
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
	     
				  
				if (numSegs==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.1, -0.50, 0.45);
				}
				else if (numSegs==1){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.1, -0.50, 0.45);
				}
				else if (numSegs==2){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.03, -0.50, 0.30);
				}
				else if (numSegs==3){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.05, -1.0, 0.25);
				}
				else if (numSegs==4){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -1.0, 0.15);
				}
				else if (numSegs==5){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.02, -1.0, 0.05);
				}
				else if (numSegs==6){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.03, -1.00, 0.08);
				}
				else if (numSegs==7){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.01, -1.0, 0.06);
				}
				else if (numSegs==8){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -1.0, 0.07);
				}
				else if (numSegs==9){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -1.0, 0.06);
				}
				else if (numSegs==10){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.05, -1.0, -0.1);
				}
				else if (numSegs==11){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.07, -1.0, -0.17);
				}
				else if (numSegs==12){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.05, -1.0, -0.18);
				}
				else if (numSegs==13){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.06, -0.50, -0.19);
				}

				
				else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -0.50, 0.0);
				}
				
				
	    		// Add the instruction into the instruction set
	    		bioMightInstructSet.addElement(bioInstruct);
			}    
		} 
		
		else if (componentID.equals("SuperficialFemoralArtery:02") || parentID.equals("SuperficialFemoralArtery:02")) {	
			
			int nMaxSegs = 12;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
		
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
	     
				
				  
				if (numSegs==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.1, -0.50, 0.45);
				}
				else if (numSegs==1){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.1, -0.50, 0.45);
				}
				else if (numSegs==2){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.03, -0.50, 0.30);
				}
				else if (numSegs==3){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.05, -1.0, 0.25);
				}
				else if (numSegs==4){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -1.0, 0.15);
				}
				else if (numSegs==5){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.02, -1.0, 0.07);
				}
				else if (numSegs==6){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.03, -1.00, 0.04);
				}
				else if (numSegs==7){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.01, -1.0, 0.06);
				}
				else if (numSegs==8){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -1.0, 0.07);
				}
				else if (numSegs==9){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -1.0, 0.06);
				}
				else if (numSegs==10){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.05, -1.0, -0.1);
				}
				else if (numSegs==11){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.07, -1.0, -0.17);
				}
				else if (numSegs==12){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.05, -1.0, -0.18);
				}
				else if (numSegs==13){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.06, -0.50, -0.19);
				}
				
				else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -0.50, 0.0);
				}
				
		    	// Add the instruction into the instruction set
		    	bioMightInstructSet.addElement(bioInstruct);
			}
		}
		
		else if (componentID.equals("SuperficialFemoralArtery:04") || parentID.equals("SuperficialFemoralArtery:04")) 
		{	
			// We can generate the FacialArtery
			if (currentPoints == null )
			{
				double circumference = 0.00625;
				double[] startPos = {1.5, 0.25, 0.00};
				currentPoints = BioGraphics.octogonYPlane(startPos, circumference);
			}
			
			int nMaxSegs = 8;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
		
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
	     
				if (numSegs==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, 0.20, 0.25);
				}
				else if (numSegs==1){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, 0.0, 0.20);
				}
				else if (numSegs==2){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -0.10, 0.25);
				}
				else if (numSegs==3){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.05, -0.1, 0.50);
				}
				else if (numSegs==4){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.1, -0.1, 0.50);
				}
				else if (numSegs==5){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.15, -0.10, 0.5);
				}
				else if (numSegs==6){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.08, -0.05, 0.5);
				}
				else if (numSegs==7){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.25, 0.0, 0.40);
				}
		
				
				else {
					bioInstruct.setPivotPoint(3);
					bioInstruct.setRotateVector(0.0, 0.0, 1.0);
					bioInstruct.setTransType(2);
					bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);
				}
				
				
	    		// Add the instruction into the instruction set
	    		bioMightInstructSet.addElement(bioInstruct);
			}    
		} 
		
		else if (componentID.equals("SuperficialFemoralArtery:05") || parentID.equals("SuperficialFemoralArtery:05")) {	
			int nMaxSegs = 11;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
				
				// We can generate the FacialArtery
				if (currentPoints == null )
				{
					double circumference = 0.00625;
					double[] startPos = {-1.5, 0.25, 0.00};
					currentPoints = BioGraphics.octogonYPlane(startPos, circumference);
				}
			
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
		      

				if (numSegs==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, 0.25, 0.20);
				}
				else if (numSegs==1){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.05, 0.25, 0.0);
				}
				else if (numSegs==2){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.1, 0.25, 0.0);
				}
				else if (numSegs==3){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.08, 0.25, 0.01);
				}
				else if (numSegs==4){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.07, 0.25, 0.02);
				}
				else if (numSegs==5){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.06, 0.25, 0.0);
				}
				else if (numSegs==6){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.1, 0.25, 0.0);
				}
				else if (numSegs==7){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.15, 0.20, 0.0);
				}
				else if (numSegs==8){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.11, 0.20, 0.0);
				}
				else if (numSegs==9){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.05, 0.25, 0.00);
				}
				else if (numSegs==10) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.05, 0.10, 0.00);
				}	
				
		    	// Add the instruction into the instruction set
		    	bioMightInstructSet.addElement(bioInstruct);
			}
		}

		else if (componentID.equals("SuperficialFemoralArtery:06") || parentID.equals("SuperficialFemoralArtery:06")) {	
			int nMaxSegs = 2;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
				
				// We can generate the FacialArtery
				if (currentPoints == null )
				{
					double circumference = 0.00625;
					double[] startPos = {-1.5, 0.25, 0.00};
					currentPoints = BioGraphics.octogonYPlane(startPos, circumference);
				}
			
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
		      

				if (numSegs==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.1, 0.01, 0.25);
				}
				else if (numSegs==1){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.15, 0.0, 0.25);
				}
				else if (numSegs==2){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.10, 0.10, 0.50);
				}
				
	
		    	// Add the instruction into the instruction set
		    	bioMightInstructSet.addElement(bioInstruct);
			}
		}
				
				
		
		DBUtils.generateFacedComponents(Constants.QUADRANGLE, startID, componentType, componentName, componentID, currentPoints, bioMightInstructSet);
		System.out.println("Generating the Rows for SuperficialFemoralArteryEndothelium: " + componentID + "   " + componentType);

		
		return returnCode;
	}
	

	
	/***************************************************************************************
	 * GENERATE SUPERFICIAL FEMORAL VEIN
	 * 
	 * This generates the DeepFemoral Vein 
	 *
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/
	  	

	public int generateSuperficialFemoralVein(String startID, String componentType, String componentName, String componentID,  String parentID, double[][] currentPoints) 
			throws DataException, DataSecurityException
	{	
		System.out.println("Bean:generateSuperficialFemoralVein() : " + componentID + "   " + parentID);
		
		int bodyID = 1;
		int projectID = 1;
		String vertices = "";
		
		ArrayList mySqlList= new ArrayList();
		int returnCode = 0;
	
		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();

		// Right SuperficialFemoralArtery - Move inward toward the front of Jaw
		if (componentID.equals("SuperficialFemoralVein:01") || parentID.equals("SuperficialFemoralVein:01")) 
		{	
			
			if (componentName.equals("Main")) {
				
				if (currentPoints == null )
				{
					double circumference = 0.00625;
					double[] startPos = {1.75, 0.25, 0.25};
					currentPoints = BioGraphics.octogonYPlane(startPos, circumference);
				}
				
				int nMaxSegs = 12;
				for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
			
					// Create a place for an instruction 
					BioMightInstruction bioInstruct = new BioMightInstruction();
		     
					  
					if (numSegs==0){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.2, -0.50, 0.35);
					}
					else if (numSegs==1){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.15, -0.50, 0.25);
					}
					else if (numSegs==2){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.1, -0.50, 0.20);
					}
					else if (numSegs==3){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.05, -1.0, 0.03);
					}
					else if (numSegs==4){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.0, -1.0, 0.01);
					}
					else if (numSegs==5){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.02, -1.0, 0.05);
					}
					else if (numSegs==6){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.03, -1.00, 0.08);
					}
					else if (numSegs==7){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.01, -1.0, 0.06);
					}
					else if (numSegs==8){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.0, -1.0, 0.07);
					}
					else if (numSegs==9){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.0, -1.0, 0.06);
					}
					else if (numSegs==10){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.05, -1.0, -0.1);
					}
					else if (numSegs==11){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.07, -1.0, -0.17);
					}
					else if (numSegs==12){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.05, -1.0, -0.18);
					}
					else if (numSegs==13){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.06, -0.50, -0.19);
					}
	
					
					else {
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.0, -0.50, 0.0);
					}
					
					
		    		// Add the instruction into the instruction set
		    		bioMightInstructSet.addElement(bioInstruct);
				}
			}    
		} 
		
		else if (componentID.equals("SuperficialFemoralVein:02") || parentID.equals("SuperficialFemoralVein:02")) {	
		
			if (componentName.equals("Main")) {
				
				int nMaxSegs = 12;
				for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
			
					// Create a place for an instruction 
					BioMightInstruction bioInstruct = new BioMightInstruction();
		     	  
					if (numSegs==0){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.2, -0.50, 0.35);
					}
					else if (numSegs==1){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.15, -0.50, 0.25);
					}
					else if (numSegs==2){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.1, -0.50, 0.20);
					}
					else if (numSegs==3){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.05, -1.0, 0.03);
					}
					else if (numSegs==4){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.0, -1.0, 0.01);
					}
					else if (numSegs==5){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.02, -1.0, 0.05);
					}
					else if (numSegs==6){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.03, -1.00, 0.08);
					}
					else if (numSegs==7){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.01, -1.0, 0.06);
					}
					else if (numSegs==8){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.0, -1.0, 0.07);
					}
					else if (numSegs==9){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.0, -1.0, 0.06);
					}
					else if (numSegs==10){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.05, -1.0, -0.1);
					}
					else if (numSegs==11){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.07, -1.0, -0.17);
					}
					else if (numSegs==12){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.05, -1.0, -0.18);
					}
					else if (numSegs==13){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.06, -0.50, -0.19);
					}
					
					else {
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.0, -0.50, 0.0);
					}
					
			    	// Add the instruction into the instruction set
			    	bioMightInstructSet.addElement(bioInstruct);
				}
			}
		}

		DBUtils.generateFacedComponents(Constants.QUADRANGLE, startID, componentType, componentName, componentID, currentPoints, bioMightInstructSet);
		System.out.println("Generating the Rows for SuperficialFemoralVeinEndothelium: " + componentID + "   " + componentType);
		
		return returnCode;
	}
		
		
	/***************************************************************************************
	 * GENERATE LATERAL CIRCUMFLEX FEMORAL ARTERY
	 * 
	 * This generates the LateralCircumflexFemoralArtery Artery. 
	 *
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/
	  	
	public int generateLateralCircumflexFemoralArtery(String startID, String componentType, String componentName, String componentID,  String parentID, double[][] currentPoints) 
		throws DataException, DataSecurityException
	{	
		System.out.println("generateLateralCircumflexFemoralArtery(): " + componentID + "   " + parentID);
		
		int bodyID = 1;
		int projectID = 1;
		String vertices = "";
		
		ArrayList mySqlList= new ArrayList();
		int returnCode = 0;
	
		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();

		// Right FacialArtery - Move inward toward the front of Jaw
		if (componentID.equals("LateralCircumflexFemoralArtery:01") || parentID.equals("LateralCircumflexFemoralArtery:01")) 
		{	
			
			if (componentName.equals("Loop")) 
			{			
				// We can generate the FacialArtery
				if (currentPoints == null )
				{
					double circumference = 0.00625;
					double[] startPos = {1.5, 0.25, 0.00};
					currentPoints = BioGraphics.octogonYPlane(startPos, circumference);
				}
				
				int nMaxSegs = 10;
				for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
			
					// Create a place for an instruction 
					BioMightInstruction bioInstruct = new BioMightInstruction();
		     
					if (numSegs==0){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.50, 0.0, 0.65);
					}
					else if (numSegs==1){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.50, 0.01, 0.50);
					}
					else if (numSegs==2){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.250, -0.02, 0.25);
					}
					else if (numSegs==3){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.50, 0.01, 0.0);
					}
					else if (numSegs==4){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.250, 0.03, 0.0);
					}
					else if (numSegs==5){
						BioMightOrientation orientation = new BioMightOrientation(0.0, -1.0, 0.0, 90.0);
			 			bioInstruct.setTransType(Constants.ROTATEOCTOSCALE);
		    			bioInstruct.setTheta(45);	
		    			bioInstruct.setPivotPoint(0);	
		     			bioInstruct.setRotateVector(0.0, 1.0, 0.0);
		     			bioInstruct.setOrientation(orientation);
		     			bioInstruct.setScaleMatrix(0.90, 0.90, 0.90);
					}
					else if (numSegs==6){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.50, 0.03, -0.50);
					}
					else if (numSegs==7){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.50, -0.01, -0.65);
					}
					else if (numSegs==8){
						BioMightOrientation orientation = new BioMightOrientation(0.0, -1.0, 0.0, 90.0);
			 			bioInstruct.setTransType(Constants.ROTATEOCTOSCALE);
		    			bioInstruct.setTheta(-45);	
		    			bioInstruct.setPivotPoint(0);	
		     			bioInstruct.setRotateVector(0.0, 1.0, 0.0);
		     			bioInstruct.setOrientation(orientation);
		     			bioInstruct.setScaleMatrix(0.90, 0.90, 0.90);
					}
					else if (numSegs==9){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.50, 0.0, -0.50);
					}
					
					else {
						bioInstruct.setPivotPoint(3);
						bioInstruct.setRotateVector(0.0, 0.0, 1.0);
						bioInstruct.setTransType(2);
						bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);
					}
					
					
		    		// Add the instruction into the instruction set
		    		bioMightInstructSet.addElement(bioInstruct);
				}    
			} 
			else if (componentName.equals("Bridge")) 
			{			
				// Track that goes over the troachanter neck
				if (currentPoints == null )
				{
					double circumference = 0.00625;
					double[] startPos = {1.5, 0.25, 0.00};
					currentPoints = BioGraphics.octogonYPlane(startPos, circumference);
				}
				
				int nMaxSegs = 17;
				for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
			
					// Create a place for an instruction 
					BioMightInstruction bioInstruct = new BioMightInstruction();
		     

					if (numSegs==0){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.0, 0.50, 0.0);
					}
					else if (numSegs==1){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.1, 0.50, -0.1);
					}
					else if (numSegs==2){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.1, 0.50, -0.15);
					}
					else if (numSegs==3){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.18, 0.50, -0.14);
					}
					else if (numSegs==4){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.08, 0.250, -0.05);
					}
					else if (numSegs==5){
						BioMightOrientation orientation = new BioMightOrientation(-1.0, 0.0, 0.0, 90.0);
			 			bioInstruct.setTransType(Constants.ROTATEOCTO);
		    			bioInstruct.setTheta(-45);
		    			bioInstruct.setPivotPoint(6);	
		     			bioInstruct.setRotateVector(1.0, 0.0, 0.0);
		     			bioInstruct.setOrientation(orientation);
					}
					else if (numSegs==6){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.0, 0.25, -0.50);
					}
					else if (numSegs==7){
						BioMightOrientation orientation = new BioMightOrientation(-1.0, 0.0, 0.0, 90.0);
			 			bioInstruct.setTransType(Constants.ROTATEOCTO);
		    			bioInstruct.setTheta(-45);
		    			bioInstruct.setPivotPoint(6);	
		     			bioInstruct.setRotateVector(1.0, 0.0, 0.0);
		     			bioInstruct.setOrientation(orientation);
					}
					else if (numSegs==8){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.05, 0.0, -0.50);
					}
					else if (numSegs==9){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.05, -0.05, -0.250);
					}
					else if (numSegs==10){
						BioMightOrientation orientation = new BioMightOrientation(-1.0, 0.0, 0.0, 90.0);
			 			bioInstruct.setTransType(Constants.ROTATEOCTO);
		    			bioInstruct.setTheta(-45);
		    			bioInstruct.setPivotPoint(6);	
		     			bioInstruct.setRotateVector(1.0, 0.0, 0.0);
		     			bioInstruct.setOrientation(orientation);
					}
					else if (numSegs==11){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.0, -0.50, -0.15);
					}
					else if (numSegs==12){
						BioMightOrientation orientation = new BioMightOrientation(-1.0, 0.0, 0.0, 90.0);
			 			bioInstruct.setTransType(Constants.ROTATEOCTO);
		    			bioInstruct.setTheta(-45);
		    			bioInstruct.setPivotPoint(6);	
		     			bioInstruct.setRotateVector(1.0, 0.0, 0.0);
		     			bioInstruct.setOrientation(orientation);
					}		
					else if (numSegs==13){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.01, -0.50, 0.0);
					}
					else if (numSegs==14){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.02, -0.50, 0.03);
					}	
					else if (numSegs==15){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.0, -0.50, 0.05);
					}	
					else if (numSegs==16){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.0, -0.50, 0.01);
					}	
					
					
					else {
						bioInstruct.setPivotPoint(3);
						bioInstruct.setRotateVector(0.0, 0.0, 1.0);
						bioInstruct.setTransType(2);
						bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);
					}
					
					
		    		// Add the instruction into the instruction set
		    		bioMightInstructSet.addElement(bioInstruct);
				}    
			} 
	
			else if (componentName.equals("Descend")) 
			{			
				// We can generate the FacialArtery
				if (currentPoints == null )
				{
					double circumference = 0.00625;
					double[] startPos = {1.5, 0.25, 0.00};
					currentPoints = BioGraphics.octogonYPlane(startPos, circumference);
				}
				
				int nMaxSegs = 18;
				for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
			
					// Create a place for an instruction 
					BioMightInstruction bioInstruct = new BioMightInstruction();
		     
					if (numSegs==0){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.20, -0.50, 0.0);
					}
					else if (numSegs==1){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.30, -0.50, 0.0);
					}
					else if (numSegs==2){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.35, -0.50, 0.0);
					}
					else if (numSegs==3){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.40, -0.50, 0.0);
					}
					else if (numSegs==4){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.40, -0.50, 0.0);
					}
					else if (numSegs==5){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.20, -0.50, 0.0);
					}
					else if (numSegs==6){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.15, -0.50, 0.0);
					}
					else if (numSegs==7){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.05, -0.50, 0.0);
					}
					else if (numSegs==8){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.02, -0.50, 0.0);
					}
					else if (numSegs==9){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.03, -0.50, 0.0);
					}
					else if (numSegs==10){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.02, -0.50, 0.0);
					}
					else if (numSegs==11){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.04, -0.50, 0.0);
					}
					else if (numSegs==12){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.01, -0.50, 0.0);
					}
					else if (numSegs==13){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.02, -0.50, 0.0);
					}
					else if (numSegs==14){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.0, -0.50, 0.0);
					}
					else if (numSegs==15){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.0, -0.50, 0.0);
					}
					else if (numSegs==16){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.01, -0.50, 0.0);
					}
					else if (numSegs==17){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.0, -0.50, 0.0);
					}
					else if (numSegs==18){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.0, -0.50, 0.0);
					}
					
					else {
						bioInstruct.setPivotPoint(3);
						bioInstruct.setRotateVector(0.0, 0.0, 1.0);
						bioInstruct.setTransType(2);
						bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);
					}
					
					
		    		// Add the instruction into the instruction set
		    		bioMightInstructSet.addElement(bioInstruct);
				}    
			} 
			
			else if (componentName.equals("Branch1")) 
			{			
				if (currentPoints == null )
				{
					double circumference = 0.00625;
					double[] startPos = {1.5, 0.25, 0.00};
					currentPoints = BioGraphics.octogonYPlane(startPos, circumference);
				}
				
				int nMaxSegs = 4;
				for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
			
					// Create a place for an instruction 
					BioMightInstruction bioInstruct = new BioMightInstruction();
		     
				
					if (numSegs==0){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.25, 0.0, 0.0);
					}
					else if (numSegs==1){
						BioMightOrientation orientation = new BioMightOrientation(0.0, -1.0, 0.0, 90.0);
			 			bioInstruct.setTransType(Constants.ROTATEOCTO);
		    			bioInstruct.setTheta(-45);	
		    			bioInstruct.setPivotPoint(4);	
		     			bioInstruct.setRotateVector(0.0, 0.0, 1.0);
		     			bioInstruct.setOrientation(orientation);
		     			bioInstruct.setScaleMatrix(0.90, 0.90, 0.90);
					}
					else if (numSegs==2){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.45, -0.50, 0.0);
					}
					else if (numSegs==3){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.35, -0.50, 0.1);
					}
				
						

			
					else {
						bioInstruct.setPivotPoint(3);
						bioInstruct.setRotateVector(0.0, 0.0, 1.0);
						bioInstruct.setTransType(2);
						bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);
					}
					
					
		    		// Add the instruction into the instruction set
		    		bioMightInstructSet.addElement(bioInstruct);
				}    
			} 
			
			
			else if (componentName.equals("Branch2")) 
			{			
				// We can generate the FacialArtery
				if (currentPoints == null )
				{
					double circumference = 0.00625;
					double[] startPos = {1.5, 0.25, 0.00};
					currentPoints = BioGraphics.octogonYPlane(startPos, circumference);
				}
				
				int nMaxSegs = 4;
				for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
			
					// Create a place for an instruction 
					BioMightInstruction bioInstruct = new BioMightInstruction();
		     


					if (numSegs==0){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.25, 0.0, 0.0);
					}
					else if (numSegs==1){
						BioMightOrientation orientation = new BioMightOrientation(0.0, -1.0, 0.0, 90.0);
			 			bioInstruct.setTransType(Constants.ROTATEOCTO);
		    			bioInstruct.setTheta(45);	
		    			bioInstruct.setPivotPoint(0);	
		     			bioInstruct.setRotateVector(0.0, 0.0, 1.0);
		     			bioInstruct.setOrientation(orientation);
		     			bioInstruct.setScaleMatrix(0.90, 0.90, 0.90);
					}
					else if (numSegs==2){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.45, -0.50, 0.0);
					}
					else if (numSegs==3){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.35, -0.50, 0.1);
					}
	
					
		    		// Add the instruction into the instruction set
		    		bioMightInstructSet.addElement(bioInstruct);
				}    
			} 
			
		}
		else if (componentID.equals("LateralCircumflexFemoralArtery:02") || parentID.equals("LateralCircumflexFemoralArtery:02")) {
			
			if (componentName.equals("Loop")) 
			{			
				// We can generate the FacialArtery
				if (currentPoints == null )
				{
					double circumference = 0.00625;
					double[] startPos = {1.5, 0.25, 0.00};
					currentPoints = BioGraphics.octogonYPlane(startPos, circumference);
				}
				
				int nMaxSegs = 10;
				for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
			
					// Create a place for an instruction 
					BioMightInstruction bioInstruct = new BioMightInstruction();
		     
					if (numSegs==0){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.50, 0.0, 0.65);
					}
					else if (numSegs==1){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.50, 0.01, 0.50);
					}
					else if (numSegs==2){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.250, -0.02, 0.25);
					}
					else if (numSegs==3){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.50, 0.01, 0.0);
					}
					else if (numSegs==4){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.250, -0.05, 0.0);
					}
					else if (numSegs==5){
						BioMightOrientation orientation = new BioMightOrientation(0.0, -1.0, 0.0, 90.0);
			 			bioInstruct.setTransType(Constants.ROTATEOCTOSCALE);
		    			bioInstruct.setTheta(-45);	
		    			bioInstruct.setPivotPoint(4);	
		     			bioInstruct.setRotateVector(0.0, 1.0, 0.0);
		     			bioInstruct.setOrientation(orientation);
		     			bioInstruct.setScaleMatrix(0.90, 0.90, 0.90);
					}
					else if (numSegs==6){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.50, -0.02, -0.50);
					}
					else if (numSegs==7){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.50, 0.03, -0.65);
					}
					else if (numSegs==8){
						BioMightOrientation orientation = new BioMightOrientation(0.0, -1.0, 0.0, 90.0);
			 			bioInstruct.setTransType(Constants.ROTATEOCTOSCALE);
		    			bioInstruct.setTheta(-45);	
		    			bioInstruct.setPivotPoint(4);	
		     			bioInstruct.setRotateVector(0.0, 1.0, 0.0);
		     			bioInstruct.setOrientation(orientation);
		     			bioInstruct.setScaleMatrix(0.90, 0.90, 0.90);
					}
					else if (numSegs==9){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.50, -0.01, -0.50);
					}
				
			
					
					else {
						bioInstruct.setPivotPoint(3);
						bioInstruct.setRotateVector(0.0, 0.0, 1.0);
						bioInstruct.setTransType(2);
						bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);
					}
					
					
		    		// Add the instruction into the instruction set
		    		bioMightInstructSet.addElement(bioInstruct);
				}    
			} 
			else if (componentName.equals("Bridge")) 
			{			
				// We can generate the FacialArtery
				if (currentPoints == null )
				{
					double circumference = 0.00625;
					double[] startPos = {1.5, 0.25, 0.00};
					currentPoints = BioGraphics.octogonYPlane(startPos, circumference);
				}
				
				int nMaxSegs = 17;
				for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
			
					// Create a place for an instruction 
					BioMightInstruction bioInstruct = new BioMightInstruction();
		     


					if (numSegs==0){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.0, 0.50, 0.0);
					}
					else if (numSegs==1){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.1, 0.50, -0.1);
					}
					else if (numSegs==2){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.1, 0.50, -0.15);
					}
					else if (numSegs==3){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.18, 0.50, -0.14);
					}
					else if (numSegs==4){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.08, 0.250, -0.05);
					}
					else if (numSegs==5){
						BioMightOrientation orientation = new BioMightOrientation(-1.0, 0.0, 0.0, 90.0);
			 			bioInstruct.setTransType(Constants.ROTATEOCTO);
		    			bioInstruct.setTheta(-45);
		    			bioInstruct.setPivotPoint(6);	
		     			bioInstruct.setRotateVector(1.0, 0.0, 0.0);
		     			bioInstruct.setOrientation(orientation);
					}
					else if (numSegs==6){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.0, 0.25, -0.50);
					}
					else if (numSegs==7){
						BioMightOrientation orientation = new BioMightOrientation(-1.0, 0.0, 0.0, 90.0);
			 			bioInstruct.setTransType(Constants.ROTATEOCTO);
		    			bioInstruct.setTheta(-45);
		    			bioInstruct.setPivotPoint(6);	
		     			bioInstruct.setRotateVector(1.0, 0.0, 0.0);
		     			bioInstruct.setOrientation(orientation);
					}
					else if (numSegs==8){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.05, 0.0, -0.50);
					}
					else if (numSegs==9){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.05, -0.05, -0.250);
					}
					else if (numSegs==10){
						BioMightOrientation orientation = new BioMightOrientation(-1.0, 0.0, 0.0, 90.0);
			 			bioInstruct.setTransType(Constants.ROTATEOCTO);
		    			bioInstruct.setTheta(-45);
		    			bioInstruct.setPivotPoint(6);	
		     			bioInstruct.setRotateVector(1.0, 0.0, 0.0);
		     			bioInstruct.setOrientation(orientation);
					}
					else if (numSegs==11){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.0, -0.50, -0.15);
					}
					else if (numSegs==12){
						BioMightOrientation orientation = new BioMightOrientation(-1.0, 0.0, 0.0, 90.0);
			 			bioInstruct.setTransType(Constants.ROTATEOCTO);
		    			bioInstruct.setTheta(-45);
		    			bioInstruct.setPivotPoint(6);	
		     			bioInstruct.setRotateVector(1.0, 0.0, 0.0);
		     			bioInstruct.setOrientation(orientation);
					}		
					else if (numSegs==13){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.01, -0.50, 0.0);
					}
					else if (numSegs==14){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.02, -0.50, 0.03);
					}	
					else if (numSegs==15){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.0, -0.50, 0.05);
					}	
					else if (numSegs==16){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.0, -0.50, 0.01);
					}	
					
					
					else if (numSegs==17){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.0, -0.1, 0.03);
					}	
					
					else {
						bioInstruct.setPivotPoint(3);
						bioInstruct.setRotateVector(0.0, 0.0, 1.0);
						bioInstruct.setTransType(2);
						bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);
					}
					
					
		    		// Add the instruction into the instruction set
		    		bioMightInstructSet.addElement(bioInstruct);
				}    
			} 
			else if (componentName.equals("Descend")) 
			{			
				// We can generate the FacialArtery
				if (currentPoints == null )
				{
					double circumference = 0.00625;
					double[] startPos = {1.5, 0.25, 0.00};
					currentPoints = BioGraphics.octogonYPlane(startPos, circumference);
				}
				
				int nMaxSegs = 18;
				for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
			
					// Create a place for an instruction 
					BioMightInstruction bioInstruct = new BioMightInstruction();
		     
					if (numSegs==0){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.20, -0.50, 0.0);
					}
					else if (numSegs==1){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.30, -0.50, 0.0);
					}
					else if (numSegs==2){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.35, -0.50, 0.0);
					}
					else if (numSegs==3){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.40, -0.50, 0.0);
					}
					else if (numSegs==4){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.40, -0.50, 0.0);
					}
					else if (numSegs==5){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.20, -0.50, 0.0);
					}
					else if (numSegs==6){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.15, -0.50, 0.0);
					}
					else if (numSegs==7){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.05, -0.50, 0.0);
					}
					else if (numSegs==8){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.02, -0.50, 0.0);
					}
					else if (numSegs==9){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.03, -0.50, 0.0);
					}
					else if (numSegs==10){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.02, -0.50, 0.0);
					}
					else if (numSegs==11){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.04, -0.50, 0.0);
					}
					else if (numSegs==12){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.01, -0.50, 0.0);
					}
					else if (numSegs==13){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.02, -0.50, 0.0);
					}
					else if (numSegs==14){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.0, -0.50, 0.0);
					}
					else if (numSegs==15){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.0, -0.50, 0.0);
					}
					else if (numSegs==16){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.01, -0.50, 0.0);
					}
					else if (numSegs==17){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.0, -0.50, 0.0);
					}
					else if (numSegs==18){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.0, -0.50, 0.0);
					}
					
					else {
						bioInstruct.setPivotPoint(3);
						bioInstruct.setRotateVector(0.0, 0.0, 1.0);
						bioInstruct.setTransType(2);
						bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);
					}
					
					
		    		// Add the instruction into the instruction set
		    		bioMightInstructSet.addElement(bioInstruct);
				}    
			} 

			
			else if (componentName.equals("Branch1")) 
			{			
				if (currentPoints == null )
				{
					double circumference = 0.00625;
					double[] startPos = {1.5, 0.25, 0.00};
					currentPoints = BioGraphics.octogonYPlane(startPos, circumference);
				}
				
				int nMaxSegs = 4;
				for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
			
					// Create a place for an instruction 
					BioMightInstruction bioInstruct = new BioMightInstruction();
		     
			
					if (numSegs==0){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.25, 0.0, 0.0);
					}
					else if (numSegs==1){
						BioMightOrientation orientation = new BioMightOrientation(0.0, -1.0, 0.0, 90.0);
			 			bioInstruct.setTransType(Constants.ROTATEOCTO);
		    			bioInstruct.setTheta(45);	
		    			bioInstruct.setPivotPoint(0);	
		     			bioInstruct.setRotateVector(0.0, 0.0, 1.0);
		     			bioInstruct.setOrientation(orientation);
		     			bioInstruct.setScaleMatrix(0.90, 0.90, 0.90);
					}
					else if (numSegs==2){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.45, -0.50, 0.0);
					}
					else if (numSegs==3){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.35, -0.50, 0.1);
					}
						

			
					else {
						bioInstruct.setPivotPoint(3);
						bioInstruct.setRotateVector(0.0, 0.0, 1.0);
						bioInstruct.setTransType(2);
						bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);
					}
					
					
		    		// Add the instruction into the instruction set
		    		bioMightInstructSet.addElement(bioInstruct);
				}    
			} 
						
			else if (componentName.equals("Branch2")) 
			{			
				// We can generate the FacialArtery
				if (currentPoints == null )
				{
					double circumference = 0.00625;
					double[] startPos = {1.5, 0.25, 0.00};
					currentPoints = BioGraphics.octogonYPlane(startPos, circumference);
				}
				
				int nMaxSegs = 4;
				for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
			
					// Create a place for an instruction 
					BioMightInstruction bioInstruct = new BioMightInstruction();
		     
					if (numSegs==0){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.25, 0.0, 0.0);
					}
					else if (numSegs==1){
						BioMightOrientation orientation = new BioMightOrientation(0.0, -1.0, 0.0, 90.0);
			 			bioInstruct.setTransType(Constants.ROTATEOCTO);
		    			bioInstruct.setTheta(-45);	
		    			bioInstruct.setPivotPoint(4);	
		     			bioInstruct.setRotateVector(0.0, 0.0, 1.0);
		     			bioInstruct.setOrientation(orientation);
		     			bioInstruct.setScaleMatrix(0.90, 0.90, 0.90);
					}
					else if (numSegs==2){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.45, -0.50, 0.0);
					}
					else if (numSegs==3){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.35, -0.50, 0.1);
					}
	
					
		    		// Add the instruction into the instruction set
		    		bioMightInstructSet.addElement(bioInstruct);
				}    
			} 	
			
			
		}
					
		DBUtils.generateFacedComponents(Constants.QUADRANGLE, startID, componentType, componentName, componentID, currentPoints, bioMightInstructSet);
		System.out.println("Generating the Rows for LateralCircumflexFemoralArteryEndothelium: " + componentID + "   " + componentType + "   " + bioMightInstructSet.getSize());

		
		return returnCode;
	}

		
	/***************************************************************************************
	 * GENERATE LATERAL CIRCUMFLEX FEMORAL VEIN
	 * 
	 * This generates the LateralCircumflexFemoralVein 
	 *
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/
	  	
	public int generateLateralCircumflexFemoralVein(String startID, String componentType, String componentName, String componentID,  String parentID, double[][] currentPoints) 
		throws DataException, DataSecurityException
	{	
		System.out.println("generateLateralCircumflexFemoralVein(): " + componentID + "   " + parentID);
		
		int bodyID = 1;
		int projectID = 1;
		String vertices = "";
		
		ArrayList mySqlList= new ArrayList();
		int returnCode = 0;
	
		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();

		// Right FacialVein - Move inward toward the front of Jaw
		if (componentID.equals("LateralCircumflexFemoralVein:01") || parentID.equals("LateralCircumflexFemoralVein:01")) 
		{	
			
			if (componentName.equals("Loop")) 
			{			
				// We can generate the FacialVein
				if (currentPoints == null )
				{
					double circumference = 0.00625;
					double[] startPos = {1.5, 0.25, 0.00};
					currentPoints = BioGraphics.octogonYPlane(startPos, circumference);
				}
				
				int nMaxSegs = 10;
				for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
			
					// Create a place for an instruction 
					BioMightInstruction bioInstruct = new BioMightInstruction();
		     
					if (numSegs==0){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.50, 0.0, 0.65);
					}
					else if (numSegs==1){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.50, 0.01, 0.50);
					}
					else if (numSegs==2){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.250, -0.02, 0.25);
					}
					else if (numSegs==3){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.50, 0.01, 0.0);
					}
					else if (numSegs==4){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.250, 0.03, 0.0);
					}
					else if (numSegs==5){
						BioMightOrientation orientation = new BioMightOrientation(0.0, -1.0, 0.0, 90.0);
			 			bioInstruct.setTransType(Constants.ROTATEOCTOSCALE);
		    			bioInstruct.setTheta(45);	
		    			bioInstruct.setPivotPoint(0);	
		     			bioInstruct.setRotateVector(0.0, 1.0, 0.0);
		     			bioInstruct.setOrientation(orientation);
		     			bioInstruct.setScaleMatrix(0.90, 0.90, 0.90);
					}
					else if (numSegs==6){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.50, 0.03, -0.50);
					}
					else if (numSegs==7){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.50, -0.01, -0.65);
					}
					else if (numSegs==8){
						BioMightOrientation orientation = new BioMightOrientation(0.0, -1.0, 0.0, 90.0);
			 			bioInstruct.setTransType(Constants.ROTATEOCTOSCALE);
		    			bioInstruct.setTheta(-45);	
		    			bioInstruct.setPivotPoint(0);	
		     			bioInstruct.setRotateVector(0.0, 1.0, 0.0);
		     			bioInstruct.setOrientation(orientation);
		     			bioInstruct.setScaleMatrix(0.90, 0.90, 0.90);
					}
					else if (numSegs==9){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.50, 0.0, -0.50);
					}
					
					else {
						bioInstruct.setPivotPoint(3);
						bioInstruct.setRotateVector(0.0, 0.0, 1.0);
						bioInstruct.setTransType(2);
						bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);
					}
					
					
		    		// Add the instruction into the instruction set
		    		bioMightInstructSet.addElement(bioInstruct);
				}    
			} 
			else if (componentName.equals("Bridge")) 
			{			
				// Track that goes over the troachanter neck
				if (currentPoints == null )
				{
					double circumference = 0.00625;
					double[] startPos = {1.5, 0.25, 0.00};
					currentPoints = BioGraphics.octogonYPlane(startPos, circumference);
				}
				
				int nMaxSegs = 17;
				for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
			
					// Create a place for an instruction 
					BioMightInstruction bioInstruct = new BioMightInstruction();
		     

					if (numSegs==0){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.0, 0.50, 0.0);
					}
					else if (numSegs==1){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.1, 0.50, -0.1);
					}
					else if (numSegs==2){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.1, 0.50, -0.15);
					}
					else if (numSegs==3){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.18, 0.50, -0.14);
					}
					else if (numSegs==4){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.08, 0.250, -0.05);
					}
					else if (numSegs==5){
						BioMightOrientation orientation = new BioMightOrientation(-1.0, 0.0, 0.0, 90.0);
			 			bioInstruct.setTransType(Constants.ROTATEOCTO);
		    			bioInstruct.setTheta(-45);
		    			bioInstruct.setPivotPoint(6);	
		     			bioInstruct.setRotateVector(1.0, 0.0, 0.0);
		     			bioInstruct.setOrientation(orientation);
					}
					else if (numSegs==6){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.0, 0.25, -0.50);
					}
					else if (numSegs==7){
						BioMightOrientation orientation = new BioMightOrientation(-1.0, 0.0, 0.0, 90.0);
			 			bioInstruct.setTransType(Constants.ROTATEOCTO);
		    			bioInstruct.setTheta(-45);
		    			bioInstruct.setPivotPoint(6);	
		     			bioInstruct.setRotateVector(1.0, 0.0, 0.0);
		     			bioInstruct.setOrientation(orientation);
					}
					else if (numSegs==8){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.05, 0.0, -0.50);
					}
					else if (numSegs==9){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.05, -0.05, -0.250);
					}
					else if (numSegs==10){
						BioMightOrientation orientation = new BioMightOrientation(-1.0, 0.0, 0.0, 90.0);
			 			bioInstruct.setTransType(Constants.ROTATEOCTO);
		    			bioInstruct.setTheta(-45);
		    			bioInstruct.setPivotPoint(6);	
		     			bioInstruct.setRotateVector(1.0, 0.0, 0.0);
		     			bioInstruct.setOrientation(orientation);
					}
					else if (numSegs==11){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.0, -0.50, -0.15);
					}
					else if (numSegs==12){
						BioMightOrientation orientation = new BioMightOrientation(-1.0, 0.0, 0.0, 90.0);
			 			bioInstruct.setTransType(Constants.ROTATEOCTO);
		    			bioInstruct.setTheta(-45);
		    			bioInstruct.setPivotPoint(6);	
		     			bioInstruct.setRotateVector(1.0, 0.0, 0.0);
		     			bioInstruct.setOrientation(orientation);
					}		
					else if (numSegs==13){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.01, -0.50, 0.0);
					}
					else if (numSegs==14){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.02, -0.50, 0.03);
					}	
					else if (numSegs==15){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.0, -0.50, 0.05);
					}	
					else if (numSegs==16){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.0, -0.50, 0.01);
					}	
					
					
					else {
						bioInstruct.setPivotPoint(3);
						bioInstruct.setRotateVector(0.0, 0.0, 1.0);
						bioInstruct.setTransType(2);
						bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);
					}
					
					
		    		// Add the instruction into the instruction set
		    		bioMightInstructSet.addElement(bioInstruct);
				}    
			} 
	
			else if (componentName.equals("Descend")) 
			{			
				// We can generate the FacialVein
				if (currentPoints == null )
				{
					double circumference = 0.00625;
					double[] startPos = {1.5, 0.25, 0.00};
					currentPoints = BioGraphics.octogonYPlane(startPos, circumference);
				}
				
				int nMaxSegs = 18;
				for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
			
					// Create a place for an instruction 
					BioMightInstruction bioInstruct = new BioMightInstruction();
		     
					if (numSegs==0){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.25, -0.50, 0.0);
					}
					else if (numSegs==1){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.35, -0.50, 0.0);
					}
					else if (numSegs==2){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.35, -0.50, 0.0);
					}
					else if (numSegs==3){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.40, -0.50, 0.0);
					}
					
					else if (numSegs==4){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.40, -0.50, 0.0);
					}
					else if (numSegs==5){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.20, -0.50, 0.0);
					}
					else if (numSegs==6){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.15, -0.50, 0.0);
					}
					else if (numSegs==7){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.05, -0.50, 0.0);
					}
					else if (numSegs==8){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.02, -0.50, 0.0);
					}
					else if (numSegs==9){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.03, -0.50, 0.0);
					}
					else if (numSegs==10){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.02, -0.50, 0.0);
					}
					else if (numSegs==11){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.04, -0.50, 0.0);
					}
					else if (numSegs==12){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.01, -0.50, 0.0);
					}
					else if (numSegs==13){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.02, -0.50, 0.0);
					}
					else if (numSegs==14){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.0, -0.50, 0.0);
					}
					else if (numSegs==15){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.0, -0.50, 0.0);
					}
					else if (numSegs==16){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.01, -0.50, 0.0);
					}
					else if (numSegs==17){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.0, -0.50, 0.0);
					}
					else if (numSegs==18){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.0, -0.50, 0.0);
					}
					
					else {
						bioInstruct.setPivotPoint(3);
						bioInstruct.setRotateVector(0.0, 0.0, 1.0);
						bioInstruct.setTransType(2);
						bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);
					}
					
					
		    		// Add the instruction into the instruction set
		    		bioMightInstructSet.addElement(bioInstruct);
				}    
			} 
			
			else if (componentName.equals("Branch1")) 
			{			
				if (currentPoints == null )
				{
					double circumference = 0.00625;
					double[] startPos = {1.5, 0.25, 0.00};
					currentPoints = BioGraphics.octogonYPlane(startPos, circumference);
				}
				
				int nMaxSegs = 4;
				for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
			
					// Create a place for an instruction 
					BioMightInstruction bioInstruct = new BioMightInstruction();
		     
				
					if (numSegs==0){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.25, 0.0, 0.0);
					}
					else if (numSegs==1){
						BioMightOrientation orientation = new BioMightOrientation(0.0, -1.0, 0.0, 90.0);
			 			bioInstruct.setTransType(Constants.ROTATEOCTO);
		    			bioInstruct.setTheta(-45);	
		    			bioInstruct.setPivotPoint(4);	
		     			bioInstruct.setRotateVector(0.0, 0.0, 1.0);
		     			bioInstruct.setOrientation(orientation);
		     			bioInstruct.setScaleMatrix(0.90, 0.90, 0.90);
					}
					else if (numSegs==2){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.45, -0.50, 0.0);
					}
					else if (numSegs==3){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.35, -0.50, 0.1);
					}
				
						

			
					else {
						bioInstruct.setPivotPoint(3);
						bioInstruct.setRotateVector(0.0, 0.0, 1.0);
						bioInstruct.setTransType(2);
						bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);
					}
					
					
		    		// Add the instruction into the instruction set
		    		bioMightInstructSet.addElement(bioInstruct);
				}    
			} 
			
			
			else if (componentName.equals("Branch2")) 
			{			
				// We can generate the FacialVein
				if (currentPoints == null )
				{
					double circumference = 0.00625;
					double[] startPos = {1.5, 0.25, 0.00};
					currentPoints = BioGraphics.octogonYPlane(startPos, circumference);
				}
				
				int nMaxSegs = 4;
				for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
			
					// Create a place for an instruction 
					BioMightInstruction bioInstruct = new BioMightInstruction();
		     


					if (numSegs==0){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.25, 0.0, 0.0);
					}
					else if (numSegs==1){
						BioMightOrientation orientation = new BioMightOrientation(0.0, -1.0, 0.0, 90.0);
			 			bioInstruct.setTransType(Constants.ROTATEOCTO);
		    			bioInstruct.setTheta(45);	
		    			bioInstruct.setPivotPoint(0);	
		     			bioInstruct.setRotateVector(0.0, 0.0, 1.0);
		     			bioInstruct.setOrientation(orientation);
		     			bioInstruct.setScaleMatrix(0.90, 0.90, 0.90);
					}
					else if (numSegs==2){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.45, -0.50, 0.0);
					}
					else if (numSegs==3){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.35, -0.50, 0.1);
					}
	
					
		    		// Add the instruction into the instruction set
		    		bioMightInstructSet.addElement(bioInstruct);
				}    
			} 
			
		}
		else if (componentID.equals("LateralCircumflexFemoralVein:02") || parentID.equals("LateralCircumflexFemoralVein:02")) {
			
			if (componentName.equals("Loop")) 
			{			
				// We can generate the FacialVein
				if (currentPoints == null )
				{
					double circumference = 0.00625;
					double[] startPos = {1.5, 0.25, 0.00};
					currentPoints = BioGraphics.octogonYPlane(startPos, circumference);
				}
				
				int nMaxSegs = 10;
				for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
			
					// Create a place for an instruction 
					BioMightInstruction bioInstruct = new BioMightInstruction();
		     
					if (numSegs==0){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.50, 0.0, 0.65);
					}
					else if (numSegs==1){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.50, 0.01, 0.50);
					}
					else if (numSegs==2){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.250, -0.02, 0.25);
					}
					else if (numSegs==3){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.50, 0.01, 0.0);
					}
					else if (numSegs==4){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.250, -0.05, 0.0);
					}
					else if (numSegs==5){
						BioMightOrientation orientation = new BioMightOrientation(0.0, -1.0, 0.0, 90.0);
			 			bioInstruct.setTransType(Constants.ROTATEOCTOSCALE);
		    			bioInstruct.setTheta(-45);	
		    			bioInstruct.setPivotPoint(4);	
		     			bioInstruct.setRotateVector(0.0, 1.0, 0.0);
		     			bioInstruct.setOrientation(orientation);
		     			bioInstruct.setScaleMatrix(0.90, 0.90, 0.90);
					}
					else if (numSegs==6){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.50, -0.02, -0.50);
					}
					else if (numSegs==7){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.50, 0.03, -0.65);
					}
					else if (numSegs==8){
						BioMightOrientation orientation = new BioMightOrientation(0.0, -1.0, 0.0, 90.0);
			 			bioInstruct.setTransType(Constants.ROTATEOCTOSCALE);
		    			bioInstruct.setTheta(-45);	
		    			bioInstruct.setPivotPoint(4);	
		     			bioInstruct.setRotateVector(0.0, 1.0, 0.0);
		     			bioInstruct.setOrientation(orientation);
		     			bioInstruct.setScaleMatrix(0.90, 0.90, 0.90);
					}
					else if (numSegs==9){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.50, -0.01, -0.50);
					}
				
			
					
					else {
						bioInstruct.setPivotPoint(3);
						bioInstruct.setRotateVector(0.0, 0.0, 1.0);
						bioInstruct.setTransType(2);
						bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);
					}
					
					
		    		// Add the instruction into the instruction set
		    		bioMightInstructSet.addElement(bioInstruct);
				}    
			} 
			else if (componentName.equals("Bridge")) 
			{			
				// We can generate the FacialVein
				if (currentPoints == null )
				{
					double circumference = 0.00625;
					double[] startPos = {1.5, 0.25, 0.00};
					currentPoints = BioGraphics.octogonYPlane(startPos, circumference);
				}
				
				int nMaxSegs = 17;
				for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
			
					// Create a place for an instruction 
					BioMightInstruction bioInstruct = new BioMightInstruction();
		     


					if (numSegs==0){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.05, 0.50, 0.0);
					}
					else if (numSegs==1){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.1, 0.50, -0.1);
					}
					else if (numSegs==2){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.15, 0.50, -0.15);
					}
					else if (numSegs==3){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.10, 0.50, -0.14);
					}
					else if (numSegs==4){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.08, 0.250, -0.05);
					}
					else if (numSegs==5){
						BioMightOrientation orientation = new BioMightOrientation(-1.0, 0.0, 0.0, 90.0);
			 			bioInstruct.setTransType(Constants.ROTATEOCTO);
		    			bioInstruct.setTheta(-45);
		    			bioInstruct.setPivotPoint(6);	
		     			bioInstruct.setRotateVector(1.0, 0.0, 0.0);
		     			bioInstruct.setOrientation(orientation);
					}
					else if (numSegs==6){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.0, 0.25, -0.50);
					}
					else if (numSegs==7){
						BioMightOrientation orientation = new BioMightOrientation(-1.0, 0.0, 0.0, 90.0);
			 			bioInstruct.setTransType(Constants.ROTATEOCTO);
		    			bioInstruct.setTheta(-45);
		    			bioInstruct.setPivotPoint(6);	
		     			bioInstruct.setRotateVector(1.0, 0.0, 0.0);
		     			bioInstruct.setOrientation(orientation);
					}
					else if (numSegs==8){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.05, 0.0, -0.50);
					}
					else if (numSegs==9){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.05, -0.05, -0.250);
					}
					else if (numSegs==10){
						BioMightOrientation orientation = new BioMightOrientation(-1.0, 0.0, 0.0, 90.0);
			 			bioInstruct.setTransType(Constants.ROTATEOCTO);
		    			bioInstruct.setTheta(-45);
		    			bioInstruct.setPivotPoint(6);	
		     			bioInstruct.setRotateVector(1.0, 0.0, 0.0);
		     			bioInstruct.setOrientation(orientation);
					}
					else if (numSegs==11){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.0, -0.50, -0.15);
					}
					else if (numSegs==12){
						BioMightOrientation orientation = new BioMightOrientation(-1.0, 0.0, 0.0, 90.0);
			 			bioInstruct.setTransType(Constants.ROTATEOCTO);
		    			bioInstruct.setTheta(-45);
		    			bioInstruct.setPivotPoint(6);	
		     			bioInstruct.setRotateVector(1.0, 0.0, 0.0);
		     			bioInstruct.setOrientation(orientation);
					}		
					else if (numSegs==13){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.01, -0.50, 0.0);
					}
					else if (numSegs==14){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.02, -0.50, 0.03);
					}	
					else if (numSegs==15){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.0, -0.50, 0.05);
					}	
					else if (numSegs==16){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.0, -0.50, 0.01);
					}	
					
					
					else if (numSegs==17){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.0, -0.1, 0.03);
					}	
					
					else {
						bioInstruct.setPivotPoint(3);
						bioInstruct.setRotateVector(0.0, 0.0, 1.0);
						bioInstruct.setTransType(2);
						bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);
					}
					
					
		    		// Add the instruction into the instruction set
		    		bioMightInstructSet.addElement(bioInstruct);
				}    
			} 
			else if (componentName.equals("Descend")) 
			{			
				// We can generate the FacialVein
				if (currentPoints == null )
				{
					double circumference = 0.00625;
					double[] startPos = {1.5, 0.25, 0.00};
					currentPoints = BioGraphics.octogonYPlane(startPos, circumference);
				}
				
				int nMaxSegs = 18;
				for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
			
					// Create a place for an instruction 
					BioMightInstruction bioInstruct = new BioMightInstruction();
		     
					if (numSegs==0){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.25, -0.50, 0.0);
					}
					else if (numSegs==1){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.35, -0.50, 0.0);
					}
					else if (numSegs==2){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.35, -0.50, 0.0);
					}
					else if (numSegs==3){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.40, -0.50, 0.0);
					}
					else if (numSegs==4){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.40, -0.50, 0.0);
					}
					else if (numSegs==5){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.20, -0.50, 0.0);
					}
					else if (numSegs==6){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.15, -0.50, 0.0);
					}
					else if (numSegs==7){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.05, -0.50, 0.0);
					}
					else if (numSegs==8){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.02, -0.50, 0.0);
					}
					else if (numSegs==9){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.03, -0.50, 0.0);
					}
					else if (numSegs==10){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.02, -0.50, 0.0);
					}
					else if (numSegs==11){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.04, -0.50, 0.0);
					}
					else if (numSegs==12){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.01, -0.50, 0.0);
					}
					else if (numSegs==13){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.02, -0.50, 0.0);
					}
					else if (numSegs==14){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.0, -0.50, 0.0);
					}
					else if (numSegs==15){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.0, -0.50, 0.0);
					}
					else if (numSegs==16){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.01, -0.50, 0.0);
					}
					else if (numSegs==17){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.0, -0.50, 0.0);
					}
					else if (numSegs==18){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.0, -0.50, 0.0);
					}
					
					else {
						bioInstruct.setPivotPoint(3);
						bioInstruct.setRotateVector(0.0, 0.0, 1.0);
						bioInstruct.setTransType(2);
						bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);
					}
					
					
		    		// Add the instruction into the instruction set
		    		bioMightInstructSet.addElement(bioInstruct);
				}    
			} 

			
			else if (componentName.equals("Branch1")) 
			{			
				if (currentPoints == null )
				{
					double circumference = 0.00625;
					double[] startPos = {1.5, 0.25, 0.00};
					currentPoints = BioGraphics.octogonYPlane(startPos, circumference);
				}
				
				int nMaxSegs = 4;
				for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
			
					// Create a place for an instruction 
					BioMightInstruction bioInstruct = new BioMightInstruction();
		     
			
					if (numSegs==0){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.25, 0.0, 0.0);
					}
					else if (numSegs==1){
						BioMightOrientation orientation = new BioMightOrientation(0.0, -1.0, 0.0, 90.0);
			 			bioInstruct.setTransType(Constants.ROTATEOCTO);
		    			bioInstruct.setTheta(45);	
		    			bioInstruct.setPivotPoint(0);	
		     			bioInstruct.setRotateVector(0.0, 0.0, 1.0);
		     			bioInstruct.setOrientation(orientation);
		     			bioInstruct.setScaleMatrix(0.90, 0.90, 0.90);
					}
					else if (numSegs==2){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.45, -0.50, 0.0);
					}
					else if (numSegs==3){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.35, -0.50, 0.1);
					}
						

			
					else {
						bioInstruct.setPivotPoint(3);
						bioInstruct.setRotateVector(0.0, 0.0, 1.0);
						bioInstruct.setTransType(2);
						bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);
					}
					
					
		    		// Add the instruction into the instruction set
		    		bioMightInstructSet.addElement(bioInstruct);
				}    
			} 
						
			else if (componentName.equals("Branch2")) 
			{			
				// We can generate the FacialVein
				if (currentPoints == null )
				{
					double circumference = 0.00625;
					double[] startPos = {1.5, 0.25, 0.00};
					currentPoints = BioGraphics.octogonYPlane(startPos, circumference);
				}
				
				int nMaxSegs = 4;
				for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
			
					// Create a place for an instruction 
					BioMightInstruction bioInstruct = new BioMightInstruction();
		     
					if (numSegs==0){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.25, 0.0, 0.0);
					}
					else if (numSegs==1){
						BioMightOrientation orientation = new BioMightOrientation(0.0, -1.0, 0.0, 90.0);
			 			bioInstruct.setTransType(Constants.ROTATEOCTO);
		    			bioInstruct.setTheta(-45);	
		    			bioInstruct.setPivotPoint(4);	
		     			bioInstruct.setRotateVector(0.0, 0.0, 1.0);
		     			bioInstruct.setOrientation(orientation);
		     			bioInstruct.setScaleMatrix(0.90, 0.90, 0.90);
					}
					else if (numSegs==2){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.45, -0.50, 0.0);
					}
					else if (numSegs==3){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.35, -0.50, 0.1);
					}
	
					
		    		// Add the instruction into the instruction set
		    		bioMightInstructSet.addElement(bioInstruct);
				}    
			} 	
			
			
		}
					
		DBUtils.generateFacedComponents(Constants.QUADRANGLE, startID, componentType, componentName, componentID, currentPoints, bioMightInstructSet);
		System.out.println("Generating the Rows for LateralCircumflexFemoralVeinEndothelium: " + componentID + "   " + componentType + "   " + bioMightInstructSet.getSize());

		
		return returnCode;
	}

		
	
	/***************************************************************************************
	 * GENERATE MEDIAL FEMORAL CIRCUMFLEX ARTERY
	 * 
	 * This generates the MedialCircumflexFemoralArtery. 
	 *
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/
	  	
	public int generateMedialCircumflexFemoralArtery(String startID, String componentType, String componentName, String componentID,  String parentID, double[][] currentPoints) 
		throws DataException, DataSecurityException
	{	
		System.out.println("EJB: MedialCircumflexFemoralArtery: " + componentID + "   " + parentID);
		
		int bodyID = 1;
		int projectID = 1;
		String vertices = "";
		
		ArrayList mySqlList= new ArrayList();
		int returnCode = 0;
	
		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();

		// MedialFemoralCircumflex
		if (componentID.equals("MedialCircumflexFemoralArtery:01") || parentID.equals("MedialCircumflexFemoralArtery:01")) 
		{	
			// We can generate the FacialArtery
			if (currentPoints == null )
			{
				double circumference = 0.00625;
				double[] startPos = {1.5, 0.25, 0.00};
				currentPoints = BioGraphics.octogonYPlane(startPos, circumference);
			}
			
			int nMaxSegs = 8;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
		
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
	     
				if (numSegs==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.50, 0.01, -0.30);
				}
				else if (numSegs==1){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.50, 0.0, -0.25);
				}
				else if (numSegs==2){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.250, 0.02, -0.15);
				}
				else if (numSegs==3){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.50, -0.01, 0.0);
				}
				else if (numSegs==4){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.250, 0.0, 0.0);
				}
				else if (numSegs==5){
					BioMightOrientation orientation = new BioMightOrientation(0.0, -1.0, 0.0, 90.0);
		 			bioInstruct.setTransType(Constants.ROTATEOCTOSCALE);
	    			bioInstruct.setTheta(-45);	
	    			bioInstruct.setPivotPoint(4);	
	     			bioInstruct.setRotateVector(0.0, 1.0, 0.0);
	     			bioInstruct.setOrientation(orientation);
	     			bioInstruct.setScaleMatrix(0.90, 0.90, 0.90);
				}
				else if (numSegs==6){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.250, 0.01, 0.250);
				}
				else if (numSegs==7){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.250, 0.0, 0.20);
				}
				else {
					bioInstruct.setPivotPoint(3);
					bioInstruct.setRotateVector(0.0, 0.0, 1.0);
					bioInstruct.setTransType(2);
					bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);
				}
				
				
	    		// Add the instruction into the instruction set
	    		bioMightInstructSet.addElement(bioInstruct);
			}    
		} 
		
		else if (componentID.equals("MedialCircumflexFemoralArtery:02") || parentID.equals("MedialCircumflexFemoralArtery:02")) {	
			
			// We can generate the MedialFemoralCircumflex
			if (currentPoints == null )
			{
				double circumference = 0.00625;
				double[] startPos = {-1.5, 0.25, 0.00};
				currentPoints = BioGraphics.octogonYPlane(startPos, circumference);
			}
		
			int nMaxSegs = 8;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
					
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
		      

				if (numSegs==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.50, 0.01, -0.30);
				}
				else if (numSegs==1){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.50, 0.0, -0.25);
				}
				else if (numSegs==2){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.250, 0.02, -0.15);
				}
				else if (numSegs==3){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.50, -0.01, 0.0);
				}
				else if (numSegs==4){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.250, 0.0, 0.0);
				}
				else if (numSegs==5){
					BioMightOrientation orientation = new BioMightOrientation(0.0, -1.0, 0.0, 90.0);
		 			bioInstruct.setTransType(Constants.ROTATEOCTOSCALE);
	    			bioInstruct.setTheta(-45);	
	    			bioInstruct.setPivotPoint(4);	
	     			bioInstruct.setRotateVector(0.0, 1.0, 0.0);
	     			bioInstruct.setOrientation(orientation);
	     			bioInstruct.setScaleMatrix(0.90, 0.90, 0.90);
				}
				else if (numSegs==6){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.250, 0.01, 0.250);
				}
				else if (numSegs==7){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.250, 0.0, 0.20);
				}
				else {
					bioInstruct.setPivotPoint(3);
					bioInstruct.setRotateVector(0.0, 0.0, 1.0);
					bioInstruct.setTransType(2);
					bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);
				}
				
				
		    	// Add the instruction into the instruction set
		    	bioMightInstructSet.addElement(bioInstruct);
			}
		}
					
		DBUtils.generateFacedComponents(Constants.QUADRANGLE, startID, componentType, componentName, componentID, currentPoints, bioMightInstructSet);
		System.out.println("Generating the Rows for MedialCircumflexFemoralArtery: " + componentID + "   " + componentType);

		
		return returnCode;
	}
	
	
	/***************************************************************************************
	 * GENERATE DEEP FEMORAL VEIN
	 * 
	 * This generates the DeepFemoralVein. 
	 *
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/
	  	
	public int generateDeepFemoralVein(String startID, String componentType, String componentName, String componentID,  String parentID, double[][] currentPoints) 
			throws DataException, DataSecurityException
		{	
			System.out.println("generateDeepFemoralVein: " + componentID + "   " + parentID + "   " + componentName);
			
			int bodyID = 1;
			int projectID = 1;
			String vertices = "";
			
			ArrayList mySqlList= new ArrayList();
			int returnCode = 0;
		
			// Allocate an instruction set for building it
			BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();

			// Right FacialVein - Move inward toward the front of Jaw
			if (componentID.equals("DeepFemoralVein:01") || parentID.equals("DeepFemoralVein:01")) 
			{	
				// We can generate the Vein
				if (currentPoints == null )
				{
					double radius = 0.00625;
					double[] startPos = {3.65, -35.0, -6.0};
					currentPoints = BioGraphics.createCylinderInPlane(Constants.YPLANE, startPos, radius, 8);
		
				}
				
				if (componentName.equals("Main")) {
					
					int nMaxSegs = 16;
					for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
				
						// Create a place for an instruction 
						BioMightInstruction bioInstruct = new BioMightInstruction();
			     
						if (numSegs==0){
							bioInstruct.setTransType(Constants.TRANSLATE);
							bioInstruct.setTranslateMatrix(0.25, -0.50, -0.25);
						}
						else if (numSegs==1){
							bioInstruct.setTransType(Constants.TRANSLATE);
							bioInstruct.setTranslateMatrix(0.30, -0.50, -0.20);
						}
						else if (numSegs==2){
							bioInstruct.setTransType(Constants.TRANSLATE);
							bioInstruct.setTranslateMatrix(0.20, -0.50, -0.15);
						}
						else if (numSegs==3){
							bioInstruct.setTransType(Constants.TRANSLATE);
							bioInstruct.setTranslateMatrix(0.17, -0.50, -0.08);
						}
						else if (numSegs==4){
							bioInstruct.setTransType(Constants.TRANSLATE);
							bioInstruct.setTranslateMatrix(0.10, -0.50, -0.02);
						}
						else if (numSegs==5){
							bioInstruct.setTransType(Constants.TRANSLATE);
							bioInstruct.setTranslateMatrix(0.05, -0.50, 0.0);
						}
						else if (numSegs==6){
							bioInstruct.setTransType(Constants.TRANSLATE);
							bioInstruct.setTranslateMatrix(-0.02, -0.50, 0.05);
						}
						else if (numSegs==7){
							bioInstruct.setTransType(Constants.TRANSLATE);
							bioInstruct.setTranslateMatrix(-0.05, -0.50, 0.02);
						}
						else if (numSegs==8){
							bioInstruct.setTransType(Constants.TRANSLATE);
							bioInstruct.setTranslateMatrix(-0.08, -0.50, 0.05);
						}
						else if (numSegs==9){
							bioInstruct.setTransType(Constants.TRANSLATE);
							bioInstruct.setTranslateMatrix(-0.07, -0.50, 0.15);
						}
						else if (numSegs==10){
							bioInstruct.setTransType(Constants.SCALE);
			    			bioInstruct.setScaleMatrix(0.95, 0.95, 0.95);
							bioInstruct.setTranslateMatrix(-0.1, -0.50, 0.20);
						}
						else if (numSegs==11){
							bioInstruct.setTransType(Constants.SCALE);
			    			bioInstruct.setScaleMatrix(0.98, 0.98, 0.98);
							bioInstruct.setTranslateMatrix(0.08, -0.50, 0.20);
						}
						else if (numSegs==12){
							bioInstruct.setTransType(Constants.SCALE);
			    			bioInstruct.setScaleMatrix(0.98, 0.98, 0.98);
							bioInstruct.setTranslateMatrix(0.15, -0.50, 0.11);
						}
						else if (numSegs==13){
							bioInstruct.setTransType(Constants.SCALE);
			    			bioInstruct.setScaleMatrix(0.95, 0.95, 0.95);
							bioInstruct.setTranslateMatrix(0.20, -0.50, 0.08);
						}
						else if (numSegs==14){
							bioInstruct.setTransType(Constants.SCALE);
			    			bioInstruct.setScaleMatrix(0.95, 0.95, 0.95);
							bioInstruct.setTranslateMatrix(0.20, -0.50, 0.07);
						}
						else if (numSegs==15){
							bioInstruct.setTransType(Constants.SCALE);
			    			bioInstruct.setScaleMatrix(0.95, 0.95, 0.95);
							bioInstruct.setTranslateMatrix(0.20, -0.50, 0.05);
						}
			
						else {
							bioInstruct.setTransType(Constants.TRANSLATE);
							bioInstruct.setTranslateMatrix(0.15, 0.0, 0.5);
						}
						
						
			    		// Add the instruction into the instruction set
			    		bioMightInstructSet.addElement(bioInstruct);
					}   
				}
				else if (componentName.equals("Top")) {
					
					int nMaxSegs = 4;
					for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
				
						// Create a place for an instruction 
						BioMightInstruction bioInstruct = new BioMightInstruction();
			     
						if (numSegs==0){
							bioInstruct.setTransType(Constants.TRANSLATE);
							bioInstruct.setTranslateMatrix(0.25, 0.02, 0.15);
						}
						else if (numSegs==1){
							bioInstruct.setTransType(Constants.TRANSLATE);
							bioInstruct.setTranslateMatrix(0.25, 0.00, 0.15);
						}
						else if (numSegs==2){
							bioInstruct.setTransType(Constants.TRANSLATE);
							bioInstruct.setTranslateMatrix(0.25, 0.0, 0.20);
						}
						else if (numSegs==3){
							bioInstruct.setTransType(Constants.TRANSLATE);
							bioInstruct.setTranslateMatrix(0.25, -0.01, 0.20);
						}
					
					
						else {
							bioInstruct.setTransType(Constants.TRANSLATE);
							bioInstruct.setTranslateMatrix(0.15, 0.0, 0.5);
						}
						
						
			    		// Add the instruction into the instruction set
			    		bioMightInstructSet.addElement(bioInstruct);
					}   
				}
				else if (componentName.equals("Middle")) {
					
					int nMaxSegs = 4;
					for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
				
						// Create a place for an instruction 
						BioMightInstruction bioInstruct = new BioMightInstruction();
			     
						if (numSegs==0){
							bioInstruct.setTransType(Constants.TRANSLATE);
							bioInstruct.setTranslateMatrix(0.25, -0.02, 0.1);
						}
						else if (numSegs==1){
							bioInstruct.setTransType(Constants.TRANSLATE);
							bioInstruct.setTranslateMatrix(0.25, -0.01, 0.05);
						}
						else if (numSegs==2){
							bioInstruct.setTransType(Constants.TRANSLATE);
							bioInstruct.setTranslateMatrix(0.25, 0.01, 0.05);
						}
						else if (numSegs==3){
							bioInstruct.setTransType(Constants.TRANSLATE);
							bioInstruct.setTranslateMatrix(0.25, 0.05, 0.1);
						}
						else {
							bioInstruct.setTransType(Constants.TRANSLATE);
							bioInstruct.setTranslateMatrix(0.15, 0.0, 0.5);
						}
						
						
			    		// Add the instruction into the instruction set
			    		bioMightInstructSet.addElement(bioInstruct);
					}   
				}
				else if (componentName.equals("Bottom")) {
					
					int nMaxSegs = 3;
					for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
				
						// Create a place for an instruction 
						BioMightInstruction bioInstruct = new BioMightInstruction();
			     
						if (numSegs==0){
							bioInstruct.setTransType(Constants.TRANSLATE);
							bioInstruct.setTranslateMatrix(0.25, -0.03, 0.05);
						}
						else if (numSegs==1){
							bioInstruct.setTransType(Constants.TRANSLATE);
							bioInstruct.setTranslateMatrix(0.25, -0.02, 0.15);
						}
						else if (numSegs==2){
							bioInstruct.setTransType(Constants.TRANSLATE);
							bioInstruct.setTranslateMatrix(0.25, 0.01, 0.10);
						}
						
						else {
							bioInstruct.setTransType(Constants.TRANSLATE);
							bioInstruct.setTranslateMatrix(0.15, 0.0, 0.5);
						}
						
						
			    		// Add the instruction into the instruction set
			    		bioMightInstructSet.addElement(bioInstruct);
					}   
				}
				
			} 
			
			else if (componentID.equals("DeepFemoralVein:02") || parentID.equals("DeepFemoralVein:02")) {	
				
				// We can generate the FacialVein
				if (currentPoints == null )
				{
					double circumference = 0.00625;
					double[] startPos = {-1.5, 0.25, 0.00};
					currentPoints = BioGraphics.octogonYPlane(startPos, circumference);
				}
			
				if (componentName.equals("Main")) {
					
					int nMaxSegs = 16;
					for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
				
						// Create a place for an instruction 
						BioMightInstruction bioInstruct = new BioMightInstruction();
			     
						if (numSegs==0){
							bioInstruct.setTransType(Constants.TRANSLATE);
							bioInstruct.setTranslateMatrix(-0.25, -0.50, -0.25);
						}
						else if (numSegs==1){
							bioInstruct.setTransType(Constants.TRANSLATE);
							bioInstruct.setTranslateMatrix(-0.30, -0.50, -0.20);
						}
						else if (numSegs==2){
							bioInstruct.setTransType(Constants.TRANSLATE);
							bioInstruct.setTranslateMatrix(-0.20, -0.50, -0.15);
						}
						else if (numSegs==3){
							bioInstruct.setTransType(Constants.TRANSLATE);
							bioInstruct.setTranslateMatrix(-0.17, -0.50, -0.08);
						}
						else if (numSegs==4){
							bioInstruct.setTransType(Constants.TRANSLATE);
							bioInstruct.setTranslateMatrix(-0.10, -0.50, -0.02);
						}
						else if (numSegs==5){
							bioInstruct.setTransType(Constants.TRANSLATE);
							bioInstruct.setTranslateMatrix(-0.05, -0.50, 0.0);
						}
						else if (numSegs==6){
							bioInstruct.setTransType(Constants.TRANSLATE);
							bioInstruct.setTranslateMatrix(0.02, -0.50, 0.05);
						}
						else if (numSegs==7){
							bioInstruct.setTransType(Constants.TRANSLATE);
							bioInstruct.setTranslateMatrix(0.05, -0.50, 0.02);
						}
						else if (numSegs==8){
							bioInstruct.setTransType(Constants.TRANSLATE);
							bioInstruct.setTranslateMatrix(0.08, -0.50, 0.05);
						}
						else if (numSegs==9){
							bioInstruct.setTransType(Constants.TRANSLATE);
							bioInstruct.setTranslateMatrix(0.07, -0.50, 0.15);
						}
						else if (numSegs==10){
							bioInstruct.setTransType(Constants.SCALE);
			    			bioInstruct.setScaleMatrix(0.95, 0.95, 0.95);
							bioInstruct.setTranslateMatrix(0.1, -0.50, 0.20);
						}
						else if (numSegs==11){
							bioInstruct.setTransType(Constants.SCALE);
			    			bioInstruct.setScaleMatrix(0.98, 0.98, 0.98);
							bioInstruct.setTranslateMatrix(-0.08, -0.50, 0.20);
						}
						else if (numSegs==12){
							bioInstruct.setTransType(Constants.SCALE);
			    			bioInstruct.setScaleMatrix(0.98, 0.98, 0.98);
							bioInstruct.setTranslateMatrix(-0.15, -0.50, 0.11);
						}
						else if (numSegs==13){
							bioInstruct.setTransType(Constants.SCALE);
			    			bioInstruct.setScaleMatrix(0.95, 0.95, 0.95);
							bioInstruct.setTranslateMatrix(-0.20, -0.50, 0.08);
						}
						else if (numSegs==14){
							bioInstruct.setTransType(Constants.SCALE);
			    			bioInstruct.setScaleMatrix(0.95, 0.95, 0.95);
							bioInstruct.setTranslateMatrix(-0.20, -0.50, 0.07);
						}
						else if (numSegs==15){
							bioInstruct.setTransType(Constants.SCALE);
			    			bioInstruct.setScaleMatrix(0.95, 0.95, 0.95);
							bioInstruct.setTranslateMatrix(-0.20, -0.50, 0.05);
						}
						
						
						else {
							bioInstruct.setTransType(Constants.TRANSLATE);
							bioInstruct.setTranslateMatrix(0.15, 0.0, 0.5);
						}
					
				    	// Add the instruction into the instruction set
				    	bioMightInstructSet.addElement(bioInstruct);
					}
				}
			else if (componentName.equals("Top")) {
					
					int nMaxSegs = 4;
					for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
				
						// Create a place for an instruction 
						BioMightInstruction bioInstruct = new BioMightInstruction();
			     
						if (numSegs==0){
							bioInstruct.setTransType(Constants.TRANSLATE);
							bioInstruct.setTranslateMatrix(-0.25, 0.02, 0.15);
						}
						else if (numSegs==1){
							bioInstruct.setTransType(Constants.TRANSLATE);
							bioInstruct.setTranslateMatrix(-0.25, 0.00, 0.15);
						}
						else if (numSegs==2){
							bioInstruct.setTransType(Constants.TRANSLATE);
							bioInstruct.setTranslateMatrix(-0.25, 0.0, 0.20);
						}
						else if (numSegs==3){
							bioInstruct.setTransType(Constants.TRANSLATE);
							bioInstruct.setTranslateMatrix(-0.25, -0.01, 0.20);
						}
					
					
						else {
							bioInstruct.setTransType(Constants.TRANSLATE);
							bioInstruct.setTranslateMatrix(0.15, 0.0, 0.5);
						}
						
						
			    		// Add the instruction into the instruction set
			    		bioMightInstructSet.addElement(bioInstruct);
					}   
				}
				else if (componentName.equals("Middle")) {
					
					int nMaxSegs = 4;
					for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
				
						// Create a place for an instruction 
						BioMightInstruction bioInstruct = new BioMightInstruction();
			     
						if (numSegs==0){
							bioInstruct.setTransType(Constants.TRANSLATE);
							bioInstruct.setTranslateMatrix(-0.25, -0.02, 0.1);
						}
						else if (numSegs==1){
							bioInstruct.setTransType(Constants.TRANSLATE);
							bioInstruct.setTranslateMatrix(-0.25, -0.01, 0.05);
						}
						else if (numSegs==2){
							bioInstruct.setTransType(Constants.TRANSLATE);
							bioInstruct.setTranslateMatrix(-0.25, 0.01, 0.05);
						}
						else if (numSegs==3){
							bioInstruct.setTransType(Constants.TRANSLATE);
							bioInstruct.setTranslateMatrix(-0.25, 0.05, 0.1);
						}
						else {
							bioInstruct.setTransType(Constants.TRANSLATE);
							bioInstruct.setTranslateMatrix(0.15, 0.0, 0.5);
						}
						
						
			    		// Add the instruction into the instruction set
			    		bioMightInstructSet.addElement(bioInstruct);
					}   
				}
				else if (componentName.equals("Bottom")) {
					
					int nMaxSegs = 3;
					for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
				
						// Create a place for an instruction 
						BioMightInstruction bioInstruct = new BioMightInstruction();
			     
						if (numSegs==0){
							bioInstruct.setTransType(Constants.TRANSLATE);
							bioInstruct.setTranslateMatrix(-0.25, -0.03, 0.05);
						}
						else if (numSegs==1){
							bioInstruct.setTransType(Constants.TRANSLATE);
							bioInstruct.setTranslateMatrix(-0.25, -0.02, 0.15);
						}
						else if (numSegs==2){
							bioInstruct.setTransType(Constants.TRANSLATE);
							bioInstruct.setTranslateMatrix(-0.25, 0.01, 0.10);
						}
						
						else {
							bioInstruct.setTransType(Constants.TRANSLATE);
							bioInstruct.setTranslateMatrix(0.15, 0.0, 0.5);
						}
						
						
			    		// Add the instruction into the instruction set
			    		bioMightInstructSet.addElement(bioInstruct);
					}   
				}
			
			}
							
			DBUtils.generateFacedComponents(Constants.QUADRANGLE, startID, componentType, componentName, componentID, currentPoints, bioMightInstructSet);
			System.out.println("Generating the Rows for DeepFemoralVeinEndothelium: " + componentID + "   " + componentType);

			
			return returnCode;
		}
		
	
	/***************************************************************************************
	 * GENERATE FIBULAR ARTERY
	 * 
	 * This generates the Fibular Artery. 
	 *
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/
	  	
	public int generateFibularArtery(String startID, String componentType, String componentName, String componentID,  String parentID, double[][] currentPoints) 
		throws DataException, DataSecurityException
	{	
		System.out.println("MedialFemoralCircumflexArtery: " + componentID + "   " + parentID);
		
		int bodyID = 1;
		int projectID = 1;
		String vertices = "";
		
		ArrayList mySqlList= new ArrayList();
		int returnCode = 0;
	
		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();

		// Fibular Artery
		if (parentID.equals("FibularArtery:01")) 
		{	
			// We can generate the FacialArtery
			if (currentPoints == null )
			{
				double circumference = 0.00625;
				double[] startPos = {1.5, 0.25, 0.00};
				currentPoints = BioGraphics.octogonYPlane(startPos, circumference);
			}
			
			int nMaxSegs = 8;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
		
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
	     
				if (numSegs==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, 0.20, 0.25);
				}
				else if (numSegs==1){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, 0.0, 0.20);
				}
				else if (numSegs==2){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -0.10, 0.25);
				}
				else if (numSegs==3){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.05, -0.1, 0.50);
				}
				else if (numSegs==4){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.1, -0.1, 0.50);
				}
				else if (numSegs==5){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.15, -0.10, 0.5);
				}
				else if (numSegs==6){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.08, -0.05, 0.5);
				}
				else if (numSegs==7){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.25, 0.0, 0.40);
				}
		
				
				else {
					bioInstruct.setPivotPoint(3);
					bioInstruct.setRotateVector(0.0, 0.0, 1.0);
					bioInstruct.setTransType(2);
					bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);
				}
				
				
	    		// Add the instruction into the instruction set
	    		bioMightInstructSet.addElement(bioInstruct);
			}    
		} 
		
		else if (parentID.equals("FibularArtery:02")) {	
			int nMaxSegs = 11;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
				
				// We can generate the MedialFemoralCircumflex
				if (currentPoints == null )
				{
					double circumference = 0.00625;
					double[] startPos = {-1.5, 0.25, 0.00};
					currentPoints = BioGraphics.octogonYPlane(startPos, circumference);
				}
			
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
		      

				if (numSegs==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, 0.25, 0.20);
				}
				else if (numSegs==1){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.05, 0.25, 0.25);
				}
				else if (numSegs==2){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.1, 0.25, 0.15);
				}
				else if (numSegs==3){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.08, 0.25, 0.15);
				}
				else if (numSegs==4){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.07, 0.25, 0.18);
				}
				else if (numSegs==5){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.06, 0.25, 0.21);
				}
				else if (numSegs==6){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.1, 0.25, 0.15);
				}
				else if (numSegs==7){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.15, 0.20, 0.20);
				}
				else if (numSegs==8){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.11, 0.20, 0.15);
				}
				else if (numSegs==9){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.05, 0.25, 0.00);
				}
				else if (numSegs==10) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.05, 0.10, 0.00);
				}	
				
		    	// Add the instruction into the instruction set
		    	bioMightInstructSet.addElement(bioInstruct);
			}
		}
					
		DBUtils.generateFacedComponents(Constants.QUADRANGLE, startID, componentType, componentName, componentID, currentPoints, bioMightInstructSet);
		System.out.println("Generating the Rows for FibularArteryEndothelium: " + componentID + "   " + componentType);

		
		return returnCode;
	}
	
	
	/***************************************************************************************
	 * GENERATE DEEP FEMORAL VEIN
	 * 
	 * This generates the Femoral Vein 
	 *
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/
	  	
	public int generateFemoralVein(String startID, String componentType, String componentName, String componentID,  String parentID, double[][] currentPoints) 
		throws DataException, DataSecurityException
	{	
		System.out.println("generateFemoralVein: " + componentID + "   " + parentID + "   " + componentName);
		
		int bodyID = 1;
		int projectID = 1;
		String vertices = "";
		
		ArrayList mySqlList= new ArrayList();
		int returnCode = 0;
	
		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();

		// Right FacialArtery - Move inward toward the front of Jaw
		if (componentID.equals("FemoralVein:01") || parentID.equals("FemoralVein:01")) 
		{	
			// We can generate the Artery
			if (currentPoints == null )
			{
				double circumference = 0.00625;
				double[] startPos = {1.5, 0.25, 0.00};
				currentPoints = BioGraphics.octogonYPlane(startPos, circumference);
			}
			
			if (componentName.equals("Main")) {
				
				int nMaxSegs = 24;
				for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
			
					// Create a place for an instruction 
					BioMightInstruction bioInstruct = new BioMightInstruction();
		     
					if (numSegs==0){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.15, -0.50, 0.0);
					}
					else if (numSegs==1){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.10, -0.50, 0.0);
					}
					else if (numSegs==2){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.11, -0.50, 0.0);
					}
					else if (numSegs==3){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.05, -0.50, 0.0);
					}
					else if (numSegs==4){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.1, -0.50, 0.0);
					}
					else if (numSegs==5){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.08, -0.50, 0.0);
					}
					else if (numSegs==6){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.1, -0.50, 0.0);
					}
					else if (numSegs==7){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.07, -0.50, 0.0);
					}
					else if (numSegs==8){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.11, -0.50, 0.0);
					}
					else if (numSegs==9){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.08, -0.50, 0.0);
					}
					else if (numSegs==10){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.09, -0.50, 0.0);
					}
					else if (numSegs==11){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.01, -0.50, 0.0);
					}
					else if (numSegs==12){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.02, -0.50, 0.0);
					}
					else if (numSegs==13){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.01, -0.50, 0.0);
					}
					else if (numSegs==14){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.0, -0.50, 0.0);
					}
					else if (numSegs==15){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.03, -0.50, 0.0);
					}
					else if (numSegs==16){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.01, -0.50, 0.0);
					}
					else if (numSegs==17){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.02, -0.50, 0.0);
					}
					else if (numSegs==18){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.04, -0.50, 0.0);
					}
					else if (numSegs==19){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.07, -0.50, 0.0);
					}
					else if (numSegs==20){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.1, -0.50, 0.0);
					}
					else if (numSegs==21){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.15, -0.50, 0.0);
					}
					else if (numSegs==22){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.25, -0.50, 0.0);
					}
					else if (numSegs==23){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.21, -0.25, 0.0);
					}
					else {
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.15, 0.0, 0.5);
					}
					
					
		    		// Add the instruction into the instruction set
		    		bioMightInstructSet.addElement(bioInstruct);
				}   
			}
			else if (componentName.equals("Top")) {
				
				int nMaxSegs = 3;
				for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
			
					// Create a place for an instruction 
					BioMightInstruction bioInstruct = new BioMightInstruction();
		     
					if (numSegs==0){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.25, -0.15, 0.0);
					}
					else if (numSegs==1){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.25, -0.20, 0.0);
					}
					else if (numSegs==2){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.25, 0.0, 0.0);
					}
				
				
					else {
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.15, 0.0, 0.5);
					}
					
					
		    		// Add the instruction into the instruction set
		    		bioMightInstructSet.addElement(bioInstruct);
				}   
			}
			else if (componentName.equals("Middle")) {
				
				int nMaxSegs = 4;
				for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
			
					// Create a place for an instruction 
					BioMightInstruction bioInstruct = new BioMightInstruction();
		     
					if (numSegs==0){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.25, -0.15, 0.0);
					}
					else if (numSegs==1){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.25, -0.09, 0.0);
					}
					else if (numSegs==2){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.25, 0.0, 0.0);
					}
					else if (numSegs==3){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.25, 0.05, 0.0);
					}
					else {
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.15, 0.0, 0.5);
					}
					
					
		    		// Add the instruction into the instruction set
		    		bioMightInstructSet.addElement(bioInstruct);
				}   
			}
			else if (componentName.equals("Bottom")) {
				
				int nMaxSegs = 3;
				for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
			
					// Create a place for an instruction 
					BioMightInstruction bioInstruct = new BioMightInstruction();
		     
					if (numSegs==0){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.25, -0.15, 0.0);
					}
					else if (numSegs==1){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.25, -0.20, 0.0);
					}
					else if (numSegs==2){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.25, 0.0, 0.0);
					}
					
					else {
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.15, 0.0, 0.5);
					}
					
					
		    		// Add the instruction into the instruction set
		    		bioMightInstructSet.addElement(bioInstruct);
				}   
			}
			
		} 
		
		else if (componentID.equals("FemoralVein:02") || parentID.equals("FemoralVein:02")) {	
			
			// We can generate the FacialArtery
			if (currentPoints == null )
			{
				double circumference = 0.00625;
				double[] startPos = {-1.5, 0.25, 0.00};
				currentPoints = BioGraphics.octogonYPlane(startPos, circumference);
			}
		
			if (componentName.equals("Main")) {
				
				int nMaxSegs = 24;
				for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
			
					// Create a place for an instruction 
					BioMightInstruction bioInstruct = new BioMightInstruction();
		     
					if (numSegs==0){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.15, -0.50, 0.0);
					}
					else if (numSegs==1){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.10, -0.50, 0.0);
					}
					else if (numSegs==2){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.11, -0.50, 0.0);
					}
					else if (numSegs==3){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.05, -0.50, 0.0);
					}
					else if (numSegs==4){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.1, -0.50, 0.0);
					}
					else if (numSegs==5){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.08, -0.50, 0.0);
					}
					else if (numSegs==6){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.1, -0.50, 0.0);
					}
					else if (numSegs==7){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.07, -0.50, 0.0);
					}
					else if (numSegs==8){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.11, -0.50, 0.0);
					}
					else if (numSegs==9){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.08, -0.50, 0.0);
					}
					else if (numSegs==10){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.09, -0.50, 0.0);
					}
					else if (numSegs==11){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.01, -0.50, 0.0);
					}
					else if (numSegs==12){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.02, -0.50, 0.0);
					}
					else if (numSegs==13){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.01, -0.50, 0.0);
					}
					else if (numSegs==14){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.0, -0.50, 0.0);
					}
					else if (numSegs==15){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.03, -0.50, 0.0);
					}
					else if (numSegs==16){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.01, -0.50, 0.0);
					}
					else if (numSegs==17){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.02, -0.50, 0.0);
					}
					else if (numSegs==18){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.04, -0.50, 0.0);
					}
					else if (numSegs==19){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.07, -0.50, 0.0);
					}
					else if (numSegs==20){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.1, -0.50, 0.0);
					}
					else if (numSegs==21){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.15, -0.50, 0.0);
					}
					else if (numSegs==22){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.25, -0.50, 0.0);
					}
					else if (numSegs==23){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.21, -0.25, 0.0);
					}
		
				
					else {
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.15, 0.0, 0.5);
					}
				
			    	// Add the instruction into the instruction set
			    	bioMightInstructSet.addElement(bioInstruct);
				}
			}
			else if (componentName.equals("Top")) {
				
				int nMaxSegs = 3;
				for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
			
					// Create a place for an instruction 
					BioMightInstruction bioInstruct = new BioMightInstruction();
		     
					if (numSegs==0){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.25, -0.12, 0.0);
					}
					else if (numSegs==1){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.25, -0.17, 0.0);
					}
					else if (numSegs==2){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.25, 0.0, 0.0);
					}
				
				
					else {
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.15, 0.0, 0.5);
					}
					
					
		    		// Add the instruction into the instruction set
		    		bioMightInstructSet.addElement(bioInstruct);
				}   
			}
			else if (componentName.equals("Middle")) {
				
				int nMaxSegs = 4;
				for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
			
					// Create a place for an instruction 
					BioMightInstruction bioInstruct = new BioMightInstruction();
		     
					if (numSegs==0){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.25, -0.13, 0.0);
					}
					else if (numSegs==1){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.25, -0.11, 0.0);
					}
					else if (numSegs==2){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.25, 0.0, 0.0);
					}
					else if (numSegs==3){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.25, 0.05, 0.0);
					}
					else {
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.15, 0.0, 0.5);
					}
					
					
		    		// Add the instruction into the instruction set
		    		bioMightInstructSet.addElement(bioInstruct);
				}   
			}
			else if (componentName.equals("Bottom")) {
				
				int nMaxSegs = 3;
				for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
			
					// Create a place for an instruction 
					BioMightInstruction bioInstruct = new BioMightInstruction();
		     
					if (numSegs==0){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.25, -0.10, 0.0);
					}
					else if (numSegs==1){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.25, -0.15, 0.0);
					}
					else if (numSegs==2){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.25, 0.0, 0.0);
					}
					
					else {
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.15, 0.0, 0.5);
					}
					
					
		    		// Add the instruction into the instruction set
		    		bioMightInstructSet.addElement(bioInstruct);
				}   
			}
		}
						
		DBUtils.generateFacedComponents(Constants.QUADRANGLE, startID, componentType, componentName, componentID, currentPoints, bioMightInstructSet);
		System.out.println("Generating the Rows for FemoralVeinEndothelium: " + componentID + "   " + componentType);

		
		return returnCode;
	}
	


	/***************************************************************************************
	 * SUPERFICIAL PALMAR ARCH
	 * 
	 * This generates the SuperficialPalmarArchArtery 
	 *
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/
	  	
	public int generateSuperficialPalmarArchArtery(String startID, String componentType, String componentName, String componentID,  String parentID, double[][] currentPoints) 
		throws DataException, DataSecurityException
	{	
		System.out.println("SuperficialPalmarArchArtery: " + componentID + "   " + parentID);
		
		int bodyID = 1;
		int projectID = 1;
		String vertices = "";
		
		ArrayList mySqlList= new ArrayList();
		int returnCode = 0;
	
		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();

		
		// Artery
		if (componentID.equals("SuperficialPalmarArchArtery:01") || parentID.equals("SuperficialPalmarArchArtery:01")) 
		{	
			
			int numInstructions = 15;
			
			for (int instructCount=0; instructCount<numInstructions; instructCount++)
			{
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
	
				
				
				if (instructCount==0){
					
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0, -0.5, 0);
				}
				
				
				else if (instructCount==1){
					
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0, -0.5, 0);
				}
				
				
				else if (instructCount==2){
					
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0, -0.5, 0);
				}
				
			
				else if (instructCount==3){	
					
					BioMightOrientation orientation = new BioMightOrientation(0.0, -1.0, 0.0, 90.0);
		 			bioInstruct.setTransType(Constants.ROTATEOCTO);
		 			bioInstruct.setTheta(-45); //Angle
		 			bioInstruct.setPivotPoint(4); //0 - 8 : Imagine cylinder as an octagon
	     			bioInstruct.setRotateVector(0.0, 0.0, 1.0); //around z 
	     			bioInstruct.setOrientation(orientation);
	     			
				}
				
				else if (instructCount==4){	
					
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.5, -0.5, 0.0);
	     			
				}
				
		
				
				else if (instructCount==5){	
					
					BioMightOrientation orientation = new BioMightOrientation(0.0, -1.0, 0.0, 90.0);
		 			bioInstruct.setTransType(Constants.ROTATEOCTO);
		 			bioInstruct.setTheta(-45); //Angle
		 			bioInstruct.setPivotPoint(4); //0 - 8 : Imagine cylinder as an octagon
	     			bioInstruct.setRotateVector(0.0, 0.0, 1.0); //around z 
	     			bioInstruct.setOrientation(orientation);
	     			
				}
				
				else if (instructCount==6){	
					
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.4, 0.0, 0.0);
	     			
				}
				
				
				else if (instructCount==7){	
					
					BioMightOrientation orientation = new BioMightOrientation(0.0, -1.0, 0.0, 90.0);
		 			bioInstruct.setTransType(Constants.ROTATEOCTO);
		 			bioInstruct.setTheta(-45); //Angle
		 			bioInstruct.setPivotPoint(4); //0 - 8 : Imagine cylinder as an octagon
	     			bioInstruct.setRotateVector(0.0, 0.0, 1.0); //around z 
	     			bioInstruct.setOrientation(orientation);
	     			
				}
				
				
				else if (instructCount==8){	
					
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.5, 0.5, 0.0);
	     			
				}
				
				
				else if (instructCount==9){	
					
					BioMightOrientation orientation = new BioMightOrientation(0.0, -1.0, 0.0, 90.0);
		 			bioInstruct.setTransType(Constants.ROTATEOCTO);
		 			bioInstruct.setTheta(-45); //Angle
		 			bioInstruct.setPivotPoint(4); //0 - 8 : Imagine cylinder as an octagon
	     			bioInstruct.setRotateVector(0.0, 0.0, 1.0); //around z 
	     			bioInstruct.setOrientation(orientation);
	     			
				}
				
				
				else if (instructCount==10){
					
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0, 0.5, 0);
				}
				
				
				else if (instructCount==11){
					
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0, 0.5, 0);
				}
				
				
				else if (instructCount==12){
					
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0, 0.5, 0);
				}
				
				
				else if (instructCount==12){
					
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0, 0.5, 0);
				}
				
				
				else if (instructCount==13){	
					
					BioMightOrientation orientation = new BioMightOrientation(0.0, -1.0, 0.0, 90.0);
		 			bioInstruct.setTransType(Constants.ROTATEOCTO);
		 			bioInstruct.setTheta(45); //Angle
		 			bioInstruct.setPivotPoint(0); //0 - 8 : Imagine cylinder as an octagon
	     			bioInstruct.setRotateVector(0.0, 0.0, 1.0); //around z 
	     			bioInstruct.setOrientation(orientation);
	     			
				}
				
				
				else if (instructCount==14){
					
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.35, 0.50, 0);
				}
	
		
				else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);
				}
				

				
	    		// Add the instruction into the instruction set
	    		bioMightInstructSet.addElement(bioInstruct);
			}
			
			
				    
		} 
		
		
		
		else if (componentID.equals("SuperficialPalmarArchArtery:02") || parentID.equals("SuperficialPalmarArchArtery:02")) {	
	
			int numInstructions = 15;
			
			for (int instructCount=0; instructCount<numInstructions; instructCount++)
			{
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
				
				
				if (instructCount==0){
					
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0, -0.5, 0);
				}
				
				
				else if (instructCount==1){
					
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0, -0.5, 0);
				}
				else if (instructCount==2){
					
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0, -0.5, 0);
				}
				else if (instructCount==3){	
					
					BioMightOrientation orientation = new BioMightOrientation(0.0, -1.0, 0.0, 90.0);
		 			bioInstruct.setTransType(Constants.ROTATEOCTO);
		 			bioInstruct.setTheta(-45); //Angle
		 			bioInstruct.setPivotPoint(4); //0 - 8 : Imagine cylinder as an octagon
	     			bioInstruct.setRotateVector(0.0, 0.0, 1.0); //around z 
	     			bioInstruct.setOrientation(orientation);
	     			
				}	
				else if (instructCount==4){	
					
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.5, -0.5, 0.0);
	     			
				}
				else if (instructCount==5){	
					
					BioMightOrientation orientation = new BioMightOrientation(0.0, -1.0, 0.0, 90.0);
		 			bioInstruct.setTransType(Constants.ROTATEOCTO);
		 			bioInstruct.setTheta(-45); //Angle
		 			bioInstruct.setPivotPoint(4); //0 - 8 : Imagine cylinder as an octagon
	     			bioInstruct.setRotateVector(0.0, 0.0, 1.0); //around z 
	     			bioInstruct.setOrientation(orientation);	
				}
				else if (instructCount==6){	
					
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.4, 0.0, 0.0);
				}
				else if (instructCount==7){	
					
					BioMightOrientation orientation = new BioMightOrientation(0.0, -1.0, 0.0, 90.0);
		 			bioInstruct.setTransType(Constants.ROTATEOCTO);
		 			bioInstruct.setTheta(-45); //Angle
		 			bioInstruct.setPivotPoint(4); //0 - 8 : Imagine cylinder as an octagon
	     			bioInstruct.setRotateVector(0.0, 0.0, 1.0); //around z 
	     			bioInstruct.setOrientation(orientation);	
				}
				else if (instructCount==8){	
					
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.5, 0.5, 0.0);
	     			
				}
				
				
				else if (instructCount==9){	
					
					BioMightOrientation orientation = new BioMightOrientation(0.0, -1.0, 0.0, 90.0);
		 			bioInstruct.setTransType(Constants.ROTATEOCTO);
		 			bioInstruct.setTheta(-45); //Angle
		 			bioInstruct.setPivotPoint(4); //0 - 8 : Imagine cylinder as an octagon
	     			bioInstruct.setRotateVector(0.0, 0.0, 1.0); //around z 
	     			bioInstruct.setOrientation(orientation);
	     			
				}
				
				
				else if (instructCount==10){
					
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0, 0.5, 0);
				}
				
				
				else if (instructCount==11){
					
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0, 0.5, 0);
				}
				
				
				else if (instructCount==12){
					
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0, 0.5, 0);
				}
				
				
				
				else if (instructCount==13){	
					
					BioMightOrientation orientation = new BioMightOrientation(0.0, -1.0, 0.0, 90.0);
		 			bioInstruct.setTransType(Constants.ROTATEOCTO);
		 			bioInstruct.setTheta(45); //Angle
		 			bioInstruct.setPivotPoint(0); //0 - 8 : Imagine cylinder as an octagon
	     			bioInstruct.setRotateVector(0.0, 0.0, 1.0); //around z 
	     			bioInstruct.setOrientation(orientation);
	     			
				}
				
				else if (instructCount==14){
					
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.4, 0.55, 0);
				}
	
		
				else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);
				}
				
					
				
				
	    		// Add the instruction into the instruction set
	    		bioMightInstructSet.addElement(bioInstruct);
			}
			
		}

		
		DBUtils.generateFacedComponents(Constants.QUADRANGLE, startID, componentType, componentName, componentID, currentPoints, bioMightInstructSet);
		System.out.println("Generating the Rows for SuperficialPalmarArchArtery: " + componentID + "   " + componentType);

		return returnCode;
	}
	
		
	
	/***************************************************************************************
	 * DEEP PALMAR ARCH
	 * 
	 * This generates the DeepPalmarArchArtery. 
	 *
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/
	  	
	public int generateDeepPalmarArchArtery(String startID, String componentType, String componentName, String componentID,  String parentID, double[][] currentPoints) 
		throws DataException, DataSecurityException
	{	
		System.out.println("DeepPalmarArchArtery: " + componentID + "   " + parentID);
		
		int bodyID = 1;
		int projectID = 1;
		String vertices = "";
		
		ArrayList mySqlList= new ArrayList();
		int returnCode = 0;
	
		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();

		
		// Artery
		if (componentID.equals("DeepPalmarArchArtery:01") || parentID.equals("DeepPalmarArchArtery:01")) 
		{	
			
			int numInstructions = 13;
			
			for (int instructCount=0; instructCount<numInstructions; instructCount++)
			{
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
				
				
				if (instructCount==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.2, 0.0, 0.0);
				}
				
				
				else if (instructCount==1){	
					
					BioMightOrientation orientation = new BioMightOrientation(0.0, -1.0, 0.0, 90.0);
		 			bioInstruct.setTransType(Constants.ROTATEOCTO);
		 			bioInstruct.setTheta(-45); //Angle
		 			bioInstruct.setPivotPoint(4); //0 - 8 : Imagine cylinder as an octagon
	     			bioInstruct.setRotateVector(0.0, 0.0, 1.0); //around z 
	     			bioInstruct.setOrientation(orientation);
	     			
				}
	
				
				else if (instructCount==2){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.25, -0.25, 0.0);
				}
				
				
				
				else if (instructCount==3){	
					
					BioMightOrientation orientation = new BioMightOrientation(0.0, -1.0, 0.0, 90.0);
		 			bioInstruct.setTransType(Constants.ROTATEOCTO);
		 			bioInstruct.setTheta(-45); //Angle
		 			bioInstruct.setPivotPoint(4); //0 - 8 : Imagine cylinder as an octagon
	     			bioInstruct.setRotateVector(0.0, 0.0, 1.0); //around z 
	     			bioInstruct.setOrientation(orientation);
	     			
				}
				
				
				else if (instructCount==4){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -0.25, 0.0);
				}
				
					
				
				
				else if (instructCount==5){	
					
					BioMightOrientation orientation = new BioMightOrientation(0.0, -1.0, 0.0, 90.0);
		 			bioInstruct.setTransType(Constants.ROTATEOCTO);
		 			bioInstruct.setTheta(-45); //Angle
		 			bioInstruct.setPivotPoint(4); //0 - 8 : Imagine cylinder as an octagon
	     			bioInstruct.setRotateVector(0.0, 0.0, 1.0); //around z 
	     			bioInstruct.setOrientation(orientation);
	     			
				}
				else if (instructCount==6){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.5, -0.25, 0.0);
				}
				else if (instructCount==7){	
					
					BioMightOrientation orientation = new BioMightOrientation(0.0, -1.0, 0.0, 90.0);
		 			bioInstruct.setTransType(Constants.ROTATEOCTO);
		 			bioInstruct.setTheta(-45); //Angle
		 			bioInstruct.setPivotPoint(4); //0 - 8 : Imagine cylinder as an octagon
	     			bioInstruct.setRotateVector(0.0, 0.0, 1.0); //around z 
	     			bioInstruct.setOrientation(orientation);	
				}
				else if (instructCount==8){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.9, 0.0, 0.0);
				}
				else if (instructCount==9){	
					
					BioMightOrientation orientation = new BioMightOrientation(0.0, -1.0, 0.0, 90.0);
		 			bioInstruct.setTransType(Constants.ROTATEOCTO);
		 			bioInstruct.setTheta(-45); //Angle
		 			bioInstruct.setPivotPoint(4); //0 - 8 : Imagine cylinder as an octagon
	     			bioInstruct.setRotateVector(0.0, 0.0, 1.0); //around z 
	     			bioInstruct.setOrientation(orientation);	
				}
				else if (instructCount==10){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.83, 0.60, 0.0);
				}
				
				
				else if (instructCount==11){	
					
					BioMightOrientation orientation = new BioMightOrientation(0.0, -1.0, 0.0, 90.0);
		 			bioInstruct.setTransType(Constants.ROTATEOCTO);
		 			bioInstruct.setTheta(-45); //Angle
		 			bioInstruct.setPivotPoint(4); //0 - 8 : Imagine cylinder as an octagon
	     			bioInstruct.setRotateVector(0.0, 0.0, 1.0); //around z 
	     			bioInstruct.setOrientation(orientation);	
				}
				else if (instructCount==12){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, 0.7, 0.0);
				}
				else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);
				}
				
						
				
				
	    		// Add the instruction into the instruction set
	    		bioMightInstructSet.addElement(bioInstruct);
			}
			
			
				    
		} 
		
		else if (componentID.equals("DeepPalmarArchArtery:02") || parentID.equals("DeepPalmarArchArtery:02")) {	
	
			int numInstructions = 13;
	
			
			for (int instructCount=0; instructCount<numInstructions; instructCount++)
			{
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
				
				
				
				if (instructCount==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.2, 0.0, 0.0);
				}
				
				
				else if (instructCount==1){	
					
					BioMightOrientation orientation = new BioMightOrientation(0.0, -1.0, 0.0, 90.0);
		 			bioInstruct.setTransType(Constants.ROTATEOCTO);
		 			bioInstruct.setTheta(-45); //Angle
		 			bioInstruct.setPivotPoint(4); //0 - 8 : Imagine cylinder as an octagon
	     			bioInstruct.setRotateVector(0.0, 0.0, 1.0); //around z 
	     			bioInstruct.setOrientation(orientation);
	     			
				}
	
				
				else if (instructCount==2){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.25, -0.25, 0.0);
				}
				
				
				
				else if (instructCount==3){	
					
					BioMightOrientation orientation = new BioMightOrientation(0.0, -1.0, 0.0, 90.0);
		 			bioInstruct.setTransType(Constants.ROTATEOCTO);
		 			bioInstruct.setTheta(-45); //Angle
		 			bioInstruct.setPivotPoint(4); //0 - 8 : Imagine cylinder as an octagon
	     			bioInstruct.setRotateVector(0.0, 0.0, 1.0); //around z 
	     			bioInstruct.setOrientation(orientation);
	     			
				}
				
				
				else if (instructCount==4){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -0.25, 0.0);
				}
				
					
				
				
				else if (instructCount==5){	
					
					BioMightOrientation orientation = new BioMightOrientation(0.0, -1.0, 0.0, 90.0);
		 			bioInstruct.setTransType(Constants.ROTATEOCTO);
		 			bioInstruct.setTheta(-45); //Angle
		 			bioInstruct.setPivotPoint(4); //0 - 8 : Imagine cylinder as an octagon
	     			bioInstruct.setRotateVector(0.0, 0.0, 1.0); //around z 
	     			bioInstruct.setOrientation(orientation);
	     			
				}
				
				
				else if (instructCount==6){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.5, -0.25, 0.0);
				}
				
				
				else if (instructCount==7){	
					
					BioMightOrientation orientation = new BioMightOrientation(0.0, -1.0, 0.0, 90.0);
		 			bioInstruct.setTransType(Constants.ROTATEOCTO);
		 			bioInstruct.setTheta(-45); //Angle
		 			bioInstruct.setPivotPoint(4); //0 - 8 : Imagine cylinder as an octagon
	     			bioInstruct.setRotateVector(0.0, 0.0, 1.0); //around z 
	     			bioInstruct.setOrientation(orientation);
	     			
				}
				
				
				else if (instructCount==8){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.9, 0.0, 0.0);
				}
				
				
				else if (instructCount==9){	
					
					BioMightOrientation orientation = new BioMightOrientation(0.0, -1.0, 0.0, 90.0);
		 			bioInstruct.setTransType(Constants.ROTATEOCTO);
		 			bioInstruct.setTheta(-45); //Angle
		 			bioInstruct.setPivotPoint(4); //0 - 8 : Imagine cylinder as an octagon
	     			bioInstruct.setRotateVector(0.0, 0.0, 1.0); //around z 
	     			bioInstruct.setOrientation(orientation);
	     			
				}
				
				else if (instructCount==10){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.83, 0.60, 0.0);
				}
				
				
				else if (instructCount==11){	
					
					BioMightOrientation orientation = new BioMightOrientation(0.0, -1.0, 0.0, 90.0);
		 			bioInstruct.setTransType(Constants.ROTATEOCTO);
		 			bioInstruct.setTheta(-45); //Angle
		 			bioInstruct.setPivotPoint(4); //0 - 8 : Imagine cylinder as an octagon
	     			bioInstruct.setRotateVector(0.0, 0.0, 1.0); //around z 
	     			bioInstruct.setOrientation(orientation);
	     			
				}
				
				
				else if (instructCount==12){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, 0.7, 0.0);
				}
				
					
				
				

				else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);
				}
				
								
				
				
	    		// Add the instruction into the instruction set
	    		bioMightInstructSet.addElement(bioInstruct);
			}
			
		}

		
		DBUtils.generateFacedComponents(Constants.QUADRANGLE, startID, componentType, componentName, componentID, currentPoints, bioMightInstructSet);
		System.out.println("Generating the Rows for DeepPalmarArchArtery: " + componentID + "   " + componentType);

		
		return returnCode;
	}
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	/***************************************************************************************
	 * PALMAR CARPAL BRANCH
	 * 
	 * This generates the SuperiorCerebellar Artery. 
	 *
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/
	  	
	public int generatePalmarCarpalBranchArtery(String startID, String componentType, String componentName, String componentID,  String parentID, double[][] currentPoints) 
		throws DataException, DataSecurityException
	{	
		System.out.println("PalmarCarpalBranchArtery: " + componentID + "   " + parentID);
		
		int bodyID = 1;
		int projectID = 1;
		String vertices = "";
		
		ArrayList mySqlList= new ArrayList();
		int returnCode = 0;
	
		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();

		
		// Artery
		if (componentID.equals("PalmarCarpalBranchArtery:01") || parentID.equals("PalmarCarpalBranchArtery:01")) 
		{	
			
			int numInstructions = 13;
			
			for (int instructCount=0; instructCount<numInstructions; instructCount++)
			{
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
				
				
				if (instructCount==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.35, -0.9, 0.0);
				}
				
				
				else if (instructCount==1){	
					
					BioMightOrientation orientation = new BioMightOrientation(0.0, -1.0, 0.0, 90.0);
		 			bioInstruct.setTransType(Constants.ROTATEOCTO);
		 			bioInstruct.setTheta(60); //Angle
		 			bioInstruct.setPivotPoint(0); //0 - 8 : Imagine cylinder as an octagon
	     			bioInstruct.setRotateVector(0.0, 0.0, 1.0); //around z 
	     			bioInstruct.setOrientation(orientation);
	     			
				}
				
				
				else if (instructCount==2){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.1, -0.90, 0.0);
				}
				
				
				else if (instructCount==3){	
					
					BioMightOrientation orientation = new BioMightOrientation(0.0, -1.0, 0.0, 90.0);
		 			bioInstruct.setTransType(Constants.ROTATEOCTO);
		 			bioInstruct.setTheta(-30); //Angle
		 			bioInstruct.setPivotPoint(4); //0 - 8 : Imagine cylinder as an octagon
	     			bioInstruct.setRotateVector(0.0, 0.0, 1.0); //around z 
	     			bioInstruct.setOrientation(orientation);
	     			
				}
				
				
				else if (instructCount==4){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.25, -0.35, 0.0);
				}
				
				
				else if (instructCount==5){	
					
					BioMightOrientation orientation = new BioMightOrientation(0.0, -1.0, 0.0, 90.0);
		 			bioInstruct.setTransType(Constants.ROTATEOCTO);
		 			bioInstruct.setTheta(-30); //Angle
		 			bioInstruct.setPivotPoint(4); //0 - 8 : Imagine cylinder as an octagon
	     			bioInstruct.setRotateVector(0.0, 0.0, 1.0); //around z 
	     			bioInstruct.setOrientation(orientation);
	     			
				}
				
				
				else if (instructCount==6){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.40, 0.0, 0.0);
				}
				
				
				
				else if (instructCount==7){	
					
					BioMightOrientation orientation = new BioMightOrientation(0.0, -1.0, 0.0, 90.0);
		 			bioInstruct.setTransType(Constants.ROTATEOCTO);
		 			bioInstruct.setTheta(-30); //Angle
		 			bioInstruct.setPivotPoint(4); //0 - 8 : Imagine cylinder as an octagon
	     			bioInstruct.setRotateVector(0.0, 0.0, 1.0); //around z 
	     			bioInstruct.setOrientation(orientation);
	     			
				}
				
				
				else if (instructCount==8){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.25, 0.35, 0.0);
				}
				
				
				else if (instructCount==9){	
					
					BioMightOrientation orientation = new BioMightOrientation(0.0, -1.0, 0.0, 90.0);
		 			bioInstruct.setTransType(Constants.ROTATEOCTO);
		 			bioInstruct.setTheta(-30); //Angle
		 			bioInstruct.setPivotPoint(4); //0 - 8 : Imagine cylinder as an octagon
	     			bioInstruct.setRotateVector(0.0, 0.0, 1.0); //around z 
	     			bioInstruct.setOrientation(orientation);
	     			
				}
				
				
				else if (instructCount==10){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.1, 0.90, 0.0);
				}
				
				
				else if (instructCount==11){	
					
					BioMightOrientation orientation = new BioMightOrientation(0.0, -1.0, 0.0, 90.0);
		 			bioInstruct.setTransType(Constants.ROTATEOCTO);
		 			bioInstruct.setTheta(60); //Angle
		 			bioInstruct.setPivotPoint(0); //0 - 8 : Imagine cylinder as an octagon
	     			bioInstruct.setRotateVector(0.0, 0.0, 1.0); //around z 
	     			bioInstruct.setOrientation(orientation);
	     			
				}
				
				
				else if (instructCount==12){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.35, 0.9, 0.0);
				}
				
				

				else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);
				}
				
						
				
				
	    		// Add the instruction into the instruction set
	    		bioMightInstructSet.addElement(bioInstruct);
			}
			
			
				    
		} 
		
		else if (componentID.equals("PalmarCarpalBranchArtery:02") || parentID.equals("PalmarCarpalBranchArtery:02")) {	
	
			int numInstructions = 13;
	
			
			for (int instructCount=0; instructCount<numInstructions; instructCount++)
			{
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
				
				
				if (instructCount==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.35, -0.9, 0.0);
				}
				
				
				else if (instructCount==1){	
					
					BioMightOrientation orientation = new BioMightOrientation(0.0, -1.0, 0.0, 90.0);
		 			bioInstruct.setTransType(Constants.ROTATEOCTO);
		 			bioInstruct.setTheta(60); //Angle
		 			bioInstruct.setPivotPoint(0); //0 - 8 : Imagine cylinder as an octagon
	     			bioInstruct.setRotateVector(0.0, 0.0, 1.0); //around z 
	     			bioInstruct.setOrientation(orientation);
	     			
				}
				
				
				else if (instructCount==2){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.1, -0.90, 0.0);
				}
				
				
				else if (instructCount==3){	
					
					BioMightOrientation orientation = new BioMightOrientation(0.0, -1.0, 0.0, 90.0);
		 			bioInstruct.setTransType(Constants.ROTATEOCTO);
		 			bioInstruct.setTheta(-30); //Angle
		 			bioInstruct.setPivotPoint(4); //0 - 8 : Imagine cylinder as an octagon
	     			bioInstruct.setRotateVector(0.0, 0.0, 1.0); //around z 
	     			bioInstruct.setOrientation(orientation);
	     			
				}
				
				
				else if (instructCount==4){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.25, -0.35, 0.0);
				}
				
				
				else if (instructCount==5){	
					
					BioMightOrientation orientation = new BioMightOrientation(0.0, -1.0, 0.0, 90.0);
		 			bioInstruct.setTransType(Constants.ROTATEOCTO);
		 			bioInstruct.setTheta(-30); //Angle
		 			bioInstruct.setPivotPoint(4); //0 - 8 : Imagine cylinder as an octagon
	     			bioInstruct.setRotateVector(0.0, 0.0, 1.0); //around z 
	     			bioInstruct.setOrientation(orientation);
	     			
				}
				
				
				else if (instructCount==6){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.40, 0.0, 0.0);
				}
				
				
				
				else if (instructCount==7){	
					
					BioMightOrientation orientation = new BioMightOrientation(0.0, -1.0, 0.0, 90.0);
		 			bioInstruct.setTransType(Constants.ROTATEOCTO);
		 			bioInstruct.setTheta(-30); //Angle
		 			bioInstruct.setPivotPoint(4); //0 - 8 : Imagine cylinder as an octagon
	     			bioInstruct.setRotateVector(0.0, 0.0, 1.0); //around z 
	     			bioInstruct.setOrientation(orientation);
	     			
				}
				
				
				else if (instructCount==8){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.25, 0.35, 0.0);
				}
				
				
				else if (instructCount==9){	
					
					BioMightOrientation orientation = new BioMightOrientation(0.0, -1.0, 0.0, 90.0);
		 			bioInstruct.setTransType(Constants.ROTATEOCTO);
		 			bioInstruct.setTheta(-30); //Angle
		 			bioInstruct.setPivotPoint(4); //0 - 8 : Imagine cylinder as an octagon
	     			bioInstruct.setRotateVector(0.0, 0.0, 1.0); //around z 
	     			bioInstruct.setOrientation(orientation);
	     			
				}
				
				
				else if (instructCount==10){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.1, 0.90, 0.0);
				}
				
				
				else if (instructCount==11){	
					
					BioMightOrientation orientation = new BioMightOrientation(0.0, -1.0, 0.0, 90.0);
		 			bioInstruct.setTransType(Constants.ROTATEOCTO);
		 			bioInstruct.setTheta(60); //Angle
		 			bioInstruct.setPivotPoint(0); //0 - 8 : Imagine cylinder as an octagon
	     			bioInstruct.setRotateVector(0.0, 0.0, 1.0); //around z 
	     			bioInstruct.setOrientation(orientation);
	     			
				}
				
				
				else if (instructCount==12){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.35, 0.9, 0.0);
				}
				
				

				else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);
				}
				
						
				
				
				
	    		// Add the instruction into the instruction set
	    		bioMightInstructSet.addElement(bioInstruct);
			}
			
		}

		
		DBUtils.generateFacedComponents(Constants.QUADRANGLE, startID, componentType, componentName, componentID, currentPoints, bioMightInstructSet);
		System.out.println("Generating the Rows for PalmarCarpalBranchArtery: " + componentID + "   " + componentType);

		
		return returnCode;
		
		
		
	}
	
	
	
	
	
	
	
	
	
	
	/***************************************************************************************
	 * PRINCEPS POLLICIS ARTERY
	 * 
	 * This generates the SuperiorCerebellar Artery. 
	 *
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/
	  	
	public int generatePrincepsPollicisArtery(String startID, String componentType, String componentName, String componentID,  String parentID, double[][] currentPoints) 
		throws DataException, DataSecurityException
	{	
		System.out.println("PrincepsPollicisArtery: " + componentID + "   " + parentID);
		
		int bodyID = 1;
		int projectID = 1;
		String vertices = "";
		
		ArrayList mySqlList= new ArrayList();
		int returnCode = 0;
	
		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();

		
		// Artery
		if (componentID.equals("PrincepsPollicisArtery:01") || parentID.equals("PrincepsPollicisArtery:01")) 
		{	
			
			int numInstructions = 5;
			
			for (int instructCount=0; instructCount<numInstructions; instructCount++)
			{
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
				
	
				
				
				if (instructCount==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -1.5, 0.0);
				}
				
				else if (instructCount==1){	
					
					BioMightOrientation orientation = new BioMightOrientation(0.0, -1.0, 0.0, 90.0);
		 			bioInstruct.setTransType(Constants.ROTATEOCTO);
		 			bioInstruct.setTheta(-17); //Angle
		 			bioInstruct.setPivotPoint(4); //0 - 8 : Imagine cylinder as an octagon
	     			bioInstruct.setRotateVector(0.0, 0.0, 1.0); //around z 
	     			bioInstruct.setOrientation(orientation);
	     			
				}
				
				else if (instructCount==2){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.2, -0.75, 0.0);
				}
				
				
				else if (instructCount==3){	
					
					BioMightOrientation orientation = new BioMightOrientation(0.0, -1.0, 0.0, 90.0);
		 			bioInstruct.setTransType(Constants.ROTATEOCTO);
		 			bioInstruct.setTheta(17); //Angle
		 			bioInstruct.setPivotPoint(0); //0 - 8 : Imagine cylinder as an octagon
	     			bioInstruct.setRotateVector(0.0, 0.0, 1.0); //around z 
	     			bioInstruct.setOrientation(orientation);
	     			
				}
				
				else if (instructCount==4){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);
				}
				
				
				
				
				

				else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);
				}
				
						
				
				
	    		// Add the instruction into the instruction set
	    		bioMightInstructSet.addElement(bioInstruct);
			}
			
			
				    
		} 
		
		else if (componentID.equals("PrincepsPollicisArtery:02") || parentID.equals("PrincepsPollicisArtery:02")) {	
	
			int numInstructions = 5;
	
			
			for (int instructCount=0; instructCount<numInstructions; instructCount++)
			{
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
				
				
			
				
				if (instructCount==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -1.5, 0.0);
				}
				
				else if (instructCount==1){	
					
					BioMightOrientation orientation = new BioMightOrientation(0.0, -1.0, 0.0, 90.0);
		 			bioInstruct.setTransType(Constants.ROTATEOCTO);
		 			bioInstruct.setTheta(-17); //Angle
		 			bioInstruct.setPivotPoint(4); //0 - 8 : Imagine cylinder as an octagon
	     			bioInstruct.setRotateVector(0.0, 0.0, 1.0); //around z 
	     			bioInstruct.setOrientation(orientation);
	     			
				}
				
				else if (instructCount==2){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.2, -0.75, 0.0);
				}
				
				
				else if (instructCount==3){	
					
					BioMightOrientation orientation = new BioMightOrientation(0.0, -1.0, 0.0, 90.0);
		 			bioInstruct.setTransType(Constants.ROTATEOCTO);
		 			bioInstruct.setTheta(17); //Angle
		 			bioInstruct.setPivotPoint(0); //0 - 8 : Imagine cylinder as an octagon
	     			bioInstruct.setRotateVector(0.0, 0.0, 1.0); //around z 
	     			bioInstruct.setOrientation(orientation);
	     			
				}
				
				else if (instructCount==4){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);
				}
				

				else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);
				}

				
				
				
				
	    		// Add the instruction into the instruction set
	    		bioMightInstructSet.addElement(bioInstruct);
			}
			
		}

		
		DBUtils.generateFacedComponents(Constants.QUADRANGLE, startID, componentType, componentName, componentID, currentPoints, bioMightInstructSet);
		System.out.println("Generating the Rows for PrincepsPollicisArtery: " + componentID + "   " + componentType);

		
		return returnCode;
		
		
		
	}
	
	
	
	
	
	
	/***************************************************************************************
	 * RADIALIS INDICIS ARTERY
	 * 
	 * This generates the SuperiorCerebellar Artery. 
	 *
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/
	  	
	public int generateRadialisIndicisArtery(String startID, String componentType, String componentName, String componentID,  String parentID, double[][] currentPoints) 
		throws DataException, DataSecurityException
	{	
		System.out.println("RadialisIndicisArtery: " + componentID + "   " + parentID);
		
		int bodyID = 1;
		int projectID = 1;
		String vertices = "";
		
		ArrayList mySqlList= new ArrayList();
		int returnCode = 0;
	
		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();

		
		// Artery
		if (componentID.equals("RadialisIndicisArtery:01") || parentID.equals("RadialisIndicisArtery:01")) 
		{	
			
			int numInstructions = 8;
			
			for (int instructCount=0; instructCount<numInstructions; instructCount++)
			{
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
				
				
				if (instructCount==0) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);
				}
				
				
				else if (instructCount==1) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);
				}
				
				
				else if (instructCount==2) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);
				}
				
				
				else if (instructCount==3) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -0.5, 0.0);
				}
				
				
				else if (instructCount==4){	
					
					BioMightOrientation orientation = new BioMightOrientation(0.0, -1.0, 0.0, 90.0);
		 			bioInstruct.setTransType(Constants.ROTATEOCTO);
		 			bioInstruct.setTheta(45); //Angle
		 			bioInstruct.setPivotPoint(0); //0 - 8 : Imagine cylinder as an octagon
	     			bioInstruct.setRotateVector(0.0, 0.0, 1.0); //around z 
	     			bioInstruct.setOrientation(orientation);
	     			
				}
				
				
				else if (instructCount==5) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.15, -0.15, 0.0);
				}
				
				
				
				else if (instructCount==6){	
					
					BioMightOrientation orientation = new BioMightOrientation(0.0, -1.0, 0.0, 90.0);
		 			bioInstruct.setTransType(Constants.ROTATEOCTO);
		 			bioInstruct.setTheta(45); //Angle
		 			bioInstruct.setPivotPoint(0); //0 - 8 : Imagine cylinder as an octagon
	     			bioInstruct.setRotateVector(0.0, 0.0, 1.0); //around z 
	     			bioInstruct.setOrientation(orientation);
	     			
				}
				
				
				else if (instructCount==7) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, 0.25, 0.0);
				}
				
				

				else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);
				}
				
						
				
				
	    		// Add the instruction into the instruction set
	    		bioMightInstructSet.addElement(bioInstruct);
			}
			
			
				    
		} 
		
		else if (componentID.equals("RadialisIndicisArtery:02") || parentID.equals("RadialisIndicisArtery:02")) {	
	
			int numInstructions = 1;
	
			
			for (int instructCount=0; instructCount<numInstructions; instructCount++)
			{
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
				
				
			/*
				
				if (instructCount==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -1.5, 0.0);
				}
				
			

				else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);
				}

				
			*/
				
				
				
	    		// Add the instruction into the instruction set
	    		bioMightInstructSet.addElement(bioInstruct);
			}
			
		}

		
		DBUtils.generateFacedComponents(Constants.QUADRANGLE, startID, componentType, componentName, componentID, currentPoints, bioMightInstructSet);
		System.out.println("Generating the Rows for RadialisIndicisArtery: " + componentID + "   " + componentType);

		
		return returnCode;
		
		
		
	}
	
	
		
	/***************************************************************************************
	 * PALMAR METACARPAL ARTERY
	 * 
	 * This generates the SuperiorCerebellar Artery. 
	 *
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/
	  	
	public int generatePalmarMetacarpalArtery(String startID, String componentType, String componentName, String componentID,  String parentID, double[][] currentPoints) 
		throws DataException, DataSecurityException
	{	
		System.out.println("PalmarMetacarpalArtery: " + componentID + "   " + parentID);
		
		int bodyID = 1;
		int projectID = 1;
		String vertices = "";
		
		ArrayList mySqlList= new ArrayList();
		int returnCode = 0;
	
		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();

		
		// Artery
		if (componentID.equals("PalmarMetacarpalArtery:01") || parentID.equals("PalmarMetacarpalArtery:01")) 
		{	
			
			int numInstructions = 2;
			
			for (int instructCount=0; instructCount<numInstructions; instructCount++)
			{
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
				
				
				System.out.println("RUNNING PROCESS");   
				
				if (instructCount==0) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);
				}
				
				
				else if (instructCount==1) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);
				}
				

				else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);
				}
				
						
				
				
	    		// Add the instruction into the instruction set
	    		bioMightInstructSet.addElement(bioInstruct);
			}
			
			
				    
		} 
		
		
		else if (componentID.equals("PalmarMetacarpalArtery:02") && parentID.equals("PalmarMetacarpalArtery:01")) {	
	
			int numInstructions = 1;
	
			
			for (int instructCount=0; instructCount<numInstructions; instructCount++)
			{
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
				
				
			/*
				
				if (instructCount==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -1.5, 0.0);
				}
				
			

				else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);
				}

				
			*/
				
				
				
	    		// Add the instruction into the instruction set
	    		bioMightInstructSet.addElement(bioInstruct);
			}
			
		}
		
		
		
		
		else if (componentID.equals("PalmarMetacarpalArtery:03") &&  parentID.equals("PalmarMetacarpalArtery:01")) {	
			
			int numInstructions = 1;
			for (int instructCount=0; instructCount<numInstructions; instructCount++)
			{
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
				
				
				/*
				
				if (instructCount==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -1.5, 0.0);
				}
				
				else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);
				}

				
				 */
	    		// Add the instruction into the instruction set
	    		bioMightInstructSet.addElement(bioInstruct);
			}
			
		}
		
		
		
		
		else if (componentID.equals("PalmarMetacarpalArtery:04") && parentID.equals("Hand:01")) {	
			
			int numInstructions = 1;
	
			
			for (int instructCount=0; instructCount<numInstructions; instructCount++)
			{
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
				
				
			/*
				
				if (instructCount==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -1.5, 0.0);
				}
				
			

				else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);
				}

				
			*/
				
				
				
	    		// Add the instruction into the instruction set
	    		bioMightInstructSet.addElement(bioInstruct);
			}
			
		}
		
		
		
		else if (componentID.equals("PalmarMetacarpalArtery:05") && parentID.equals("Hand:02")) {	
			
			int numInstructions = 1;
	
			
			for (int instructCount=0; instructCount<numInstructions; instructCount++)
			{
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
				
				
			/*
				
				if (instructCount==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -1.5, 0.0);
				}
				
			

				else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);
				}

				
			*/
				
				
				
	    		// Add the instruction into the instruction set
	    		bioMightInstructSet.addElement(bioInstruct);
			}
			
		}
		
		
		
		
		else if (componentID.equals("PalmarMetacarpalArtery:06") && parentID.equals("Hand:02")) {	
			
			int numInstructions = 1;
	
			
			for (int instructCount=0; instructCount<numInstructions; instructCount++)
			{
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
				
				
			/*
				
				if (instructCount==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -1.5, 0.0);
				}
				
			

				else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);
				}

				
			*/
				
				
				
	    		// Add the instruction into the instruction set
	    		bioMightInstructSet.addElement(bioInstruct);
			}
			
		}
		
		
		
		else if (componentID.equals("PalmarMetacarpalArtery:07") && parentID.equals("Hand:02")) {	
			
			int numInstructions = 1;
	
			
			for (int instructCount=0; instructCount<numInstructions; instructCount++)
			{
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
				
				
			/*
				
				if (instructCount==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -1.5, 0.0);
				}
				
			

				else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);
				}

				
			*/
				
				
				
	    		// Add the instruction into the instruction set
	    		bioMightInstructSet.addElement(bioInstruct);
			}
			
		}
		
		
		
		
		else if (componentID.equals("PalmarMetacarpalArtery:08") && parentID.equals("Hand:02")) {	
			
			int numInstructions = 1;
	
			
			for (int instructCount=0; instructCount<numInstructions; instructCount++)
			{
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
				
				
			/*
				
				if (instructCount==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -1.5, 0.0);
				}
				
			

				else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);
				}

				
			*/
				
				
				
	    		// Add the instruction into the instruction set
	    		bioMightInstructSet.addElement(bioInstruct);
			}
			
		}
		
		

		
		DBUtils.generateFacedComponents(Constants.QUADRANGLE, startID, componentType, componentName, componentID, currentPoints, bioMightInstructSet);
		System.out.println("Generating the Rows for PalmarMetacarpalArtery: " + componentID + "   " + componentType);

		
		return returnCode;
		
		
		
	}
	
	
	

	/***************************************************************************************
	 * GENERATE LateralInferiorGenicularArtery
	 * 
	 * This method generates the LateralInferiorGenicularArtery
	 *
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/
	  	
	public int generateLateralInferiorGenicularArtery(String startID, String componentType, String componentName, String componentID,  String parentID, double[][] currentPoints) 
		throws DataException, DataSecurityException
	{	
		System.out.println("LateralInferiorGenicularArteryEndothelium: " + componentID + "   " + parentID);
		
		int bodyID = 1;
		int projectID = 1;
		String vertices = "";
		
		ArrayList mySqlList= new ArrayList();
		int returnCode = 0;
	

		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();

		if (componentID.equals("LateralInferiorGenicularArtery:01")) 
		{	
			

			if (currentPoints == null )
			{
				double circumference = 0.25;
				// Generate the LateralSuperiorGenicularArteryEndothelium of the stomach
				// Create 5 sections
				double[] startPos = {3.75,-38.0, -3.0};	
				currentPoints = BioGraphics.octogonYPlane(startPos, circumference);
	  		}
			
			int nMaxSegs = 6;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
		
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
	     
				if (numSegs==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.50, 0.00, 0.00);
				}
				else if (numSegs==1){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.50, 0.00, 0.00);
				}
				else if (numSegs==2){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.50, 0.00, 0.00);
				}
				else if (numSegs==3){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.50, 0.00, 0.00);
				}
				else if (numSegs==4){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.50, 0.00, 0.00);
				}
				else if (numSegs==5){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.50, 0.00, 0.00);
				}
				
				else {
					bioInstruct.setPivotPoint(3);
					bioInstruct.setRotateVector(0.0, 0.0, 1.0);
					bioInstruct.setTransType(2);
					bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);
				}
				
				
	    		// Add the instruction into the instruction set
	    		bioMightInstructSet.addElement(bioInstruct);
			}
	    
		} else if (componentID.equals("LateralInferiorGenicularArtery:02")) {
			
		
			if (currentPoints == null )
			{
				double circumference = 0.25;
				// Generate the LateralSuperiorGenicularArteryEndothelium of the stomach
				// Create 5 sections
				double[] startPos = {3.75,-38.0, -3.0};	
				currentPoints = BioGraphics.octogonYPlane(startPos, circumference);
	  		}
			
			
			int nMaxSegs = 6;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
			
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
		      
				if (numSegs==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.50, 0.00, 0.00);
				}
				else if (numSegs==1){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.50, 0.00, 0.00);
				}
				else if (numSegs==2){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.50, 0.00, 0.00);
				}
				else if (numSegs==3){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.50, 0.00, 0.00);
				}
				else if (numSegs==4){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.50, 0.00, 0.00);
				}
				else if (numSegs==5){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.50, 0.00, 0.00);
				}
				else {
					bioInstruct.setPivotPoint(3);
					bioInstruct.setRotateVector(0.0, 0.0, 1.0);
					bioInstruct.setTransType(2);
					bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);
				}
					
					
		    	// Add the instruction into the instruction set
		    	bioMightInstructSet.addElement(bioInstruct);
			}
		    
		}
	
		
		DBUtils.generateFacedComponents(Constants.QUADRANGLE, startID, componentType, componentName, componentID, currentPoints, bioMightInstructSet);
		System.out.println("Generated the Rows for LateralInferiorGenicularArteryEndothelium: " + componentID + "   parent: " + parentID + "   " + componentType);
		
	return returnCode;
	}
	
	
	
	/***************************************************************************************
	 * GENERATE PatellarAnastomosis
	 * 
	 * This method generates the PatellarAnastomosis
	 *
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/
	  	
	public int generatePatellarAnastomosis(String startID, String componentType, String componentName, String componentID,  String parentID, double[][] currentPoints) 
		throws DataException, DataSecurityException
	{	
		System.out.println("PatellarAnastomosis: " + componentID + "   " + parentID);
		
		int bodyID = 1;
		int projectID = 1;
		String vertices = "";
		
		ArrayList mySqlList= new ArrayList();
		int returnCode = 0;
	

		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();

		if (componentID.equals("PatellarAnastomosis:01")) 
		{	
			

			if (currentPoints == null )
			{
				double circumference = 0.25;
				// Generate the LateralSuperiorGenicularArteryEndothelium of the stomach
				// Create 5 sections
				double[] startPos = {3.75,-38.0, -3.0};	
				currentPoints = BioGraphics.octogonYPlane(startPos, circumference);
	  		}
			
			int nMaxSegs = 6;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
		
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
	     
				if (numSegs==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.50, 0.00, 0.00);
				}
				else if (numSegs==1){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.50, 0.00, 0.00);
				}
				else if (numSegs==2){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.50, 0.00, 0.00);
				}
				else if (numSegs==3){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.50, 0.00, 0.00);
				}
				else if (numSegs==4){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.50, 0.00, 0.00);
				}
				else if (numSegs==5){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.50, 0.00, 0.00);
				}
				
				else {
					bioInstruct.setPivotPoint(3);
					bioInstruct.setRotateVector(0.0, 0.0, 1.0);
					bioInstruct.setTransType(2);
					bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);
				}
				
				
	    		// Add the instruction into the instruction set
	    		bioMightInstructSet.addElement(bioInstruct);
			}
	    
		} else if (componentID.equals("PatellarAnastomosis:02")) {
			
		
			if (currentPoints == null )
			{
				double circumference = 0.25;
				// Generate the LateralSuperiorGenicularArteryEndothelium of the stomach
				// Create 5 sections
				double[] startPos = {3.75,-38.0, -3.0};	
				currentPoints = BioGraphics.octogonYPlane(startPos, circumference);
	  		}
			
			
			int nMaxSegs = 6;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
			
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
		      
				if (numSegs==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.50, 0.00, 0.00);
				}
				else if (numSegs==1){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.50, 0.00, 0.00);
				}
				else if (numSegs==2){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.50, 0.00, 0.00);
				}
				else if (numSegs==3){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.50, 0.00, 0.00);
				}
				else if (numSegs==4){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.50, 0.00, 0.00);
				}
				else if (numSegs==5){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.50, 0.00, 0.00);
				}
				else {
					bioInstruct.setPivotPoint(3);
					bioInstruct.setRotateVector(0.0, 0.0, 1.0);
					bioInstruct.setTransType(2);
					bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);
				}
					
					
		    	// Add the instruction into the instruction set
		    	bioMightInstructSet.addElement(bioInstruct);
			}
		    
		}
	
		
		DBUtils.generateFacedComponents(Constants.QUADRANGLE, startID, componentType, componentName, componentID, currentPoints, bioMightInstructSet);
		System.out.println("Generated the Rows for PatellarAnastomosis: " + componentID + "   parent: " + parentID + "   " + componentType);
		
	return returnCode;
	}
	
	
	
	/***************************************************************************************
	 * GENERATE DORSAL METATARSALl VEIN
	 * 
	 * This generates the reatSaphenousVein 
	 *
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/
	  	
	public int generateDorsalMetatarsalVein(String startID, String componentType, String componentName, String componentID,  String parentID, double[][] currentPoints) 
		throws DataException, DataSecurityException
	{	
		System.out.println("generateDorsalMetatarsalVein: " + componentID + "   " + parentID + "   " + componentName);
		
		int bodyID = 1;
		int projectID = 1;
		String vertices = "";
		
		ArrayList mySqlList= new ArrayList();
		int returnCode = 0;
	
		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();

		// Right FacialArtery - Move inward toward the front of Jaw
		if (componentID.equals("DorsalMetatarsalVein:01") || parentID.equals("DorsalMetatarsalVein:01")) 
		{	
			// We can generate the Artery
			if (currentPoints == null )
			{
				double radius = 0.00625;
				double[] startPos = {3.65, -35.0, -6.0};
				currentPoints = BioGraphics.createCylinderInPlane(Constants.YPLANE, startPos, radius, 8);
	
			}
			
			if (componentName.equals("Main")) {
				
				int nMaxSegs = 12;
				for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
			
					// Create a place for an instruction 
					BioMightInstruction bioInstruct = new BioMightInstruction();
		     
					if (numSegs==0){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.1, -1.00, 0.0);
					}
					else if (numSegs==1){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.01, -1.00, 0.0);
					}
					else if (numSegs==2){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.0, -1.00, 0.0);
					}
					else if (numSegs==3){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.05, -1.00, 0.0);
					}
					else if (numSegs==4){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.04, -1.00, 0.0);
					}
					else if (numSegs==5){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.0, -1.00, 0.0);
					}
					else if (numSegs==6){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.07, -1.00, 0.0);
					}
					else if (numSegs==7){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.01, -1.00, 0.0);
					}
					else if (numSegs==8){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.05, -1.00, 0.0);
					}
					else if (numSegs==9){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.10, -1.00, 0.0);
					}
					else if (numSegs==10){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.25, -1.00, 0.0);
					}
					else if (numSegs==11){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.1, -1.00, 0.0);
					}
					
					
					else if (numSegs==12){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.01, -1.00, 0.0);
					}
					else {
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.15, 0.0, 0.5);
					}
					
					
		    		// Add the instruction into the instruction set
		    		bioMightInstructSet.addElement(bioInstruct);
				}   
			}
			else if (componentName.equals("Top")) {
				
				int nMaxSegs = 3;
				for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
			
					// Create a place for an instruction 
					BioMightInstruction bioInstruct = new BioMightInstruction();
		     
					if (numSegs==0){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.25, -0.15, 0.0);
					}
					else if (numSegs==1){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.25, -0.20, 0.0);
					}
					else if (numSegs==2){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.25, 0.0, 0.0);
					}
				
				
					else {
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.15, 0.0, 0.5);
					}
					
					
		    		// Add the instruction into the instruction set
		    		bioMightInstructSet.addElement(bioInstruct);
				}   
			}
			else if (componentName.equals("Middle")) {
				
				int nMaxSegs = 4;
				for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
			
					// Create a place for an instruction 
					BioMightInstruction bioInstruct = new BioMightInstruction();
		     
					if (numSegs==0){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.25, -0.15, 0.0);
					}
					else if (numSegs==1){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.25, -0.09, 0.0);
					}
					else if (numSegs==2){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.25, 0.0, 0.0);
					}
					else if (numSegs==3){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.25, 0.05, 0.0);
					}
					else {
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.15, 0.0, 0.5);
					}
					
					
		    		// Add the instruction into the instruction set
		    		bioMightInstructSet.addElement(bioInstruct);
				}   
			}
			else if (componentName.equals("Bottom")) {
				
				int nMaxSegs = 3;
				for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
			
					// Create a place for an instruction 
					BioMightInstruction bioInstruct = new BioMightInstruction();
		     
					if (numSegs==0){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.25, -0.15, 0.0);
					}
					else if (numSegs==1){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.25, -0.20, 0.0);
					}
					else if (numSegs==2){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.25, 0.0, 0.0);
					}
					
					else {
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.15, 0.0, 0.5);
					}
					
					
		    		// Add the instruction into the instruction set
		    		bioMightInstructSet.addElement(bioInstruct);
				}   
			}
			
		} 
		
		else if (componentID.equals("DorsalMetatarsalVein:02") || parentID.equals("DorsalMetatarsalVein:02")) {	
			
			// We can generate the FacialArtery
			if (currentPoints == null )
			{
				double circumference = 0.00625;
				double[] startPos = {-1.5, 0.25, 0.00};
				currentPoints = BioGraphics.octogonYPlane(startPos, circumference);
			}
		
			if (componentName.equals("Main")) {
				
				int nMaxSegs = 12;
				for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
			
					// Create a place for an instruction 
					BioMightInstruction bioInstruct = new BioMightInstruction();
		     
					if (numSegs==0){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.01, -1.00, 0.0);
					}
					else if (numSegs==1){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.01, -1.00, 0.0);
					}
					else if (numSegs==2){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.0, -1.00, 0.0);
					}
					else if (numSegs==3){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.01, -1.00, 0.0);
					}
					else if (numSegs==4){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.0, -1.00, 0.0);
					}
					else if (numSegs==5){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.01, -1.00, 0.0);
					}
					else if (numSegs==6){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.0, -1.00, 0.0);
					}
					else if (numSegs==7){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.01, -1.00, 0.0);
					}
					else if (numSegs==8){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.0, -1.00, 0.0);
					}
					else if (numSegs==9){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.05, -1.00, 0.0);
					}
					else if (numSegs==10){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.25, -1.00, 0.0);
					}
					else if (numSegs==11){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.1, -1.00, 0.0);
					}
					
					
					else if (numSegs==12){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.01, -1.00, 0.0);
					}
					else {
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.15, 0.0, 0.5);
					}
				
			    	// Add the instruction into the instruction set
			    	bioMightInstructSet.addElement(bioInstruct);
				}
			}
			else if (componentName.equals("Top")) {
				
				int nMaxSegs = 3;
				for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
			
					// Create a place for an instruction 
					BioMightInstruction bioInstruct = new BioMightInstruction();
		     
					if (numSegs==0){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.25, -0.12, 0.0);
					}
					else if (numSegs==1){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.25, -0.17, 0.0);
					}
					else if (numSegs==2){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.25, 0.0, 0.0);
					}
				
				
					else {
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.15, 0.0, 0.5);
					}
					
					
		    		// Add the instruction into the instruction set
		    		bioMightInstructSet.addElement(bioInstruct);
				}   
			}
			else if (componentName.equals("Middle")) {
				
				int nMaxSegs = 4;
				for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
			
					// Create a place for an instruction 
					BioMightInstruction bioInstruct = new BioMightInstruction();
		     
					if (numSegs==0){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.25, -0.13, 0.0);
					}
					else if (numSegs==1){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.25, -0.11, 0.0);
					}
					else if (numSegs==2){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.25, 0.0, 0.0);
					}
					else if (numSegs==3){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.25, 0.05, 0.0);
					}
					else {
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.15, 0.0, 0.5);
					}
					
					
		    		// Add the instruction into the instruction set
		    		bioMightInstructSet.addElement(bioInstruct);
				}   
			}
			else if (componentName.equals("Bottom")) {
				
				int nMaxSegs = 3;
				for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
			
					// Create a place for an instruction 
					BioMightInstruction bioInstruct = new BioMightInstruction();
		     
					if (numSegs==0){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.25, -0.10, 0.0);
					}
					else if (numSegs==1){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.25, -0.15, 0.0);
					}
					else if (numSegs==2){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.25, 0.0, 0.0);
					}
					
					else {
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.15, 0.0, 0.5);
					}
					
					
		    		// Add the instruction into the instruction set
		    		bioMightInstructSet.addElement(bioInstruct);
				}   
			}
		}
		
		// Femur
		else if (componentID.equals("DorsalMetatarsalVein:03") || parentID.equals("DorsalMetatarsalVein:03")) {	
		
			
			if (currentPoints == null )
			{
				double circumference = 0.00625;
				double[] startPos = {-1.5, 0.25, 0.00};
				currentPoints = BioGraphics.octogonYPlane(startPos, circumference);
			}
		
			if (componentName.equals("Main")) {
				
				int nMaxSegs = 12;
				for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
			
					// Create a place for an instruction 
					BioMightInstruction bioInstruct = new BioMightInstruction();
		     
					if (numSegs==0){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.01, -1.00, 0.0);
					}
					else if (numSegs==1){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.01, -1.00, 0.0);
					}
					else if (numSegs==2){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.0, -1.00, 0.0);
					}
					else if (numSegs==3){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.01, -1.00, 0.0);
					}
					else if (numSegs==4){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.0, -1.00, 0.0);
					}
					else if (numSegs==5){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.01, -1.00, -0.1);
					}
					else if (numSegs==6){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.0, -1.00, 0.01);
					}
					else if (numSegs==7){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.01, -1.00, 0.04);
					}
					else if (numSegs==8){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.0, -1.00, -0.05);
					}
					else if (numSegs==9){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.05, -1.00, -0.1);
					}
					else if (numSegs==10){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.2, -1.00, -0.1);
					}
					else if (numSegs==11){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.1, -1.00, 0.0);
					}
					
					
					else if (numSegs==12){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.01, -1.00, 0.0);
					}
					else {
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.15, 0.0, 0.5);
					}
				
			    	// Add the instruction into the instruction set
			    	bioMightInstructSet.addElement(bioInstruct);
				}
			}
			else if (componentName.equals("Top")) {
				
				int nMaxSegs = 3;
				for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
			
					// Create a place for an instruction 
					BioMightInstruction bioInstruct = new BioMightInstruction();
		     
					if (numSegs==0){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.25, -0.12, 0.0);
					}
					else if (numSegs==1){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.25, -0.17, 0.0);
					}
					else if (numSegs==2){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.25, 0.0, 0.0);
					}
				
				
					else {
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.15, 0.0, 0.5);
					}
					
					
		    		// Add the instruction into the instruction set
		    		bioMightInstructSet.addElement(bioInstruct);
				}   
			}
			else if (componentName.equals("Middle")) {
				
				int nMaxSegs = 4;
				for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
			
					// Create a place for an instruction 
					BioMightInstruction bioInstruct = new BioMightInstruction();
		     
					if (numSegs==0){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.25, -0.13, 0.0);
					}
					else if (numSegs==1){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.25, -0.11, 0.0);
					}
					else if (numSegs==2){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.25, 0.0, 0.0);
					}
					else if (numSegs==3){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.25, 0.05, 0.0);
					}
					else {
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.15, 0.0, 0.5);
					}
					
					
		    		// Add the instruction into the instruction set
		    		bioMightInstructSet.addElement(bioInstruct);
				}   
			}
			else if (componentName.equals("Bottom")) {
				
				int nMaxSegs = 3;
				for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
			
					// Create a place for an instruction 
					BioMightInstruction bioInstruct = new BioMightInstruction();
		     
					if (numSegs==0){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.25, -0.10, 0.0);
					}
					else if (numSegs==1){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.25, -0.15, 0.0);
					}
					else if (numSegs==2){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.25, 0.0, 0.0);
					}
					
					else {
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.15, 0.0, 0.5);
					}
					
					
		    		// Add the instruction into the instruction set
		    		bioMightInstructSet.addElement(bioInstruct);
				}   
			}
		}
		
		else if (componentID.equals("DorsalMetatarsalVein:04") || parentID.equals("DorsalMetatarsalVein:04")) {	
			
			if (currentPoints == null )
			{
				double circumference = 0.00625;
				double[] startPos = {-1.5, 0.25, 0.00};
				currentPoints = BioGraphics.octogonYPlane(startPos, circumference);
			}
		
			if (componentName.equals("Main")) {
				
				int nMaxSegs = 12;
				for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
			
					// Create a place for an instruction 
					BioMightInstruction bioInstruct = new BioMightInstruction();
		     
					if (numSegs==0){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.01, -1.00, 0.0);
					}
					else if (numSegs==1){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.01, -1.00, 0.0);
					}
					else if (numSegs==2){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.0, -1.00, 0.0);
					}
					else if (numSegs==3){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.01, -1.00, 0.0);
					}
					else if (numSegs==4){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.0, -1.00, 0.0);
					}
					else if (numSegs==5){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.01, -1.00, 0.0);
					}
					else if (numSegs==6){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.0, -1.00, 0.0);
					}
					else if (numSegs==5){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.01, -1.00, -0.1);
					}
					else if (numSegs==6){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.0, -1.00, 0.01);
					}
					else if (numSegs==7){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.01, -1.00, 0.04);
					}
					else if (numSegs==8){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.0, -1.00, -0.05);
					}
					else if (numSegs==9){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.05, -1.00, -0.1);
					}
					else if (numSegs==10){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.2, -1.00, -0.1);
					}
					else if (numSegs==11){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.1, -1.00, 0.0);
					}
					
					
					else if (numSegs==12){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.01, -1.00, 0.0);
					}
					else {
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.15, 0.0, 0.5);
					}
				
			    	// Add the instruction into the instruction set
			    	bioMightInstructSet.addElement(bioInstruct);
				}
			}
			else if (componentName.equals("Top")) {
				
				int nMaxSegs = 3;
				for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
			
					// Create a place for an instruction 
					BioMightInstruction bioInstruct = new BioMightInstruction();
		     
					if (numSegs==0){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.25, -0.12, 0.0);
					}
					else if (numSegs==1){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.25, -0.17, 0.0);
					}
					else if (numSegs==2){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.25, 0.0, 0.0);
					}
				
				
					else {
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.15, 0.0, 0.5);
					}
					
					
		    		// Add the instruction into the instruction set
		    		bioMightInstructSet.addElement(bioInstruct);
				}   
			}
			else if (componentName.equals("Middle")) {
				
				int nMaxSegs = 4;
				for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
			
					// Create a place for an instruction 
					BioMightInstruction bioInstruct = new BioMightInstruction();
		     
					if (numSegs==0){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.25, -0.13, 0.0);
					}
					else if (numSegs==1){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.25, -0.11, 0.0);
					}
					else if (numSegs==2){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.25, 0.0, 0.0);
					}
					else if (numSegs==3){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.25, 0.05, 0.0);
					}
					else {
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.15, 0.0, 0.5);
					}
					
					
		    		// Add the instruction into the instruction set
		    		bioMightInstructSet.addElement(bioInstruct);
				}   
			}
			else if (componentName.equals("Bottom")) {
				
				int nMaxSegs = 3;
				for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
			
					// Create a place for an instruction 
					BioMightInstruction bioInstruct = new BioMightInstruction();
		     
					if (numSegs==0){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.25, -0.10, 0.0);
					}
					else if (numSegs==1){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.25, -0.15, 0.0);
					}
					else if (numSegs==2){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-0.25, 0.0, 0.0);
					}
					
					else {
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(0.15, 0.0, 0.5);
					}
					
					
		    		// Add the instruction into the instruction set
		    		bioMightInstructSet.addElement(bioInstruct);
				}   
			}
		}
		
		DBUtils.generateFacedComponents(Constants.QUADRANGLE, startID, componentType, componentName, componentID, currentPoints, bioMightInstructSet);
		System.out.println("Generating the Rows for DorsalMetatarsalVeinEndothelium: " + componentID + "   " + componentType);

		
		return returnCode;
	}
	
	
}
