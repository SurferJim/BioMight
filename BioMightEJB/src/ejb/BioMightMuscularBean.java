package biomight.ejb;

import java.util.ArrayList;

import javax.ejb.Stateless;

import biomight.Constants;
import biomight.exceptions.DataException;
import biomight.exceptions.DataSecurityException;
import biomight.util.BioGraphics;
import biomight.view.BioMightInstructSet;
import biomight.view.BioMightInstruction;
import biomight.view.BioMightOrientation;


/**
 * Session Bean implementation class BioMightMuscularBean
 */
@Stateless
public class BioMightMuscularBean implements BioMightMuscularBeanLocal {
	
    /**
     * Default constructor. 
     */
    public BioMightMuscularBean() {
        // TODO Auto-generated constructor stub
    }
    
    
    /***************************************************************************************
	 * GENERATE LONG ROTATORS MUSCLES
	 * 
	 * This generates the Long Rotators Muscles  
	 * 
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/
    
   	public int generateLongRotatorsMuscle(String startID, String componentType, String componentName, String componentID, String parentID, double[][] currentPoints) 
	throws DataException, DataSecurityException
  	{	
		System.out.println("Generate LongRotatorsMuscle");
		
		int bodyID = 1;
		int projectID = 1;
		String vertices = "";
		
		ArrayList mySqlList= new ArrayList();
		int returnCode = 0;
	
		
		// We can generate the Long Rotators Muscle
		if (currentPoints == null )
		{
			double circumference = 0.125;
	    	
			double x =  -8.0;
    		double y =  -10.0;
    		double z =  -1.0;
			
			// Create a equilateral octogon	
			currentPoints[0][0] =  x;
			currentPoints[0][1] =  y;
			currentPoints[0][2] =  z;
			
			currentPoints[1][0] =  x-circumference;
			currentPoints[1][1] =  y;
			currentPoints[1][2] =  z-circumference;
			
			currentPoints[2][0] =  x-circumference;
			currentPoints[2][1] =  y;
			currentPoints[2][2] =  z-circumference*2;
			
			currentPoints[3][0] =  x;
			currentPoints[3][1] =  y;
			currentPoints[3][2] =  z-circumference*3;
	
			currentPoints[4][0] =  x+circumference;
			currentPoints[4][1] =  y;
			currentPoints[4][2] =  z-circumference*3;
			
			currentPoints[5][0] =  x+circumference*2;
			currentPoints[5][1] =  y;
			currentPoints[5][2] =  z-circumference*2;
	
			currentPoints[6][0] =  x+circumference*2;
			currentPoints[6][1] =  y;
			currentPoints[6][2] =  z-circumference;

			currentPoints[7][0] =  x+circumference;
			currentPoints[7][1] =  y;
			currentPoints[7][2] =  z;
		}
		

		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();
		
		
		if (parentID.equals("LongRotatorsMuscle:01")) 
		{	
			int nMaxSegs = 6;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
				
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
		     
				if (numSegs==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10); 
				}
				else if (numSegs==1){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10); 
				}
				else if (numSegs==2){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);  
				}
				else if (numSegs==3){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10); 
				}
				else if (numSegs==4){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);    
				}	
				else if (numSegs==5){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);    
				}	
				else if (numSegs==6){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);    
				}	
				else if (numSegs==7){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);    
				}		
				else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
				}
	    
				// Add the instruction into the instruction set
				bioMightInstructSet.addElement(bioInstruct);
			}
		
		}
		else if (parentID.equals("LongRotatorsMuscle:02")) 
		{		
			int nMaxSegs = 6;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
			
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
		 
	    		if (numSegs==0){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
	    		}
	       		else if (numSegs==1){
	       			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
	           	}
	    		else if (numSegs==2){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
	    		}
	    		else if (numSegs==3){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
	    		}
	    		else if (numSegs==4){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10); 	   
	        	}
	    		else if (numSegs==5){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10); 	   
	        	}
	    		else if (numSegs==6){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10); 	   
	        	}
	    		else if (numSegs==7){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10); 	   
	        	}
	    		else {
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
	    		}
		    
	    		// Add the instruction into the instruction set
	    		bioMightInstructSet.addElement(bioInstruct);
			}	

		}	
		
		
		//Generate the LongRotatorsMuscle
		//DBUtils.generateFacedComponents(Constants.QUADRANGLE, startID, componentType, componentName, componentID, currentPoints, bioMightInstructSet);
		//System.out.println("Generated the Rows for LongRotatorsMuscleTissue: " + componentID + "   parent: " + parentID + "   " + componentType);

		return returnCode;
	}
   	
    /***************************************************************************************
	 * GENERATE LONGUS COLLI MUSCLES
	 * 
	 * This generates the Longus Colli Muscles  
	 * 
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/
    
   	public int generateLongusColliMuscle(String startID, String componentType, String componentName, String componentID, String parentID, double[][] currentPoints) 
	throws DataException, DataSecurityException
  	{	
		System.out.println("Generate LongusColliMuscle");
		
		int bodyID = 1;
		int projectID = 1;
		String vertices = "";
		
		ArrayList mySqlList= new ArrayList();
		int returnCode = 0;
	
		
		// We can generate the Longus Colli Muscle
		if (currentPoints == null )
		{
			double circumference = 0.125;
	    	
			double x =  -8.0;
    		double y =  -10.0;
    		double z =  -1.0;
			
			// Create a equilateral octogon	
			currentPoints[0][0] =  x;
			currentPoints[0][1] =  y;
			currentPoints[0][2] =  z;
			
			currentPoints[1][0] =  x-circumference;
			currentPoints[1][1] =  y;
			currentPoints[1][2] =  z-circumference;
			
			currentPoints[2][0] =  x-circumference;
			currentPoints[2][1] =  y;
			currentPoints[2][2] =  z-circumference*2;
			
			currentPoints[3][0] =  x;
			currentPoints[3][1] =  y;
			currentPoints[3][2] =  z-circumference*3;
	
			currentPoints[4][0] =  x+circumference;
			currentPoints[4][1] =  y;
			currentPoints[4][2] =  z-circumference*3;
			
			currentPoints[5][0] =  x+circumference*2;
			currentPoints[5][1] =  y;
			currentPoints[5][2] =  z-circumference*2;
	
			currentPoints[6][0] =  x+circumference*2;
			currentPoints[6][1] =  y;
			currentPoints[6][2] =  z-circumference;

			currentPoints[7][0] =  x+circumference;
			currentPoints[7][1] =  y;
			currentPoints[7][2] =  z;
		}
		

		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();
		
		
		if (parentID.equals("LongusColliMuscle:01")) 
		{	
			int nMaxSegs = 6;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
				
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
		     
				if (numSegs==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10); 
				}
				else if (numSegs==1){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10); 
				}
				else if (numSegs==2){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);  
				}
				else if (numSegs==3){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10); 
				}
				else if (numSegs==4){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);    
				}	
				else if (numSegs==5){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);    
				}	
				else if (numSegs==6){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);    
				}	
				else if (numSegs==7){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);    
				}		
				else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
				}
	    
				// Add the instruction into the instruction set
				bioMightInstructSet.addElement(bioInstruct);
			}
		
		}
		else if (parentID.equals("LongusColliMuscle:02")) 
		{		
			int nMaxSegs = 6;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
			
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
		 
	    		if (numSegs==0){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
	    		}
	       		else if (numSegs==1){
	       			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
	           	}
	    		else if (numSegs==2){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
	    		}
	    		else if (numSegs==3){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
	    		}
	    		else if (numSegs==4){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10); 	   
	        	}
	    		else if (numSegs==5){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10); 	   
	        	}
	    		else if (numSegs==6){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10); 	   
	        	}
	    		else if (numSegs==7){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10); 	   
	        	}
	    		else {
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
	    		}
		    
	    		// Add the instruction into the instruction set
	    		bioMightInstructSet.addElement(bioInstruct);
			}	

		}	
		
		
		// Generate the LongusColliMuscle
		//DBUtils.generateFacedComponents(Constants.QUADRANGLE, startID, componentType, componentName, componentID, currentPoints, bioMightInstructSet);
		//System.out.println("Generated the Rows for LongusColliMuscleTissue: " + componentID + "   parent: " + parentID + "   " + componentType);

		return returnCode;
	}
    
    /***************************************************************************************
	 * GENERATE PALMARIS LONGUS MUSCLES
	 * 
	 * This generates the Long Rotators Muscles  
	 * 
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/
    
   	public int generatePalmarisLongusMuscle(String startID, String componentType, String componentName, String componentID, String parentID, double[][] currentPoints) 
	throws DataException, DataSecurityException
  	{	
		System.out.println("Generate PalmarisLongusMuscle");
		
		int bodyID = 1;
		int projectID = 1;
		String vertices = "";
		
		ArrayList mySqlList= new ArrayList();
		int returnCode = 0;
	
		
		// We can generate the PalmarisLongus Muscle
		if (currentPoints == null )
		{
			double circumference = 0.125;
	    	
			double x =  -8.0;
    		double y =  -10.0;
    		double z =  -1.0;
			
			// Create a equilateral octogon	
			currentPoints[0][0] =  x;
			currentPoints[0][1] =  y;
			currentPoints[0][2] =  z;
			
			currentPoints[1][0] =  x-circumference;
			currentPoints[1][1] =  y;
			currentPoints[1][2] =  z-circumference;
			
			currentPoints[2][0] =  x-circumference;
			currentPoints[2][1] =  y;
			currentPoints[2][2] =  z-circumference*2;
			
			currentPoints[3][0] =  x;
			currentPoints[3][1] =  y;
			currentPoints[3][2] =  z-circumference*3;
	
			currentPoints[4][0] =  x+circumference;
			currentPoints[4][1] =  y;
			currentPoints[4][2] =  z-circumference*3;
			
			currentPoints[5][0] =  x+circumference*2;
			currentPoints[5][1] =  y;
			currentPoints[5][2] =  z-circumference*2;
	
			currentPoints[6][0] =  x+circumference*2;
			currentPoints[6][1] =  y;
			currentPoints[6][2] =  z-circumference;

			currentPoints[7][0] =  x+circumference;
			currentPoints[7][1] =  y;
			currentPoints[7][2] =  z;
		}
		

		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();
		
		
		if (parentID.equals("PalmarisLongusMuscle:01")) 
		{	
			int nMaxSegs = 6;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
				
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
		     
				if (numSegs==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10); 
				}
				else if (numSegs==1){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10); 
				}
				else if (numSegs==2){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);  
				}
				else if (numSegs==3){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10); 
				}
				else if (numSegs==4){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);    
				}	
				else if (numSegs==5){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);    
				}	
				else if (numSegs==6){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);    
				}	
				else if (numSegs==7){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);    
				}		
				else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
				}
	    
				// Add the instruction into the instruction set
				bioMightInstructSet.addElement(bioInstruct);
			}
		
		}
		else if (parentID.equals("PalmarisLongusMuscle:02")) 
		{		
			int nMaxSegs = 6;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
			
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
		 
	    		if (numSegs==0){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
	    		}
	       		else if (numSegs==1){
	       			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
	           	}
	    		else if (numSegs==2){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
	    		}
	    		else if (numSegs==3){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
	    		}
	    		else if (numSegs==4){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10); 	   
	        	}
	    		else if (numSegs==5){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10); 	   
	        	}
	    		else if (numSegs==6){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10); 	   
	        	}
	    		else if (numSegs==7){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10); 	   
	        	}
	    		else {
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
	    		}
		    
	    		// Add the instruction into the instruction set
	    		bioMightInstructSet.addElement(bioInstruct);
			}	

		}	
		
		
		// Generate the PalmarisLongusMuscle
		//DBUtils.generateFacedComponents(Constants.QUADRANGLE, startID, componentType, componentName, componentID, currentPoints, bioMightInstructSet);
		//System.out.println("Generated the Rows for PalmarisLongusMuscleTissue: " + componentID + "   parent: " + parentID + "   " + componentType);

		return returnCode;
	}
    

    /***************************************************************************************
	 * GENERATE PLATYSMA MUSCLES
	 * 
	 * This generates the Long Rotators Muscles  
	 * 
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/
    
   	public int generatePlatysmaMuscle(String startID, String componentType, String componentName, String componentID, String parentID, double[][] currentPoints) 
	throws DataException, DataSecurityException
  	{	
		System.out.println("Generate PlatysmaMuscle");
		
		int bodyID = 1;
		int projectID = 1;
		String vertices = "";
		
		ArrayList mySqlList= new ArrayList();
		int returnCode = 0;
	
		
		// We can generate the Platysma Muscle
		if (currentPoints == null )
		{
			double circumference = 0.125;
	    	
			double x =  -8.0;
    		double y =  -10.0;
    		double z =  -1.0;
			
			// Create a equilateral octogon	
			currentPoints[0][0] =  x;
			currentPoints[0][1] =  y;
			currentPoints[0][2] =  z;
			
			currentPoints[1][0] =  x-circumference;
			currentPoints[1][1] =  y;
			currentPoints[1][2] =  z-circumference;
			
			currentPoints[2][0] =  x-circumference;
			currentPoints[2][1] =  y;
			currentPoints[2][2] =  z-circumference*2;
			
			currentPoints[3][0] =  x;
			currentPoints[3][1] =  y;
			currentPoints[3][2] =  z-circumference*3;
	
			currentPoints[4][0] =  x+circumference;
			currentPoints[4][1] =  y;
			currentPoints[4][2] =  z-circumference*3;
			
			currentPoints[5][0] =  x+circumference*2;
			currentPoints[5][1] =  y;
			currentPoints[5][2] =  z-circumference*2;
	
			currentPoints[6][0] =  x+circumference*2;
			currentPoints[6][1] =  y;
			currentPoints[6][2] =  z-circumference;

			currentPoints[7][0] =  x+circumference;
			currentPoints[7][1] =  y;
			currentPoints[7][2] =  z;
		}
		

		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();
		
		
		if (parentID.equals("PlatysmaMuscle:01")) 
		{	
			int nMaxSegs = 6;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
				
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
		     
				if (numSegs==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10); 
				}
				else if (numSegs==1){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10); 
				}
				else if (numSegs==2){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);  
				}
				else if (numSegs==3){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10); 
				}
				else if (numSegs==4){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);    
				}	
				else if (numSegs==5){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);    
				}	
				else if (numSegs==6){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);    
				}	
				else if (numSegs==7){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);    
				}		
				else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
				}
	    
				// Add the instruction into the instruction set
				bioMightInstructSet.addElement(bioInstruct);
			}
		
		}
		else if (parentID.equals("PlatysmaMuscle:02")) 
		{		
			int nMaxSegs = 6;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
			
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
		 
	    		if (numSegs==0){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
	    		}
	       		else if (numSegs==1){
	       			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
	           	}
	    		else if (numSegs==2){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
	    		}
	    		else if (numSegs==3){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
	    		}
	    		else if (numSegs==4){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10); 	   
	        	}
	    		else if (numSegs==5){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10); 	   
	        	}
	    		else if (numSegs==6){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10); 	   
	        	}
	    		else if (numSegs==7){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10); 	   
	        	}
	    		else {
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
	    		}
		    
	    		// Add the instruction into the instruction set
	    		bioMightInstructSet.addElement(bioInstruct);
			}	

		}	
		
		
		//Generate the PlatysmaMuscle
		//DBUtils.generateFacedComponents(Constants.QUADRANGLE, startID, componentType, componentName, componentID, currentPoints, bioMightInstructSet);
		//System.out.println("Generated the Rows for PlatysmaMuscleTissue: " + componentID + "   parent: " + parentID + "   " + componentType);

		return returnCode;
	}


    /***************************************************************************************
	 * GENERATE TRAPEZIUS MUSCLES
	 * 
	 * This generates the Trapezius Muscles  
	 * 
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/
    
   	public int generateTrapeziusMuscle(String startID, String componentType, String componentName, String componentID, String parentID, double[][] currentPoints) 
	throws DataException, DataSecurityException
  	{	
		System.out.println("Generate TrapeziusMuscle");
		
		int bodyID = 1;
		int projectID = 1;
		String vertices = "";
		
		ArrayList mySqlList= new ArrayList();
		int returnCode = 0;
	
		
		// We can generate the Trapezius Muscle
		if (currentPoints == null )
		{
			double radius = 1.25;
			double[] startPos = {8.0, -15.0, -4.5};
			double degrees = 120;
			currentPoints = BioGraphics.createRingLeftRightByNS(startPos, Constants.OCTOGON_Z4, Constants.NORTH, degrees, radius);
		}
		

		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();
		
		
		if (parentID.equals("TrapeziusMuscle:01")) 
		{	
			int nMaxSegs = 17;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
				
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
		     
				if (numSegs==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.20, -1.0, -0.50); 
				}
				else if (numSegs==1){
	    			bioInstruct.setTransType(Constants.SCALE);
	    			bioInstruct.setScaleMatrix(1.01, 1.0, 1.01);
					bioInstruct.setTranslateMatrix(0.20, -1.0, -0.65);  
				}
				else if (numSegs==2){
					bioInstruct.setTransType(Constants.SCALE);
	    			bioInstruct.setScaleMatrix(1.01, 1.0, 1.01);
					bioInstruct.setTranslateMatrix(0.20, -1.0, -0.75);  
				}
				else if (numSegs==3){
					bioInstruct.setTransType(Constants.SCALE);
	    			bioInstruct.setScaleMatrix(1.05, 1.0, 1.10);
					bioInstruct.setTranslateMatrix(0.20, -1.0, -1.0);  
				}
				else if (numSegs==4){
					bioInstruct.setTransType(Constants.SCALE);
	    			bioInstruct.setScaleMatrix(1.05, 1.0, 1.00);
					bioInstruct.setTranslateMatrix(0.20, -1.0, -1.0);     
				}	
				else if (numSegs==5){
					bioInstruct.setTransType(Constants.SCALE);
	    			bioInstruct.setScaleMatrix(1.10, 1.0, 1.00);
					bioInstruct.setTranslateMatrix(0.20, -1.0, -1.0);     
				}	
				else if (numSegs==6){
					bioInstruct.setTransType(Constants.SCALE);
	    			bioInstruct.setScaleMatrix(1.10, 1.0, 1.00);
					bioInstruct.setTranslateMatrix(0.20, -1.0, -0.50);   
				}	
				else if (numSegs==7){
					bioInstruct.setTransType(Constants.SCALE);
	    			bioInstruct.setScaleMatrix(1.01, 1.0, 1.01);
					bioInstruct.setTranslateMatrix(0.20, -1.0, -0.25);    
				}		
				else if (numSegs==8){
					bioInstruct.setTransType(Constants.SCALE);
	    			bioInstruct.setScaleMatrix(1.01, 1.0, 1.01);
					bioInstruct.setTranslateMatrix(0.20, -1.0, -0.25);    
				}		
				else if (numSegs==9){
					bioInstruct.setTransType(Constants.SCALE);
	    			bioInstruct.setScaleMatrix(1.01, 1.0, 1.01);
					bioInstruct.setTranslateMatrix(0.20, -1.0, -0.25);    
				}		
				else if (numSegs==10){
					bioInstruct.setTransType(Constants.SCALE);
	    			bioInstruct.setScaleMatrix(1.01, 1.0, 1.01);
					bioInstruct.setTranslateMatrix(0.20, -1.0, -0.25);    
				}		
		
				else if (numSegs==11){
					bioInstruct.setTransType(Constants.SCALE);
	    			bioInstruct.setScaleMatrix(1.01, 1.0, 1.01);
					bioInstruct.setTranslateMatrix(0.20, -1.0, -0.25);    
				}		
				else if (numSegs==12){
					bioInstruct.setTransType(Constants.SCALE);
	    			bioInstruct.setScaleMatrix(0.95, 1.0		, 1.01);
					bioInstruct.setTranslateMatrix(-0.75, -1.0, -0.25);    
				}		
				else if (numSegs==13){
					bioInstruct.setTransType(Constants.SCALE);
	    			bioInstruct.setScaleMatrix(0.95, 1.0, 1.01);
					bioInstruct.setTranslateMatrix(-0.75, -1.0, -0.25);    
				}		
				else if (numSegs==14){
					bioInstruct.setTransType(Constants.SCALE);
	    			bioInstruct.setScaleMatrix(1.01, 1.0, 1.01);
					bioInstruct.setTranslateMatrix(-0.75, -1.0, -0.25);    
				}		
				else if (numSegs==15){
					bioInstruct.setTransType(Constants.SCALE);
	    			bioInstruct.setScaleMatrix(0.90, 1.0, 1.01);
					bioInstruct.setTranslateMatrix(-0.75, -1.0, -0.25);    
				}		
				else if (numSegs==16){
					bioInstruct.setTransType(Constants.SCALE);
	    			bioInstruct.setScaleMatrix(0.90, 1.0, 1.01);
					bioInstruct.setTranslateMatrix(-0.75, -1.0, -0.25);    
				}		
				
				else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
				}
	    
				// Add the instruction into the instruction set
				bioMightInstructSet.addElement(bioInstruct);
			}
		
		}
		else if (parentID.equals("TrapeziusMuscle:02")) 
		{		
			int nMaxSegs = 8;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
				
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
		     
				if (numSegs==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.20, -1.0, -0.50); 
				}
				else if (numSegs==1) {
	    			bioInstruct.setTransType(Constants.SCALE);
	    			bioInstruct.setScaleMatrix(1.01, 1.0, 1.01);
					bioInstruct.setTranslateMatrix(-0.20, -1.0, -0.65);  
				}
				else if (numSegs==2){
					bioInstruct.setTransType(Constants.SCALE);
	    			bioInstruct.setScaleMatrix(1.01, 1.0, 1.01);
					bioInstruct.setTranslateMatrix(-0.20, -1.0, -0.75);  
				}
				else if (numSegs==3){
					bioInstruct.setTransType(Constants.SCALE);
	    			bioInstruct.setScaleMatrix(1.20, 1.0, 1.10);
					bioInstruct.setTranslateMatrix(-0.20, -1.0, -1.0);  
				}
				else if (numSegs==4){
					bioInstruct.setTransType(Constants.SCALE);
	    			bioInstruct.setScaleMatrix(1.30, 1.0, 1.00);
					bioInstruct.setTranslateMatrix(-0.20, -1.0, -1.0);     
				}	
				else if (numSegs==5){
					bioInstruct.setTransType(Constants.SCALE);
	    			bioInstruct.setScaleMatrix(1.10, 1.0, 1.00);
					bioInstruct.setTranslateMatrix(-0.20, -1.0, -1.0);     
				}	
				else if (numSegs==6){
					bioInstruct.setTransType(Constants.SCALE);
	    			bioInstruct.setScaleMatrix(1.10, 1.0, 1.00);
					bioInstruct.setTranslateMatrix(-0.20, -1.0, -0.50);   
				}	
				else if (numSegs==7){
					bioInstruct.setTransType(Constants.SCALE);
	    			bioInstruct.setScaleMatrix(1.01, 1.0, 1.01);
					bioInstruct.setTranslateMatrix(-0.20, -1.0, -0.25);    
				}		
				
		    
	    		// Add the instruction into the instruction set
	    		bioMightInstructSet.addElement(bioInstruct);
			}	

		}	
		
		
		//Generate the TrapeziusMuscle
		DBUtils.generateFacedComponents(Constants.QUADRANGLE, startID, componentType, componentName, componentID, currentPoints, bioMightInstructSet);
		System.out.println("Generated the Rows for TrapeziusMuscleTissue: " + componentID + "   parent: " + parentID + "   " + componentType);

		return returnCode;
	}
   	
	/***************************************************************************************
	 * GENERATE PECTORALIS MAJOR MUSCLE
	 * 
	 * This generates the Pectoralis Major  
	 * 
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/
    
   	public int generatePectoralisMajorMuscle(String startID, String componentType, String componentName, String componentID, String parentID, double[][] currentPoints) 
	throws DataException, DataSecurityException
  	{	
		System.out.println("Generate PectoralisMajorMuscle");
		
		int bodyID = 1;
		int projectID = 1;
		String vertices = "";
		
		ArrayList mySqlList= new ArrayList();
		int returnCode = 0;
	
		
		// We can generate the Diaphragm Muscle
		if (currentPoints == null )
		{
			double circumference = 0.125;
	    	
			double x =  -8.0;
    		double y =  -10.0;
    		double z =  -1.0;
			
			// Create a equilateral octogon	
			currentPoints[0][0] =  x;
			currentPoints[0][1] =  y;
			currentPoints[0][2] =  z;
			
			currentPoints[1][0] =  x-circumference;
			currentPoints[1][1] =  y;
			currentPoints[1][2] =  z-circumference;
			
			currentPoints[2][0] =  x-circumference;
			currentPoints[2][1] =  y;
			currentPoints[2][2] =  z-circumference*2;
			
			currentPoints[3][0] =  x;
			currentPoints[3][1] =  y;
			currentPoints[3][2] =  z-circumference*3;
	
			currentPoints[4][0] =  x+circumference;
			currentPoints[4][1] =  y;
			currentPoints[4][2] =  z-circumference*3;
			
			currentPoints[5][0] =  x+circumference*2;
			currentPoints[5][1] =  y;
			currentPoints[5][2] =  z-circumference*2;
	
			currentPoints[6][0] =  x+circumference*2;
			currentPoints[6][1] =  y;
			currentPoints[6][2] =  z-circumference;

			currentPoints[7][0] =  x+circumference;
			currentPoints[7][1] =  y;
			currentPoints[7][2] =  z;
		}
		

		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();
		
		
		if (parentID.equals("PectoralisMajorMuscle:01")) 
		{	
			int nMaxSegs = 6;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
				
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
		     
				if (numSegs==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10); 
				}
				else if (numSegs==1){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10); 
				}
				else if (numSegs==2){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);  
				}
				else if (numSegs==3){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10); 
				}
				else if (numSegs==4){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);    
				}	
				else if (numSegs==5){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);    
				}	
				else if (numSegs==6){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);    
				}	
				else if (numSegs==7){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);    
				}		
				else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
				}
	    
				// Add the instruction into the instruction set
				bioMightInstructSet.addElement(bioInstruct);
			}
		
		}
		else if (parentID.equals("PectoralisMajorMuscle:02")) 
		{		
			int nMaxSegs = 6;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
			
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
		 
	    		if (numSegs==0){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
	    		}
	       		else if (numSegs==1){
	       			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
	           	}
	    		else if (numSegs==2){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
	    		}
	    		else if (numSegs==3){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
	    		}
	    		else if (numSegs==4){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10); 	   
	        	}
	    		else if (numSegs==5){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10); 	   
	        	}
	    		else if (numSegs==6){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10); 	   
	        	}
	    		else if (numSegs==7){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10); 	   
	        	}
	    		else {
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
	    		}
		    
	    		// Add the instruction into the instruction set
	    		bioMightInstructSet.addElement(bioInstruct);
			}	

		}	
		
		
		// Generate the PectoralisMajorMuscle
		//DBUtils.generateFacedComponents(Constants.QUADRANGLE, startID, componentType, componentName, componentID, currentPoints, bioMightInstructSet);
		//System.out.println("Generated the Rows for PectoralisMajorMuscleTissue: " + componentID + "   parent: " + parentID + "   " + componentType);

		return returnCode;
	}
    
   	

    
 	/***************************************************************************************
	 * GENERATE BUCCINATOR Muscle
	 * 
	 * This generates the Buccinator Muscle
	 * 
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/
    
   	public int generateBuccinatorMuscle(String startID, String componentType, String componentName, String componentID, String parentID, double[][] currentPoints) 
	throws DataException, DataSecurityException
  	{	
		System.out.println("Generate BuccinatorMuscle");
		
		int bodyID = 1;
		int projectID = 1;
		String vertices = "";
		
		ArrayList mySqlList= new ArrayList();
		int returnCode = 0;
	
		
		// We can generate the BuccinatorMuscle alone, or when connected
		// The current points passed into the equation are assumed
		// to come from the base of the skull.
		if (currentPoints == null )
		{
			double circumference = 0.125;
	    	
			// Generate the BuccinatorMuscle
			//  seven sections
			double[] startPos = {1.5, -30.0, -2.0};
			BioGraphics.octogonXPlane(startPos, circumference);
	}
		

		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();
		
		if (parentID.equals("BuccinatorMuscle:01")) 
		{	

		int nMaxSegs = 2;
		for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
		
			// Create a place for an instruction 
			BioMightInstruction bioInstruct = new BioMightInstruction();
		
	         
    		if (numSegs==0){
    			bioInstruct.setTransType(Constants.SCALE);
    			bioInstruct.setScaleMatrix(1.0, 2.0, 1.5);
    			bioInstruct.setTranslateMatrix(1.0, 0.0, 0.0); 
    		}
       		else if (numSegs==1){
       			bioInstruct.setTransType(Constants.SCALE);
    			bioInstruct.setScaleMatrix(1.0, 2.0, 1.0);
    			bioInstruct.setTranslateMatrix(1.0, 0.0, 0.0); 
           	}
    		else if (numSegs==2){
    			bioInstruct.setTransType(Constants.SCALE);
    			bioInstruct.setScaleMatrix(1.0, 1.0, 1.0);
    			bioInstruct.setTranslateMatrix(1.0, 0.0, 0.0); 
    		}
    		else if (numSegs==3){
    			bioInstruct.setTransType(Constants.SCALE);
    			bioInstruct.setScaleMatrix(1.0, 1.5, 1.0);
    			bioInstruct.setTranslateMatrix(1.0, -0.25, 0.0); 
    		}
    		else if (numSegs==4){
    			bioInstruct.setTransType(Constants.SCALE);
    			bioInstruct.setScaleMatrix(1.0, 1.0, 1.0);
    			bioInstruct.setTranslateMatrix(1.0, -0.25, -0.25); 	   
        	}	
    		
        	else {
    			bioInstruct.setTransType(Constants.TRANSLATE);
    			bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);	
    		}
	    
    		// Add the instruction into the instruction set
    		bioMightInstructSet.addElement(bioInstruct);
		}

		
		}
		
		else if (parentID.equals("BuccinatorMuscle:02")) 
		{	
	
			
			int nMaxSegs = 2;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
			
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
			
		         
	    		if (numSegs==0){
	    			bioInstruct.setTransType(Constants.SCALE);
	    			bioInstruct.setScaleMatrix(1.0, 2.0, 1.5);
	    			bioInstruct.setTranslateMatrix(-1.0, 0.0, 0.0); 
	    		}
	       		else if (numSegs==1){
	       			bioInstruct.setTransType(Constants.SCALE);
	    			bioInstruct.setScaleMatrix(1.0, 2.0, 1.0);
	    			bioInstruct.setTranslateMatrix(-1.0, 0.0, 0.0); 
	           	}
	    		else if (numSegs==2){
	    			bioInstruct.setTransType(Constants.SCALE);
	    			bioInstruct.setScaleMatrix(1.0, 1.0, 1.0);
	    			bioInstruct.setTranslateMatrix(-1.0, 0.0, 0.0); 
	    		}
	    		else if (numSegs==3){
	    			bioInstruct.setTransType(Constants.SCALE);
	    			bioInstruct.setScaleMatrix(1.0, 1.5, 1.0);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.25, 0.0); 
	    		}
	    		else if (numSegs==4){
	    			bioInstruct.setTransType(Constants.SCALE);
	    			bioInstruct.setScaleMatrix(1.0, 1.0, 1.0);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.25, -0.25); 	   
	        	}	
	    		
	        	else {
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);	
	    		}
		    
	    		// Add the instruction into the instruction set
	    		bioMightInstructSet.addElement(bioInstruct);
			}
		}	
		
		
		
		// Generate the BuccinatorMuscle
		DBUtils.generateFacedComponents(Constants.QUADRANGLE, startID, componentType, componentName, componentID, currentPoints, bioMightInstructSet);
		
		return returnCode;
	}
   	
   	/***************************************************************************************
	 * GENERATE CANINUS Muscle
	 * 
	 * This generates the Caninus Muscle
	 * 
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/
    
   	public int generateCaninusMuscle(String startID, String componentType, String componentName, String componentID, String parentID, double[][] currentPoints) 
	throws DataException, DataSecurityException
  	{	
		System.out.println("Generate CaninusMuscle");
		
		int bodyID = 1;
		int projectID = 1;
		String vertices = "";
		
		ArrayList mySqlList= new ArrayList();
		int returnCode = 0;
	
		
		
		

		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();
		
		if (parentID.equals("CaninusMuscle:01")) 
		{	
			
			// We can generate the CaninusMuscle alone, or when connected
			// The current points passed into the equation are assumed
			// to come from the base of the skull.
			if (currentPoints == null )
			{
				double circumference = 0.125;
		    	
				// Generate the CaninusMuscle
				//  seven sections
				double[] startPos = {1.5, -20.0, -2.0};
				BioGraphics.octogonXPlane(startPos, circumference);
			}

		int nMaxSegs = 2;
		for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
		
			// Create a place for an instruction 
			BioMightInstruction bioInstruct = new BioMightInstruction();
		
	         
    		if (numSegs==0){
    			bioInstruct.setTransType(Constants.SCALE);
    			bioInstruct.setScaleMatrix(1.0, 2.0, 1.5);
    			bioInstruct.setTranslateMatrix(1.0, 0.0, 0.0); 
    		}
       		else if (numSegs==1){
       			bioInstruct.setTransType(Constants.SCALE);
    			bioInstruct.setScaleMatrix(1.0, 2.0, 1.0);
    			bioInstruct.setTranslateMatrix(1.0, 0.0, 0.0); 
           	}
    		else if (numSegs==2){
    			bioInstruct.setTransType(Constants.SCALE);
    			bioInstruct.setScaleMatrix(1.0, 1.0, 1.0);
    			bioInstruct.setTranslateMatrix(1.0, 0.0, 0.0); 
    		}
    		else if (numSegs==3){
    			bioInstruct.setTransType(Constants.SCALE);
    			bioInstruct.setScaleMatrix(1.0, 1.5, 1.0);
    			bioInstruct.setTranslateMatrix(1.0, -0.25, 0.0); 
    		}
    		else if (numSegs==4){
    			bioInstruct.setTransType(Constants.SCALE);
    			bioInstruct.setScaleMatrix(1.0, 1.0, 1.0);
    			bioInstruct.setTranslateMatrix(1.0, -0.25, -0.25); 	   
        	}	
    		
        	else {
    			bioInstruct.setTransType(Constants.TRANSLATE);
    			bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);	
    		}
	    
    		// Add the instruction into the instruction set
    		bioMightInstructSet.addElement(bioInstruct);
		}

		
		}
		
		else if (parentID.equals("CaninusMuscle:02")) 
		{	
			// We can generate the CaninusMuscle alone, or when connected
			// The current points passed into the equation are assumed
			// to come from the base of the skull.
			if (currentPoints == null )
			{
				double circumference = 0.125;
		    	
				// Generate the CaninusMuscle
				//  seven sections
				double[] startPos = {-1.5, -20.0, -2.0};
				BioGraphics.octogonXPlane(startPos, circumference);
		}
	
			
			int nMaxSegs = 2;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
			
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
			
		         
	    		if (numSegs==0){
	    			bioInstruct.setTransType(Constants.SCALE);
	    			bioInstruct.setScaleMatrix(1.0, 2.0, 1.5);
	    			bioInstruct.setTranslateMatrix(-1.0, 0.0, 0.0); 
	    		}
	       		else if (numSegs==1){
	       			bioInstruct.setTransType(Constants.SCALE);
	    			bioInstruct.setScaleMatrix(1.0, 2.0, 1.0);
	    			bioInstruct.setTranslateMatrix(-1.0, 0.0, 0.0); 
	           	}
	    		else if (numSegs==2){
	    			bioInstruct.setTransType(Constants.SCALE);
	    			bioInstruct.setScaleMatrix(1.0, 1.0, 1.0);
	    			bioInstruct.setTranslateMatrix(-1.0, 0.0, 0.0); 
	    		}
	    		else if (numSegs==3){
	    			bioInstruct.setTransType(Constants.SCALE);
	    			bioInstruct.setScaleMatrix(1.0, 1.5, 1.0);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.25, 0.0); 
	    		}
	    		else if (numSegs==4){
	    			bioInstruct.setTransType(Constants.SCALE);
	    			bioInstruct.setScaleMatrix(1.0, 1.0, 1.0);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.25, -0.25); 	   
	        	}	
	    		
	        	else {
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);	
	    		}
		    
	    		// Add the instruction into the instruction set
	    		bioMightInstructSet.addElement(bioInstruct);
			}
		}	
		
		
		
		// Generate the CaninusMuscle
		DBUtils.generateFacedComponents(Constants.QUADRANGLE, startID, componentType, componentName, componentID, currentPoints, bioMightInstructSet);
		
		return returnCode;
	}
   	
   	
   	
   	/***************************************************************************************
	 * GENERATE PECTORALIS MINOR MUSCLE
	 * 
	 * This generates the Pectoralis Minor  
	 * 
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/
    
   	public int generatePectoralisMinorMuscle(String startID, String componentType, String componentName, String componentID, String parentID, double[][] currentPoints) 
	throws DataException, DataSecurityException
  	{	
		System.out.println("Generate PectoralisMinorMuscle");
		
		int bodyID = 1;
		int projectID = 1;
		String vertices = "";
		
		ArrayList mySqlList= new ArrayList();
		int returnCode = 0;
	
		
		// We can generate the Diaphragm Muscle
		if (currentPoints == null )
		{
			double circumference = 0.125;
	    	
			double x =  -8.0;
    		double y =  -10.0;
    		double z =  -1.0;
			
			// Create a equilateral octogon	
			currentPoints[0][0] =  x;
			currentPoints[0][1] =  y;
			currentPoints[0][2] =  z;
			
			currentPoints[1][0] =  x-circumference;
			currentPoints[1][1] =  y;
			currentPoints[1][2] =  z-circumference;
			
			currentPoints[2][0] =  x-circumference;
			currentPoints[2][1] =  y;
			currentPoints[2][2] =  z-circumference*2;
			
			currentPoints[3][0] =  x;
			currentPoints[3][1] =  y;
			currentPoints[3][2] =  z-circumference*3;
	
			currentPoints[4][0] =  x+circumference;
			currentPoints[4][1] =  y;
			currentPoints[4][2] =  z-circumference*3;
			
			currentPoints[5][0] =  x+circumference*2;
			currentPoints[5][1] =  y;
			currentPoints[5][2] =  z-circumference*2;
	
			currentPoints[6][0] =  x+circumference*2;
			currentPoints[6][1] =  y;
			currentPoints[6][2] =  z-circumference;

			currentPoints[7][0] =  x+circumference;
			currentPoints[7][1] =  y;
			currentPoints[7][2] =  z;
		}
		

		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();
		
		if (parentID.equals("PectoralisMinorMuscle:01")) 
		{	
			int nMaxSegs = 3;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
		
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
	         
				if (numSegs==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10); 
				}
				else if (numSegs==1){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10); 
				}
				else if (numSegs==2){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);  
				}
				else if (numSegs==3){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10); 
				}
				else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);	
				}
	    
				// Add the instruction into the instruction set
				bioMightInstructSet.addElement(bioInstruct);
			}

		
		}
		else if (parentID.equals("PectoralisMinorMuscle:02")) 
		{		
			int nMaxSegs = 3;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
			
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
			 
				if (numSegs==0){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
	    		}
	       		else if (numSegs==1){
	       			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
	           	}
	    		else if (numSegs==2){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
	    		}
	    		else if (numSegs==3){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
	    		}		
	        	else {
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);	
	    		}
		    
	    		// Add the instruction into the instruction set
	    		bioMightInstructSet.addElement(bioInstruct);
			}
		}	
		
		
		// Generate the PectoralisMinorMuscle
		//DBUtils.generateFacedComponents(Constants.QUADRANGLE, startID, componentType, componentName, componentID, currentPoints, bioMightInstructSet);
		//System.out.println("Generated the Rows for PectoralisMinorMuscleTissue: " + componentID + "   parent: " + parentID + "   " + componentType);

		return returnCode;
	}
    
   	
   	
  	/***************************************************************************************
	 * GENERATE DIAPHRAGM MUSCLE
	 * 
	 * This generates the Diaphragm Muscle
	 * 
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/
    
   	public int generateDiaphramMuscle(String startID, String componentType, String componentName, String componentID, String parentID, double[][] currentPoints) 
	throws DataException, DataSecurityException
  	{	
		System.out.println("Generate Diaphram Muscle");
		
		int bodyID = 1;
		int projectID = 1;
		String vertices = "";
		
		ArrayList mySqlList= new ArrayList();
		int returnCode = 0;
	
		
		// We can generate the Diaphragm Muscle
		if (currentPoints == null )
		{
			double circumference = 0.125;
	    	
			double x =  -8.0;
    		double y =  -10.0;
    		double z =  -1.0;
			
			// Create a equilateral octogon	
			currentPoints[0][0] =  x;
			currentPoints[0][1] =  y;
			currentPoints[0][2] =  z;
			
			currentPoints[1][0] =  x-circumference;
			currentPoints[1][1] =  y;
			currentPoints[1][2] =  z-circumference;
			
			currentPoints[2][0] =  x-circumference;
			currentPoints[2][1] =  y;
			currentPoints[2][2] =  z-circumference*2;
			
			currentPoints[3][0] =  x;
			currentPoints[3][1] =  y;
			currentPoints[3][2] =  z-circumference*3;
	
			currentPoints[4][0] =  x+circumference;
			currentPoints[4][1] =  y;
			currentPoints[4][2] =  z-circumference*3;
			
			currentPoints[5][0] =  x+circumference*2;
			currentPoints[5][1] =  y;
			currentPoints[5][2] =  z-circumference*2;
	
			currentPoints[6][0] =  x+circumference*2;
			currentPoints[6][1] =  y;
			currentPoints[6][2] =  z-circumference;

			currentPoints[7][0] =  x+circumference;
			currentPoints[7][1] =  y;
			currentPoints[7][2] =  z;
		}
		

		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();
		
		
		if (parentID.equals("DiaphragmMuscle:01")) 
		{	
			int nMaxSegs = 5;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
		
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
	         
				if (numSegs==0){
					bioInstruct.setTransType(Constants.SCALE);
					bioInstruct.setScaleMatrix(3.0, 1.0, 3.0);
					bioInstruct.setTranslateMatrix(0.0, -0.25, 0.0); 
				}
				else if (numSegs==1){
					bioInstruct.setTransType(Constants.SCALE);
					bioInstruct.setScaleMatrix(4.0, 1.0, 3.0);
					bioInstruct.setTranslateMatrix(0.0, -0.25, 0.0); 
				}
				else if (numSegs==2){
					bioInstruct.setTransType(Constants.SCALE);
					bioInstruct.setScaleMatrix(2.20, 1.0, 1.20);
					bioInstruct.setTranslateMatrix(0.0, -0.5, 0.0); 
				}
				else if (numSegs==3){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -1.00, 0.0); 
				}
				else if (numSegs==4){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -1.00, 0.0); 
				}	
    		
				else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);	
				}
	    
				// Add the instruction into the instruction set
				bioMightInstructSet.addElement(bioInstruct);
			}

		
		}
		else if (parentID.equals("DiaphragmMuscle:02")) 
		{		
			int nMaxSegs = 1;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
			
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
			 
	    		if (numSegs==0){
	    			bioInstruct.setTransType(Constants.SCALE);
	    			bioInstruct.setScaleMatrix(1.0, 2.0, 1.5);
	    			bioInstruct.setTranslateMatrix(-1.0, 0.0, 0.0); 
	    		}
	       			
	        	else {
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);	
	    		}
		    
	    		// Add the instruction into the instruction set
	    		bioMightInstructSet.addElement(bioInstruct);
			}
		}	
		
		
		// Generate the Diaphragm Muscle
		//DBUtils.generateFacedComponents(Constants.QUADRANGLE, startID, componentType, componentName, componentID, currentPoints, bioMightInstructSet);
		//System.out.println("Generated the Rows for Diaphragm Muscle Tissue: " + componentID + "   parent: " + parentID + "   " + componentType);

		return returnCode;
	}
    
  	/***************************************************************************************
	 * GENERATE Obliquus Externus Abdominis Muscle
	 * 
	 * This generates the Gall Bladder
	 * 
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/
    
   	public int generateObliquusExternusAbdominisMuscle(String startID, String componentType, String componentName, String componentID, String parentID, double[][] currentPoints) 
	throws DataException, DataSecurityException
  	{	
		System.out.println("Generate ObliquusExternusAbdominisMuscle");
		
		int bodyID = 1;
		int projectID = 1;
		String vertices = "";
		
		ArrayList mySqlList= new ArrayList();
		int returnCode = 0;
	
		
		// We can generate the ObliquusExternusAbdominisMuscle alone, or when connected
		// The current points passed into the equation are assumed
		// to come from the base of the skull.
		if (currentPoints == null )
		{
			double circumference = 0.125;
	    	
			double x =  -8.0;
    		double y =  -10.0;
    		double z =  -1.0;
			
			// Create a equilateral octogon	
			currentPoints[0][0] =  x;
			currentPoints[0][1] =  y;
			currentPoints[0][2] =  z;
			
			currentPoints[1][0] =  x-circumference;
			currentPoints[1][1] =  y;
			currentPoints[1][2] =  z-circumference;
			
			currentPoints[2][0] =  x-circumference;
			currentPoints[2][1] =  y;
			currentPoints[2][2] =  z-circumference*2;
			
			currentPoints[3][0] =  x;
			currentPoints[3][1] =  y;
			currentPoints[3][2] =  z-circumference*3;
	
			currentPoints[4][0] =  x+circumference;
			currentPoints[4][1] =  y;
			currentPoints[4][2] =  z-circumference*3;
			
			currentPoints[5][0] =  x+circumference*2;
			currentPoints[5][1] =  y;
			currentPoints[5][2] =  z-circumference*2;
	
			currentPoints[6][0] =  x+circumference*2;
			currentPoints[6][1] =  y;
			currentPoints[6][2] =  z-circumference;

			currentPoints[7][0] =  x+circumference;
			currentPoints[7][1] =  y;
			currentPoints[7][2] =  z;
	}
		

		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();
		
		
		if (parentID.equals("ObliquusExternusAbdominisMuscle:01")) 
		{	
	
		
		int nMaxSegs = 2;
		for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
		
			// Create a place for an instruction 
			BioMightInstruction bioInstruct = new BioMightInstruction();
		
	         
    		if (numSegs==0){
    			bioInstruct.setTransType(Constants.SCALE);
    			bioInstruct.setScaleMatrix(1.0, 2.0, 1.5);
    			bioInstruct.setTranslateMatrix(1.0, 0.0, 0.0); 
    		}
       		else if (numSegs==1){
       			bioInstruct.setTransType(Constants.SCALE);
    			bioInstruct.setScaleMatrix(1.0, 2.0, 1.0);
    			bioInstruct.setTranslateMatrix(1.0, 0.0, 0.0); 
           	}
    		else if (numSegs==2){
    			bioInstruct.setTransType(Constants.SCALE);
    			bioInstruct.setScaleMatrix(1.0, 1.0, 1.0);
    			bioInstruct.setTranslateMatrix(1.0, 0.0, 0.0); 
    		}
    		else if (numSegs==3){
    			bioInstruct.setTransType(Constants.SCALE);
    			bioInstruct.setScaleMatrix(1.0, 1.5, 1.0);
    			bioInstruct.setTranslateMatrix(1.0, -0.25, 0.0); 
    		}
    		else if (numSegs==4){
    			bioInstruct.setTransType(Constants.SCALE);
    			bioInstruct.setScaleMatrix(1.0, 1.0, 1.0);
    			bioInstruct.setTranslateMatrix(1.0, -0.25, -0.25); 	   
        	}	
    		
        	else {
    			bioInstruct.setTransType(Constants.TRANSLATE);
    			bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);	
    		}
	    
    		// Add the instruction into the instruction set
    		bioMightInstructSet.addElement(bioInstruct);
		}

		
		}
		
		else if (parentID.equals("ObliquusExternusAbdominisMuscle:02")) 
		{	
	
			
			int nMaxSegs = 2;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
			
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
			
		         
	    		if (numSegs==0){
	    			bioInstruct.setTransType(Constants.SCALE);
	    			bioInstruct.setScaleMatrix(1.0, 2.0, 1.5);
	    			bioInstruct.setTranslateMatrix(-1.0, 0.0, 0.0); 
	    		}
	       		else if (numSegs==1){
	       			bioInstruct.setTransType(Constants.SCALE);
	    			bioInstruct.setScaleMatrix(1.0, 2.0, 1.0);
	    			bioInstruct.setTranslateMatrix(-1.0, 0.0, 0.0); 
	           	}
	    		else if (numSegs==2){
	    			bioInstruct.setTransType(Constants.SCALE);
	    			bioInstruct.setScaleMatrix(1.0, 1.0, 1.0);
	    			bioInstruct.setTranslateMatrix(-1.0, 0.0, 0.0); 
	    		}
	    		else if (numSegs==3){
	    			bioInstruct.setTransType(Constants.SCALE);
	    			bioInstruct.setScaleMatrix(1.0, 1.5, 1.0);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.25, 0.0); 
	    		}
	    		else if (numSegs==4){
	    			bioInstruct.setTransType(Constants.SCALE);
	    			bioInstruct.setScaleMatrix(1.0, 1.0, 1.0);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.25, -0.25); 	   
	        	}	
	    		
	        	else {
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);	
	    		}
		    
	    		// Add the instruction into the instruction set
	    		bioMightInstructSet.addElement(bioInstruct);
			}
		}	
		
		
		// Generate the ObliquusExternusAbdominisMuscle
		DBUtils.generateFacedComponents(Constants.QUADRANGLE, startID, componentType, componentName, componentID, currentPoints, bioMightInstructSet);
		
		return returnCode;
	}

	/***************************************************************************************
	 * GENERATE Obliquus Internus Abdominis Muscle
	 * 
	 * This generates the Gall Bladder
	 * 
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/
    
   	public int generateObliquusInternusAbdominisMuscle(String startID, String componentType, String componentName, String componentID, String parentID, double[][] currentPoints) 
	throws DataException, DataSecurityException
  	{	
		System.out.println("Generate ObliquusInternusAbdominisMuscle");
		
		int bodyID = 1;
		int projectID = 1;
		String vertices = "";
		
		ArrayList mySqlList= new ArrayList();
		int returnCode = 0;
	
		
		// We can generate the ObliquusInternusAbdominisMuscle alone, or when connected
		// The current points passed into the equation are assumed
		// to come from the base of the skull.
		if (currentPoints == null )
		{
			double circumference = 0.125;
	    	
			double x =  -8.0;
    		double y =  -10.0;
    		double z =  -1.0;
			
			// Create a equilateral octogon	
			currentPoints[0][0] =  x;
			currentPoints[0][1] =  y;
			currentPoints[0][2] =  z;
			
			currentPoints[1][0] =  x-circumference;
			currentPoints[1][1] =  y;
			currentPoints[1][2] =  z-circumference;
			
			currentPoints[2][0] =  x-circumference;
			currentPoints[2][1] =  y;
			currentPoints[2][2] =  z-circumference*2;
			
			currentPoints[3][0] =  x;
			currentPoints[3][1] =  y;
			currentPoints[3][2] =  z-circumference*3;
	
			currentPoints[4][0] =  x+circumference;
			currentPoints[4][1] =  y;
			currentPoints[4][2] =  z-circumference*3;
			
			currentPoints[5][0] =  x+circumference*2;
			currentPoints[5][1] =  y;
			currentPoints[5][2] =  z-circumference*2;
	
			currentPoints[6][0] =  x+circumference*2;
			currentPoints[6][1] =  y;
			currentPoints[6][2] =  z-circumference;

			currentPoints[7][0] =  x+circumference;
			currentPoints[7][1] =  y;
			currentPoints[7][2] =  z;
	}
		

		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();
		
		
		if (parentID.equals("ObliquusInternusAbdominisMuscle:01")) 
		{	
	
		
		int nMaxSegs = 2;
		for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
		
			// Create a place for an instruction 
			BioMightInstruction bioInstruct = new BioMightInstruction();
		
	         
    		if (numSegs==0){
    			bioInstruct.setTransType(Constants.SCALE);
    			bioInstruct.setScaleMatrix(1.0, 2.0, 1.5);
    			bioInstruct.setTranslateMatrix(1.0, 0.0, 0.0); 
    		}
       		else if (numSegs==1){
       			bioInstruct.setTransType(Constants.SCALE);
    			bioInstruct.setScaleMatrix(1.0, 2.0, 1.0);
    			bioInstruct.setTranslateMatrix(1.0, 0.0, 0.0); 
           	}
    		else if (numSegs==2){
    			bioInstruct.setTransType(Constants.SCALE);
    			bioInstruct.setScaleMatrix(1.0, 1.0, 1.0);
    			bioInstruct.setTranslateMatrix(1.0, 0.0, 0.0); 
    		}
    		else if (numSegs==3){
    			bioInstruct.setTransType(Constants.SCALE);
    			bioInstruct.setScaleMatrix(1.0, 1.5, 1.0);
    			bioInstruct.setTranslateMatrix(1.0, -0.25, 0.0); 
    		}
    		else if (numSegs==4){
    			bioInstruct.setTransType(Constants.SCALE);
    			bioInstruct.setScaleMatrix(1.0, 1.0, 1.0);
    			bioInstruct.setTranslateMatrix(1.0, -0.25, -0.25); 	   
        	}	
    		
        	else {
    			bioInstruct.setTransType(Constants.TRANSLATE);
    			bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);	
    		}
	    
    		// Add the instruction into the instruction set
    		bioMightInstructSet.addElement(bioInstruct);
		}

		
		}
		
		else if (parentID.equals("ObliquusExternusAbdominisMuscle:02")) 
		{	
	
			
			int nMaxSegs = 2;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
			
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
			
		         
	    		if (numSegs==0){
	    			bioInstruct.setTransType(Constants.SCALE);
	    			bioInstruct.setScaleMatrix(1.0, 2.0, 1.5);
	    			bioInstruct.setTranslateMatrix(-1.0, 0.0, 0.0); 
	    		}
	       		else if (numSegs==1){
	       			bioInstruct.setTransType(Constants.SCALE);
	    			bioInstruct.setScaleMatrix(1.0, 2.0, 1.0);
	    			bioInstruct.setTranslateMatrix(-1.0, 0.0, 0.0); 
	           	}
	    		else if (numSegs==2){
	    			bioInstruct.setTransType(Constants.SCALE);
	    			bioInstruct.setScaleMatrix(1.0, 1.0, 1.0);
	    			bioInstruct.setTranslateMatrix(-1.0, 0.0, 0.0); 
	    		}
	    		else if (numSegs==3){
	    			bioInstruct.setTransType(Constants.SCALE);
	    			bioInstruct.setScaleMatrix(1.0, 1.5, 1.0);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.25, 0.0); 
	    		}
	    		else if (numSegs==4){
	    			bioInstruct.setTransType(Constants.SCALE);
	    			bioInstruct.setScaleMatrix(1.0, 1.0, 1.0);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.25, -0.25); 	   
	        	}	
	    		
	        	else {
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);	
	    		}
		    
	    		// Add the instruction into the instruction set
	    		bioMightInstructSet.addElement(bioInstruct);
			}
		}	
		
		
		// Generate the ObliquusExternusAbdominisMuscle
		DBUtils.generateFacedComponents(Constants.QUADRANGLE, startID, componentType, componentName, componentID, currentPoints, bioMightInstructSet);
		
		return returnCode;
	}
   	

    /***************************************************************************************
	 * GENERATE PSOAS MAJOR MUSCLES
	 * 
	 * This generates the Psoas Major Muscles  
	 * 
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/
    
   	public int generatePsoasMajorMuscle(String startID, String componentType, String componentName, String componentID, String parentID, double[][] currentPoints) 
	throws DataException, DataSecurityException
  	{	
		System.out.println("Generate PsoasMajorMuscle");
		
		int bodyID = 1;
		int projectID = 1;
		String vertices = "";
		
		ArrayList mySqlList= new ArrayList();
		int returnCode = 0;
	
		
		// We can generate the Psoas Major Muscle
		if (currentPoints == null )
		{
			double circumference = 0.125;
	    	
			double x =  -8.0;
    		double y =  -10.0;
    		double z =  -1.0;
			
			// Create a equilateral octogon	
			currentPoints[0][0] =  x;
			currentPoints[0][1] =  y;
			currentPoints[0][2] =  z;
			
			currentPoints[1][0] =  x-circumference;
			currentPoints[1][1] =  y;
			currentPoints[1][2] =  z-circumference;
			
			currentPoints[2][0] =  x-circumference;
			currentPoints[2][1] =  y;
			currentPoints[2][2] =  z-circumference*2;
			
			currentPoints[3][0] =  x;
			currentPoints[3][1] =  y;
			currentPoints[3][2] =  z-circumference*3;
	
			currentPoints[4][0] =  x+circumference;
			currentPoints[4][1] =  y;
			currentPoints[4][2] =  z-circumference*3;
			
			currentPoints[5][0] =  x+circumference*2;
			currentPoints[5][1] =  y;
			currentPoints[5][2] =  z-circumference*2;
	
			currentPoints[6][0] =  x+circumference*2;
			currentPoints[6][1] =  y;
			currentPoints[6][2] =  z-circumference;

			currentPoints[7][0] =  x+circumference;
			currentPoints[7][1] =  y;
			currentPoints[7][2] =  z;
		}
		

		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();
		
		
		if (parentID.equals("PsoasMajorMuscle:01")) 
		{	
			int nMaxSegs = 6;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
				
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
		     
				if (numSegs==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10); 
				}
				else if (numSegs==1){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10); 
				}
				else if (numSegs==2){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);  
				}
				else if (numSegs==3){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10); 
				}
				else if (numSegs==4){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);    
				}	
				else if (numSegs==5){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);    
				}	
				else if (numSegs==6){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);    
				}	
				else if (numSegs==7){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);    
				}		
				else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
				}
	    
				// Add the instruction into the instruction set
				bioMightInstructSet.addElement(bioInstruct);
			}
		
		}
		else if (parentID.equals("PsoasMajorMuscle:02")) 
		{		
			int nMaxSegs = 6;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
			
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
		 
	    		if (numSegs==0){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
	    		}
	       		else if (numSegs==1){
	       			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
	           	}
	    		else if (numSegs==2){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
	    		}
	    		else if (numSegs==3){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
	    		}
	    		else if (numSegs==4){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10); 	   
	        	}
	    		else if (numSegs==5){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10); 	   
	        	}
	    		else if (numSegs==6){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10); 	   
	        	}
	    		else if (numSegs==7){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10); 	   
	        	}
	    		else {
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
	    		}
		    
	    		// Add the instruction into the instruction set
	    		bioMightInstructSet.addElement(bioInstruct);
			}	

		}	
		
		
		//Generate the PsoasMajorMuscle
		//DBUtils.generateFacedComponents(Constants.QUADRANGLE, startID, componentType, componentName, componentID, currentPoints, bioMightInstructSet);
		//System.out.println("Generated the Rows for PsoasMajorMuscleTissue: " + componentID + "   parent: " + parentID + "   " + componentType);

		return returnCode;
	}
   	
    /***************************************************************************************
	 * GENERATE PSOAS MINOR MUSCLES
	 * 
	 * This generates the Psoas Minor Muscles  
	 * 
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/
    
   	public int generatePsoasMinorMuscle(String startID, String componentType, String componentName, String componentID, String parentID, double[][] currentPoints) 
	throws DataException, DataSecurityException
  	{	
		System.out.println("Generate Psoas Minor Muscle");
		
		int bodyID = 1;
		int projectID = 1;
		String vertices = "";
		
		ArrayList mySqlList= new ArrayList();
		int returnCode = 0;
	
		
		// We can generate the Psoas Minor Muscle
		if (currentPoints == null )
		{
			double circumference = 0.125;
	    	
			double x =  -8.0;
    		double y =  -10.0;
    		double z =  -1.0;
			
			// Create a equilateral octogon	
			currentPoints[0][0] =  x;
			currentPoints[0][1] =  y;
			currentPoints[0][2] =  z;
			
			currentPoints[1][0] =  x-circumference;
			currentPoints[1][1] =  y;
			currentPoints[1][2] =  z-circumference;
			
			currentPoints[2][0] =  x-circumference;
			currentPoints[2][1] =  y;
			currentPoints[2][2] =  z-circumference*2;
			
			currentPoints[3][0] =  x;
			currentPoints[3][1] =  y;
			currentPoints[3][2] =  z-circumference*3;
	
			currentPoints[4][0] =  x+circumference;
			currentPoints[4][1] =  y;
			currentPoints[4][2] =  z-circumference*3;
			
			currentPoints[5][0] =  x+circumference*2;
			currentPoints[5][1] =  y;
			currentPoints[5][2] =  z-circumference*2;
	
			currentPoints[6][0] =  x+circumference*2;
			currentPoints[6][1] =  y;
			currentPoints[6][2] =  z-circumference;

			currentPoints[7][0] =  x+circumference;
			currentPoints[7][1] =  y;
			currentPoints[7][2] =  z;
		}
		

		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();
		
		
		if (parentID.equals("PsoasMinorMuscle:01")) 
		{	
			int nMaxSegs = 6;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
				
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
		     
				if (numSegs==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10); 
				}
				else if (numSegs==1){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10); 
				}
				else if (numSegs==2){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);  
				}
				else if (numSegs==3){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10); 
				}
				else if (numSegs==4){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);    
				}	
				else if (numSegs==5){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);    
				}	
				else if (numSegs==6){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);    
				}	
				else if (numSegs==7){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);    
				}		
				else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
				}
	    
				// Add the instruction into the instruction set
				bioMightInstructSet.addElement(bioInstruct);
			}
		
		}
		else if (parentID.equals("PsoasMinorMuscle:02")) 
		{		
			int nMaxSegs = 6;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
			
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
		 
	    		if (numSegs==0){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
	    		}
	       		else if (numSegs==1){
	       			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
	           	}
	    		else if (numSegs==2){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
	    		}
	    		else if (numSegs==3){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
	    		}
	    		else if (numSegs==4){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10); 	   
	        	}
	    		else if (numSegs==5){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10); 	   
	        	}
	    		else if (numSegs==6){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10); 	   
	        	}
	    		else if (numSegs==7){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10); 	   
	        	}
	    		else {
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
	    		}
		    
	    		// Add the instruction into the instruction set
	    		bioMightInstructSet.addElement(bioInstruct);
			}	

		}	
		
		
		//Generate the PsoasMinorMuscle
		//DBUtils.generateFacedComponents(Constants.QUADRANGLE, startID, componentType, componentName, componentID, currentPoints, bioMightInstructSet);
		//System.out.println("Generated the Rows for PsoasMinorMuscleTissue: " + componentID + "   parent: " + parentID + "   " + componentType);

		return returnCode;
	}
    /***************************************************************************************
	 * GENERATE PYRAMIDALIS MUSCLES
	 * 
	 * This generates the Pyramidalis Muscles  
	 * 
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/
    
   	public int generatePyramidalisMuscle(String startID, String componentType, String componentName, String componentID, String parentID, double[][] currentPoints) 
	throws DataException, DataSecurityException
  	{	
		System.out.println("Generate Pyramidalis Muscle");
		
		int bodyID = 1;
		int projectID = 1;
		String vertices = "";
		
		ArrayList mySqlList= new ArrayList();
		int returnCode = 0;
	
		
		// We can generate the Pyramidalis Muscle
		if (currentPoints == null )
		{
			double circumference = 0.125;
	    	
			double x =  -8.0;
    		double y =  -10.0;
    		double z =  -1.0;
			
			// Create a equilateral octogon	
			currentPoints[0][0] =  x;
			currentPoints[0][1] =  y;
			currentPoints[0][2] =  z;
			
			currentPoints[1][0] =  x-circumference;
			currentPoints[1][1] =  y;
			currentPoints[1][2] =  z-circumference;
			
			currentPoints[2][0] =  x-circumference;
			currentPoints[2][1] =  y;
			currentPoints[2][2] =  z-circumference*2;
			
			currentPoints[3][0] =  x;
			currentPoints[3][1] =  y;
			currentPoints[3][2] =  z-circumference*3;
	
			currentPoints[4][0] =  x+circumference;
			currentPoints[4][1] =  y;
			currentPoints[4][2] =  z-circumference*3;
			
			currentPoints[5][0] =  x+circumference*2;
			currentPoints[5][1] =  y;
			currentPoints[5][2] =  z-circumference*2;
	
			currentPoints[6][0] =  x+circumference*2;
			currentPoints[6][1] =  y;
			currentPoints[6][2] =  z-circumference;

			currentPoints[7][0] =  x+circumference;
			currentPoints[7][1] =  y;
			currentPoints[7][2] =  z;
		}
		

		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();
		
		
		if (parentID.equals("PyramidalisMuscle:01")) 
		{	
			int nMaxSegs = 6;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
				
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
		     
				if (numSegs==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10); 
				}
				else if (numSegs==1){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10); 
				}
				else if (numSegs==2){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);  
				}
				else if (numSegs==3){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10); 
				}
				else if (numSegs==4){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);    
				}	
				else if (numSegs==5){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);    
				}	
				else if (numSegs==6){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);    
				}	
				else if (numSegs==7){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);    
				}		
				else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
				}
	    
				// Add the instruction into the instruction set
				bioMightInstructSet.addElement(bioInstruct);
			}
		
		}
		else if (parentID.equals("PyramidalisMuscle:02")) 
		{		
			int nMaxSegs = 6;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
			
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
		 
	    		if (numSegs==0){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
	    		}
	       		else if (numSegs==1){
	       			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
	           	}
	    		else if (numSegs==2){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
	    		}
	    		else if (numSegs==3){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
	    		}
	    		else if (numSegs==4){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10); 	   
	        	}
	    		else if (numSegs==5){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10); 	   
	        	}
	    		else if (numSegs==6){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10); 	   
	        	}
	    		else if (numSegs==7){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10); 	   
	        	}
	    		else {
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
	    		}
		    
	    		// Add the instruction into the instruction set
	    		bioMightInstructSet.addElement(bioInstruct);
			}	

		}	
		
		
		//Generate the PyramidalisMuscle
		//DBUtils.generateFacedComponents(Constants.QUADRANGLE, startID, componentType, componentName, componentID, currentPoints, bioMightInstructSet);
		//System.out.println("Generated the Rows for PyramidalisMuscleTissue: " + componentID + "   parent: " + parentID + "   " + componentType);

		return returnCode;
	}
   	
    /***************************************************************************************
	 * GENERATE QUADRATUS LUMBORUM MUSCLES
	 * 
	 * This generates the Quadratus Lumborum Muscles  
	 * 
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/
    
   	public int generateQuadratusLumborumMuscle(String startID, String componentType, String componentName, String componentID, String parentID, double[][] currentPoints) 
	throws DataException, DataSecurityException
  	{	
		System.out.println("Generate QuadratusLumborumMuscle");
		
		int bodyID = 1;
		int projectID = 1;
		String vertices = "";
		
		ArrayList mySqlList= new ArrayList();
		int returnCode = 0;
	
		
		// We can generate the Quadratus Lumborum Muscle
		if (currentPoints == null )
		{
			double circumference = 0.125;
	    	
			double x =  -8.0;
    		double y =  -10.0;
    		double z =  -1.0;
			
			// Create a equilateral octogon	
			currentPoints[0][0] =  x;
			currentPoints[0][1] =  y;
			currentPoints[0][2] =  z;
			
			currentPoints[1][0] =  x-circumference;
			currentPoints[1][1] =  y;
			currentPoints[1][2] =  z-circumference;
			
			currentPoints[2][0] =  x-circumference;
			currentPoints[2][1] =  y;
			currentPoints[2][2] =  z-circumference*2;
			
			currentPoints[3][0] =  x;
			currentPoints[3][1] =  y;
			currentPoints[3][2] =  z-circumference*3;
	
			currentPoints[4][0] =  x+circumference;
			currentPoints[4][1] =  y;
			currentPoints[4][2] =  z-circumference*3;
			
			currentPoints[5][0] =  x+circumference*2;
			currentPoints[5][1] =  y;
			currentPoints[5][2] =  z-circumference*2;
	
			currentPoints[6][0] =  x+circumference*2;
			currentPoints[6][1] =  y;
			currentPoints[6][2] =  z-circumference;

			currentPoints[7][0] =  x+circumference;
			currentPoints[7][1] =  y;
			currentPoints[7][2] =  z;
		}
		

		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();
		
		
		if (parentID.equals("QuadratusLumborumMuscle:01")) 
		{	
			int nMaxSegs = 6;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
				
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
		     
				if (numSegs==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10); 
				}
				else if (numSegs==1){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10); 
				}
				else if (numSegs==2){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);  
				}
				else if (numSegs==3){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10); 
				}
				else if (numSegs==4){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);    
				}	
				else if (numSegs==5){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);    
				}	
				else if (numSegs==6){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);    
				}	
				else if (numSegs==7){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);    
				}		
				else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
				}
	    
				// Add the instruction into the instruction set
				bioMightInstructSet.addElement(bioInstruct);
			}
		
		}
		else if (parentID.equals("QuadratusLumborumMuscle:02")) 
		{		
			int nMaxSegs = 6;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
			
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
		 
	    		if (numSegs==0){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
	    		}
	       		else if (numSegs==1){
	       			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
	           	}
	    		else if (numSegs==2){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
	    		}
	    		else if (numSegs==3){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
	    		}
	    		else if (numSegs==4){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10); 	   
	        	}
	    		else if (numSegs==5){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10); 	   
	        	}
	    		else if (numSegs==6){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10); 	   
	        	}
	    		else if (numSegs==7){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10); 	   
	        	}
	    		else {
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
	    		}
		    
	    		// Add the instruction into the instruction set
	    		bioMightInstructSet.addElement(bioInstruct);
			}	

		}	
		
		
		//Generate the QuadratusLumborumMuscle
		//DBUtils.generateFacedComponents(Constants.QUADRANGLE, startID, componentType, componentName, componentID, currentPoints, bioMightInstructSet);
		//System.out.println("Generated the Rows for QuadratusLumborumMuscleTissue: " + componentID + "   parent: " + parentID + "   " + componentType);

		return returnCode;
	}
   	
   	
   	
 	/***************************************************************************************
	 * GENERATE CREMASTER MUSCLE
	 * 
	 * This generates the Cremaster Muscle
	 * 
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/
    
   	public int generateCremasterMuscle(String startID, String componentType, String componentName, String componentID, String parentID, double[][] currentPoints) 
	throws DataException, DataSecurityException
  	{	
		System.out.println("Generate CremasterMuscle");
		
		int bodyID = 1;
		int projectID = 1;
		String vertices = "";
		
		ArrayList mySqlList= new ArrayList();
		int returnCode = 0;
	
		
		// We can generate the CremasterMuscle alone, or when connected
		// The current points passed into the equation are assumed
		// to come from the base of the skull.
		if (currentPoints == null )
		{
			double circumference = 0.125;
	    	
			double x =  -8.0;
    		double y =  -10.0;
    		double z =  -1.0;
			
			// Create a equilateral octogon	
			currentPoints[0][0] =  x;
			currentPoints[0][1] =  y;
			currentPoints[0][2] =  z;
			
			currentPoints[1][0] =  x-circumference;
			currentPoints[1][1] =  y;
			currentPoints[1][2] =  z-circumference;
			
			currentPoints[2][0] =  x-circumference;
			currentPoints[2][1] =  y;
			currentPoints[2][2] =  z-circumference*2;
			
			currentPoints[3][0] =  x;
			currentPoints[3][1] =  y;
			currentPoints[3][2] =  z-circumference*3;
	
			currentPoints[4][0] =  x+circumference;
			currentPoints[4][1] =  y;
			currentPoints[4][2] =  z-circumference*3;
			
			currentPoints[5][0] =  x+circumference*2;
			currentPoints[5][1] =  y;
			currentPoints[5][2] =  z-circumference*2;
	
			currentPoints[6][0] =  x+circumference*2;
			currentPoints[6][1] =  y;
			currentPoints[6][2] =  z-circumference;

			currentPoints[7][0] =  x+circumference;
			currentPoints[7][1] =  y;
			currentPoints[7][2] =  z;
	}
		

		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();
		
		
		if (parentID.equals("CremasterMuscle:01")) 
		{	
	
		
		int nMaxSegs = 2;
		for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
		
			// Create a place for an instruction 
			BioMightInstruction bioInstruct = new BioMightInstruction();
		
	         
    		if (numSegs==0){
    			bioInstruct.setTransType(Constants.SCALE);
    			bioInstruct.setScaleMatrix(1.0, 2.0, 1.5);
    			bioInstruct.setTranslateMatrix(1.0, 0.0, 0.0); 
    		}
       		else if (numSegs==1){
       			bioInstruct.setTransType(Constants.SCALE);
    			bioInstruct.setScaleMatrix(1.0, 2.0, 1.0);
    			bioInstruct.setTranslateMatrix(1.0, 0.0, 0.0); 
           	}
    		else if (numSegs==2){
    			bioInstruct.setTransType(Constants.SCALE);
    			bioInstruct.setScaleMatrix(1.0, 1.0, 1.0);
    			bioInstruct.setTranslateMatrix(1.0, 0.0, 0.0); 
    		}
    		else if (numSegs==3){
    			bioInstruct.setTransType(Constants.SCALE);
    			bioInstruct.setScaleMatrix(1.0, 1.5, 1.0);
    			bioInstruct.setTranslateMatrix(1.0, -0.25, 0.0); 
    		}
    		else if (numSegs==4){
    			bioInstruct.setTransType(Constants.SCALE);
    			bioInstruct.setScaleMatrix(1.0, 1.0, 1.0);
    			bioInstruct.setTranslateMatrix(1.0, -0.25, -0.25); 	   
        	}	
    		
        	else {
    			bioInstruct.setTransType(Constants.TRANSLATE);
    			bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);	
    		}
	    
    		// Add the instruction into the instruction set
    		bioMightInstructSet.addElement(bioInstruct);
		}

		
		}
		
		else if (parentID.equals("CremasterMuscle:02")) 
		{	
	
			
			int nMaxSegs = 2;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
			
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
			
		         
	    		if (numSegs==0){
	    			bioInstruct.setTransType(Constants.SCALE);
	    			bioInstruct.setScaleMatrix(1.0, 2.0, 1.5);
	    			bioInstruct.setTranslateMatrix(-1.0, 0.0, 0.0); 
	    		}
	       		else if (numSegs==1){
	       			bioInstruct.setTransType(Constants.SCALE);
	    			bioInstruct.setScaleMatrix(1.0, 2.0, 1.0);
	    			bioInstruct.setTranslateMatrix(-1.0, 0.0, 0.0); 
	           	}
	    		else if (numSegs==2){
	    			bioInstruct.setTransType(Constants.SCALE);
	    			bioInstruct.setScaleMatrix(1.0, 1.0, 1.0);
	    			bioInstruct.setTranslateMatrix(-1.0, 0.0, 0.0); 
	    		}
	    		else if (numSegs==3){
	    			bioInstruct.setTransType(Constants.SCALE);
	    			bioInstruct.setScaleMatrix(1.0, 1.5, 1.0);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.25, 0.0); 
	    		}
	    		else if (numSegs==4){
	    			bioInstruct.setTransType(Constants.SCALE);
	    			bioInstruct.setScaleMatrix(1.0, 1.0, 1.0);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.25, -0.25); 	   
	        	}	
	    		
	        	else {
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);	
	    		}
		    
	    		// Add the instruction into the instruction set
	    		bioMightInstructSet.addElement(bioInstruct);
			}
		}	
		
		
		
		// Generate the CremasterMuscle
		DBUtils.generateFacedComponents(Constants.QUADRANGLE, startID, componentType, componentName, componentID, currentPoints, bioMightInstructSet);
		
		return returnCode;
	}
   	
  	/***************************************************************************************
	 * GENERATE Rectus Adominis Muscles
	 * 
	 * This generates the Rectus Adominis
	 * 
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/
    
   	public int generateRectusAdominisMuscle(String startID, String componentType, String componentName, String componentID, String parentID, double[][] currentPoints) 
	throws DataException, DataSecurityException
  	{	
		System.out.println("Generate RectusAdominisMuscle: " + parentID +  "    comp " + componentID);
		
		int bodyID = 1;
		int projectID = 1;
		String vertices = "";
		
		ArrayList mySqlList= new ArrayList();
		int returnCode = 0;
	
		
		// We can generate the RectusAdominisMuscle alone, or when connected
		// The current points passed into the equation are assumed
		// to come from the base of the skull.
		if (currentPoints == null )
		{
			double circumference = 1.8;
	    	
			double x =  -8.0;
    		double y =  -10.0;
    		double z =  -1.0;
			
			// Create a equilateral octogon	
			currentPoints[0][0] =  x;
			currentPoints[0][1] =  y;
			currentPoints[0][2] =  z;
			
			currentPoints[1][0] =  x-circumference;
			currentPoints[1][1] =  y;
			currentPoints[1][2] =  z-circumference;
			
			currentPoints[2][0] =  x-circumference;
			currentPoints[2][1] =  y;
			currentPoints[2][2] =  z-circumference*2;
			
			currentPoints[3][0] =  x;
			currentPoints[3][1] =  y;
			currentPoints[3][2] =  z-circumference*3;
	
			currentPoints[4][0] =  x+circumference;
			currentPoints[4][1] =  y;
			currentPoints[4][2] =  z-circumference*3;
			
			currentPoints[5][0] =  x+circumference*2;
			currentPoints[5][1] =  y;
			currentPoints[5][2] =  z-circumference*2;
	
			currentPoints[6][0] =  x+circumference*2;
			currentPoints[6][1] =  y;
			currentPoints[6][2] =  z-circumference;

			currentPoints[7][0] =  x+circumference;
			currentPoints[7][1] =  y;
			currentPoints[7][2] =  z;
		}
		

		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();
	
		if (parentID.equals("RectusAdominisMuscle:01")) 
		{		
			int nMaxSegs = 4;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
				
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
		     
				if (numSegs==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10); 
				}
				else if (numSegs==1){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10); 
				}
				else if (numSegs==2){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);  
				}
				else if (numSegs==3){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10); 
				}
				else if (numSegs==4){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);    
				}	
				else if (numSegs==5){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);    
				}
				else if (numSegs==6){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);    
				}
				else if (numSegs==7){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);    
				}
				
				
				else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
				}
	    
				// Add the instruction into the instruction set
				bioMightInstructSet.addElement(bioInstruct);
			}
			System.out.println("Complete InstrSet RectusAdominisMuscle01: " + bioMightInstructSet.getSize());
		}
		else if (parentID.equals("RectusAdominisMuscle:02")) 
		{	
			int nMaxSegs = 4;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
			
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
		 
	    		if (numSegs==0){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
	    		}
	       		else if (numSegs==1){
	       			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
	           	}
	    		else if (numSegs==2){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
	    		}
	    		else if (numSegs==3){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
	    		}
	    		else if (numSegs==4){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10); 	   
	        	}
	    		else if (numSegs==5){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10); 	   
	        	}
	    		else if (numSegs==6){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10); 	   
	        	}
	    		else if (numSegs==7){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10); 	   
	        	}	    		
	    		else {
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
	    		}
		    
	    		// Add the instruction into the instruction set
	    		bioMightInstructSet.addElement(bioInstruct);
			}	
			System.out.println("Complete InstrSet RectusAdominisMuscle02: " + bioMightInstructSet.getSize());
		}	
		else if (parentID.equals("RectusAdominisMuscle:03")) 
		{	
			
			int nMaxSegs = 4;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
				
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
				
				     
		    	if (numSegs==0){
		    		bioInstruct.setTransType(Constants.TRANSLATE);
		    		bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
		    	}
		       	else if (numSegs==1){
		       		bioInstruct.setTransType(Constants.TRANSLATE);
		    		bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
		        }
		    	else if (numSegs==2){
		    		bioInstruct.setTransType(Constants.TRANSLATE);
		    		bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
		    	}
		    	else if (numSegs==3){
		    		bioInstruct.setTransType(Constants.TRANSLATE);
		    		bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10); 
		    	}
		    	else if (numSegs==4){
		    		bioInstruct.setTransType(Constants.TRANSLATE);
		    		bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10); 	   
		        }
		    	else {
		    		bioInstruct.setTransType(Constants.TRANSLATE);
		    		bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
		    	}
			    
		    	// Add the instruction into the instruction set
		    	bioMightInstructSet.addElement(bioInstruct);
			}	
			System.out.println("Complete InstrSet RectusAdominisMuscle03: " + bioMightInstructSet.getSize());
		}
		else if (parentID.equals("RectusAdominisMuscle:04")) 
		{	
		
			int nMaxSegs = 4;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
				
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
				
				     
		    	if (numSegs==0){
		    		bioInstruct.setTransType(Constants.TRANSLATE);
		    		bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
		    	}
		       	else if (numSegs==1){
		       		bioInstruct.setTransType(Constants.TRANSLATE);
		    		bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
		        }
		    	else if (numSegs==2){
		    		bioInstruct.setTransType(Constants.TRANSLATE);
		    		bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
		    	}
		    	else if (numSegs==3){
		    		bioInstruct.setTransType(Constants.TRANSLATE);
		    		bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
		    	}
		    	else if (numSegs==4){
		    		bioInstruct.setTransType(Constants.TRANSLATE);
		    		bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);	   
		        }
		    	else {
		    		bioInstruct.setTransType(Constants.TRANSLATE);
		    		bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
		    	}
			    
		    	// Add the instruction into the instruction set
		    	bioMightInstructSet.addElement(bioInstruct);
			}	

		}
		else if (parentID.equals("RectusAdominisMuscle:05")) 
		{	
		
			int nMaxSegs = 4;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
				
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
				
				     
		   		if (numSegs==0){
		   			bioInstruct.setTransType(Constants.TRANSLATE);
		   			bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
		   		}
		      		else if (numSegs==1){
		   			bioInstruct.setTransType(Constants.TRANSLATE);
		   			bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
		       	}
		   		else if (numSegs==2){
		   			bioInstruct.setTransType(Constants.TRANSLATE);
		   			bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
		   		}
		   		else if (numSegs==3){
		   			bioInstruct.setTransType(Constants.TRANSLATE);
		   			bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10); 
		   		}
		   		else if (numSegs==4){
		   			bioInstruct.setTransType(Constants.TRANSLATE);
		   			bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);   
		       	}
		   		else {
		   			bioInstruct.setTransType(Constants.TRANSLATE);
		   			bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);	
		   		}
			    
		   		// Add the instruction into the instruction set
		   		bioMightInstructSet.addElement(bioInstruct);
			}	

		}
		else if (parentID.equals("RectusAdominisMuscle:06")) 
		{	
		
			int nMaxSegs = 4;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
				
					// Create a place for an instruction 
					BioMightInstruction bioInstruct = new BioMightInstruction();
				
				     
		    		if (numSegs==0){
		    			bioInstruct.setTransType(Constants.TRANSLATE);
		    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
		    		}
		       		else if (numSegs==1){
		       			bioInstruct.setTransType(Constants.TRANSLATE);
		    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10); 
		           	}
		    		else if (numSegs==2){
		    			bioInstruct.setTransType(Constants.TRANSLATE);
		    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
		    		}
		    		else if (numSegs==3){
		    			bioInstruct.setTransType(Constants.TRANSLATE);
		    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
		    		}
		    		else if (numSegs==4){
		    			bioInstruct.setTransType(Constants.TRANSLATE);
		    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10); 	   
		        	}
		    		else {
		    			bioInstruct.setTransType(Constants.TRANSLATE);
		    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
		    		}
			    
		    		// Add the instruction into the instruction set
		    		bioMightInstructSet.addElement(bioInstruct);
				}	

		}
		else if (parentID.equals("RectusAdominisMuscle:07")) 
		{	
		
			int nMaxSegs = 4;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
				
					// Create a place for an instruction 
					BioMightInstruction bioInstruct = new BioMightInstruction();
				
				     
		    		if (numSegs==0){
		    			bioInstruct.setTransType(Constants.TRANSLATE);
		    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
		    		}
		       		else if (numSegs==1){
		       			bioInstruct.setTransType(Constants.TRANSLATE);
		    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10); 
		           	}
		    		else if (numSegs==2){
		    			bioInstruct.setTransType(Constants.TRANSLATE);
		    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
		    		}
		    		else if (numSegs==3){
		    			bioInstruct.setTransType(Constants.TRANSLATE);
		    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
		    		}
		    		else if (numSegs==4){
		    			bioInstruct.setTransType(Constants.TRANSLATE);
		    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10); 	   
		        	}
		    		else {
		    			bioInstruct.setTransType(Constants.TRANSLATE);
		    			bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
		    		}
			    
		    		// Add the instruction into the instruction set
		    		bioMightInstructSet.addElement(bioInstruct);
				}	

		}
		else if (parentID.equals("RectusAdominisMuscle:08")) 
		{	
		
			int nMaxSegs = 4;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
				
					// Create a place for an instruction 
					BioMightInstruction bioInstruct = new BioMightInstruction();
				
				     
		    		if (numSegs==0){
		    			bioInstruct.setTransType(Constants.TRANSLATE);
		    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
		    		}
		       		else if (numSegs==1){
		       			bioInstruct.setTransType(Constants.TRANSLATE);
		    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10); 
		           	}
		    		else if (numSegs==2){
		    			bioInstruct.setTransType(Constants.TRANSLATE);
		    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
		    		}
		    		else if (numSegs==3){
		    			bioInstruct.setTransType(Constants.TRANSLATE);
		    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
		    		}
		    		else if (numSegs==4){
		    			bioInstruct.setTransType(Constants.TRANSLATE);
		    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10); 	   
		        	}
		    		else {
		    			bioInstruct.setTransType(Constants.TRANSLATE);
		    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
		    		}
			    
		    		// Add the instruction into the instruction set
		    		bioMightInstructSet.addElement(bioInstruct);
				}	

		}

		else
		{
			// Default Case
			int nMaxSegs = 4;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
				
					// Create a place for an instruction 
					BioMightInstruction bioInstruct = new BioMightInstruction();
				
				     
		    		if (numSegs==0){
		    			bioInstruct.setTransType(Constants.TRANSLATE);
		    			bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
		    		}
		       		else if (numSegs==1){
		       			bioInstruct.setTransType(Constants.TRANSLATE);
		    			bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0); 
		           	}
		    		else if (numSegs==2){
		    			bioInstruct.setTransType(Constants.TRANSLATE);
		    			bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
		    		}
		    		else if (numSegs==3){
		    			bioInstruct.setTransType(Constants.TRANSLATE);
		    			bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
		    		}
		    		else if (numSegs==4){
		    			bioInstruct.setTransType(Constants.TRANSLATE);
		    			bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0); 	   
		        	}
		    		else {
		    			bioInstruct.setTransType(Constants.TRANSLATE);
		    			bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
		    		}
			    
		    		// Add the instruction into the instruction set
		    		bioMightInstructSet.addElement(bioInstruct);
				}				
		}
		
		System.out.println("Completed InstrSet! parent " + parentID + "  size: " + bioMightInstructSet.getSize());

		
		// Generate the RectusAdominisMuscle
		//DBUtils.generateFacedComponents(Constants.QUADRANGLE, startID, componentType, componentName, componentID, currentPoints, bioMightInstructSet);
		
		return returnCode;
	}
   	/***************************************************************************************
	 * GENERATE Transversus Abdominis Muscles
	 * 
	 * This generates the Transversus Abdominis
	 * 
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/
    
   	public int generateTransversusAbdomisMuscle(String startID, String componentType, String componentName, String componentID, String parentID, double[][] currentPoints) 
	throws DataException, DataSecurityException
  	{	
		System.out.println("Generate TransversusAbdomisMuscle: " + parentID +  "    comp " + componentID);
		
		int bodyID = 1;
		int projectID = 1;
		String vertices = "";
		
		ArrayList mySqlList= new ArrayList();
		int returnCode = 0;
	
		
		// We can generate the RectusAdominisMuscle alone, or when connected
		// The current points passed into the equation are assumed
		// to come from the base of the skull.
		if (currentPoints == null )
		{
			double circumference = 1.8;
	    	
			double x =  -8.0;
    		double y =  -10.0;
    		double z =  -1.0;
			
			// Create a equilateral octogon	
			currentPoints[0][0] =  x;
			currentPoints[0][1] =  y;
			currentPoints[0][2] =  z;
			
			currentPoints[1][0] =  x-circumference;
			currentPoints[1][1] =  y;
			currentPoints[1][2] =  z-circumference;
			
			currentPoints[2][0] =  x-circumference;
			currentPoints[2][1] =  y;
			currentPoints[2][2] =  z-circumference*2;
			
			currentPoints[3][0] =  x;
			currentPoints[3][1] =  y;
			currentPoints[3][2] =  z-circumference*3;
	
			currentPoints[4][0] =  x+circumference;
			currentPoints[4][1] =  y;
			currentPoints[4][2] =  z-circumference*3;
			
			currentPoints[5][0] =  x+circumference*2;
			currentPoints[5][1] =  y;
			currentPoints[5][2] =  z-circumference*2;
	
			currentPoints[6][0] =  x+circumference*2;
			currentPoints[6][1] =  y;
			currentPoints[6][2] =  z-circumference;

			currentPoints[7][0] =  x+circumference;
			currentPoints[7][1] =  y;
			currentPoints[7][2] =  z;
		}
		

		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();
	
		if (parentID.equals("TransversusAbdominisMuscle:01")) 
		{		
			int nMaxSegs = 4;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
				
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
		     
				if (numSegs==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10); 
				}
				else if (numSegs==1){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10); 
				}
				else if (numSegs==2){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);  
				}
				else if (numSegs==3){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10); 
				}
				else if (numSegs==4){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);    
				}	
				else if (numSegs==5){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);    
				}
				else if (numSegs==6){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);    
				}
				else if (numSegs==7){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);    
				}
				
				
				else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
				}
	    
				// Add the instruction into the instruction set
				bioMightInstructSet.addElement(bioInstruct);
			}
			System.out.println("Complete InstrSet TransversusAbdominisMuscle01: " + bioMightInstructSet.getSize());
		}
		else if (parentID.equals("TransversusAbdominisMuscle:02")) 
		{	
			int nMaxSegs = 4;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
			
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
		 
	    		if (numSegs==0){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
	    		}
	       		else if (numSegs==1){
	       			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
	           	}
	    		else if (numSegs==2){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
	    		}
	    		else if (numSegs==3){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
	    		}
	    		else if (numSegs==4){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10); 	   
	        	}
	    		else if (numSegs==5){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10); 	   
	        	}
	    		else if (numSegs==6){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10); 	   
	        	}
	    		else if (numSegs==7){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10); 	   
	        	}	    		
	    		else {
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
	    		}
		    
	    		// Add the instruction into the instruction set
	    		bioMightInstructSet.addElement(bioInstruct);
			}	
			System.out.println("Complete InstrSet TransversusAbdominisMuscle02: " + bioMightInstructSet.getSize());
		}	
		else if (parentID.equals("TransversusAbdominisMuscle:03")) 
		{	
			
			int nMaxSegs = 4;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
				
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
				
				     
		    	if (numSegs==0){
		    		bioInstruct.setTransType(Constants.TRANSLATE);
		    		bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
		    	}
		       	else if (numSegs==1){
		       		bioInstruct.setTransType(Constants.TRANSLATE);
		    		bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
		        }
		    	else if (numSegs==2){
		    		bioInstruct.setTransType(Constants.TRANSLATE);
		    		bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
		    	}
		    	else if (numSegs==3){
		    		bioInstruct.setTransType(Constants.TRANSLATE);
		    		bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10); 
		    	}
		    	else if (numSegs==4){
		    		bioInstruct.setTransType(Constants.TRANSLATE);
		    		bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10); 	   
		        }
		    	else {
		    		bioInstruct.setTransType(Constants.TRANSLATE);
		    		bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
		    	}
			    
		    	// Add the instruction into the instruction set
		    	bioMightInstructSet.addElement(bioInstruct);
			}	
			System.out.println("Complete InstrSet TransversusAbdominisMuscle03: " + bioMightInstructSet.getSize());
		}
		else if (parentID.equals("TransversusAbdominisMuscle:04")) 
		{	
		
			int nMaxSegs = 4;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
				
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
				
				     
		    	if (numSegs==0){
		    		bioInstruct.setTransType(Constants.TRANSLATE);
		    		bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
		    	}
		       	else if (numSegs==1){
		       		bioInstruct.setTransType(Constants.TRANSLATE);
		    		bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
		        }
		    	else if (numSegs==2){
		    		bioInstruct.setTransType(Constants.TRANSLATE);
		    		bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
		    	}
		    	else if (numSegs==3){
		    		bioInstruct.setTransType(Constants.TRANSLATE);
		    		bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
		    	}
		    	else if (numSegs==4){
		    		bioInstruct.setTransType(Constants.TRANSLATE);
		    		bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);	   
		        }
		    	else {
		    		bioInstruct.setTransType(Constants.TRANSLATE);
		    		bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
		    	}
			    
		    	// Add the instruction into the instruction set
		    	bioMightInstructSet.addElement(bioInstruct);
			}	

		}
		else if (parentID.equals("TransversusAbdominisMuscle:05")) 
		{	
		
			int nMaxSegs = 4;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
				
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
				
				     
		   		if (numSegs==0){
		   			bioInstruct.setTransType(Constants.TRANSLATE);
		   			bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
		   		}
		      		else if (numSegs==1){
		   			bioInstruct.setTransType(Constants.TRANSLATE);
		   			bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
		       	}
		   		else if (numSegs==2){
		   			bioInstruct.setTransType(Constants.TRANSLATE);
		   			bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
		   		}
		   		else if (numSegs==3){
		   			bioInstruct.setTransType(Constants.TRANSLATE);
		   			bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10); 
		   		}
		   		else if (numSegs==4){
		   			bioInstruct.setTransType(Constants.TRANSLATE);
		   			bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);   
		       	}
		   		else {
		   			bioInstruct.setTransType(Constants.TRANSLATE);
		   			bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);	
		   		}
			    
		   		// Add the instruction into the instruction set
		   		bioMightInstructSet.addElement(bioInstruct);
			}	

		}
		else if (parentID.equals("TransversusAbdominisMuscle:06")) 
		{	
		
			int nMaxSegs = 4;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
				
					// Create a place for an instruction 
					BioMightInstruction bioInstruct = new BioMightInstruction();
				
				     
		    		if (numSegs==0){
		    			bioInstruct.setTransType(Constants.TRANSLATE);
		    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
		    		}
		       		else if (numSegs==1){
		       			bioInstruct.setTransType(Constants.TRANSLATE);
		    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10); 
		           	}
		    		else if (numSegs==2){
		    			bioInstruct.setTransType(Constants.TRANSLATE);
		    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
		    		}
		    		else if (numSegs==3){
		    			bioInstruct.setTransType(Constants.TRANSLATE);
		    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
		    		}
		    		else if (numSegs==4){
		    			bioInstruct.setTransType(Constants.TRANSLATE);
		    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10); 	   
		        	}
		    		else {
		    			bioInstruct.setTransType(Constants.TRANSLATE);
		    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
		    		}
			    
		    		// Add the instruction into the instruction set
		    		bioMightInstructSet.addElement(bioInstruct);
				}	

		}
		else if (parentID.equals("TransversusAbdominisMuscle:07")) 
		{	
		
			int nMaxSegs = 4;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
				
					// Create a place for an instruction 
					BioMightInstruction bioInstruct = new BioMightInstruction();
				
				     
		    		if (numSegs==0){
		    			bioInstruct.setTransType(Constants.TRANSLATE);
		    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
		    		}
		       		else if (numSegs==1){
		       			bioInstruct.setTransType(Constants.TRANSLATE);
		    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10); 
		           	}
		    		else if (numSegs==2){
		    			bioInstruct.setTransType(Constants.TRANSLATE);
		    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
		    		}
		    		else if (numSegs==3){
		    			bioInstruct.setTransType(Constants.TRANSLATE);
		    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
		    		}
		    		else if (numSegs==4){
		    			bioInstruct.setTransType(Constants.TRANSLATE);
		    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10); 	   
		        	}
		    		else {
		    			bioInstruct.setTransType(Constants.TRANSLATE);
		    			bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
		    		}
			    
		    		// Add the instruction into the instruction set
		    		bioMightInstructSet.addElement(bioInstruct);
				}	

		}
		else if (parentID.equals("TransversusAbdominisMuscle:08")) 
		{	
		
			int nMaxSegs = 4;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
				
					// Create a place for an instruction 
					BioMightInstruction bioInstruct = new BioMightInstruction();
				
				     
		    		if (numSegs==0){
		    			bioInstruct.setTransType(Constants.TRANSLATE);
		    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
		    		}
		       		else if (numSegs==1){
		       			bioInstruct.setTransType(Constants.TRANSLATE);
		    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10); 
		           	}
		    		else if (numSegs==2){
		    			bioInstruct.setTransType(Constants.TRANSLATE);
		    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
		    		}
		    		else if (numSegs==3){
		    			bioInstruct.setTransType(Constants.TRANSLATE);
		    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
		    		}
		    		else if (numSegs==4){
		    			bioInstruct.setTransType(Constants.TRANSLATE);
		    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10); 	   
		        	}
		    		else {
		    			bioInstruct.setTransType(Constants.TRANSLATE);
		    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
		    		}
			    
		    		// Add the instruction into the instruction set
		    		bioMightInstructSet.addElement(bioInstruct);
				}	

		}

		else
		{
			// Default Case
			int nMaxSegs = 4;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
				
					// Create a place for an instruction 
					BioMightInstruction bioInstruct = new BioMightInstruction();
				
				     
		    		if (numSegs==0){
		    			bioInstruct.setTransType(Constants.TRANSLATE);
		    			bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
		    		}
		       		else if (numSegs==1){
		       			bioInstruct.setTransType(Constants.TRANSLATE);
		    			bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0); 
		           	}
		    		else if (numSegs==2){
		    			bioInstruct.setTransType(Constants.TRANSLATE);
		    			bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
		    		}
		    		else if (numSegs==3){
		    			bioInstruct.setTransType(Constants.TRANSLATE);
		    			bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
		    		}
		    		else if (numSegs==4){
		    			bioInstruct.setTransType(Constants.TRANSLATE);
		    			bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0); 	   
		        	}
		    		else {
		    			bioInstruct.setTransType(Constants.TRANSLATE);
		    			bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
		    		}
			    
		    		// Add the instruction into the instruction set
		    		bioMightInstructSet.addElement(bioInstruct);
				}				
		}
		
		System.out.println("Completed InstrSet! parent " + parentID + "  size: " + bioMightInstructSet.getSize());

		
		// Generate the TransversusAbdominis
		//DBUtils.generateFacedComponents(Constants.QUADRANGLE, startID, componentType, componentName, componentID, currentPoints, bioMightInstructSet);
		
		return returnCode;
	}
   	
   	/******ARM MUSCLES******/
   	
    /***************************************************************************************
	 * GENERATE ANCONEUS MUSCLES
	 * 
	 * This generates the Anconeus Muscles  
	 * 
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/
    
   	public int generateAnconeusMuscle(String startID, String componentType, String componentName, String componentID, String parentID, double[][] currentPoints) 
	throws DataException, DataSecurityException
  	{	
		System.out.println("Generate AnconeusMuscle");
		
		int bodyID = 1;
		int projectID = 1;
		String vertices = "";
		
		ArrayList mySqlList= new ArrayList();
		int returnCode = 0;
	
		
		// We can generate the Anconeus Muscle
		if (currentPoints == null )
		{
			double circumference = 0.125;
	    	
			double x =  -8.0;
    		double y =  -10.0;
    		double z =  -1.0;
			
			// Create a equilateral octogon	
			currentPoints[0][0] =  x;
			currentPoints[0][1] =  y;
			currentPoints[0][2] =  z;
			
			currentPoints[1][0] =  x-circumference;
			currentPoints[1][1] =  y;
			currentPoints[1][2] =  z-circumference;
			
			currentPoints[2][0] =  x-circumference;
			currentPoints[2][1] =  y;
			currentPoints[2][2] =  z-circumference*2;
			
			currentPoints[3][0] =  x;
			currentPoints[3][1] =  y;
			currentPoints[3][2] =  z-circumference*3;
	
			currentPoints[4][0] =  x+circumference;
			currentPoints[4][1] =  y;
			currentPoints[4][2] =  z-circumference*3;
			
			currentPoints[5][0] =  x+circumference*2;
			currentPoints[5][1] =  y;
			currentPoints[5][2] =  z-circumference*2;
	
			currentPoints[6][0] =  x+circumference*2;
			currentPoints[6][1] =  y;
			currentPoints[6][2] =  z-circumference;

			currentPoints[7][0] =  x+circumference;
			currentPoints[7][1] =  y;
			currentPoints[7][2] =  z;
		}
		

		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();
		
		
		if (parentID.equals("AnconeusMuscle:01")) 
		{	
			int nMaxSegs = 6;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
				
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
		     
				if (numSegs==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10); 
				}
				else if (numSegs==1){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10); 
				}
				else if (numSegs==2){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);  
				}
				else if (numSegs==3){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10); 
				}
				else if (numSegs==4){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);    
				}	
				else if (numSegs==5){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);    
				}	
				else if (numSegs==6){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);    
				}	
				else if (numSegs==7){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);    
				}		
				else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
				}
	    
				// Add the instruction into the instruction set
				bioMightInstructSet.addElement(bioInstruct);
			}
		
		}
		else if (parentID.equals("AnconeusMuscle:02")) 
		{		
			int nMaxSegs = 6;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
			
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
		 
	    		if (numSegs==0){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
	    		}
	       		else if (numSegs==1){
	       			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
	           	}
	    		else if (numSegs==2){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
	    		}
	    		else if (numSegs==3){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
	    		}
	    		else if (numSegs==4){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10); 	   
	        	}
	    		else if (numSegs==5){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10); 	   
	        	}
	    		else if (numSegs==6){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10); 	   
	        	}
	    		else if (numSegs==7){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10); 	   
	        	}
	    		else {
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
	    		}
		    
	    		// Add the instruction into the instruction set
	    		bioMightInstructSet.addElement(bioInstruct);
			}	

		}	
		
		
		//Generate the AnconeusMuscle
		//DBUtils.generateFacedComponents(Constants.QUADRANGLE, startID, componentType, componentName, componentID, currentPoints, bioMightInstructSet);
		//System.out.println("Generated the Rows for AnconeusMuscleTissue: " + componentID + "   parent: " + parentID + "   " + componentType);

		return returnCode;
	}
   	
    /***************************************************************************************
	 * GENERATE BICEPS BRACHII MUSCLES
	 * 
	 * This generates the Biceps Brachii Muscles  
	 * 
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/
    
   	public int generateBicepsBrachiiMuscle(String startID, String componentType, String componentName, String componentID, String parentID, double[][] currentPoints) 
	throws DataException, DataSecurityException
  	{	
		System.out.println("MuscularBean.generateBicepsBrachiiMuscle");
		
		int bodyID = 1;
		int projectID = 1;
		String vertices = "";
		
		ArrayList mySqlList= new ArrayList();
		int returnCode = 0;
	
		
		// We can generate the Biceps Brachii Muscle
		if (currentPoints == null )
		{
			double circumference = 0.125;
	    	
			double x =  -8.0;
    		double y =  -10.0;
    		double z =  -1.0;
			
			// Create a equilateral octogon	
			currentPoints[0][0] =  x;
			currentPoints[0][1] =  y;
			currentPoints[0][2] =  z;
			
			currentPoints[1][0] =  x-circumference;
			currentPoints[1][1] =  y;
			currentPoints[1][2] =  z-circumference;
			
			currentPoints[2][0] =  x-circumference;
			currentPoints[2][1] =  y;
			currentPoints[2][2] =  z-circumference*2;
			
			currentPoints[3][0] =  x;
			currentPoints[3][1] =  y;
			currentPoints[3][2] =  z-circumference*3;
	
			currentPoints[4][0] =  x+circumference;
			currentPoints[4][1] =  y;
			currentPoints[4][2] =  z-circumference*3;
			
			currentPoints[5][0] =  x+circumference*2;
			currentPoints[5][1] =  y;
			currentPoints[5][2] =  z-circumference*2;
	
			currentPoints[6][0] =  x+circumference*2;
			currentPoints[6][1] =  y;
			currentPoints[6][2] =  z-circumference;

			currentPoints[7][0] =  x+circumference;
			currentPoints[7][1] =  y;
			currentPoints[7][2] =  z;
		}
		

		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();
		
		
		if (parentID.equals("BicepsBrachiiMuscle:01")) 
		{	
			int nMaxSegs = 12;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
				
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
		     
				if (numSegs==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.25, -1.0, 0.0); 
				}
				else if (numSegs==1){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.25, -1.0, 0.0); 
				}
				else if (numSegs==2){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.25, -1.0, 0.0); 
				}
				else if (numSegs==3){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);  
				}
				else if (numSegs==4){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.1, -1.0, 0.0);    
				}	
				else if (numSegs==5){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.20, -1.0, 0.0);     
				}	
				else if (numSegs==6){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);    
				}	
				else if (numSegs==7){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.05, -1.0, 0.0);    
				}		
				else if (numSegs==8){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.05, -1.0, 0.0);    
				}	
				else if (numSegs==9){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.15, -1.0, 0.0);    
				}	
				else if (numSegs==10){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.15, -1.0, 0.0);    
				}	
				else if (numSegs==11){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.35, -1.0, 0.0);    
				}	
				
				
				else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.25, -1.0, 0.0); 
				}
	    
				// Add the instruction into the instruction set
				bioMightInstructSet.addElement(bioInstruct);
			}
		
		}
		else if (parentID.equals("BicepsBrachiiMuscle:02")) 
		{		
			int nMaxSegs = 9;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
				
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
		     
				if (numSegs==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.25, -1.0, 0.0); 
				}
				else if (numSegs==1){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.25, -1.0, 0.0); 
				}
				else if (numSegs==2){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.25, -1.0, 0.0); 
				}
				else if (numSegs==3){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);  
				}
				else if (numSegs==4){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);    
				}	
				else if (numSegs==5){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);     
				}	
				else if (numSegs==6){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.05, -1.0, 0.0);    
				}	
				else if (numSegs==7){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.05, -1.0, 0.0);    
				}		
				else if (numSegs==8){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.05, -1.0, 0.0);    
				}	
				else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.25, -1.0, 0.0); 
				}
				
	    		// Add the instruction into the instruction set
	    		bioMightInstructSet.addElement(bioInstruct);
			}	

		}	
		
		
		//Generate the BicepsBrachiiMuscle
		DBUtils.generateFacedComponents(Constants.QUADRANGLE, startID, componentType, componentName, componentID, currentPoints, bioMightInstructSet);
		System.out.println("Generated the Rows for BicepsBrachiiMuscleTissue: " + componentID + "   parent: " + parentID + "   " + componentType);

		return returnCode;
	}
   	
    /***************************************************************************************
	 * GENERATE BRACHIALIS MUSCLES
	 * 
	 * This generates the Brachialis Muscles  
	 * 
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/
    
   	public int generateBrachialisMuscle(String startID, String componentType, String componentName, String componentID, String parentID, double[][] currentPoints) 
	throws DataException, DataSecurityException
  	{	
		System.out.println("BioMightMuscularBean Generate BrachialisMuscle");
		
		int bodyID = 1;
		int projectID = 1;
		String vertices = "";
		
		ArrayList mySqlList= new ArrayList();
		int returnCode = 0;
	
		
		// We can generate the Brachialis Muscle
		if (currentPoints == null )
		{
			double radius = 0.125;
			 if (parentID.equals("BicepsBrachiiMuscle:01")) 
				{	
					// Generate the BicepsBrachiiMuscle
					double[] startPos = {-7.0, -10.0, -6.5};
					currentPoints = BioGraphics.createCylinderInPlane(Constants.YPLANE, startPos, radius, 8);		
			}
			// Right BicepsBrachii
			else  if (parentID.equals("BicepsBrachiiMuscle:02")) 
			{	
				double[] startPos = {7.0, -10.0, -6.5};
				currentPoints = BioGraphics.createCylinderInPlane(Constants.YPLANE, startPos, radius, 8);			
			}
		}
		

		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();
		
		
		if (parentID.equals("BrachialisMuscle:01")) 
		{	
			int nMaxSegs = 9;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
				
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
		     
				if (numSegs==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.25, -1.0, 0.0); 
				}
				else if (numSegs==1){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.25, -1.0, 0.0); 
				}
				else if (numSegs==2){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.25, -1.0, 0.0); 
				}
				else if (numSegs==3){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);  
				}
				else if (numSegs==4){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);    
				}	
				else if (numSegs==5){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);     
				}	
				else if (numSegs==6){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.05, -1.0, 0.0);    
				}	
				else if (numSegs==7){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.05, -1.0, 0.0);    
				}		
				else if (numSegs==8){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.05, -1.0, 0.0);    
				}	
				else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.25, -1.0, 0.0); 
				}
	    
				// Add the instruction into the instruction set
				bioMightInstructSet.addElement(bioInstruct);
			}
		
		}
		else if (parentID.equals("BrachialisMuscle:02")) 
		{		
			int nMaxSegs = 9;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
			
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
		 
				if (numSegs==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.25, -1.0, 0.0); 
				}
				else if (numSegs==1){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.25, -1.0, 0.0); 
				}
				else if (numSegs==2){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.25, -1.0, 0.0); 
				}
				else if (numSegs==3){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);  
				}
				else if (numSegs==4){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);    
				}	
				else if (numSegs==5){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);     
				}	
				else if (numSegs==6){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.05, -1.0, 0.0);    
				}	
				else if (numSegs==7){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.05, -1.0, 0.0);    
				}		
				else if (numSegs==8){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.05, -1.0, 0.0);    
				}	
				else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.25, -1.0, 0.0); 
				}
		    
	    		// Add the instruction into the instruction set
	    		bioMightInstructSet.addElement(bioInstruct);
			}	

		}	
		
		
		//Generate the BrachialisMuscle
		DBUtils.generateFacedComponents(Constants.QUADRANGLE, startID, componentType, componentName, componentID, currentPoints, bioMightInstructSet);
		System.out.println("Generated the Rows for BrachialisMuscleTissue: " + componentID + "   parent: " + parentID + "   " + componentType);

		return returnCode;
	}
   	
   	/***************************************************************************************
	 * GENERATE BRACHIORADIALIS MUSCLES
	 * 
	 * This generates the Brachioradialis Muscles  
	 * 
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/
    
   	public int generateBrachioradialisMuscle(String startID, String componentType, String componentName, String componentID, String parentID, double[][] currentPoints) 
	throws DataException, DataSecurityException
  	{	
		System.out.println("Generate BrachioradialisMuscle");
		
		int bodyID = 1;
		int projectID = 1;
		String vertices = "";
		
		ArrayList mySqlList= new ArrayList();
		int returnCode = 0;
	
		
		// We can generate the Brachioradialis Muscle
		if (currentPoints == null )
		{
			double circumference = 0.125;
	    	
			double x =  -8.0;
    		double y =  -10.0;
    		double z =  -1.0;
			
			// Create a equilateral octogon	
			currentPoints[0][0] =  x;
			currentPoints[0][1] =  y;
			currentPoints[0][2] =  z;
			
			currentPoints[1][0] =  x-circumference;
			currentPoints[1][1] =  y;
			currentPoints[1][2] =  z-circumference;
			
			currentPoints[2][0] =  x-circumference;
			currentPoints[2][1] =  y;
			currentPoints[2][2] =  z-circumference*2;
			
			currentPoints[3][0] =  x;
			currentPoints[3][1] =  y;
			currentPoints[3][2] =  z-circumference*3;
	
			currentPoints[4][0] =  x+circumference;
			currentPoints[4][1] =  y;
			currentPoints[4][2] =  z-circumference*3;
			
			currentPoints[5][0] =  x+circumference*2;
			currentPoints[5][1] =  y;
			currentPoints[5][2] =  z-circumference*2;
	
			currentPoints[6][0] =  x+circumference*2;
			currentPoints[6][1] =  y;
			currentPoints[6][2] =  z-circumference;

			currentPoints[7][0] =  x+circumference;
			currentPoints[7][1] =  y;
			currentPoints[7][2] =  z;
		}
		

		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();
		
		
		if (parentID.equals("BrachioradialisMuscle:01")) 
		{	
			int nMaxSegs = 6;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
				
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
		     
				if (numSegs==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10); 
				}
				else if (numSegs==1){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10); 
				}
				else if (numSegs==2){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);  
				}
				else if (numSegs==3){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10); 
				}
				else if (numSegs==4){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);    
				}	
				else if (numSegs==5){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);    
				}	
				else if (numSegs==6){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);    
				}	
				else if (numSegs==7){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);    
				}		
				else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
				}
	    
				// Add the instruction into the instruction set
				bioMightInstructSet.addElement(bioInstruct);
			}
		
		}
		else if (parentID.equals("BrachioradialisMuscle:02")) 
		{		
			int nMaxSegs = 6;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
			
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
		 
	    		if (numSegs==0){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
	    		}
	       		else if (numSegs==1){
	       			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
	           	}
	    		else if (numSegs==2){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
	    		}
	    		else if (numSegs==3){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
	    		}
	    		else if (numSegs==4){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10); 	   
	        	}
	    		else if (numSegs==5){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10); 	   
	        	}
	    		else if (numSegs==6){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10); 	   
	        	}
	    		else if (numSegs==7){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10); 	   
	        	}
	    		else {
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
	    		}
		    
	    		// Add the instruction into the instruction set
	    		bioMightInstructSet.addElement(bioInstruct);
			}	

		}	
		
		
		//Generate the BrachioradialisMuscle
		//DBUtils.generateFacedComponents(Constants.QUADRANGLE, startID, componentType, componentName, componentID, currentPoints, bioMightInstructSet);
		//System.out.println("Generated the Rows for BrachioradialisMuscleTissue: " + componentID + "   parent: " + parentID + "   " + componentType);

		return returnCode;
	}
   	
   	/***************************************************************************************
	 * GENERATE CORACO BRACHIALIS MUSCLES
	 * 
	 * This generates the CoracoBrachialis Muscles  
	 * 
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/
    
   	public int generateCoracoBrachialisMuscle(String startID, String componentType, String componentName, String componentID, String parentID, double[][] currentPoints) 
	throws DataException, DataSecurityException
  	{	
		System.out.println("Generate CoracoBrachialisMuscle");
		
		int bodyID = 1;
		int projectID = 1;
		String vertices = "";
		
		ArrayList mySqlList= new ArrayList();
		int returnCode = 0;
	
		
		// We can generate the CoracoBrachialis Muscle
		if (currentPoints == null )
		{
			double circumference = 0.125;
	    	
			double x =  -8.0;
    		double y =  -10.0;
    		double z =  -1.0;
			
			// Create a equilateral octogon	
			currentPoints[0][0] =  x;
			currentPoints[0][1] =  y;
			currentPoints[0][2] =  z;
			
			currentPoints[1][0] =  x-circumference;
			currentPoints[1][1] =  y;
			currentPoints[1][2] =  z-circumference;
			
			currentPoints[2][0] =  x-circumference;
			currentPoints[2][1] =  y;
			currentPoints[2][2] =  z-circumference*2;
			
			currentPoints[3][0] =  x;
			currentPoints[3][1] =  y;
			currentPoints[3][2] =  z-circumference*3;
	
			currentPoints[4][0] =  x+circumference;
			currentPoints[4][1] =  y;
			currentPoints[4][2] =  z-circumference*3;
			
			currentPoints[5][0] =  x+circumference*2;
			currentPoints[5][1] =  y;
			currentPoints[5][2] =  z-circumference*2;
	
			currentPoints[6][0] =  x+circumference*2;
			currentPoints[6][1] =  y;
			currentPoints[6][2] =  z-circumference;

			currentPoints[7][0] =  x+circumference;
			currentPoints[7][1] =  y;
			currentPoints[7][2] =  z;
		}
		

		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();
		
		
		if (parentID.equals("CoracoBrachialisMuscle:01")) 
		{	
			int nMaxSegs = 6;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
				
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
		     
				if (numSegs==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10); 
				}
				else if (numSegs==1){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10); 
				}
				else if (numSegs==2){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);  
				}
				else if (numSegs==3){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10); 
				}
				else if (numSegs==4){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);    
				}	
				else if (numSegs==5){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);    
				}	
				else if (numSegs==6){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);    
				}	
				else if (numSegs==7){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);    
				}		
				else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
				}
	    
				// Add the instruction into the instruction set
				bioMightInstructSet.addElement(bioInstruct);
			}
		
		}
		else if (parentID.equals("CoracoBrachialisMuscle:02")) 
		{		
			int nMaxSegs = 6;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
			
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
		 
	    		if (numSegs==0){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
	    		}
	       		else if (numSegs==1){
	       			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
	           	}
	    		else if (numSegs==2){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
	    		}
	    		else if (numSegs==3){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
	    		}
	    		else if (numSegs==4){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10); 	   
	        	}
	    		else if (numSegs==5){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10); 	   
	        	}
	    		else if (numSegs==6){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10); 	   
	        	}
	    		else if (numSegs==7){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10); 	   
	        	}
	    		else {
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
	    		}
		    
	    		// Add the instruction into the instruction set
	    		bioMightInstructSet.addElement(bioInstruct);
			}	

		}	
		
		
		//Generate the CoracoBrachialisMuscle
		//DBUtils.generateFacedComponents(Constants.QUADRANGLE, startID, componentType, componentName, componentID, currentPoints, bioMightInstructSet);
		//System.out.println("Generated the Rows for CoracoBrachialisMuscleTissue: " + componentID + "   parent: " + parentID + "   " + componentType);

		return returnCode;
	}

   	/***************************************************************************************
	 * GENERATE EXTENSOR CARPI RADIALIS BREVIS MUSCLES
	 * 
	 * This generates the ExtensorCarpiRadialisBrevis Muscles  
	 * 
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/
    
   	public int generateExtensorCarpiRadialisBrevisMuscle(String startID, String componentType, String componentName, String componentID, String parentID, double[][] currentPoints) 
	throws DataException, DataSecurityException
  	{	
		System.out.println("Generate ExtensorCarpiRadialisBrevisMuscle");
		
		int bodyID = 1;
		int projectID = 1;
		String vertices = "";
		
		ArrayList mySqlList= new ArrayList();
		int returnCode = 0;
	
		
		// We can generate the ExtensorCarpiRadialisBrevisMuscle Muscle
		if (currentPoints == null )
		{
			double circumference = 0.125;
	    	
			double x =  -8.0;
    		double y =  -10.0;
    		double z =  -1.0;
			
			// Create a equilateral octogon	
			currentPoints[0][0] =  x;
			currentPoints[0][1] =  y;
			currentPoints[0][2] =  z;
			
			currentPoints[1][0] =  x-circumference;
			currentPoints[1][1] =  y;
			currentPoints[1][2] =  z-circumference;
			
			currentPoints[2][0] =  x-circumference;
			currentPoints[2][1] =  y;
			currentPoints[2][2] =  z-circumference*2;
			
			currentPoints[3][0] =  x;
			currentPoints[3][1] =  y;
			currentPoints[3][2] =  z-circumference*3;
	
			currentPoints[4][0] =  x+circumference;
			currentPoints[4][1] =  y;
			currentPoints[4][2] =  z-circumference*3;
			
			currentPoints[5][0] =  x+circumference*2;
			currentPoints[5][1] =  y;
			currentPoints[5][2] =  z-circumference*2;
	
			currentPoints[6][0] =  x+circumference*2;
			currentPoints[6][1] =  y;
			currentPoints[6][2] =  z-circumference;

			currentPoints[7][0] =  x+circumference;
			currentPoints[7][1] =  y;
			currentPoints[7][2] =  z;
		}
		

		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();
		
		
		if (parentID.equals("ExtensorCarpiRadialisBrevisMuscle:01")) 
		{	
			int nMaxSegs = 6;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
				
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
		     
				if (numSegs==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10); 
				}
				else if (numSegs==1){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10); 
				}
				else if (numSegs==2){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);  
				}
				else if (numSegs==3){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10); 
				}
				else if (numSegs==4){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);    
				}	
				else if (numSegs==5){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);    
				}	
				else if (numSegs==6){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);    
				}	
				else if (numSegs==7){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);    
				}		
				else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
				}
	    
				// Add the instruction into the instruction set
				bioMightInstructSet.addElement(bioInstruct);
			}
		
		}
		else if (parentID.equals("ExtensorCarpiRadialisBrevisMuscle:02")) 
		{		
			int nMaxSegs = 6;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
			
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
		 
	    		if (numSegs==0){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
	    		}
	       		else if (numSegs==1){
	       			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
	           	}
	    		else if (numSegs==2){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
	    		}
	    		else if (numSegs==3){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
	    		}
	    		else if (numSegs==4){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10); 	   
	        	}
	    		else if (numSegs==5){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10); 	   
	        	}
	    		else if (numSegs==6){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10); 	   
	        	}
	    		else if (numSegs==7){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10); 	   
	        	}
	    		else {
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
	    		}
		    
	    		// Add the instruction into the instruction set
	    		bioMightInstructSet.addElement(bioInstruct);
			}	

		}	
		
		
		//Generate the ExtensorCarpiRadialisBrevisMuscle
		//DBUtils.generateFacedComponents(Constants.QUADRANGLE, startID, componentType, componentName, componentID, currentPoints, bioMightInstructSet);
		//System.out.println("Generated the Rows for ExtensorCarpiRadialisBrevisMuscleTissue: " + componentID + "   parent: " + parentID + "   " + componentType);

		return returnCode;
	}
   	
   	/***************************************************************************************
	 * GENERATE EXTENSOR CARPI RADIALIS LONGUS MUSCLES
	 * 
	 * This generates the ExtensorCarpiRadialisLongus Muscles  
	 * 
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/
    
   	public int generateExtensorCarpiRadialisLongusMuscle(String startID, String componentType, String componentName, String componentID, String parentID, double[][] currentPoints) 
	throws DataException, DataSecurityException
  	{	
		System.out.println("Generate ExtensorCarpiRadialisLongusMuscle");
		
		int bodyID = 1;
		int projectID = 1;
		String vertices = "";
		
		ArrayList mySqlList= new ArrayList();
		int returnCode = 0;
	
		
		// We can generate the ExtensorCarpiRadialisLongus Muscle
		if (currentPoints == null )
		{
			double circumference = 0.125;
	    	
			double x =  -8.0;
    		double y =  -10.0;
    		double z =  -1.0;
			
			// Create a equilateral octogon	
			currentPoints[0][0] =  x;
			currentPoints[0][1] =  y;
			currentPoints[0][2] =  z;
			
			currentPoints[1][0] =  x-circumference;
			currentPoints[1][1] =  y;
			currentPoints[1][2] =  z-circumference;
			
			currentPoints[2][0] =  x-circumference;
			currentPoints[2][1] =  y;
			currentPoints[2][2] =  z-circumference*2;
			
			currentPoints[3][0] =  x;
			currentPoints[3][1] =  y;
			currentPoints[3][2] =  z-circumference*3;
	
			currentPoints[4][0] =  x+circumference;
			currentPoints[4][1] =  y;
			currentPoints[4][2] =  z-circumference*3;
			
			currentPoints[5][0] =  x+circumference*2;
			currentPoints[5][1] =  y;
			currentPoints[5][2] =  z-circumference*2;
	
			currentPoints[6][0] =  x+circumference*2;
			currentPoints[6][1] =  y;
			currentPoints[6][2] =  z-circumference;

			currentPoints[7][0] =  x+circumference;
			currentPoints[7][1] =  y;
			currentPoints[7][2] =  z;
		}
		

		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();
		
		
		if (parentID.equals("ExtensorCarpiRadialisLongusMuscle:01")) 
		{	
			int nMaxSegs = 6;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
				
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
		     
				if (numSegs==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10); 
				}
				else if (numSegs==1){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10); 
				}
				else if (numSegs==2){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);  
				}
				else if (numSegs==3){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10); 
				}
				else if (numSegs==4){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);    
				}	
				else if (numSegs==5){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);    
				}	
				else if (numSegs==6){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);    
				}	
				else if (numSegs==7){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);    
				}		
				else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
				}
	    
				// Add the instruction into the instruction set
				bioMightInstructSet.addElement(bioInstruct);
			}
		
		}
		else if (parentID.equals("ExtensorCarpiRadialisLongusMuscle:02")) 
		{		
			int nMaxSegs = 6;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
			
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
		 
	    		if (numSegs==0){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
	    		}
	       		else if (numSegs==1){
	       			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
	           	}
	    		else if (numSegs==2){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
	    		}
	    		else if (numSegs==3){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
	    		}
	    		else if (numSegs==4){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10); 	   
	        	}
	    		else if (numSegs==5){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10); 	   
	        	}
	    		else if (numSegs==6){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10); 	   
	        	}
	    		else if (numSegs==7){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10); 	   
	        	}
	    		else {
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
	    		}
		    
	    		// Add the instruction into the instruction set
	    		bioMightInstructSet.addElement(bioInstruct);
			}	

		}	
		
		
		//Generate the ExtensorCarpiRadialisLongusMuscle
		//DBUtils.generateFacedComponents(Constants.QUADRANGLE, startID, componentType, componentName, componentID, currentPoints, bioMightInstructSet);
		//System.out.println("Generated the Rows for ExtensorCarpiRadialisLongusMuscleTissue: " + componentID + "   parent: " + parentID + "   " + componentType);

		return returnCode;
	}
   	
   	/***************************************************************************************
	 * GENERATE EXTENSOR CARPI RADIALIS ULNARIS MUSCLES
	 * 
	 * This generates the ExtensorCarpiUlnarisLongus Muscles  
	 * 
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/
    
   	public int generateExtensorCarpiUlnarisLongusMuscle(String startID, String componentType, String componentName, String componentID, String parentID, double[][] currentPoints) 
	throws DataException, DataSecurityException
  	{	
		System.out.println("Generate ExtensorCarpiUlnarisLongusMuscle");
		
		int bodyID = 1;
		int projectID = 1;
		String vertices = "";
		
		ArrayList mySqlList= new ArrayList();
		int returnCode = 0;
	
		
		// We can generate the ExtensorCarpiUlnarisLongus Muscle
		if (currentPoints == null )
		{
			double circumference = 0.125;
	    	
			double x =  -8.0;
    		double y =  -10.0;
    		double z =  -1.0;
			
			// Create a equilateral octogon	
			currentPoints[0][0] =  x;
			currentPoints[0][1] =  y;
			currentPoints[0][2] =  z;
			
			currentPoints[1][0] =  x-circumference;
			currentPoints[1][1] =  y;
			currentPoints[1][2] =  z-circumference;
			
			currentPoints[2][0] =  x-circumference;
			currentPoints[2][1] =  y;
			currentPoints[2][2] =  z-circumference*2;
			
			currentPoints[3][0] =  x;
			currentPoints[3][1] =  y;
			currentPoints[3][2] =  z-circumference*3;
	
			currentPoints[4][0] =  x+circumference;
			currentPoints[4][1] =  y;
			currentPoints[4][2] =  z-circumference*3;
			
			currentPoints[5][0] =  x+circumference*2;
			currentPoints[5][1] =  y;
			currentPoints[5][2] =  z-circumference*2;
	
			currentPoints[6][0] =  x+circumference*2;
			currentPoints[6][1] =  y;
			currentPoints[6][2] =  z-circumference;

			currentPoints[7][0] =  x+circumference;
			currentPoints[7][1] =  y;
			currentPoints[7][2] =  z;
		}
		

		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();
		
		
		if (parentID.equals("ExtensorCarpiUlnarisLongusMuscle:01")) 
		{	
			int nMaxSegs = 6;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
				
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
		     
				if (numSegs==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10); 
				}
				else if (numSegs==1){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10); 
				}
				else if (numSegs==2){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);  
				}
				else if (numSegs==3){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10); 
				}
				else if (numSegs==4){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);    
				}	
				else if (numSegs==5){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);    
				}	
				else if (numSegs==6){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);    
				}	
				else if (numSegs==7){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);    
				}		
				else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
				}
	    
				// Add the instruction into the instruction set
				bioMightInstructSet.addElement(bioInstruct);
			}
		
		}
		else if (parentID.equals("ExtensorCarpiUlnarisLongusMuscle:02")) 
		{		
			int nMaxSegs = 6;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
			
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
		 
	    		if (numSegs==0){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
	    		}
	       		else if (numSegs==1){
	       			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
	           	}
	    		else if (numSegs==2){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
	    		}
	    		else if (numSegs==3){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
	    		}
	    		else if (numSegs==4){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10); 	   
	        	}
	    		else if (numSegs==5){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10); 	   
	        	}
	    		else if (numSegs==6){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10); 	   
	        	}
	    		else if (numSegs==7){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10); 	   
	        	}
	    		else {
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
	    		}
		    
	    		// Add the instruction into the instruction set
	    		bioMightInstructSet.addElement(bioInstruct);
			}	

		}	
		
		
		//Generate the ExtensorCarpiUlnarisLongusMuscle
		//DBUtils.generateFacedComponents(Constants.QUADRANGLE, startID, componentType, componentName, componentID, currentPoints, bioMightInstructSet);
		//System.out.println("Generated the Rows for ExtensorCarpiUlnarisLongusMuscleTissue: " + componentID + "   parent: " + parentID + "   " + componentType);

		return returnCode;
	}
   	
   	/***************************************************************************************
	 * GENERATE EXTENSOR DIGITI MINIMI MUSCLES
	 * 
	 * This generates the ExtensorDigitiMinimi Muscles  
	 * 
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/
    
   	public int generateExtensorDigitiMinimiMuscle(String startID, String componentType, String componentName, String componentID, String parentID, double[][] currentPoints) 
	throws DataException, DataSecurityException
  	{	
		System.out.println("Generate ExtensorDigitiMinimiMuscle");
		
		int bodyID = 1;
		int projectID = 1;
		String vertices = "";
		
		ArrayList mySqlList= new ArrayList();
		int returnCode = 0;
	
		
		// We can generate the ExtensorDigitiMinimi Muscle
		if (currentPoints == null )
		{
			double circumference = 0.125;
	    	
			double x =  -8.0;
    		double y =  -10.0;
    		double z =  -1.0;
			
			// Create a equilateral octogon	
			currentPoints[0][0] =  x;
			currentPoints[0][1] =  y;
			currentPoints[0][2] =  z;
			
			currentPoints[1][0] =  x-circumference;
			currentPoints[1][1] =  y;
			currentPoints[1][2] =  z-circumference;
			
			currentPoints[2][0] =  x-circumference;
			currentPoints[2][1] =  y;
			currentPoints[2][2] =  z-circumference*2;
			
			currentPoints[3][0] =  x;
			currentPoints[3][1] =  y;
			currentPoints[3][2] =  z-circumference*3;
	
			currentPoints[4][0] =  x+circumference;
			currentPoints[4][1] =  y;
			currentPoints[4][2] =  z-circumference*3;
			
			currentPoints[5][0] =  x+circumference*2;
			currentPoints[5][1] =  y;
			currentPoints[5][2] =  z-circumference*2;
	
			currentPoints[6][0] =  x+circumference*2;
			currentPoints[6][1] =  y;
			currentPoints[6][2] =  z-circumference;

			currentPoints[7][0] =  x+circumference;
			currentPoints[7][1] =  y;
			currentPoints[7][2] =  z;
		}
		

		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();
		
		
		if (parentID.equals("ExtensorDigitiMinimiMuscle:01")) 
		{	
			int nMaxSegs = 6;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
				
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
		     
				if (numSegs==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10); 
				}
				else if (numSegs==1){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10); 
				}
				else if (numSegs==2){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);  
				}
				else if (numSegs==3){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10); 
				}
				else if (numSegs==4){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);    
				}	
				else if (numSegs==5){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);    
				}	
				else if (numSegs==6){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);    
				}	
				else if (numSegs==7){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);    
				}		
				else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
				}
	    
				// Add the instruction into the instruction set
				bioMightInstructSet.addElement(bioInstruct);
			}
		
		}
		else if (parentID.equals("ExtensorDigitiMinimiMuscle:02")) 
		{		
			int nMaxSegs = 6;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
			
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
		 
	    		if (numSegs==0){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
	    		}
	       		else if (numSegs==1){
	       			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
	           	}
	    		else if (numSegs==2){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
	    		}
	    		else if (numSegs==3){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
	    		}
	    		else if (numSegs==4){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10); 	   
	        	}
	    		else if (numSegs==5){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10); 	   
	        	}
	    		else if (numSegs==6){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10); 	   
	        	}
	    		else if (numSegs==7){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10); 	   
	        	}
	    		else {
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
	    		}
		    
	    		// Add the instruction into the instruction set
	    		bioMightInstructSet.addElement(bioInstruct);
			}	

		}	
		
		
		//Generate the ExtensorDigitiMinimiMuscle
		//DBUtils.generateFacedComponents(Constants.QUADRANGLE, startID, componentType, componentName, componentID, currentPoints, bioMightInstructSet);
		//System.out.println("Generated the Rows for ExtensorDigitiMinimiMuscleTissue: " + componentID + "   parent: " + parentID + "   " + componentType);

		return returnCode;
	}
   	
   	/***************************************************************************************
	 * GENERATE EXTENSOR DIGITORUM MUSCLES
	 * 
	 * This generates the ExtensorDigitorum Muscles  
	 * 
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/
    
   	public int generateExtensorDigitorumMuscle(String startID, String componentType, String componentName, String componentID, String parentID, double[][] currentPoints) 
	throws DataException, DataSecurityException
  	{	
		System.out.println("Generate ExtensorDigitorumMuscle");
		
		int bodyID = 1;
		int projectID = 1;
		String vertices = "";
		
		ArrayList mySqlList= new ArrayList();
		int returnCode = 0;
	
		
		// We can generate the ExtensorDigitorum Muscle
		if (currentPoints == null )
		{
			double circumference = 0.125;
	    	
			double x =  -8.0;
    		double y =  -10.0;
    		double z =  -1.0;
			
			// Create a equilateral octogon	
			currentPoints[0][0] =  x;
			currentPoints[0][1] =  y;
			currentPoints[0][2] =  z;
			
			currentPoints[1][0] =  x-circumference;
			currentPoints[1][1] =  y;
			currentPoints[1][2] =  z-circumference;
			
			currentPoints[2][0] =  x-circumference;
			currentPoints[2][1] =  y;
			currentPoints[2][2] =  z-circumference*2;
			
			currentPoints[3][0] =  x;
			currentPoints[3][1] =  y;
			currentPoints[3][2] =  z-circumference*3;
	
			currentPoints[4][0] =  x+circumference;
			currentPoints[4][1] =  y;
			currentPoints[4][2] =  z-circumference*3;
			
			currentPoints[5][0] =  x+circumference*2;
			currentPoints[5][1] =  y;
			currentPoints[5][2] =  z-circumference*2;
	
			currentPoints[6][0] =  x+circumference*2;
			currentPoints[6][1] =  y;
			currentPoints[6][2] =  z-circumference;

			currentPoints[7][0] =  x+circumference;
			currentPoints[7][1] =  y;
			currentPoints[7][2] =  z;
		}
		

		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();
		
		
		if (parentID.equals("ExtensorDigitorumMuscle:01")) 
		{	
			int nMaxSegs = 6;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
				
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
		     
				if (numSegs==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10); 
				}
				else if (numSegs==1){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10); 
				}
				else if (numSegs==2){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);  
				}
				else if (numSegs==3){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10); 
				}
				else if (numSegs==4){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);    
				}	
				else if (numSegs==5){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);    
				}	
				else if (numSegs==6){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);    
				}	
				else if (numSegs==7){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);    
				}		
				else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
				}
	    
				// Add the instruction into the instruction set
				bioMightInstructSet.addElement(bioInstruct);
			}
		
		}
		else if (parentID.equals("ExtensorDigitorumMuscle:02")) 
		{		
			int nMaxSegs = 6;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
			
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
		 
	    		if (numSegs==0){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
	    		}
	       		else if (numSegs==1){
	       			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
	           	}
	    		else if (numSegs==2){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
	    		}
	    		else if (numSegs==3){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
	    		}
	    		else if (numSegs==4){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10); 	   
	        	}
	    		else if (numSegs==5){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10); 	   
	        	}
	    		else if (numSegs==6){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10); 	   
	        	}
	    		else if (numSegs==7){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10); 	   
	        	}
	    		else {
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
	    		}
		    
	    		// Add the instruction into the instruction set
	    		bioMightInstructSet.addElement(bioInstruct);
			}	

		}	
		
		
		//Generate the ExtensorDigitorumMuscle
		//DBUtils.generateFacedComponents(Constants.QUADRANGLE, startID, componentType, componentName, componentID, currentPoints, bioMightInstructSet);
		//System.out.println("Generated the Rows for ExtensorDigitorumMuscleTissue: " + componentID + "   parent: " + parentID + "   " + componentType);

		return returnCode;
	}
   	
   	/***************************************************************************************
	 * GENERATE EXTENSOR POLLICIS LONGUS MUSCLES
	 * 
	 * This generates the ExtensorPollicisLongus Muscles  
	 * 
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/
    
   	public int generateExtensorPollicisLongusMuscle(String startID, String componentType, String componentName, String componentID, String parentID, double[][] currentPoints) 
	throws DataException, DataSecurityException
  	{	
		System.out.println("Generate ExtensorPollicisLongusMuscle");
		
		int bodyID = 1;
		int projectID = 1;
		String vertices = "";
		
		ArrayList mySqlList= new ArrayList();
		int returnCode = 0;
	
		
		// We can generate the ExtensorPollicisLongus Muscle
		if (currentPoints == null )
		{
			double circumference = 0.125;
	    	
			double x =  -8.0;
    		double y =  -10.0;
    		double z =  -1.0;
			
			// Create a equilateral octogon	
			currentPoints[0][0] =  x;
			currentPoints[0][1] =  y;
			currentPoints[0][2] =  z;
			
			currentPoints[1][0] =  x-circumference;
			currentPoints[1][1] =  y;
			currentPoints[1][2] =  z-circumference;
			
			currentPoints[2][0] =  x-circumference;
			currentPoints[2][1] =  y;
			currentPoints[2][2] =  z-circumference*2;
			
			currentPoints[3][0] =  x;
			currentPoints[3][1] =  y;
			currentPoints[3][2] =  z-circumference*3;
	
			currentPoints[4][0] =  x+circumference;
			currentPoints[4][1] =  y;
			currentPoints[4][2] =  z-circumference*3;
			
			currentPoints[5][0] =  x+circumference*2;
			currentPoints[5][1] =  y;
			currentPoints[5][2] =  z-circumference*2;
	
			currentPoints[6][0] =  x+circumference*2;
			currentPoints[6][1] =  y;
			currentPoints[6][2] =  z-circumference;

			currentPoints[7][0] =  x+circumference;
			currentPoints[7][1] =  y;
			currentPoints[7][2] =  z;
		}
		

		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();
		
		
		if (parentID.equals("ExtensorPollicisLongusMuscle:01")) 
		{	
			int nMaxSegs = 6;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
				
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
		     
				if (numSegs==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10); 
				}
				else if (numSegs==1){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10); 
				}
				else if (numSegs==2){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);  
				}
				else if (numSegs==3){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10); 
				}
				else if (numSegs==4){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);    
				}	
				else if (numSegs==5){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);    
				}	
				else if (numSegs==6){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);    
				}	
				else if (numSegs==7){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);    
				}		
				else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
				}
	    
				// Add the instruction into the instruction set
				bioMightInstructSet.addElement(bioInstruct);
			}
		
		}
		else if (parentID.equals("ExtensorPollicisLongusMuscle:02")) 
		{		
			int nMaxSegs = 6;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
			
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
		 
	    		if (numSegs==0){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
	    		}
	       		else if (numSegs==1){
	       			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
	           	}
	    		else if (numSegs==2){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
	    		}
	    		else if (numSegs==3){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
	    		}
	    		else if (numSegs==4){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10); 	   
	        	}
	    		else if (numSegs==5){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10); 	   
	        	}
	    		else if (numSegs==6){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10); 	   
	        	}
	    		else if (numSegs==7){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10); 	   
	        	}
	    		else {
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
	    		}
		    
	    		// Add the instruction into the instruction set
	    		bioMightInstructSet.addElement(bioInstruct);
			}	

		}	
		
		
		//Generate the ExtensorPollicisLongus
		//DBUtils.generateFacedComponents(Constants.QUADRANGLE, startID, componentType, componentName, componentID, currentPoints, bioMightInstructSet);
		//System.out.println("Generated the Rows for ExtensorPollicisLongusMuscleTissue: " + componentID + "   parent: " + parentID + "   " + componentType);

		return returnCode;
	}
   	
   	/***************************************************************************************
	 * GENERATE TRICEPS BRACHII MUSCLES
	 * 
	 * This generates the TricepsBrachii Muscles  
	 * 
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/
    
   	public int generateTricepsBrachiiMuscle(String startID, String componentType, String componentName, String componentID, String parentID, double[][] currentPoints) 
	throws DataException, DataSecurityException
  	{	
		System.out.println("Generate TricepsBrachiiMuscle");
		
		int bodyID = 1;
		int projectID = 1;
		String vertices = "";
		
		ArrayList mySqlList= new ArrayList();
		int returnCode = 0;
	
		
		// We can generate the TricepsBrachii Muscle
		if (currentPoints == null )
		{
			double circumference = 0.125;
	    	
			double x =  -8.0;
    		double y =  -10.0;
    		double z =  -1.0;
			
			// Create a equilateral octogon	
			currentPoints[0][0] =  x;
			currentPoints[0][1] =  y;
			currentPoints[0][2] =  z;
			
			currentPoints[1][0] =  x-circumference;
			currentPoints[1][1] =  y;
			currentPoints[1][2] =  z-circumference;
			
			currentPoints[2][0] =  x-circumference;
			currentPoints[2][1] =  y;
			currentPoints[2][2] =  z-circumference*2;
			
			currentPoints[3][0] =  x;
			currentPoints[3][1] =  y;
			currentPoints[3][2] =  z-circumference*3;
	
			currentPoints[4][0] =  x+circumference;
			currentPoints[4][1] =  y;
			currentPoints[4][2] =  z-circumference*3;
			
			currentPoints[5][0] =  x+circumference*2;
			currentPoints[5][1] =  y;
			currentPoints[5][2] =  z-circumference*2;
	
			currentPoints[6][0] =  x+circumference*2;
			currentPoints[6][1] =  y;
			currentPoints[6][2] =  z-circumference;

			currentPoints[7][0] =  x+circumference;
			currentPoints[7][1] =  y;
			currentPoints[7][2] =  z;
		}
		

		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();
		
		
		if (parentID.equals("TricepsBrachiiMuscle:01")) 
		{	
			int nMaxSegs = 6;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
				
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
		     
				if (numSegs==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10); 
				}
				else if (numSegs==1){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10); 
				}
				else if (numSegs==2){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);  
				}
				else if (numSegs==3){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10); 
				}
				else if (numSegs==4){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);    
				}	
				else if (numSegs==5){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);    
				}	
				else if (numSegs==6){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);    
				}	
				else if (numSegs==7){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);    
				}		
				else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
				}
	    
				// Add the instruction into the instruction set
				bioMightInstructSet.addElement(bioInstruct);
			}
		
		}
		else if (parentID.equals("TricepsBrachiiMuscle:02")) 
		{		
			int nMaxSegs = 6;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
			
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
		 
	    		if (numSegs==0){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
	    		}
	       		else if (numSegs==1){
	       			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
	           	}
	    		else if (numSegs==2){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
	    		}
	    		else if (numSegs==3){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
	    		}
	    		else if (numSegs==4){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10); 	   
	        	}
	    		else if (numSegs==5){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10); 	   
	        	}
	    		else if (numSegs==6){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10); 	   
	        	}
	    		else if (numSegs==7){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10); 	   
	        	}
	    		else {
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
	    		}
		    
	    		// Add the instruction into the instruction set
	    		bioMightInstructSet.addElement(bioInstruct);
			}	

		}	
		
		
		//Generate the TricepsBrachii
		//DBUtils.generateFacedComponents(Constants.QUADRANGLE, startID, componentType, componentName, componentID, currentPoints, bioMightInstructSet);
		//System.out.println("Generated the Rows for TricepsBrachiiMuscleTissue: " + componentID + "   parent: " + parentID + "   " + componentType);

		return returnCode;
	}
   	
   	/*****BACK MUSCLES******/
   	
   	/*****CHEST MUSCLES******/
   	
   	/***************************************************************************************
	 * GENERATE DIAPHRAGM MUSCLES
	 * 
	 * This generates the Diaphragm Muscles  
	 * 
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/
    
   	public int generateDiaphragmMuscle(String startID, String componentType, String componentName, String componentID, String parentID, double[][] currentPoints) 
	throws DataException, DataSecurityException
  	{	
		System.out.println("Generate DiaphragmMuscle");
		
		int bodyID = 1;
		int projectID = 1;
		String vertices = "";
		
		ArrayList mySqlList= new ArrayList();
		int returnCode = 0;
	
		
		// We can generate the Diaphragm Muscle
		if (currentPoints == null )
		{
			double circumference = 0.125;
	    	
			double x =  -8.0;
    		double y =  -10.0;
    		double z =  -1.0;
			
			// Create a equilateral octogon	
			currentPoints[0][0] =  x;
			currentPoints[0][1] =  y;
			currentPoints[0][2] =  z;
			
			currentPoints[1][0] =  x-circumference;
			currentPoints[1][1] =  y;
			currentPoints[1][2] =  z-circumference;
			
			currentPoints[2][0] =  x-circumference;
			currentPoints[2][1] =  y;
			currentPoints[2][2] =  z-circumference*2;
			
			currentPoints[3][0] =  x;
			currentPoints[3][1] =  y;
			currentPoints[3][2] =  z-circumference*3;
	
			currentPoints[4][0] =  x+circumference;
			currentPoints[4][1] =  y;
			currentPoints[4][2] =  z-circumference*3;
			
			currentPoints[5][0] =  x+circumference*2;
			currentPoints[5][1] =  y;
			currentPoints[5][2] =  z-circumference*2;
	
			currentPoints[6][0] =  x+circumference*2;
			currentPoints[6][1] =  y;
			currentPoints[6][2] =  z-circumference;

			currentPoints[7][0] =  x+circumference;
			currentPoints[7][1] =  y;
			currentPoints[7][2] =  z;
		}
		

		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();
		
		
		if (parentID.equals("DiaphragmMuscle:01")) 
		{	
			int nMaxSegs = 6;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
				
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
		     
				if (numSegs==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10); 
				}
				else if (numSegs==1){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10); 
				}
				else if (numSegs==2){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);  
				}
				else if (numSegs==3){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10); 
				}
				else if (numSegs==4){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);    
				}	
				else if (numSegs==5){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);    
				}	
				else if (numSegs==6){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);    
				}	
				else if (numSegs==7){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);    
				}		
				else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
				}
	    
				// Add the instruction into the instruction set
				bioMightInstructSet.addElement(bioInstruct);
			}
		

		}	

		//Generate the Diaphragm
		//DBUtils.generateFacedComponents(Constants.QUADRANGLE, startID, componentType, componentName, componentID, currentPoints, bioMightInstructSet);
		//System.out.println("Generated the Rows for DiaphragmTissue: " + componentID + "   parent: " + parentID + "   " + componentType);

		return returnCode;
	}
   	
   	/***************************************************************************************
	 * GENERATE INTERCOSTALES EXTERNI MUSCLES
	 * 
	 * This generates the IntercostalesExterni Muscles  
	 * 
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/
    
   	public int generateIntercostalesExterniMuscle(String startID, String componentType, String componentName, String componentID, String parentID, double[][] currentPoints) 
	throws DataException, DataSecurityException
  	{	
		System.out.println("Generate IntercostalesExterniMuscle");
		
		int bodyID = 1;
		int projectID = 1;
		String vertices = "";
		
		ArrayList mySqlList= new ArrayList();
		int returnCode = 0;
	
		
		// We can generate the IntercostalesExterni Muscle
		if (currentPoints == null )
		{
			double circumference = 0.125;
	    	
			double x =  -8.0;
    		double y =  -10.0;
    		double z =  -1.0;
			
			// Create a equilateral octogon	
			currentPoints[0][0] =  x;
			currentPoints[0][1] =  y;
			currentPoints[0][2] =  z;
			
			currentPoints[1][0] =  x-circumference;
			currentPoints[1][1] =  y;
			currentPoints[1][2] =  z-circumference;
			
			currentPoints[2][0] =  x-circumference;
			currentPoints[2][1] =  y;
			currentPoints[2][2] =  z-circumference*2;
			
			currentPoints[3][0] =  x;
			currentPoints[3][1] =  y;
			currentPoints[3][2] =  z-circumference*3;
	
			currentPoints[4][0] =  x+circumference;
			currentPoints[4][1] =  y;
			currentPoints[4][2] =  z-circumference*3;
			
			currentPoints[5][0] =  x+circumference*2;
			currentPoints[5][1] =  y;
			currentPoints[5][2] =  z-circumference*2;
	
			currentPoints[6][0] =  x+circumference*2;
			currentPoints[6][1] =  y;
			currentPoints[6][2] =  z-circumference;

			currentPoints[7][0] =  x+circumference;
			currentPoints[7][1] =  y;
			currentPoints[7][2] =  z;
		}
		

		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();
		
		
		if (parentID.equals("IntercostalesExterniMuscle:01")) 
		{	
			int nMaxSegs = 6;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
				
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
		     
				if (numSegs==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10); 
				}
				else if (numSegs==1){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10); 
				}
				else if (numSegs==2){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);  
				}
				else if (numSegs==3){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10); 
				}
				else if (numSegs==4){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);    
				}	
				else if (numSegs==5){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);    
				}	
				else if (numSegs==6){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);    
				}	
				else if (numSegs==7){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);    
				}		
				else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
				}
	    
				// Add the instruction into the instruction set
				bioMightInstructSet.addElement(bioInstruct);
			}
		
		}
		else if (parentID.equals("IntercostalesExterniMuscle:02")) 
		{		
			int nMaxSegs = 6;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
			
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
		 
	    		if (numSegs==0){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
	    		}
	       		else if (numSegs==1){
	       			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
	           	}
	    		else if (numSegs==2){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
	    		}
	    		else if (numSegs==3){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
	    		}
	    		else if (numSegs==4){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10); 	   
	        	}
	    		else if (numSegs==5){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10); 	   
	        	}
	    		else if (numSegs==6){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10); 	   
	        	}
	    		else if (numSegs==7){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10); 	   
	        	}
	    		else {
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
	    		}
		    
	    		// Add the instruction into the instruction set
	    		bioMightInstructSet.addElement(bioInstruct);
			}	

		}	
		
		
		//Generate the IntercostalesExterni
		//DBUtils.generateFacedComponents(Constants.QUADRANGLE, startID, componentType, componentName, componentID, currentPoints, bioMightInstructSet);
		//System.out.println("Generated the Rows for IntercostalesExterniMuscleTissue: " + componentID + "   parent: " + parentID + "   " + componentType);

		return returnCode;
	}
   	
   	/******FOOT MUSCLES******/
   	
   	/***************************************************************************************
	 * GENERATE ABDUCTOR DIGITI MINIMI MUSCLES
	 * 
	 * This generates the AbductorDigitiMinimi Muscles  
	 * 
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/
    
   	public int generateAbductorDigitiMinimiMuscle(String startID, String componentType, String componentName, String componentID, String parentID, double[][] currentPoints) 
	throws DataException, DataSecurityException
  	{	
		System.out.println("Generate AbductorDigitiMinimiMuscle");
		
		int bodyID = 1;
		int projectID = 1;
		String vertices = "";
		
		ArrayList mySqlList= new ArrayList();
		int returnCode = 0;
	
		
		// We can generate the AbductorDigitiMinimi Muscle
		if (currentPoints == null )
		{
			double circumference = 0.125;
	    	
			double x =  -8.0;
    		double y =  -10.0;
    		double z =  -1.0;
			
			// Create a equilateral octogon	
			currentPoints[0][0] =  x;
			currentPoints[0][1] =  y;
			currentPoints[0][2] =  z;
			
			currentPoints[1][0] =  x-circumference;
			currentPoints[1][1] =  y;
			currentPoints[1][2] =  z-circumference;
			
			currentPoints[2][0] =  x-circumference;
			currentPoints[2][1] =  y;
			currentPoints[2][2] =  z-circumference*2;
			
			currentPoints[3][0] =  x;
			currentPoints[3][1] =  y;
			currentPoints[3][2] =  z-circumference*3;
	
			currentPoints[4][0] =  x+circumference;
			currentPoints[4][1] =  y;
			currentPoints[4][2] =  z-circumference*3;
			
			currentPoints[5][0] =  x+circumference*2;
			currentPoints[5][1] =  y;
			currentPoints[5][2] =  z-circumference*2;
	
			currentPoints[6][0] =  x+circumference*2;
			currentPoints[6][1] =  y;
			currentPoints[6][2] =  z-circumference;

			currentPoints[7][0] =  x+circumference;
			currentPoints[7][1] =  y;
			currentPoints[7][2] =  z;
		}
		

		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();
		
		
		if (parentID.equals("AbductorDigitiMinimiMuscle:01")) 
		{	
			int nMaxSegs = 6;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
				
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
		     
				if (numSegs==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10); 
				}
				else if (numSegs==1){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10); 
				}
				else if (numSegs==2){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);  
				}
				else if (numSegs==3){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10); 
				}
				else if (numSegs==4){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);    
				}	
				else if (numSegs==5){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);    
				}	
				else if (numSegs==6){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);    
				}	
				else if (numSegs==7){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);    
				}		
				else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
				}
	    
				// Add the instruction into the instruction set
				bioMightInstructSet.addElement(bioInstruct);
			}
		
		}
		else if (parentID.equals("AbductorDigitiMinimiMuscle:02")) 
		{		
			int nMaxSegs = 6;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
			
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
		 
	    		if (numSegs==0){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
	    		}
	       		else if (numSegs==1){
	       			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
	           	}
	    		else if (numSegs==2){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
	    		}
	    		else if (numSegs==3){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
	    		}
	    		else if (numSegs==4){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10); 	   
	        	}
	    		else if (numSegs==5){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10); 	   
	        	}
	    		else if (numSegs==6){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10); 	   
	        	}
	    		else if (numSegs==7){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10); 	   
	        	}
	    		else {
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
	    		}
		    
	    		// Add the instruction into the instruction set
	    		bioMightInstructSet.addElement(bioInstruct);
			}	

		}	
		
		
		//Generate the AbductorDigitiMinimi
		//DBUtils.generateFacedComponents(Constants.QUADRANGLE, startID, componentType, componentName, componentID, currentPoints, bioMightInstructSet);
		//System.out.println("Generated the Rows for AbductorDigitiMinimiMuscleTissue: " + componentID + "   parent: " + parentID + "   " + componentType);

		return returnCode;
	}
   	
   	/***************************************************************************************
	 * GENERATE ABDUCTOR HALLUCIS MUSCLES
	 * 
	 * This generates the AbductorHallucis Muscles  
	 * 
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/
    
   	public int generateAbductorHallucisMuscle(String startID, String componentType, String componentName, String componentID, String parentID, double[][] currentPoints) 
	throws DataException, DataSecurityException
  	{	
		System.out.println("Generate AbductorHallucisMuscle");
		
		int bodyID = 1;
		int projectID = 1;
		String vertices = "";
		
		ArrayList mySqlList= new ArrayList();
		int returnCode = 0;
	
		
		// We can generate the AbductorHallucis Muscle
		if (currentPoints == null )
		{
			double circumference = 0.125;
	    	
			double x =  -8.0;
    		double y =  -10.0;
    		double z =  -1.0;
			
			// Create a equilateral octogon	
			currentPoints[0][0] =  x;
			currentPoints[0][1] =  y;
			currentPoints[0][2] =  z;
			
			currentPoints[1][0] =  x-circumference;
			currentPoints[1][1] =  y;
			currentPoints[1][2] =  z-circumference;
			
			currentPoints[2][0] =  x-circumference;
			currentPoints[2][1] =  y;
			currentPoints[2][2] =  z-circumference*2;
			
			currentPoints[3][0] =  x;
			currentPoints[3][1] =  y;
			currentPoints[3][2] =  z-circumference*3;
	
			currentPoints[4][0] =  x+circumference;
			currentPoints[4][1] =  y;
			currentPoints[4][2] =  z-circumference*3;
			
			currentPoints[5][0] =  x+circumference*2;
			currentPoints[5][1] =  y;
			currentPoints[5][2] =  z-circumference*2;
	
			currentPoints[6][0] =  x+circumference*2;
			currentPoints[6][1] =  y;
			currentPoints[6][2] =  z-circumference;

			currentPoints[7][0] =  x+circumference;
			currentPoints[7][1] =  y;
			currentPoints[7][2] =  z;
		}
		

		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();
		
		
		if (parentID.equals("AbductorHallucisMuscle:01")) 
		{	
			int nMaxSegs = 6;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
				
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
		     
				if (numSegs==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10); 
				}
				else if (numSegs==1){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10); 
				}
				else if (numSegs==2){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);  
				}
				else if (numSegs==3){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10); 
				}
				else if (numSegs==4){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);    
				}	
				else if (numSegs==5){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);    
				}	
				else if (numSegs==6){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);    
				}	
				else if (numSegs==7){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);    
				}		
				else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
				}
	    
				// Add the instruction into the instruction set
				bioMightInstructSet.addElement(bioInstruct);
			}
		
		}
		else if (parentID.equals("AbductorHallucisMuscle:02")) 
		{		
			int nMaxSegs = 6;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
			
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
		 
	    		if (numSegs==0){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
	    		}
	       		else if (numSegs==1){
	       			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
	           	}
	    		else if (numSegs==2){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
	    		}
	    		else if (numSegs==3){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
	    		}
	    		else if (numSegs==4){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10); 	   
	        	}
	    		else if (numSegs==5){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10); 	   
	        	}
	    		else if (numSegs==6){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10); 	   
	        	}
	    		else if (numSegs==7){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10); 	   
	        	}
	    		else {
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
	    		}
		    
	    		// Add the instruction into the instruction set
	    		bioMightInstructSet.addElement(bioInstruct);
			}	

		}	
		
		
		//Generate the AbductorHallucis
		//DBUtils.generateFacedComponents(Constants.QUADRANGLE, startID, componentType, componentName, componentID, currentPoints, bioMightInstructSet);
		//System.out.println("Generated the Rows for AbductorHallucisMuscleTissue: " + componentID + "   parent: " + parentID + "   " + componentType);

		return returnCode;
	}
   	
   	/***************************************************************************************
	 * GENERATE ABDUCTOR OSSIS METATARSI QUINTI MUSCLES
	 * 
	 * This generates the AbductorOssisMetatarsiQuinti Muscles  
	 * 
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/
    
   	public int generateAbductorOssisMetatarsiQuintiMuscle(String startID, String componentType, String componentName, String componentID, String parentID, double[][] currentPoints) 
	throws DataException, DataSecurityException
  	{	
		System.out.println("Generate AbductorOssisMetatarsiQuintiMuscle");
		
		int bodyID = 1;
		int projectID = 1;
		String vertices = "";
		
		ArrayList mySqlList= new ArrayList();
		int returnCode = 0;
	
		
		// We can generate the AbductorOssisMetatarsiQuinti Muscle
		if (currentPoints == null )
		{
			double circumference = 0.125;
	    	
			double x =  -8.0;
    		double y =  -10.0;
    		double z =  -1.0;
			
			// Create a equilateral octogon	
			currentPoints[0][0] =  x;
			currentPoints[0][1] =  y;
			currentPoints[0][2] =  z;
			
			currentPoints[1][0] =  x-circumference;
			currentPoints[1][1] =  y;
			currentPoints[1][2] =  z-circumference;
			
			currentPoints[2][0] =  x-circumference;
			currentPoints[2][1] =  y;
			currentPoints[2][2] =  z-circumference*2;
			
			currentPoints[3][0] =  x;
			currentPoints[3][1] =  y;
			currentPoints[3][2] =  z-circumference*3;
	
			currentPoints[4][0] =  x+circumference;
			currentPoints[4][1] =  y;
			currentPoints[4][2] =  z-circumference*3;
			
			currentPoints[5][0] =  x+circumference*2;
			currentPoints[5][1] =  y;
			currentPoints[5][2] =  z-circumference*2;
	
			currentPoints[6][0] =  x+circumference*2;
			currentPoints[6][1] =  y;
			currentPoints[6][2] =  z-circumference;

			currentPoints[7][0] =  x+circumference;
			currentPoints[7][1] =  y;
			currentPoints[7][2] =  z;
		}
		

		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();
		
		
		if (parentID.equals("AbductorOssisMetatarsiQuintiMuscle:01")) 
		{	
			int nMaxSegs = 6;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
				
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
		     
				if (numSegs==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10); 
				}
				else if (numSegs==1){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10); 
				}
				else if (numSegs==2){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);  
				}
				else if (numSegs==3){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10); 
				}
				else if (numSegs==4){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);    
				}	
				else if (numSegs==5){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);    
				}	
				else if (numSegs==6){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);    
				}	
				else if (numSegs==7){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);    
				}		
				else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
				}
	    
				// Add the instruction into the instruction set
				bioMightInstructSet.addElement(bioInstruct);
			}
		
		}
		else if (parentID.equals("AbductorOssisMetatarsiQuintiMuscle:02")) 
		{		
			int nMaxSegs = 6;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
			
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
		 
	    		if (numSegs==0){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
	    		}
	       		else if (numSegs==1){
	       			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
	           	}
	    		else if (numSegs==2){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
	    		}
	    		else if (numSegs==3){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
	    		}
	    		else if (numSegs==4){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10); 	   
	        	}
	    		else if (numSegs==5){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10); 	   
	        	}
	    		else if (numSegs==6){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10); 	   
	        	}
	    		else if (numSegs==7){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10); 	   
	        	}
	    		else {
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
	    		}
		    
	    		// Add the instruction into the instruction set
	    		bioMightInstructSet.addElement(bioInstruct);
			}	

		}	
		
		
		//Generate the AbductorOssisMetatarsiQuinti
		//DBUtils.generateFacedComponents(Constants.QUADRANGLE, startID, componentType, componentName, componentID, currentPoints, bioMightInstructSet);
		//System.out.println("Generated the Rows for AbductorOssisMetatarsiQuintiMuscleTissue: " + componentID + "   parent: " + parentID + "   " + componentType);

		return returnCode;
	}
   	
   	/***************************************************************************************
	 * GENERATE ADDUCTOR HALLUCIS MUSCLES
	 * 
	 * This generates the Adductor Hallucis Muscles  
	 * 
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/
    
   	public int generateAdductorHallucisMuscle(String startID, String componentType, String componentName, String componentID, String parentID, double[][] currentPoints) 
	throws DataException, DataSecurityException
  	{	
		System.out.println("Generate AdductorHallucisMuscle");
		
		int bodyID = 1;
		int projectID = 1;
		String vertices = "";
		
		ArrayList mySqlList= new ArrayList();
		int returnCode = 0;
	
		
		// We can generate the AdductorHallucis Muscle
		if (currentPoints == null )
		{
			double circumference = 0.125;
	    	
			double x =  -8.0;
    		double y =  -10.0;
    		double z =  -1.0;
			
			// Create a equilateral octogon	
			currentPoints[0][0] =  x;
			currentPoints[0][1] =  y;
			currentPoints[0][2] =  z;
			
			currentPoints[1][0] =  x-circumference;
			currentPoints[1][1] =  y;
			currentPoints[1][2] =  z-circumference;
			
			currentPoints[2][0] =  x-circumference;
			currentPoints[2][1] =  y;
			currentPoints[2][2] =  z-circumference*2;
			
			currentPoints[3][0] =  x;
			currentPoints[3][1] =  y;
			currentPoints[3][2] =  z-circumference*3;
	
			currentPoints[4][0] =  x+circumference;
			currentPoints[4][1] =  y;
			currentPoints[4][2] =  z-circumference*3;
			
			currentPoints[5][0] =  x+circumference*2;
			currentPoints[5][1] =  y;
			currentPoints[5][2] =  z-circumference*2;
	
			currentPoints[6][0] =  x+circumference*2;
			currentPoints[6][1] =  y;
			currentPoints[6][2] =  z-circumference;

			currentPoints[7][0] =  x+circumference;
			currentPoints[7][1] =  y;
			currentPoints[7][2] =  z;
		}
		

		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();
		
		
		if (parentID.equals("AdductorHallucisMuscle:01")) 
		{	
			int nMaxSegs = 6;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
				
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
		     
				if (numSegs==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10); 
				}
				else if (numSegs==1){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10); 
				}
				else if (numSegs==2){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);  
				}
				else if (numSegs==3){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10); 
				}
				else if (numSegs==4){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);    
				}	
				else if (numSegs==5){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);    
				}	
				else if (numSegs==6){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);    
				}	
				else if (numSegs==7){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);    
				}		
				else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
				}
	    
				// Add the instruction into the instruction set
				bioMightInstructSet.addElement(bioInstruct);
			}
		
		}
		else if (parentID.equals("AdductorHallucisMuscle:02")) 
		{		
			int nMaxSegs = 6;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
			
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
		 
	    		if (numSegs==0){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
	    		}
	       		else if (numSegs==1){
	       			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
	           	}
	    		else if (numSegs==2){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
	    		}
	    		else if (numSegs==3){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
	    		}
	    		else if (numSegs==4){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10); 	   
	        	}
	    		else if (numSegs==5){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10); 	   
	        	}
	    		else if (numSegs==6){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10); 	   
	        	}
	    		else if (numSegs==7){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10); 	   
	        	}
	    		else {
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
	    		}
		    
	    		// Add the instruction into the instruction set
	    		bioMightInstructSet.addElement(bioInstruct);
			}	

		}	
		
		
		//Generate the AdductorHallucis
		//DBUtils.generateFacedComponents(Constants.QUADRANGLE, startID, componentType, componentName, componentID, currentPoints, bioMightInstructSet);
		//System.out.println("Generated the Rows for AdductorHallucisMuscleTissue: " + componentID + "   parent: " + parentID + "   " + componentType);

		return returnCode;
	}
   	
   	/***************************************************************************************
	 * GENERATE DORSAL INTEROSSEI MUSCLES
	 * 
	 * This generates the Dorsal Interossei Muscles  
	 * 
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/
    
   	public int generateDorsalInterosseiMuscle(String startID, String componentType, String componentName, String componentID, String parentID, double[][] currentPoints) 
	throws DataException, DataSecurityException
  	{	
		System.out.println("Generate DorsalInterosseiMuscle");
		
		int bodyID = 1;
		int projectID = 1;
		String vertices = "";
		
		ArrayList mySqlList= new ArrayList();
		int returnCode = 0;
	
		
		// We can generate the DorsalInterossei Muscle
		if (currentPoints == null )
		{
			double circumference = 0.125;
	    	
			double x =  -8.0;
    		double y =  -10.0;
    		double z =  -1.0;
			
			// Create a equilateral octogon	
			currentPoints[0][0] =  x;
			currentPoints[0][1] =  y;
			currentPoints[0][2] =  z;
			
			currentPoints[1][0] =  x-circumference;
			currentPoints[1][1] =  y;
			currentPoints[1][2] =  z-circumference;
			
			currentPoints[2][0] =  x-circumference;
			currentPoints[2][1] =  y;
			currentPoints[2][2] =  z-circumference*2;
			
			currentPoints[3][0] =  x;
			currentPoints[3][1] =  y;
			currentPoints[3][2] =  z-circumference*3;
	
			currentPoints[4][0] =  x+circumference;
			currentPoints[4][1] =  y;
			currentPoints[4][2] =  z-circumference*3;
			
			currentPoints[5][0] =  x+circumference*2;
			currentPoints[5][1] =  y;
			currentPoints[5][2] =  z-circumference*2;
	
			currentPoints[6][0] =  x+circumference*2;
			currentPoints[6][1] =  y;
			currentPoints[6][2] =  z-circumference;

			currentPoints[7][0] =  x+circumference;
			currentPoints[7][1] =  y;
			currentPoints[7][2] =  z;
		}
		

		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();
		
		
		if (parentID.equals("DorsalInterosseiMuscle:01")) 
		{	
			int nMaxSegs = 6;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
				
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
		     
				if (numSegs==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10); 
				}
				else if (numSegs==1){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10); 
				}
				else if (numSegs==2){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);  
				}
				else if (numSegs==3){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10); 
				}
				else if (numSegs==4){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);    
				}	
				else if (numSegs==5){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);    
				}	
				else if (numSegs==6){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);    
				}	
				else if (numSegs==7){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);    
				}		
				else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
				}
	    
				// Add the instruction into the instruction set
				bioMightInstructSet.addElement(bioInstruct);
			}
		
		}
		else if (parentID.equals("DorsalInterosseiMuscle:02")) 
		{		
			int nMaxSegs = 6;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
			
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
		 
	    		if (numSegs==0){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
	    		}
	       		else if (numSegs==1){
	       			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
	           	}
	    		else if (numSegs==2){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
	    		}
	    		else if (numSegs==3){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
	    		}
	    		else if (numSegs==4){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10); 	   
	        	}
	    		else if (numSegs==5){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10); 	   
	        	}
	    		else if (numSegs==6){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10); 	   
	        	}
	    		else if (numSegs==7){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10); 	   
	        	}
	    		else {
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
	    		}
		    
	    		// Add the instruction into the instruction set
	    		bioMightInstructSet.addElement(bioInstruct);
			}	

		}	
		
		
		//Generate the DorsalInterossei
		//DBUtils.generateFacedComponents(Constants.QUADRANGLE, startID, componentType, componentName, componentID, currentPoints, bioMightInstructSet);
		//System.out.println("Generated the Rows for DorsalInterosseiMuscleTissue: " + componentID + "   parent: " + parentID + "   " + componentType);

		return returnCode;
	}
   	
   	/***************************************************************************************
	 * GENERATE EXTENSOR DIGITORUM BREVIS MUSCLES
	 * 
	 * This generates the Extensor Digitorum Brevis Muscles  
	 * 
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/
    
   	public int generateExtensorDigitorumBrevisMuscle(String startID, String componentType, String componentName, String componentID, String parentID, double[][] currentPoints) 
	throws DataException, DataSecurityException
  	{	
		System.out.println("Generate ExtensorDigitorumBrevisMuscle");
		
		int bodyID = 1;
		int projectID = 1;
		String vertices = "";
		
		ArrayList mySqlList= new ArrayList();
		int returnCode = 0;
	
		
		// We can generate the ExtensorDigitorumBrevis Muscle
		if (currentPoints == null )
		{
			double circumference = 0.125;
	    	
			double x =  -8.0;
    		double y =  -10.0;
    		double z =  -1.0;
			
			// Create a equilateral octogon	
			currentPoints[0][0] =  x;
			currentPoints[0][1] =  y;
			currentPoints[0][2] =  z;
			
			currentPoints[1][0] =  x-circumference;
			currentPoints[1][1] =  y;
			currentPoints[1][2] =  z-circumference;
			
			currentPoints[2][0] =  x-circumference;
			currentPoints[2][1] =  y;
			currentPoints[2][2] =  z-circumference*2;
			
			currentPoints[3][0] =  x;
			currentPoints[3][1] =  y;
			currentPoints[3][2] =  z-circumference*3;
	
			currentPoints[4][0] =  x+circumference;
			currentPoints[4][1] =  y;
			currentPoints[4][2] =  z-circumference*3;
			
			currentPoints[5][0] =  x+circumference*2;
			currentPoints[5][1] =  y;
			currentPoints[5][2] =  z-circumference*2;
	
			currentPoints[6][0] =  x+circumference*2;
			currentPoints[6][1] =  y;
			currentPoints[6][2] =  z-circumference;

			currentPoints[7][0] =  x+circumference;
			currentPoints[7][1] =  y;
			currentPoints[7][2] =  z;
		}
		

		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();
		
		
		if (parentID.equals("ExtensorDigitorumBrevisMuscle:01")) 
		{	
			int nMaxSegs = 6;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
				
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
		     
				if (numSegs==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10); 
				}
				else if (numSegs==1){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10); 
				}
				else if (numSegs==2){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);  
				}
				else if (numSegs==3){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10); 
				}
				else if (numSegs==4){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);    
				}	
				else if (numSegs==5){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);    
				}	
				else if (numSegs==6){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);    
				}	
				else if (numSegs==7){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);    
				}		
				else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
				}
	    
				// Add the instruction into the instruction set
				bioMightInstructSet.addElement(bioInstruct);
			}
		
		}
		else if (parentID.equals("ExtensorDigitorumBrevisMuscle:02")) 
		{		
			int nMaxSegs = 6;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
			
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
		 
	    		if (numSegs==0){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
	    		}
	       		else if (numSegs==1){
	       			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
	           	}
	    		else if (numSegs==2){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
	    		}
	    		else if (numSegs==3){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
	    		}
	    		else if (numSegs==4){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10); 	   
	        	}
	    		else if (numSegs==5){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10); 	   
	        	}
	    		else if (numSegs==6){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10); 	   
	        	}
	    		else if (numSegs==7){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10); 	   
	        	}
	    		else {
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
	    		}
		    
	    		// Add the instruction into the instruction set
	    		bioMightInstructSet.addElement(bioInstruct);
			}	

		}	
		
		
		//Generate the ExtensorDigitorumBrevis
		//DBUtils.generateFacedComponents(Constants.QUADRANGLE, startID, componentType, componentName, componentID, currentPoints, bioMightInstructSet);
		//System.out.println("Generated the Rows for ExtensorDigitorumBrevisMuscleTissue: " + componentID + "   parent: " + parentID + "   " + componentType);

		return returnCode;
	}
   	
	/***************************************************************************************
	 * GENERATE EXTENSOR HALLUCIS BREVIS MUSCLES
	 * 
	 * This generates the Extensor Hallucis Brevis Muscles  
	 * 
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/
    
   	public int generateExtensorHallucisBrevisMuscle(String startID, String componentType, String componentName, String componentID, String parentID, double[][] currentPoints) 
	throws DataException, DataSecurityException
  	{	
		System.out.println("Generate ExtensorHallucisBrevisMuscle");
		
		int bodyID = 1;
		int projectID = 1;
		String vertices = "";
		
		ArrayList mySqlList= new ArrayList();
		int returnCode = 0;
	
		
		// We can generate the ExtensorHallucisBrevis Muscle
		if (currentPoints == null )
		{
			double circumference = 0.125;
	    	
			double x =  -8.0;
    		double y =  -10.0;
    		double z =  -1.0;
			
			// Create a equilateral octogon	
			currentPoints[0][0] =  x;
			currentPoints[0][1] =  y;
			currentPoints[0][2] =  z;
			
			currentPoints[1][0] =  x-circumference;
			currentPoints[1][1] =  y;
			currentPoints[1][2] =  z-circumference;
			
			currentPoints[2][0] =  x-circumference;
			currentPoints[2][1] =  y;
			currentPoints[2][2] =  z-circumference*2;
			
			currentPoints[3][0] =  x;
			currentPoints[3][1] =  y;
			currentPoints[3][2] =  z-circumference*3;
	
			currentPoints[4][0] =  x+circumference;
			currentPoints[4][1] =  y;
			currentPoints[4][2] =  z-circumference*3;
			
			currentPoints[5][0] =  x+circumference*2;
			currentPoints[5][1] =  y;
			currentPoints[5][2] =  z-circumference*2;
	
			currentPoints[6][0] =  x+circumference*2;
			currentPoints[6][1] =  y;
			currentPoints[6][2] =  z-circumference;

			currentPoints[7][0] =  x+circumference;
			currentPoints[7][1] =  y;
			currentPoints[7][2] =  z;
		}
		

		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();
		
		
		if (parentID.equals("ExtensorHallucisBrevisMuscle:01")) 
		{	
			int nMaxSegs = 6;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
				
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
		     
				if (numSegs==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10); 
				}
				else if (numSegs==1){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10); 
				}
				else if (numSegs==2){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);  
				}
				else if (numSegs==3){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10); 
				}
				else if (numSegs==4){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);    
				}	
				else if (numSegs==5){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);    
				}	
				else if (numSegs==6){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);    
				}	
				else if (numSegs==7){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);    
				}		
				else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
				}
	    
				// Add the instruction into the instruction set
				bioMightInstructSet.addElement(bioInstruct);
			}
		
		}
		else if (parentID.equals("ExtensorHallucisBrevisMuscle:02")) 
		{		
			int nMaxSegs = 6;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
			
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
		 
	    		if (numSegs==0){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
	    		}
	       		else if (numSegs==1){
	       			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
	           	}
	    		else if (numSegs==2){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
	    		}
	    		else if (numSegs==3){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
	    		}
	    		else if (numSegs==4){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10); 	   
	        	}
	    		else if (numSegs==5){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10); 	   
	        	}
	    		else if (numSegs==6){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10); 	   
	        	}
	    		else if (numSegs==7){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10); 	   
	        	}
	    		else {
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
	    		}
		    
	    		// Add the instruction into the instruction set
	    		bioMightInstructSet.addElement(bioInstruct);
			}	

		}	
		
		
		//Generate the ExtensorHallucisBrevis
		//DBUtils.generateFacedComponents(Constants.QUADRANGLE, startID, componentType, componentName, componentID, currentPoints, bioMightInstructSet);
		//System.out.println("Generated the Rows for ExtensorHallucisBrevisMuscleTissue: " + componentID + "   parent: " + parentID + "   " + componentType);

		return returnCode;
	}
   	
	/***************************************************************************************
	 * GENERATE FLEXOR DIGITI MINIMI BREVIS MUSCLES
	 * 
	 * This generates the Flexor Digiti Minimi Brevis Muscles  
	 * 
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/
    
   	public int generateFlexorDigitiMinimiBrevisMuscle(String startID, String componentType, String componentName, String componentID, String parentID, double[][] currentPoints) 
	throws DataException, DataSecurityException
  	{	
		System.out.println("Generate FlexorDigitiMinimiBrevisMuscle");
		
		int bodyID = 1;
		int projectID = 1;
		String vertices = "";
		
		ArrayList mySqlList= new ArrayList();
		int returnCode = 0;
	
		
		// We can generate the FlexorDigitiMinimiBrevis Muscle
		if (currentPoints == null )
		{
			double circumference = 0.125;
	    	
			double x =  -8.0;
    		double y =  -10.0;
    		double z =  -1.0;
			
			// Create a equilateral octogon	
			currentPoints[0][0] =  x;
			currentPoints[0][1] =  y;
			currentPoints[0][2] =  z;
			
			currentPoints[1][0] =  x-circumference;
			currentPoints[1][1] =  y;
			currentPoints[1][2] =  z-circumference;
			
			currentPoints[2][0] =  x-circumference;
			currentPoints[2][1] =  y;
			currentPoints[2][2] =  z-circumference*2;
			
			currentPoints[3][0] =  x;
			currentPoints[3][1] =  y;
			currentPoints[3][2] =  z-circumference*3;
	
			currentPoints[4][0] =  x+circumference;
			currentPoints[4][1] =  y;
			currentPoints[4][2] =  z-circumference*3;
			
			currentPoints[5][0] =  x+circumference*2;
			currentPoints[5][1] =  y;
			currentPoints[5][2] =  z-circumference*2;
	
			currentPoints[6][0] =  x+circumference*2;
			currentPoints[6][1] =  y;
			currentPoints[6][2] =  z-circumference;

			currentPoints[7][0] =  x+circumference;
			currentPoints[7][1] =  y;
			currentPoints[7][2] =  z;
		}
		

		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();
		
		
		if (parentID.equals("FlexorDigitiMinimiBrevisMuscle:01")) 
		{	
			int nMaxSegs = 6;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
				
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
		     
				if (numSegs==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10); 
				}
				else if (numSegs==1){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10); 
				}
				else if (numSegs==2){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);  
				}
				else if (numSegs==3){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10); 
				}
				else if (numSegs==4){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);    
				}	
				else if (numSegs==5){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);    
				}	
				else if (numSegs==6){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);    
				}	
				else if (numSegs==7){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);    
				}		
				else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
				}
	    
				// Add the instruction into the instruction set
				bioMightInstructSet.addElement(bioInstruct);
			}
		
		}
		else if (parentID.equals("FlexorDigitiMinimiBrevisMuscle:02")) 
		{		
			int nMaxSegs = 6;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
			
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
		 
	    		if (numSegs==0){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
	    		}
	       		else if (numSegs==1){
	       			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
	           	}
	    		else if (numSegs==2){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
	    		}
	    		else if (numSegs==3){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
	    		}
	    		else if (numSegs==4){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10); 	   
	        	}
	    		else if (numSegs==5){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10); 	   
	        	}
	    		else if (numSegs==6){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10); 	   
	        	}
	    		else if (numSegs==7){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10); 	   
	        	}
	    		else {
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
	    		}
		    
	    		// Add the instruction into the instruction set
	    		bioMightInstructSet.addElement(bioInstruct);
			}	

		}	
		
		
		//Generate the FlexorDigitiMinimiBrevis
		//DBUtils.generateFacedComponents(Constants.QUADRANGLE, startID, componentType, componentName, componentID, currentPoints, bioMightInstructSet);
		//System.out.println("Generated the Rows for FlexorDigitiMinimiBrevisMuscleTissue: " + componentID + "   parent: " + parentID + "   " + componentType);

		return returnCode;
	}
   	
	/***************************************************************************************
	 * GENERATE FLEXOR DIGITORUM BREVIS MUSCLES
	 * 
	 * This generates the Flexor Digitorum Brevis Muscles  
	 * 
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/
    
   	public int generateFlexorDigitorumBrevisMuscle(String startID, String componentType, String componentName, String componentID, String parentID, double[][] currentPoints) 
	throws DataException, DataSecurityException
  	{	
		System.out.println("Generate FlexorDigitorumBrevisMuscle");
		
		int bodyID = 1;
		int projectID = 1;
		String vertices = "";
		
		ArrayList mySqlList= new ArrayList();
		int returnCode = 0;
	
		
		// We can generate the FlexorDigitorumBrevis Muscle
		if (currentPoints == null )
		{
			double circumference = 0.125;
	    	
			double x =  -8.0;
    		double y =  -10.0;
    		double z =  -1.0;
			
			// Create a equilateral octogon	
			currentPoints[0][0] =  x;
			currentPoints[0][1] =  y;
			currentPoints[0][2] =  z;
			
			currentPoints[1][0] =  x-circumference;
			currentPoints[1][1] =  y;
			currentPoints[1][2] =  z-circumference;
			
			currentPoints[2][0] =  x-circumference;
			currentPoints[2][1] =  y;
			currentPoints[2][2] =  z-circumference*2;
			
			currentPoints[3][0] =  x;
			currentPoints[3][1] =  y;
			currentPoints[3][2] =  z-circumference*3;
	
			currentPoints[4][0] =  x+circumference;
			currentPoints[4][1] =  y;
			currentPoints[4][2] =  z-circumference*3;
			
			currentPoints[5][0] =  x+circumference*2;
			currentPoints[5][1] =  y;
			currentPoints[5][2] =  z-circumference*2;
	
			currentPoints[6][0] =  x+circumference*2;
			currentPoints[6][1] =  y;
			currentPoints[6][2] =  z-circumference;

			currentPoints[7][0] =  x+circumference;
			currentPoints[7][1] =  y;
			currentPoints[7][2] =  z;
		}
		

		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();
		
		
		if (parentID.equals("FlexorDigitorumBrevisMuscle:01")) 
		{	
			int nMaxSegs = 6;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
				
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
		     
				if (numSegs==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10); 
				}
				else if (numSegs==1){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10); 
				}
				else if (numSegs==2){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);  
				}
				else if (numSegs==3){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10); 
				}
				else if (numSegs==4){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);    
				}	
				else if (numSegs==5){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);    
				}	
				else if (numSegs==6){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);    
				}	
				else if (numSegs==7){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);    
				}		
				else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
				}
	    
				// Add the instruction into the instruction set
				bioMightInstructSet.addElement(bioInstruct);
			}
		
		}
		else if (parentID.equals("FlexorDigitorumBrevisMuscle:02")) 
		{		
			int nMaxSegs = 6;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
			
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
		 
	    		if (numSegs==0){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
	    		}
	       		else if (numSegs==1){
	       			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
	           	}
	    		else if (numSegs==2){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
	    		}
	    		else if (numSegs==3){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
	    		}
	    		else if (numSegs==4){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10); 	   
	        	}
	    		else if (numSegs==5){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10); 	   
	        	}
	    		else if (numSegs==6){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10); 	   
	        	}
	    		else if (numSegs==7){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10); 	   
	        	}
	    		else {
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
	    		}
		    
	    		// Add the instruction into the instruction set
	    		bioMightInstructSet.addElement(bioInstruct);
			}	

		}	
		
		
		//Generate the FlexorDigitorumBrevis
		//DBUtils.generateFacedComponents(Constants.QUADRANGLE, startID, componentType, componentName, componentID, currentPoints, bioMightInstructSet);
		//System.out.println("Generated the Rows for FlexorDigitorumBrevisMuscleTissue: " + componentID + "   parent: " + parentID + "   " + componentType);

		return returnCode;
	}
   	
	/***************************************************************************************
	 * GENERATE FLEXOR HALLUCIS BREVIS MUSCLES
	 * 
	 * This generates the Flexor Hallucis Brevis Muscles  
	 * 
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/
    
   	public int generateFlexorHallucisBrevisMuscle(String startID, String componentType, String componentName, String componentID, String parentID, double[][] currentPoints) 
	throws DataException, DataSecurityException
  	{	
		System.out.println("Generate FlexorHallucisBrevisMuscle");
		
		int bodyID = 1;
		int projectID = 1;
		String vertices = "";
		
		ArrayList mySqlList= new ArrayList();
		int returnCode = 0;
	
		
		// We can generate the FlexorHallucisBrevis Muscle
		if (currentPoints == null )
		{
			double circumference = 0.125;
	    	
			double x =  -8.0;
    		double y =  -10.0;
    		double z =  -1.0;
			
			// Create a equilateral octogon	
			currentPoints[0][0] =  x;
			currentPoints[0][1] =  y;
			currentPoints[0][2] =  z;
			
			currentPoints[1][0] =  x-circumference;
			currentPoints[1][1] =  y;
			currentPoints[1][2] =  z-circumference;
			
			currentPoints[2][0] =  x-circumference;
			currentPoints[2][1] =  y;
			currentPoints[2][2] =  z-circumference*2;
			
			currentPoints[3][0] =  x;
			currentPoints[3][1] =  y;
			currentPoints[3][2] =  z-circumference*3;
	
			currentPoints[4][0] =  x+circumference;
			currentPoints[4][1] =  y;
			currentPoints[4][2] =  z-circumference*3;
			
			currentPoints[5][0] =  x+circumference*2;
			currentPoints[5][1] =  y;
			currentPoints[5][2] =  z-circumference*2;
	
			currentPoints[6][0] =  x+circumference*2;
			currentPoints[6][1] =  y;
			currentPoints[6][2] =  z-circumference;

			currentPoints[7][0] =  x+circumference;
			currentPoints[7][1] =  y;
			currentPoints[7][2] =  z;
		}
		

		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();
		
		
		if (parentID.equals("FlexorHallucisBrevisMuscle:01")) 
		{	
			int nMaxSegs = 6;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
				
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
		     
				if (numSegs==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10); 
				}
				else if (numSegs==1){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10); 
				}
				else if (numSegs==2){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);  
				}
				else if (numSegs==3){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10); 
				}
				else if (numSegs==4){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);    
				}	
				else if (numSegs==5){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);    
				}	
				else if (numSegs==6){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);    
				}	
				else if (numSegs==7){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);    
				}		
				else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
				}
	    
				// Add the instruction into the instruction set
				bioMightInstructSet.addElement(bioInstruct);
			}
		
		}
		else if (parentID.equals("FlexorHallucisBrevisMuscle:02")) 
		{		
			int nMaxSegs = 6;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
			
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
		 
	    		if (numSegs==0){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
	    		}
	       		else if (numSegs==1){
	       			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
	           	}
	    		else if (numSegs==2){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
	    		}
	    		else if (numSegs==3){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
	    		}
	    		else if (numSegs==4){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10); 	   
	        	}
	    		else if (numSegs==5){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10); 	   
	        	}
	    		else if (numSegs==6){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10); 	   
	        	}
	    		else if (numSegs==7){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10); 	   
	        	}
	    		else {
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
	    		}
		    
	    		// Add the instruction into the instruction set
	    		bioMightInstructSet.addElement(bioInstruct);
			}	

		}	
		
		
		//Generate the FlexorHallucisBrevis
		//DBUtils.generateFacedComponents(Constants.QUADRANGLE, startID, componentType, componentName, componentID, currentPoints, bioMightInstructSet);
		//System.out.println("Generated the Rows for FlexorHallucisBrevisMuscleTissue: " + componentID + "   parent: " + parentID + "   " + componentType);

		return returnCode;
	}
   	
	/***************************************************************************************
	 * GENERATE INTEROSSEL MUSCLES
	 * 
	 * This generates the Interossel Muscles  
	 * 
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/
    
   	public int generateInterosselMuscle(String startID, String componentType, String componentName, String componentID, String parentID, double[][] currentPoints) 
	throws DataException, DataSecurityException
  	{	
		System.out.println("Generate InterosselMuscle");
		
		int bodyID = 1;
		int projectID = 1;
		String vertices = "";
		
		ArrayList mySqlList= new ArrayList();
		int returnCode = 0;
	
		
		// We can generate the Interossel Muscle
		if (currentPoints == null )
		{
			double circumference = 0.125;
	    	
			double x =  -8.0;
    		double y =  -10.0;
    		double z =  -1.0;
			
			// Create a equilateral octogon	
			currentPoints[0][0] =  x;
			currentPoints[0][1] =  y;
			currentPoints[0][2] =  z;
			
			currentPoints[1][0] =  x-circumference;
			currentPoints[1][1] =  y;
			currentPoints[1][2] =  z-circumference;
			
			currentPoints[2][0] =  x-circumference;
			currentPoints[2][1] =  y;
			currentPoints[2][2] =  z-circumference*2;
			
			currentPoints[3][0] =  x;
			currentPoints[3][1] =  y;
			currentPoints[3][2] =  z-circumference*3;
	
			currentPoints[4][0] =  x+circumference;
			currentPoints[4][1] =  y;
			currentPoints[4][2] =  z-circumference*3;
			
			currentPoints[5][0] =  x+circumference*2;
			currentPoints[5][1] =  y;
			currentPoints[5][2] =  z-circumference*2;
	
			currentPoints[6][0] =  x+circumference*2;
			currentPoints[6][1] =  y;
			currentPoints[6][2] =  z-circumference;

			currentPoints[7][0] =  x+circumference;
			currentPoints[7][1] =  y;
			currentPoints[7][2] =  z;
		}
		

		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();
		
		
		if (parentID.equals("InterosselMuscle:01")) 
		{	
			int nMaxSegs = 6;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
				
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
		     
				if (numSegs==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10); 
				}
				else if (numSegs==1){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10); 
				}
				else if (numSegs==2){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);  
				}
				else if (numSegs==3){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10); 
				}
				else if (numSegs==4){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);    
				}	
				else if (numSegs==5){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);    
				}	
				else if (numSegs==6){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);    
				}	
				else if (numSegs==7){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);    
				}		
				else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
				}
	    
				// Add the instruction into the instruction set
				bioMightInstructSet.addElement(bioInstruct);
			}
		
		}
		else if (parentID.equals("InterosselMuscle:02")) 
		{		
			int nMaxSegs = 6;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
			
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
		 
	    		if (numSegs==0){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
	    		}
	       		else if (numSegs==1){
	       			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
	           	}
	    		else if (numSegs==2){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
	    		}
	    		else if (numSegs==3){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
	    		}
	    		else if (numSegs==4){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10); 	   
	        	}
	    		else if (numSegs==5){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10); 	   
	        	}
	    		else if (numSegs==6){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10); 	   
	        	}
	    		else if (numSegs==7){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10); 	   
	        	}
	    		else {
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
	    		}
		    
	    		// Add the instruction into the instruction set
	    		bioMightInstructSet.addElement(bioInstruct);
			}	

		}	
		
		
		//Generate the Interossel
		//DBUtils.generateFacedComponents(Constants.QUADRANGLE, startID, componentType, componentName, componentID, currentPoints, bioMightInstructSet);
		//System.out.println("Generated the Rows for InterosselMuscleTissue: " + componentID + "   parent: " + parentID + "   " + componentType);

		return returnCode;
	}
   	
	/***************************************************************************************
	 * GENERATE LUMBRICLES MUSCLES
	 * 
	 * This generates the Lumbricles Muscles  
	 * 
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/
    
   	public int generateLumbriclesMuscle(String startID, String componentType, String componentName, String componentID, String parentID, double[][] currentPoints) 
	throws DataException, DataSecurityException
  	{	
		System.out.println("Generate LumbriclesMuscle");
		
		int bodyID = 1;
		int projectID = 1;
		String vertices = "";
		
		ArrayList mySqlList= new ArrayList();
		int returnCode = 0;
	
		
		// We can generate the Lumbricles Muscle
		if (currentPoints == null )
		{
			double circumference = 0.125;
	    	
			double x =  -8.0;
    		double y =  -10.0;
    		double z =  -1.0;
			
			// Create a equilateral octogon	
			currentPoints[0][0] =  x;
			currentPoints[0][1] =  y;
			currentPoints[0][2] =  z;
			
			currentPoints[1][0] =  x-circumference;
			currentPoints[1][1] =  y;
			currentPoints[1][2] =  z-circumference;
			
			currentPoints[2][0] =  x-circumference;
			currentPoints[2][1] =  y;
			currentPoints[2][2] =  z-circumference*2;
			
			currentPoints[3][0] =  x;
			currentPoints[3][1] =  y;
			currentPoints[3][2] =  z-circumference*3;
	
			currentPoints[4][0] =  x+circumference;
			currentPoints[4][1] =  y;
			currentPoints[4][2] =  z-circumference*3;
			
			currentPoints[5][0] =  x+circumference*2;
			currentPoints[5][1] =  y;
			currentPoints[5][2] =  z-circumference*2;
	
			currentPoints[6][0] =  x+circumference*2;
			currentPoints[6][1] =  y;
			currentPoints[6][2] =  z-circumference;

			currentPoints[7][0] =  x+circumference;
			currentPoints[7][1] =  y;
			currentPoints[7][2] =  z;
		}
		

		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();
		
		
		if (parentID.equals("LumbriclesMuscle:01")) 
		{	
			int nMaxSegs = 6;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
				
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
		     
				if (numSegs==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10); 
				}
				else if (numSegs==1){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10); 
				}
				else if (numSegs==2){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);  
				}
				else if (numSegs==3){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10); 
				}
				else if (numSegs==4){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);    
				}	
				else if (numSegs==5){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);    
				}	
				else if (numSegs==6){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);    
				}	
				else if (numSegs==7){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);    
				}		
				else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
				}
	    
				// Add the instruction into the instruction set
				bioMightInstructSet.addElement(bioInstruct);
			}
		
		}
		else if (parentID.equals("LumbriclesMuscle:02")) 
		{		
			int nMaxSegs = 6;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
			
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
		 
	    		if (numSegs==0){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
	    		}
	       		else if (numSegs==1){
	       			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
	           	}
	    		else if (numSegs==2){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
	    		}
	    		else if (numSegs==3){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
	    		}
	    		else if (numSegs==4){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10); 	   
	        	}
	    		else if (numSegs==5){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10); 	   
	        	}
	    		else if (numSegs==6){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10); 	   
	        	}
	    		else if (numSegs==7){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10); 	   
	        	}
	    		else {
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
	    		}
		    
	    		// Add the instruction into the instruction set
	    		bioMightInstructSet.addElement(bioInstruct);
			}	

		}	
		
		
		//Generate the Lumbricles
		//DBUtils.generateFacedComponents(Constants.QUADRANGLE, startID, componentType, componentName, componentID, currentPoints, bioMightInstructSet);
		//System.out.println("Generated the Rows for LumbriclesMuscleTissue: " + componentID + "   parent: " + parentID + "   " + componentType);

		return returnCode;
	}
   	
	/***************************************************************************************
	 * GENERATE PLANTAR INTEROSSEI MUSCLES
	 * 
	 * This generates the Plantar Interossei Muscles  
	 * 
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/
    
   	public int generatePlantarInterosseiMuscle(String startID, String componentType, String componentName, String componentID, String parentID, double[][] currentPoints) 
	throws DataException, DataSecurityException
  	{	
		System.out.println("Generate PlantarInterosseiMuscle");
		
		int bodyID = 1;
		int projectID = 1;
		String vertices = "";
		
		ArrayList mySqlList= new ArrayList();
		int returnCode = 0;
	
		
		// We can generate the PlantarInterossei Muscle
		if (currentPoints == null )
		{
			double circumference = 0.125;
	    	
			double x =  -8.0;
    		double y =  -10.0;
    		double z =  -1.0;
			
			// Create a equilateral octogon	
			currentPoints[0][0] =  x;
			currentPoints[0][1] =  y;
			currentPoints[0][2] =  z;
			
			currentPoints[1][0] =  x-circumference;
			currentPoints[1][1] =  y;
			currentPoints[1][2] =  z-circumference;
			
			currentPoints[2][0] =  x-circumference;
			currentPoints[2][1] =  y;
			currentPoints[2][2] =  z-circumference*2;
			
			currentPoints[3][0] =  x;
			currentPoints[3][1] =  y;
			currentPoints[3][2] =  z-circumference*3;
	
			currentPoints[4][0] =  x+circumference;
			currentPoints[4][1] =  y;
			currentPoints[4][2] =  z-circumference*3;
			
			currentPoints[5][0] =  x+circumference*2;
			currentPoints[5][1] =  y;
			currentPoints[5][2] =  z-circumference*2;
	
			currentPoints[6][0] =  x+circumference*2;
			currentPoints[6][1] =  y;
			currentPoints[6][2] =  z-circumference;

			currentPoints[7][0] =  x+circumference;
			currentPoints[7][1] =  y;
			currentPoints[7][2] =  z;
		}
		

		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();
		
		
		if (parentID.equals("PlantarInterosseiMuscle:01")) 
		{	
			int nMaxSegs = 6;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
				
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
		     
				if (numSegs==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10); 
				}
				else if (numSegs==1){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10); 
				}
				else if (numSegs==2){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);  
				}
				else if (numSegs==3){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10); 
				}
				else if (numSegs==4){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);    
				}	
				else if (numSegs==5){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);    
				}	
				else if (numSegs==6){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);    
				}	
				else if (numSegs==7){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);    
				}		
				else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
				}
	    
				// Add the instruction into the instruction set
				bioMightInstructSet.addElement(bioInstruct);
			}
		
		}
		else if (parentID.equals("PlantarInterosseiMuscle:02")) 
		{		
			int nMaxSegs = 6;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
			
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
		 
	    		if (numSegs==0){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
	    		}
	       		else if (numSegs==1){
	       			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
	           	}
	    		else if (numSegs==2){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
	    		}
	    		else if (numSegs==3){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
	    		}
	    		else if (numSegs==4){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10); 	   
	        	}
	    		else if (numSegs==5){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10); 	   
	        	}
	    		else if (numSegs==6){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10); 	   
	        	}
	    		else if (numSegs==7){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10); 	   
	        	}
	    		else {
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
	    		}
		    
	    		// Add the instruction into the instruction set
	    		bioMightInstructSet.addElement(bioInstruct);
			}	

		}	
		
		
		//Generate the PlantarInterossei
		//DBUtils.generateFacedComponents(Constants.QUADRANGLE, startID, componentType, componentName, componentID, currentPoints, bioMightInstructSet);
		//System.out.println("Generated the Rows for PlantarInterosseiMuscleTissue: " + componentID + "   parent: " + parentID + "   " + componentType);

		return returnCode;
	}
   	
	/***************************************************************************************
	 * GENERATE QUADRATUS PLANTAE MUSCLES
	 * 
	 * This generates the Quadratus Plantae Muscles  
	 * 
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/
    
   	public int generateQuadratusPlantaeMuscle(String startID, String componentType, String componentName, String componentID, String parentID, double[][] currentPoints) 
	throws DataException, DataSecurityException
  	{	
		System.out.println("Generate QuadratusPlantaeMuscle");
		
		int bodyID = 1;
		int projectID = 1;
		String vertices = "";
		
		ArrayList mySqlList= new ArrayList();
		int returnCode = 0;
	
		
		// We can generate the QuadratusPlantae Muscle
		if (currentPoints == null )
		{
			double circumference = 0.125;
	    	
			double x =  -8.0;
    		double y =  -10.0;
    		double z =  -1.0;
			
			// Create a equilateral octogon	
			currentPoints[0][0] =  x;
			currentPoints[0][1] =  y;
			currentPoints[0][2] =  z;
			
			currentPoints[1][0] =  x-circumference;
			currentPoints[1][1] =  y;
			currentPoints[1][2] =  z-circumference;
			
			currentPoints[2][0] =  x-circumference;
			currentPoints[2][1] =  y;
			currentPoints[2][2] =  z-circumference*2;
			
			currentPoints[3][0] =  x;
			currentPoints[3][1] =  y;
			currentPoints[3][2] =  z-circumference*3;
	
			currentPoints[4][0] =  x+circumference;
			currentPoints[4][1] =  y;
			currentPoints[4][2] =  z-circumference*3;
			
			currentPoints[5][0] =  x+circumference*2;
			currentPoints[5][1] =  y;
			currentPoints[5][2] =  z-circumference*2;
	
			currentPoints[6][0] =  x+circumference*2;
			currentPoints[6][1] =  y;
			currentPoints[6][2] =  z-circumference;

			currentPoints[7][0] =  x+circumference;
			currentPoints[7][1] =  y;
			currentPoints[7][2] =  z;
		}
		

		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();
		
		
		if (parentID.equals("QuadratusPlantaeMuscle:01")) 
		{	
			int nMaxSegs = 6;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
				
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
		     
				if (numSegs==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10); 
				}
				else if (numSegs==1){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10); 
				}
				else if (numSegs==2){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);  
				}
				else if (numSegs==3){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10); 
				}
				else if (numSegs==4){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);    
				}	
				else if (numSegs==5){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);    
				}	
				else if (numSegs==6){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);    
				}	
				else if (numSegs==7){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);    
				}		
				else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
				}
	    
				// Add the instruction into the instruction set
				bioMightInstructSet.addElement(bioInstruct);
			}
		
		}
		else if (parentID.equals("QuadratusPlantaeMuscle:02")) 
		{		
			int nMaxSegs = 6;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
			
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
		 
	    		if (numSegs==0){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
	    		}
	       		else if (numSegs==1){
	       			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
	           	}
	    		else if (numSegs==2){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
	    		}
	    		else if (numSegs==3){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
	    		}
	    		else if (numSegs==4){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10); 	   
	        	}
	    		else if (numSegs==5){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10); 	   
	        	}
	    		else if (numSegs==6){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10); 	   
	        	}
	    		else if (numSegs==7){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10); 	   
	        	}
	    		else {
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
	    		}
		    
	    		// Add the instruction into the instruction set
	    		bioMightInstructSet.addElement(bioInstruct);
			}	

		}	
		
		
		//Generate the QuadratusPlantae
		//DBUtils.generateFacedComponents(Constants.QUADRANGLE, startID, componentType, componentName, componentID, currentPoints, bioMightInstructSet);
		//System.out.println("Generated the Rows for QuadratusPlantaeMuscleTissue: " + componentID + "   parent: " + parentID + "   " + componentType);

		return returnCode;
	}
   	
   	/******FOREARM MUSCLES******/
   	
	/***************************************************************************************
	 * GENERATE ANTI BRACHIAL FASCIA MUSCLES
	 * 
	 * This generates the Anti Brachial Fascia Muscles  
	 * 
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/
    
   	public int generateAntiBrachialFasciaMuscle(String startID, String componentType, String componentName, String componentID, String parentID, double[][] currentPoints) 
	throws DataException, DataSecurityException
  	{	
		System.out.println("Generate AntiBrachialFasciaMuscle");
		
		int bodyID = 1;
		int projectID = 1;
		String vertices = "";
		
		ArrayList mySqlList= new ArrayList();
		int returnCode = 0;
	
		
		// We can generate the AntiBrachialFasciae Muscle
		if (currentPoints == null )
		{
			double circumference = 0.125;
	    	
			double x =  -8.0;
    		double y =  -10.0;
    		double z =  -1.0;
			
			// Create a equilateral octogon	
			currentPoints[0][0] =  x;
			currentPoints[0][1] =  y;
			currentPoints[0][2] =  z;
			
			currentPoints[1][0] =  x-circumference;
			currentPoints[1][1] =  y;
			currentPoints[1][2] =  z-circumference;
			
			currentPoints[2][0] =  x-circumference;
			currentPoints[2][1] =  y;
			currentPoints[2][2] =  z-circumference*2;
			
			currentPoints[3][0] =  x;
			currentPoints[3][1] =  y;
			currentPoints[3][2] =  z-circumference*3;
	
			currentPoints[4][0] =  x+circumference;
			currentPoints[4][1] =  y;
			currentPoints[4][2] =  z-circumference*3;
			
			currentPoints[5][0] =  x+circumference*2;
			currentPoints[5][1] =  y;
			currentPoints[5][2] =  z-circumference*2;
	
			currentPoints[6][0] =  x+circumference*2;
			currentPoints[6][1] =  y;
			currentPoints[6][2] =  z-circumference;

			currentPoints[7][0] =  x+circumference;
			currentPoints[7][1] =  y;
			currentPoints[7][2] =  z;
		}
		

		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();
		
		
		if (parentID.equals("AntiBrachialFasciaMuscle:01")) 
		{	
			int nMaxSegs = 6;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
				
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
		     
				if (numSegs==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10); 
				}
				else if (numSegs==1){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10); 
				}
				else if (numSegs==2){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);  
				}
				else if (numSegs==3){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10); 
				}
				else if (numSegs==4){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);    
				}	
				else if (numSegs==5){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);    
				}	
				else if (numSegs==6){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);    
				}	
				else if (numSegs==7){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);    
				}		
				else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
				}
	    
				// Add the instruction into the instruction set
				bioMightInstructSet.addElement(bioInstruct);
			}
		
		}
		else if (parentID.equals("AntiBrachialFasciaMuscle:02")) 
		{		
			int nMaxSegs = 6;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
			
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
		 
	    		if (numSegs==0){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
	    		}
	       		else if (numSegs==1){
	       			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
	           	}
	    		else if (numSegs==2){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
	    		}
	    		else if (numSegs==3){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
	    		}
	    		else if (numSegs==4){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10); 	   
	        	}
	    		else if (numSegs==5){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10); 	   
	        	}
	    		else if (numSegs==6){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10); 	   
	        	}
	    		else if (numSegs==7){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10); 	   
	        	}
	    		else {
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
	    		}
		    
	    		// Add the instruction into the instruction set
	    		bioMightInstructSet.addElement(bioInstruct);
			}	

		}	
		
		
		//Generate the AntiBrachialFascia
		//DBUtils.generateFacedComponents(Constants.QUADRANGLE, startID, componentType, componentName, componentID, currentPoints, bioMightInstructSet);
		//System.out.println("Generated the Rows for AntiBrachialFasciaMuscleTissue: " + componentID + "   parent: " + parentID + "   " + componentType);

		return returnCode;
	}
   	
	/***************************************************************************************
	 * GENERATE FLEXOR CARPI RADIALIS MUSCLES
	 * 
	 * This generates the Flexor Carpi Radialis Muscles  
	 * 
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/
    
   	public int generateFlexorCarpiRadialisMuscle(String startID, String componentType, String componentName, String componentID, String parentID, double[][] currentPoints) 
	throws DataException, DataSecurityException
  	{	
		System.out.println("Generate FlexorCarpiRadialisMuscle");
		
		int bodyID = 1;
		int projectID = 1;
		String vertices = "";
		
		ArrayList mySqlList= new ArrayList();
		int returnCode = 0;
	
		
		// We can generate the FlexorCarpiRadialis Muscle
		if (currentPoints == null )
		{
			double circumference = 0.125;
	    	
			double x =  -8.0;
    		double y =  -10.0;
    		double z =  -1.0;
			
			// Create a equilateral octogon	
			currentPoints[0][0] =  x;
			currentPoints[0][1] =  y;
			currentPoints[0][2] =  z;
			
			currentPoints[1][0] =  x-circumference;
			currentPoints[1][1] =  y;
			currentPoints[1][2] =  z-circumference;
			
			currentPoints[2][0] =  x-circumference;
			currentPoints[2][1] =  y;
			currentPoints[2][2] =  z-circumference*2;
			
			currentPoints[3][0] =  x;
			currentPoints[3][1] =  y;
			currentPoints[3][2] =  z-circumference*3;
	
			currentPoints[4][0] =  x+circumference;
			currentPoints[4][1] =  y;
			currentPoints[4][2] =  z-circumference*3;
			
			currentPoints[5][0] =  x+circumference*2;
			currentPoints[5][1] =  y;
			currentPoints[5][2] =  z-circumference*2;
	
			currentPoints[6][0] =  x+circumference*2;
			currentPoints[6][1] =  y;
			currentPoints[6][2] =  z-circumference;

			currentPoints[7][0] =  x+circumference;
			currentPoints[7][1] =  y;
			currentPoints[7][2] =  z;
		}
		

		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();
		
		
		if (parentID.equals("FlexorCarpiRadialisMuscle:01")) 
		{	
			int nMaxSegs = 6;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
				
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
		     
				if (numSegs==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10); 
				}
				else if (numSegs==1){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10); 
				}
				else if (numSegs==2){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);  
				}
				else if (numSegs==3){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10); 
				}
				else if (numSegs==4){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);    
				}	
				else if (numSegs==5){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);    
				}	
				else if (numSegs==6){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);    
				}	
				else if (numSegs==7){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);    
				}		
				else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
				}
	    
				// Add the instruction into the instruction set
				bioMightInstructSet.addElement(bioInstruct);
			}
		
		}
		else if (parentID.equals("FlexorCarpiRadialisMuscle:02")) 
		{		
			int nMaxSegs = 6;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
			
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
		 
	    		if (numSegs==0){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
	    		}
	       		else if (numSegs==1){
	       			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
	           	}
	    		else if (numSegs==2){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
	    		}
	    		else if (numSegs==3){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
	    		}
	    		else if (numSegs==4){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10); 	   
	        	}
	    		else if (numSegs==5){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10); 	   
	        	}
	    		else if (numSegs==6){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10); 	   
	        	}
	    		else if (numSegs==7){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10); 	   
	        	}
	    		else {
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
	    		}
		    
	    		// Add the instruction into the instruction set
	    		bioMightInstructSet.addElement(bioInstruct);
			}	

		}	
		
		
		//Generate the FlexorCarpiRadialis
		//DBUtils.generateFacedComponents(Constants.QUADRANGLE, startID, componentType, componentName, componentID, currentPoints, bioMightInstructSet);
		//System.out.println("Generated the Rows for FlexorCarpiRadialisMuscleTissue: " + componentID + "   parent: " + parentID + "   " + componentType);

		return returnCode;
	}
   	
	/***************************************************************************************
	 * GENERATE FLEXOR CARPI ULNARIS MUSCLES
	 * 
	 * This generates the Flexor Carpi Ulnaris Muscles  
	 * 
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/
    
   	public int generateFlexorCarpiUlnarisMuscle(String startID, String componentType, String componentName, String componentID, String parentID, double[][] currentPoints) 
	throws DataException, DataSecurityException
  	{	
		System.out.println("Generate FlexorCarpiUlnarisMuscle");
		
		int bodyID = 1;
		int projectID = 1;
		String vertices = "";
		
		ArrayList mySqlList= new ArrayList();
		int returnCode = 0;
	
		
		// We can generate the FlexorCarpiUlnaris Muscle
		if (currentPoints == null )
		{
			double circumference = 0.125;
	    	
			double x =  -8.0;
    		double y =  -10.0;
    		double z =  -1.0;
			
			// Create a equilateral octogon	
			currentPoints[0][0] =  x;
			currentPoints[0][1] =  y;
			currentPoints[0][2] =  z;
			
			currentPoints[1][0] =  x-circumference;
			currentPoints[1][1] =  y;
			currentPoints[1][2] =  z-circumference;
			
			currentPoints[2][0] =  x-circumference;
			currentPoints[2][1] =  y;
			currentPoints[2][2] =  z-circumference*2;
			
			currentPoints[3][0] =  x;
			currentPoints[3][1] =  y;
			currentPoints[3][2] =  z-circumference*3;
	
			currentPoints[4][0] =  x+circumference;
			currentPoints[4][1] =  y;
			currentPoints[4][2] =  z-circumference*3;
			
			currentPoints[5][0] =  x+circumference*2;
			currentPoints[5][1] =  y;
			currentPoints[5][2] =  z-circumference*2;
	
			currentPoints[6][0] =  x+circumference*2;
			currentPoints[6][1] =  y;
			currentPoints[6][2] =  z-circumference;

			currentPoints[7][0] =  x+circumference;
			currentPoints[7][1] =  y;
			currentPoints[7][2] =  z;
		}
		

		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();
		
		
		if (parentID.equals("FlexorCarpiUlnarisMuscle:01")) 
		{	
			int nMaxSegs = 6;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
				
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
		     
				if (numSegs==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10); 
				}
				else if (numSegs==1){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10); 
				}
				else if (numSegs==2){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);  
				}
				else if (numSegs==3){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10); 
				}
				else if (numSegs==4){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);    
				}	
				else if (numSegs==5){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);    
				}	
				else if (numSegs==6){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);    
				}	
				else if (numSegs==7){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);    
				}		
				else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
				}
	    
				// Add the instruction into the instruction set
				bioMightInstructSet.addElement(bioInstruct);
			}
		
		}
		else if (parentID.equals("FlexorCarpiUlnarisMuscle:02")) 
		{		
			int nMaxSegs = 6;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
			
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
		 
	    		if (numSegs==0){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
	    		}
	       		else if (numSegs==1){
	       			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
	           	}
	    		else if (numSegs==2){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
	    		}
	    		else if (numSegs==3){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
	    		}
	    		else if (numSegs==4){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10); 	   
	        	}
	    		else if (numSegs==5){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10); 	   
	        	}
	    		else if (numSegs==6){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10); 	   
	        	}
	    		else if (numSegs==7){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10); 	   
	        	}
	    		else {
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
	    		}
		    
	    		// Add the instruction into the instruction set
	    		bioMightInstructSet.addElement(bioInstruct);
			}	

		}	
		
		
		//Generate the FlexorCarpiUlnaris
		//generateComponentRows(startID, componentType, componentName, componentID, currentPoints, bioMightInstructSet);
		//System.out.println("Generated the Rows for FlexorCarpiUlnarisMuscleTissue: " + componentID + "   parent: " + parentID + "   " + componentType);

		return returnCode;
	}
   	
	/***************************************************************************************
	 * GENERATE FLEXOR DIGITORUM PROFUNDUS MUSCLES
	 * 
	 * This generates the Flexor Digitorum Profundus Muscles  
	 * 
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/
    
   	public int generateFlexorDigitorumProfundusMuscle(String startID, String componentType, String componentName, String componentID, String parentID, double[][] currentPoints) 
	throws DataException, DataSecurityException
  	{	
		System.out.println("Generate FlexorDigitorumProfundusMuscle");
		
		int bodyID = 1;
		int projectID = 1;
		String vertices = "";
		
		ArrayList mySqlList= new ArrayList();
		int returnCode = 0;
	
		
		// We can generate the FlexorDigitorumProfundus Muscle
		if (currentPoints == null )
		{
			double circumference = 0.125;
	    	
			double x =  -8.0;
    		double y =  -10.0;
    		double z =  -1.0;
			
			// Create a equilateral octogon	
			currentPoints[0][0] =  x;
			currentPoints[0][1] =  y;
			currentPoints[0][2] =  z;
			
			currentPoints[1][0] =  x-circumference;
			currentPoints[1][1] =  y;
			currentPoints[1][2] =  z-circumference;
			
			currentPoints[2][0] =  x-circumference;
			currentPoints[2][1] =  y;
			currentPoints[2][2] =  z-circumference*2;
			
			currentPoints[3][0] =  x;
			currentPoints[3][1] =  y;
			currentPoints[3][2] =  z-circumference*3;
	
			currentPoints[4][0] =  x+circumference;
			currentPoints[4][1] =  y;
			currentPoints[4][2] =  z-circumference*3;
			
			currentPoints[5][0] =  x+circumference*2;
			currentPoints[5][1] =  y;
			currentPoints[5][2] =  z-circumference*2;
	
			currentPoints[6][0] =  x+circumference*2;
			currentPoints[6][1] =  y;
			currentPoints[6][2] =  z-circumference;

			currentPoints[7][0] =  x+circumference;
			currentPoints[7][1] =  y;
			currentPoints[7][2] =  z;
		}
		

		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();
		
		
		if (parentID.equals("FlexorDigitorumProfundusMuscle:01")) 
		{	
			int nMaxSegs = 6;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
				
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
		     
				if (numSegs==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10); 
				}
				else if (numSegs==1){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10); 
				}
				else if (numSegs==2){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);  
				}
				else if (numSegs==3){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10); 
				}
				else if (numSegs==4){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);    
				}	
				else if (numSegs==5){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);    
				}	
				else if (numSegs==6){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);    
				}	
				else if (numSegs==7){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);    
				}		
				else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
				}
	    
				// Add the instruction into the instruction set
				bioMightInstructSet.addElement(bioInstruct);
			}
		
		}
		else if (parentID.equals("FlexorDigitorumProfundusMuscle:02")) 
		{		
			int nMaxSegs = 6;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
			
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
		 
	    		if (numSegs==0){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
	    		}
	       		else if (numSegs==1){
	       			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
	           	}
	    		else if (numSegs==2){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
	    		}
	    		else if (numSegs==3){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
	    		}
	    		else if (numSegs==4){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10); 	   
	        	}
	    		else if (numSegs==5){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10); 	   
	        	}
	    		else if (numSegs==6){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10); 	   
	        	}
	    		else if (numSegs==7){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10); 	   
	        	}
	    		else {
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
	    		}
		    
	    		// Add the instruction into the instruction set
	    		bioMightInstructSet.addElement(bioInstruct);
			}	

		}	
		
		
		//Generate the FlexorDigitorumProfundus
		//DBUtils.generateFacedComponents(Constants.QUADRANGLE, startID, componentType, componentName, componentID, currentPoints, bioMightInstructSet);
		//System.out.println("Generated the Rows for FlexorDigitorumProfundusMuscleTissue: " + componentID + "   parent: " + parentID + "   " + componentType);

		return returnCode;
	}
   	
   	
   	
	/***************************************************************************************
	 * GENERATE FLEXOR DIGITORUM SUPERFICIALIS MUSCLES
	 * 
	 * This generates the Flexor Digitorum Superficialis Muscles  
	 * 
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/
    
   	public int generateFlexorDigitorumSuperficialisMuscle(String startID, String componentType, String componentName, String componentID, String parentID, double[][] currentPoints) 
	throws DataException, DataSecurityException
  	{	
		System.out.println("Generate FlexorDigitorumSuperficialisMuscle");
		
		int bodyID = 1;
		int projectID = 1;
		String vertices = "";
		
		ArrayList mySqlList= new ArrayList();
		int returnCode = 0;
	
		
		// We can generate the FlexorDigitorumSuperficialis Muscle
		if (currentPoints == null )
		{
			double circumference = 0.125;
	    	
			double x =  -8.0;
    		double y =  -10.0;
    		double z =  -1.0;
			
			// Create a equilateral octogon	
			currentPoints[0][0] =  x;
			currentPoints[0][1] =  y;
			currentPoints[0][2] =  z;
			
			currentPoints[1][0] =  x-circumference;
			currentPoints[1][1] =  y;
			currentPoints[1][2] =  z-circumference;
			
			currentPoints[2][0] =  x-circumference;
			currentPoints[2][1] =  y;
			currentPoints[2][2] =  z-circumference*2;
			
			currentPoints[3][0] =  x;
			currentPoints[3][1] =  y;
			currentPoints[3][2] =  z-circumference*3;
	
			currentPoints[4][0] =  x+circumference;
			currentPoints[4][1] =  y;
			currentPoints[4][2] =  z-circumference*3;
			
			currentPoints[5][0] =  x+circumference*2;
			currentPoints[5][1] =  y;
			currentPoints[5][2] =  z-circumference*2;
	
			currentPoints[6][0] =  x+circumference*2;
			currentPoints[6][1] =  y;
			currentPoints[6][2] =  z-circumference;

			currentPoints[7][0] =  x+circumference;
			currentPoints[7][1] =  y;
			currentPoints[7][2] =  z;
		}
		

		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();
		
		
		if (parentID.equals("FlexorDigitorumSuperficialisMuscle:01")) 
		{	
			int nMaxSegs = 6;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
				
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
		     
				if (numSegs==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10); 
				}
				else if (numSegs==1){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10); 
				}
				else if (numSegs==2){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);  
				}
				else if (numSegs==3){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10); 
				}
				else if (numSegs==4){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);    
				}	
				else if (numSegs==5){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);    
				}	
				else if (numSegs==6){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);    
				}	
				else if (numSegs==7){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);    
				}		
				else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
				}
	    
				// Add the instruction into the instruction set
				bioMightInstructSet.addElement(bioInstruct);
			}
		
		}
		else if (parentID.equals("FlexorDigitorumSuperficialisMuscle:02")) 
		{		
			int nMaxSegs = 6;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
			
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
		 
	    		if (numSegs==0){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
	    		}
	       		else if (numSegs==1){
	       			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
	           	}
	    		else if (numSegs==2){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
	    		}
	    		else if (numSegs==3){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
	    		}
	    		else if (numSegs==4){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10); 	   
	        	}
	    		else if (numSegs==5){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10); 	   
	        	}
	    		else if (numSegs==6){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10); 	   
	        	}
	    		else if (numSegs==7){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10); 	   
	        	}
	    		else {
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
	    		}
		    
	    		// Add the instruction into the instruction set
	    		bioMightInstructSet.addElement(bioInstruct);
			}	

		}	
		
		
		//Generate the FlexorDigitorumSuperficialis
		//DBUtils.generateFacedComponents(Constants.QUADRANGLE, startID, componentType, componentName, componentID, currentPoints, bioMightInstructSet);
		//System.out.println("Generated the Rows for FlexorDigitorumSuperficialisMuscleTissue: " + componentID + "   parent: " + parentID + "   " + componentType);

		return returnCode;
	}
   	
   	
   	/***************************************************************************************
	 * GENERATE ADDUCTOR BREVIS MUSCLES
	 * 
	 * This generates the AdductorBrevisMuscle   
	 * 
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/
   	
 	public int generateAdductorBrevisMuscle(String startID, String componentType, String componentName, String componentID, String parentID, double[][] currentPoints) 
	throws DataException, DataSecurityException
  	{	
		System.out.println("EJBGenerate AdductorBrevisMuscle: " + componentID + "   " + parentID);
		
		int bodyID = 1;
		int projectID = 1;
		String vertices = "";
		
		ArrayList mySqlList= new ArrayList();
		int returnCode = 0;
	
		
		// We can generate the AdductorBrevisMuscle Muscle
		if (currentPoints == null) {
			double radius = 0.125;

			double[] startPos = {1.5, -30.0, -2.0};
			currentPoints = BioGraphics.createCylinderInPlane(Constants.XPLANE, startPos, radius, 8);
		}
		

		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();
		
		
		if (componentID.equals("AdductorBrevisMuscle:01")) 
		{	
			int nMaxSegs = 10;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
				
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
				if (numSegs == 0) {
	    			bioInstruct.setTransType(Constants.SCALE);
	    			bioInstruct.setScaleMatrix(1.25, 1.25, 1.1);
					bioInstruct.setTranslateMatrix(0.05, -0.50, 0.05);
				} 	
				else if (numSegs == 1) {
	    			bioInstruct.setTransType(Constants.SCALE);
	    			bioInstruct.setScaleMatrix(1.5, 1.0, 1.05);
					bioInstruct.setTranslateMatrix(0.08, -0.50, 0.15);
				} 	
				else if (numSegs == 2) {
					BioMightOrientation orientation = new BioMightOrientation(0.0, -1.0, 0.0, 90.0);
					bioInstruct.setTransType(Constants.ROTATEOCTO);
	    			bioInstruct.setTheta(30);	
	    			bioInstruct.setPivotPoint(0);	
	     			bioInstruct.setRotateVector(0.0, 0.0, 1.0);
	     			bioInstruct.setOrientation(orientation);
				}  else if (numSegs == 3) {
	    			bioInstruct.setTransType(Constants.SCALE);
	    			bioInstruct.setScaleMatrix(1.7, 1.7, 1.01);
					bioInstruct.setTranslateMatrix(0.50, -0.750, 0.20);
				}  else if (numSegs == 4) {
	    			bioInstruct.setTransType(Constants.SCALE);
	    			bioInstruct.setScaleMatrix(1.3, 1.3, 1.05);
					bioInstruct.setTranslateMatrix(0.50, -0.50, 0.25);
				} else if (numSegs == 5) {
					BioMightOrientation orientation = new BioMightOrientation(0.0, -1.0, 0.0, 90.0);
					bioInstruct.setTransType(Constants.ROTATEOCTO);
	    			bioInstruct.setTheta(15);	
	    			bioInstruct.setPivotPoint(0);	
	     			bioInstruct.setRotateVector(0.0, 0.0, 1.0);
	     			bioInstruct.setOrientation(orientation);
				} else if (numSegs == 6) {
					bioInstruct.setTransType(Constants.SCALE);
	    			bioInstruct.setScaleMatrix(1.15, 1.15, 1.01);
					bioInstruct.setTranslateMatrix(0.50, -0.25, 0.15);
				} else if (numSegs == 7) {
					BioMightOrientation orientation = new BioMightOrientation(0.0, -1.0, 0.0, 90.0);
					bioInstruct.setTransType(Constants.ROTATEOCTO);
	    			bioInstruct.setTheta(30);	
	    			bioInstruct.setPivotPoint(0);	
	     			bioInstruct.setRotateVector(0.0, 0.0, 1.0);
	     			bioInstruct.setOrientation(orientation);
				} else if (numSegs == 8) {
					bioInstruct.setTransType(Constants.SCALE);
	    			bioInstruct.setScaleMatrix(1.0, 1.01, 1.0);
					bioInstruct.setTranslateMatrix(1.0, -0.25, 0.20);
				}
				else if (numSegs == 9) {
					bioInstruct.setTransType(Constants.SCALE);
	    			bioInstruct.setScaleMatrix(1.0, 1.01, 1.0);
					bioInstruct.setTranslateMatrix(0.75, 0.0, 0.20);
				}
					
				else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.0, -0.50, 0.0);
				}
	    
				// Add the instruction into the instruction set
				bioMightInstructSet.addElement(bioInstruct);
			}
		
		}
		else if (componentID.equals("AdductorBrevisMuscle:02")) 
		{		
			int nMaxSegs = 10;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
			
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
				if (numSegs == 0) {
	    			bioInstruct.setTransType(Constants.SCALE);
	    			bioInstruct.setScaleMatrix(1.25, 1.25, 1.1);
					bioInstruct.setTranslateMatrix(-0.05, -0.50, 0.05);
				} 	
				else if (numSegs == 1) {
	    			bioInstruct.setTransType(Constants.SCALE);
	    			bioInstruct.setScaleMatrix(1.5, 1.0, 1.05);
					bioInstruct.setTranslateMatrix(-0.08, -0.75, 0.15);
				} 	
				else if (numSegs == 2) {
					BioMightOrientation orientation = new BioMightOrientation(0.0, -1.0, 0.0, 90.0);
					bioInstruct.setTransType(Constants.ROTATEOCTO);
	    			bioInstruct.setTheta(-30);	
	    			bioInstruct.setPivotPoint(4);	
	     			bioInstruct.setRotateVector(0.0, 0.0, 1.0);
	     			bioInstruct.setOrientation(orientation);
				}  else if (numSegs == 3) {
	    			bioInstruct.setTransType(Constants.SCALE);
	    			bioInstruct.setScaleMatrix(1.7, 1.7, 1.01);
					bioInstruct.setTranslateMatrix(-0.50, -0.750, 0.20);
				}  else if (numSegs == 4) {
	    			bioInstruct.setTransType(Constants.SCALE);
	    			bioInstruct.setScaleMatrix(1.3, 1.3, 1.05);
					bioInstruct.setTranslateMatrix(-0.50, -0.75, 0.25);
				} else if (numSegs == 5) {
					BioMightOrientation orientation = new BioMightOrientation(0.0, -1.0, 0.0, 90.0);
					bioInstruct.setTransType(Constants.ROTATEOCTO);
	    			bioInstruct.setTheta(-15);	
	    			bioInstruct.setPivotPoint(4);	
	     			bioInstruct.setRotateVector(0.0, 0.0, 1.0);
	     			bioInstruct.setOrientation(orientation);
				} else if (numSegs == 6) {
					bioInstruct.setTransType(Constants.SCALE);
	    			bioInstruct.setScaleMatrix(1.15, 1.15, 1.01);
					bioInstruct.setTranslateMatrix(-0.50, -0.25, 0.15);
				} else if (numSegs == 7) {
					BioMightOrientation orientation = new BioMightOrientation(0.0, -1.0, 0.0, 90.0);
					bioInstruct.setTransType(Constants.ROTATEOCTO);
	    			bioInstruct.setTheta(-30);	
	    			bioInstruct.setPivotPoint(4);	
	     			bioInstruct.setRotateVector(0.0, 0.0, 1.0);
	     			bioInstruct.setOrientation(orientation);
				} else if (numSegs == 8) {
					bioInstruct.setTransType(Constants.SCALE);
	    			bioInstruct.setScaleMatrix(1.0, 1.01, 1.0);
					bioInstruct.setTranslateMatrix(-1.0, -0.25, 0.20);
				}
				else if (numSegs == 9) {
					bioInstruct.setTransType(Constants.SCALE);
	    			bioInstruct.setScaleMatrix(1.0, 1.01, 1.0);
					bioInstruct.setTranslateMatrix(-0.75, 0.0, 0.20);
				}	
				else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.0, -0.50, 0.0);
				}
		    
	    		// Add the instruction into the instruction set
	    		bioMightInstructSet.addElement(bioInstruct);
			}	

		}	
		
		// Generate the BicepsFemorisMuscle	
		DBUtils.generateFacedComponents(Constants.QUADRANGLE, startID, componentType, componentName, componentID, currentPoints, bioMightInstructSet);
		System.out.println("Generated the Rows for AdductorBrevisMuscle: " + componentID + "   " + componentType + "  instr: " + bioMightInstructSet.getSize());

		return returnCode;
	}
  
   	
      	
	/***************************************************************************************
	 * GENERATE ADDUCTOR LONGUS MUSCLES
	 * 
	 * This generates the Adductor Longus Muscles  
	 * 
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/
   	
   	public int generateAdductorLongusMuscle(String startID, String componentType, String componentName, String componentID, String parentID, double[][] currentPoints) 
	throws DataException, DataSecurityException
  	{	
		System.out.println("EJBGenerate AdductorLongusMuscle: " + componentID + "   " + parentID);
		
		int bodyID = 1;
		int projectID = 1;
		String vertices = "";
		
		ArrayList mySqlList= new ArrayList();
		int returnCode = 0;
	
		
		// We can generate the AdductorLongusMuscle Muscle
		if (currentPoints == null) {
			double radius = 0.125;

			double[] startPos = {1.5, -30.0, -2.0};
			currentPoints = BioGraphics.createCylinderInPlane(Constants.XPLANE, startPos, radius, 8);
		}
		

		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();
		
		
		if (componentID.equals("AdductorLongusMuscle:01")) 
		{	
			int nMaxSegs = 12;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
				
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
				if (numSegs == 0) {
	    			bioInstruct.setTransType(Constants.SCALE);
	    			bioInstruct.setScaleMatrix(1.25, 1.25, 1.1);
					bioInstruct.setTranslateMatrix(0.05, -0.50, 0.05);
				} 	
				else if (numSegs == 1) {
	    			bioInstruct.setTransType(Constants.SCALE);
	    			bioInstruct.setScaleMatrix(1.5, 1.0, 1.05);
					bioInstruct.setTranslateMatrix(0.08, -0.50, 0.15);
				} 	
				else if (numSegs == 2) {
	    			bioInstruct.setTransType(Constants.SCALE);
	    			bioInstruct.setScaleMatrix(1.0, 1.0, 1.0);
					bioInstruct.setTranslateMatrix(0.08, -1.00, 0.15);
				} 
				else if (numSegs == 3) {
	    			bioInstruct.setTransType(Constants.SCALE);
	    			bioInstruct.setScaleMatrix(1.0, 1.0, 1.05);
					bioInstruct.setTranslateMatrix(0.08, -1.0, 0.15);
				} 
				else if (numSegs == 4) {
					BioMightOrientation orientation = new BioMightOrientation(0.0, -1.0, 0.0, 90.0);
					bioInstruct.setTransType(Constants.ROTATEOCTO);
	    			bioInstruct.setTheta(30);	
	    			bioInstruct.setPivotPoint(0);	
	     			bioInstruct.setRotateVector(0.0, 0.0, 1.0);
	     			bioInstruct.setOrientation(orientation);
				}  else if (numSegs == 5) {
	    			bioInstruct.setTransType(Constants.SCALE);
	    			bioInstruct.setScaleMatrix(1.7, 1.7, 1.01);
					bioInstruct.setTranslateMatrix(0.50, -0.750, 0.20);
				}  else if (numSegs == 6) {
	    			bioInstruct.setTransType(Constants.SCALE);
	    			bioInstruct.setScaleMatrix(1.3, 1.3, 1.05);
					bioInstruct.setTranslateMatrix(0.50, -0.50, 0.25);
				} else if (numSegs == 7) {
					BioMightOrientation orientation = new BioMightOrientation(0.0, -1.0, 0.0, 90.0);
					bioInstruct.setTransType(Constants.ROTATEOCTO);
	    			bioInstruct.setTheta(15);	
	    			bioInstruct.setPivotPoint(0);	
	     			bioInstruct.setRotateVector(0.0, 0.0, 1.0);
	     			bioInstruct.setOrientation(orientation);
				} else if (numSegs == 8) {
					bioInstruct.setTransType(Constants.SCALE);
	    			bioInstruct.setScaleMatrix(1.15, 1.15, 1.01);
					bioInstruct.setTranslateMatrix(0.50, -0.40, 0.15);
				} else if (numSegs == 9) {
					BioMightOrientation orientation = new BioMightOrientation(0.0, -1.0, 0.0, 90.0);
					bioInstruct.setTransType(Constants.ROTATEOCTO);
	    			bioInstruct.setTheta(35);	
	    			bioInstruct.setPivotPoint(0);	
	     			bioInstruct.setRotateVector(0.0, 0.0, 1.0);
	     			bioInstruct.setOrientation(orientation);
				} else if (numSegs == 10) {
					bioInstruct.setTransType(Constants.SCALE);
	    			bioInstruct.setScaleMatrix(1.0, 1.01, 1.0);
					bioInstruct.setTranslateMatrix(1.0, -0.45, 0.20);
				}
				else if (numSegs == 11) {
					bioInstruct.setTransType(Constants.SCALE);
	    			bioInstruct.setScaleMatrix(1.0, 1.01, 1.0);
					bioInstruct.setTranslateMatrix(0.75, -0.15, 0.20);
				}
		
					
				else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.0, -0.50, 0.0);
				}
	    
				// Add the instruction into the instruction set
				bioMightInstructSet.addElement(bioInstruct);
			}
		
		}
		else if (componentID.equals("AdductorLongusMuscle:02")) 
		{		
			int nMaxSegs = 12;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
			
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
		 
				if (numSegs == 0) {
	    			bioInstruct.setTransType(Constants.SCALE);
	    			bioInstruct.setScaleMatrix(1.25, 1.25, 1.1);
					bioInstruct.setTranslateMatrix(-0.05, -0.50, 0.05);
				} 	
				else if (numSegs == 1) {
	    			bioInstruct.setTransType(Constants.SCALE);
	    			bioInstruct.setScaleMatrix(1.0, 1.0, 1.00);
					bioInstruct.setTranslateMatrix(-0.08, -0.75, 0.15);
				}
				else if (numSegs == 2) {
	    			bioInstruct.setTransType(Constants.SCALE);
	    			bioInstruct.setScaleMatrix(1.0, 1.0, 1.00);
					bioInstruct.setTranslateMatrix(-0.08, -0.75, 0.15);
				} 
				else if (numSegs == 3) {
	    			bioInstruct.setTransType(Constants.SCALE);
	    			bioInstruct.setScaleMatrix(1.5, 1.0, 1.05);
					bioInstruct.setTranslateMatrix(-0.08, -0.75, 0.15);
				} 
				else if (numSegs == 4) {
					BioMightOrientation orientation = new BioMightOrientation(0.0, -1.0, 0.0, 90.0);
					bioInstruct.setTransType(Constants.ROTATEOCTO);
	    			bioInstruct.setTheta(-30);	
	    			bioInstruct.setPivotPoint(4);	
	     			bioInstruct.setRotateVector(0.0, 0.0, 1.0);
	     			bioInstruct.setOrientation(orientation);
				}  else if (numSegs == 5) {
	    			bioInstruct.setTransType(Constants.SCALE);
	    			bioInstruct.setScaleMatrix(1.7, 1.7, 1.01);
					bioInstruct.setTranslateMatrix(-0.50, -0.750, 0.20);
				}  else if (numSegs == 6) {
	    			bioInstruct.setTransType(Constants.SCALE);
	    			bioInstruct.setScaleMatrix(1.3, 1.3, 1.05);
					bioInstruct.setTranslateMatrix(-0.50, -0.75, 0.25);
				} else if (numSegs == 7) {
					BioMightOrientation orientation = new BioMightOrientation(0.0, -1.0, 0.0, 90.0);
					bioInstruct.setTransType(Constants.ROTATEOCTO);
	    			bioInstruct.setTheta(-15);	
	    			bioInstruct.setPivotPoint(4);	
	     			bioInstruct.setRotateVector(0.0, 0.0, 1.0);
	     			bioInstruct.setOrientation(orientation);
				} else if (numSegs == 8) {
					bioInstruct.setTransType(Constants.SCALE);
	    			bioInstruct.setScaleMatrix(1.15, 1.15, 1.01);
					bioInstruct.setTranslateMatrix(-0.50, -0.40, 0.15);
				} else if (numSegs == 9) {
					BioMightOrientation orientation = new BioMightOrientation(0.0, -1.0, 0.0, 90.0);
					bioInstruct.setTransType(Constants.ROTATEOCTO);
	    			bioInstruct.setTheta(-35);	
	    			bioInstruct.setPivotPoint(4);	
	     			bioInstruct.setRotateVector(0.0, 0.0, 1.0);
	     			bioInstruct.setOrientation(orientation);
				} else if (numSegs == 10) {
					bioInstruct.setTransType(Constants.SCALE);
	    			bioInstruct.setScaleMatrix(1.0, 1.01, 1.0);
					bioInstruct.setTranslateMatrix(-1.0, -0.45, 0.20);
				}
				else if (numSegs == 11) {
					bioInstruct.setTransType(Constants.SCALE);
	    			bioInstruct.setScaleMatrix(1.0, 1.01, 1.0);
					bioInstruct.setTranslateMatrix(-0.75, 0.15, 0.20);
				}	
				else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.0, -0.50, 0.0);
				}
		    
	    		// Add the instruction into the instruction set
	    		bioMightInstructSet.addElement(bioInstruct);
			}	

		}	
		
		// Generate the BicepsFemorisMuscle	
		DBUtils.generateFacedComponents(Constants.QUADRANGLE, startID, componentType, componentName, componentID, currentPoints, bioMightInstructSet);
		System.out.println("Generated the Rows for AdductorLongusMuscle: " + componentID + "   " + componentType + "  instr: " + bioMightInstructSet.getSize());

		return returnCode;
	}
   	
   
	
	/***************************************************************************************
	 * GENERATE ADDUCTOR MAGNUS MUSCLES
	 * 
	 * This generates the AdductorMagnusMuscle Muscles  
	 * 
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/
      	
 	public int generateAdductorMagnusMuscle(String startID, String componentType, String componentName, String componentID, String parentID, double[][] currentPoints) 
	throws DataException, DataSecurityException
  	{	
		System.out.println("EJBGenerate AdductorMagnusMuscle: " + componentID + "   " + parentID + "   " + componentName);
		
		int bodyID = 1;
		int projectID = 1;
		String vertices = "";
		
		ArrayList mySqlList= new ArrayList();
		int returnCode = 0;
	
		
		// We can generate the AdductorMagnusMuscle Muscle
		if (currentPoints == null) {
			double radius = 0.125;

			double[] startPos = {1.5, -30.0, -2.0};
			currentPoints = BioGraphics.createCylinderInPlane(Constants.XPLANE, startPos, radius, 8);
		} 
		

		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();
		
		
		if (componentID.equals("AdductorMagnusMuscle:01")  && componentName.equals("MagnusTop")) 
		{	
			int nMaxSegs = 12;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
				
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
				if (numSegs == 0) {
	    			bioInstruct.setTransType(Constants.SCALE);
	    			bioInstruct.setScaleMatrix(1.25, 1.25, 1.1);
					bioInstruct.setTranslateMatrix(0.03, -0.50, 0.15);
				} 	
				else if (numSegs == 1) {
	    			bioInstruct.setTransType(Constants.SCALE);
	    			bioInstruct.setScaleMatrix(1.1, 1.0, 1.01);
					bioInstruct.setTranslateMatrix(0.01, -2.0, 0.15);
				} 
				else if (numSegs == 2) {
	    			bioInstruct.setTransType(Constants.SCALE);
	    			bioInstruct.setScaleMatrix(1.1, 1.0, 1.01);
					bioInstruct.setTranslateMatrix(0.01, -2.0, 0.07);
				} 
				else if (numSegs == 3) {
	    			bioInstruct.setTransType(Constants.SCALE);
	    			bioInstruct.setScaleMatrix(1.1, 1.0, 1.01);
					bioInstruct.setTranslateMatrix(0.01, -1.0, 0.07);
				} 
				else if (numSegs == 4) {
	    			bioInstruct.setTransType(Constants.SCALE);
	    			bioInstruct.setScaleMatrix(1.1, 1.0, 1.01);
					bioInstruct.setTranslateMatrix(0.01, -1.0, 0.07);
				}
				else if (numSegs == 5) {
					BioMightOrientation orientation = new BioMightOrientation(0.0, -1.0, 0.0, 90.0);
					bioInstruct.setTransType(Constants.ROTATEOCTO);
	    			bioInstruct.setTheta(30);	
	    			bioInstruct.setPivotPoint(0);	
	     			bioInstruct.setRotateVector(0.0, 0.0, 1.0);
	     			bioInstruct.setOrientation(orientation);
				}  else if (numSegs == 6) {
	    			bioInstruct.setTransType(Constants.SCALE);
	    			bioInstruct.setScaleMatrix(1.4, 1.4, 1.01);
					bioInstruct.setTranslateMatrix(0.50, -1.0, 0.15);
				}  else if (numSegs == 7) {
	    			bioInstruct.setTransType(Constants.SCALE);
	    			bioInstruct.setScaleMatrix(1.2, 1.2, 1.05);
					bioInstruct.setTranslateMatrix(0.50, -1.0, 0.15);
				} else if (numSegs == 8) {
					BioMightOrientation orientation = new BioMightOrientation(0.0, -1.0, 0.0, 90.0);
					bioInstruct.setTransType(Constants.ROTATEOCTO);
	    			bioInstruct.setTheta(15);	
	    			bioInstruct.setPivotPoint(0);	
	     			bioInstruct.setRotateVector(0.0, 0.0, 1.0);
	     			bioInstruct.setOrientation(orientation);
				} else if (numSegs == 9) {
					bioInstruct.setTransType(Constants.SCALE);
	    			bioInstruct.setScaleMatrix(1.35, 1.35, 1.01);
					bioInstruct.setTranslateMatrix(0.50, -0.25, 0.15);
				} else if (numSegs == 10) {
					BioMightOrientation orientation = new BioMightOrientation(0.0, -1.0, 0.0, 90.0);
					bioInstruct.setTransType(Constants.ROTATEOCTO);
	    			bioInstruct.setTheta(30);	
	    			bioInstruct.setPivotPoint(0);	
	     			bioInstruct.setRotateVector(0.0, 0.0, 1.0);
	     			bioInstruct.setOrientation(orientation);
				} else if (numSegs == 11) {
					bioInstruct.setTransType(Constants.SCALE);
	    			bioInstruct.setScaleMatrix(1.0, 1.01, 1.0);
					bioInstruct.setTranslateMatrix(1.0, 0.0, 0.20);
				}
				else if (numSegs == 12) {
					bioInstruct.setTransType(Constants.SCALE);
	    			bioInstruct.setScaleMatrix(1.0, 1.01, 1.0);
					bioInstruct.setTranslateMatrix(1.0, 0.0, 0.20);
				}
	
				
				
				else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.0, -0.50, 0.0);
				}
	    
				// Add the instruction into the instruction set
				bioMightInstructSet.addElement(bioInstruct);
			}
		
		}
		else if (componentID.equals("AdductorMagnusMuscle:01")  && componentName.equals("MagnusMid")) 
		{	
			int nMaxSegs = 13;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
				
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
				if (numSegs == 0) {
	    			bioInstruct.setTransType(Constants.SCALE);
	    			bioInstruct.setScaleMatrix(1.25, 1.25, 1.1);
					bioInstruct.setTranslateMatrix(0.03, -1.00, 0.05);
				} 	
				else if (numSegs == 1) {
	    			bioInstruct.setTransType(Constants.SCALE);
	    			bioInstruct.setScaleMatrix(1.1, 1.0, 1.01);
					bioInstruct.setTranslateMatrix(0.04, -1.0, 0.07);
				} 
				else if (numSegs == 2) {
	    			bioInstruct.setTransType(Constants.SCALE);
	    			bioInstruct.setScaleMatrix(1.1, 1.0, 1.01);
					bioInstruct.setTranslateMatrix(0.0, -1.0, 0.07);
				} 
				else if (numSegs == 2) {
	    			bioInstruct.setTransType(Constants.SCALE);
	    			bioInstruct.setScaleMatrix(1.1, 1.0, 1.01);
					bioInstruct.setTranslateMatrix(0.0, -1.0, 0.07);
				} 
				else if (numSegs == 3) {
	    			bioInstruct.setTransType(Constants.SCALE);
	    			bioInstruct.setScaleMatrix(1.1, 1.0, 1.01);
					bioInstruct.setTranslateMatrix(0.01, -1.0, 0.07);
				}
				else if (numSegs == 4) {
	    			bioInstruct.setTransType(Constants.SCALE);
	    			bioInstruct.setScaleMatrix(1.1, 1.0, 1.01);
					bioInstruct.setTranslateMatrix(0.01, -2.0, 0.07);
				} 
				else if (numSegs == 5) {
	    			bioInstruct.setTransType(Constants.SCALE);
	    			bioInstruct.setScaleMatrix(1.1, 1.0, 1.01);
					bioInstruct.setTranslateMatrix(0.01, -2.0, 0.07);
				} 
				else if (numSegs == 6) {
					BioMightOrientation orientation = new BioMightOrientation(0.0, -1.0, 0.0, 90.0);
					bioInstruct.setTransType(Constants.ROTATEOCTO);
	    			bioInstruct.setTheta(30);	
	    			bioInstruct.setPivotPoint(0);	
	     			bioInstruct.setRotateVector(0.0, 0.0, 1.0);
	     			bioInstruct.setOrientation(orientation);
				}  else if (numSegs == 7) {
	    			bioInstruct.setTransType(Constants.SCALE);
	    			bioInstruct.setScaleMatrix(1.4, 1.4, 1.01);
					bioInstruct.setTranslateMatrix(0.50, -1.0, 0.15);
				}  else if (numSegs == 8) {
	    			bioInstruct.setTransType(Constants.SCALE);
	    			bioInstruct.setScaleMatrix(1.2, 1.2, 1.05);
					bioInstruct.setTranslateMatrix(0.50, -1.0, 0.15);
				} else if (numSegs == 9) {
					BioMightOrientation orientation = new BioMightOrientation(0.0, -1.0, 0.0, 90.0);
					bioInstruct.setTransType(Constants.ROTATEOCTO);
	    			bioInstruct.setTheta(30);	
	    			bioInstruct.setPivotPoint(0);	
	     			bioInstruct.setRotateVector(0.0, 0.0, 1.0);
	     			bioInstruct.setOrientation(orientation);
				} else if (numSegs == 10) {
					bioInstruct.setTransType(Constants.SCALE);
	    			bioInstruct.setScaleMatrix(1.45, 1.45, 1.01);
					bioInstruct.setTranslateMatrix(0.50, -0.35, 0.15);
				} else if (numSegs == 11) {
					BioMightOrientation orientation = new BioMightOrientation(0.0, -1.0, 0.0, 90.0);
					bioInstruct.setTransType(Constants.ROTATEOCTO);
	    			bioInstruct.setTheta(30);	
	    			bioInstruct.setPivotPoint(0);	
	     			bioInstruct.setRotateVector(0.0, 0.0, 1.0);
	     			bioInstruct.setOrientation(orientation);
				} else if (numSegs == 12) {
					bioInstruct.setTransType(Constants.SCALE);
	    			bioInstruct.setScaleMatrix(1.0, 1.05, 1.0);
					bioInstruct.setTranslateMatrix(1.0, -0.25, 0.20);
				}
				
				
				else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.0, -0.50, 0.0);
				}
	    
				// Add the instruction into the instruction set
				bioMightInstructSet.addElement(bioInstruct);
			}
		
		}
		else if (componentID.equals("AdductorMagnusMuscle:01")  && componentName.equals("MagnusLow1")) 
		{	
			int nMaxSegs = 16;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
				
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
				if (numSegs == 0) {
	    			bioInstruct.setTransType(Constants.SCALE);
	    			bioInstruct.setScaleMatrix(1.25, 1.25, 1.1);
					bioInstruct.setTranslateMatrix(0.03, -0.50, 0.05);
				} 	
				else if (numSegs == 1) {
	    			bioInstruct.setTransType(Constants.SCALE);
	    			bioInstruct.setScaleMatrix(1.1, 1.0, 1.01);
					bioInstruct.setTranslateMatrix(0.04, -3.0, 0.07);
				} 
				else if (numSegs == 2) {
	    			bioInstruct.setTransType(Constants.SCALE);
	    			bioInstruct.setScaleMatrix(1.1, 1.0, 1.01);
					bioInstruct.setTranslateMatrix(0.0, -1.5, 0.07);
				} 
				else if (numSegs == 3) {
	    			bioInstruct.setTransType(Constants.SCALE);
	    			bioInstruct.setScaleMatrix(1.1, 1.0, 1.01);
					bioInstruct.setTranslateMatrix(0.01, -1.0, 0.07);
				}
				else if (numSegs == 4) {
	    			bioInstruct.setTransType(Constants.SCALE);
	    			bioInstruct.setScaleMatrix(1.1, 1.0, 1.01);
					bioInstruct.setTranslateMatrix(0.01, -1.0, 0.07);
				} 
				else if (numSegs == 5) {
	    			bioInstruct.setTransType(Constants.SCALE);
	    			bioInstruct.setScaleMatrix(1.2, 1.0, 1.01);
					bioInstruct.setTranslateMatrix(0.01, -1.0, 0.07);
				} 
				else if (numSegs == 6) {
	    			bioInstruct.setTransType(Constants.SCALE);
	    			bioInstruct.setScaleMatrix(1.2, 1.0, 1.01);
					bioInstruct.setTranslateMatrix(0.01, -1.0, 0.07);
				} 
				else if (numSegs == 7) {
	    			bioInstruct.setTransType(Constants.SCALE);
	    			bioInstruct.setScaleMatrix(1.2, 1.0, 1.01);
					bioInstruct.setTranslateMatrix(0.01, -1.0, 0.07);
				} 
				else if (numSegs == 8) {
					BioMightOrientation orientation = new BioMightOrientation(0.0, -1.0, 0.0, 90.0);
					bioInstruct.setTransType(Constants.ROTATEOCTO);
	    			bioInstruct.setTheta(30);	
	    			bioInstruct.setPivotPoint(0);	
	     			bioInstruct.setRotateVector(0.0, 0.0, 1.0);
	     			bioInstruct.setOrientation(orientation);
				}  else if (numSegs == 9) {
	    			bioInstruct.setTransType(Constants.SCALE);
	    			bioInstruct.setScaleMatrix(1.2, 1.2, 1.01);
					bioInstruct.setTranslateMatrix(0.50, -1.0, 0.15);
				}  else if (numSegs == 10) {
	    			bioInstruct.setTransType(Constants.SCALE);
	    			bioInstruct.setScaleMatrix(1.3, 1.3, 1.05);
					bioInstruct.setTranslateMatrix(0.50, -1.0, 0.15);
				} else if (numSegs == 11) {
					BioMightOrientation orientation = new BioMightOrientation(0.0, -1.0, 0.0, 90.0);
					bioInstruct.setTransType(Constants.ROTATEOCTO);
	    			bioInstruct.setTheta(15);	
	    			bioInstruct.setPivotPoint(0);	
	     			bioInstruct.setRotateVector(0.0, 0.0, 1.0);
	     			bioInstruct.setOrientation(orientation);
				} else if (numSegs == 12) {
					BioMightOrientation orientation = new BioMightOrientation(0.0, -1.0, 0.0, 90.0);
					bioInstruct.setTransType(Constants.ROTATEOCTO);
	    			bioInstruct.setTheta(30);	
	    			bioInstruct.setPivotPoint(0);	
	     			bioInstruct.setRotateVector(0.0, 0.0, 1.0);
	     			bioInstruct.setOrientation(orientation);
				} else if (numSegs == 13) {
					BioMightOrientation orientation = new BioMightOrientation(0.0, -1.0, 0.0, 90.0);
					bioInstruct.setTransType(Constants.ROTATEOCTO);
	    			bioInstruct.setTheta(30);	
	    			bioInstruct.setPivotPoint(0);	
	     			bioInstruct.setRotateVector(0.0, 0.0, 1.0);
	     			bioInstruct.setOrientation(orientation);
				} else if (numSegs == 14) {
					BioMightOrientation orientation = new BioMightOrientation(0.0, -1.0, 0.0, 90.0);
					bioInstruct.setTransType(Constants.ROTATEOCTO);
	    			bioInstruct.setTheta(30);	
	    			bioInstruct.setPivotPoint(0);	
	     			bioInstruct.setRotateVector(0.0, 0.0, 1.0);
	     			bioInstruct.setOrientation(orientation);
				} else if (numSegs == 15) {
	    			bioInstruct.setTransType(Constants.SCALE);
	    			bioInstruct.setScaleMatrix(1.1, 1.20, 1.1);
					bioInstruct.setTranslateMatrix(1.0, 0.0, 0.0);
				}
				
				
				else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.0, -0.50, 0.0);
				}
	    
				// Add the instruction into the instruction set
				bioMightInstructSet.addElement(bioInstruct);
			}
		
		}
		else if (componentID.equals("AdductorMagnusMuscle:01")  && componentName.equals("MagnusLow2")) 
		{	
			int nMaxSegs = 16;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
				
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
				if (numSegs == 0) {
	    			bioInstruct.setTransType(Constants.SCALE);
	    			bioInstruct.setScaleMatrix(1.25, 1.25, 1.1);
					bioInstruct.setTranslateMatrix(0.03, -0.50, 0.05);
				} 	
				else if (numSegs == 1) {
	    			bioInstruct.setTransType(Constants.SCALE);
	    			bioInstruct.setScaleMatrix(1.1, 1.0, 1.01);
					bioInstruct.setTranslateMatrix(0.04, -1.0, 0.07);
				} 
				else if (numSegs == 2) {
	    			bioInstruct.setTransType(Constants.SCALE);
	    			bioInstruct.setScaleMatrix(1.1, 1.0, 1.01);
					bioInstruct.setTranslateMatrix(0.0, -2.0, 0.07);
				} 
				else if (numSegs == 3) {
	    			bioInstruct.setTransType(Constants.SCALE);
	    			bioInstruct.setScaleMatrix(1.1, 1.0, 1.01);
					bioInstruct.setTranslateMatrix(0.01, -1.0, 0.07);
				}
				else if (numSegs == 4) {
	    			bioInstruct.setTransType(Constants.SCALE);
	    			bioInstruct.setScaleMatrix(1.1, 1.0, 1.01);
					bioInstruct.setTranslateMatrix(0.01, -2.0, 0.07);
				} 
				else if (numSegs == 5) {
	    			bioInstruct.setTransType(Constants.SCALE);
	    			bioInstruct.setScaleMatrix(1.2, 1.0, 1.01);
					bioInstruct.setTranslateMatrix(0.01, -1.0, 0.07);
				} 
				else if (numSegs == 6) {
	    			bioInstruct.setTransType(Constants.SCALE);
	    			bioInstruct.setScaleMatrix(1.2, 1.0, 1.01);
					bioInstruct.setTranslateMatrix(0.01, -1.0, 0.07);
				} 
				else if (numSegs == 7) {
	    			bioInstruct.setTransType(Constants.SCALE);
	    			bioInstruct.setScaleMatrix(1.2, 1.0, 1.01);
					bioInstruct.setTranslateMatrix(0.01, -2.0, 0.07);
				} 
				else if (numSegs == 8) {
					BioMightOrientation orientation = new BioMightOrientation(0.0, -1.0, 0.0, 90.0);
					bioInstruct.setTransType(Constants.ROTATEOCTO);
	    			bioInstruct.setTheta(30);	
	    			bioInstruct.setPivotPoint(0);	
	     			bioInstruct.setRotateVector(0.0, 0.0, 1.0);
	     			bioInstruct.setOrientation(orientation);
				}  else if (numSegs == 9) {
	    			bioInstruct.setTransType(Constants.SCALE);
	    			bioInstruct.setScaleMatrix(1.2, 1.2, 1.01);
					bioInstruct.setTranslateMatrix(0.50, -1.0, 0.15);
				}  else if (numSegs == 10) {
	    			bioInstruct.setTransType(Constants.SCALE);
	    			bioInstruct.setScaleMatrix(1.3, 1.3, 1.05);
					bioInstruct.setTranslateMatrix(0.50, -1.0, 0.15);
				} else if (numSegs == 11) {
					BioMightOrientation orientation = new BioMightOrientation(0.0, -1.0, 0.0, 90.0);
					bioInstruct.setTransType(Constants.ROTATEOCTO);
	    			bioInstruct.setTheta(15);	
	    			bioInstruct.setPivotPoint(0);	
	     			bioInstruct.setRotateVector(0.0, 0.0, 1.0);
	     			bioInstruct.setOrientation(orientation);
				} else if (numSegs == 12) {
					BioMightOrientation orientation = new BioMightOrientation(0.0, -1.0, 0.0, 90.0);
					bioInstruct.setTransType(Constants.ROTATEOCTO);
	    			bioInstruct.setTheta(15);	
	    			bioInstruct.setPivotPoint(0);	
	     			bioInstruct.setRotateVector(0.0, 0.0, 1.0);
	     			bioInstruct.setOrientation(orientation);
				} else if (numSegs == 13) {
					BioMightOrientation orientation = new BioMightOrientation(0.0, -1.0, 0.0, 90.0);
					bioInstruct.setTransType(Constants.ROTATEOCTO);
	    			bioInstruct.setTheta(15);	
	    			bioInstruct.setPivotPoint(0);	
	     			bioInstruct.setRotateVector(0.0, 0.0, 1.0);
	     			bioInstruct.setOrientation(orientation);
				} else if (numSegs == 14) {
					BioMightOrientation orientation = new BioMightOrientation(0.0, -1.0, 0.0, 90.0);
					bioInstruct.setTransType(Constants.ROTATEOCTO);
	    			bioInstruct.setTheta(15);	
	    			bioInstruct.setPivotPoint(0);	
	     			bioInstruct.setRotateVector(0.0, 0.0, 1.0);
	     			bioInstruct.setOrientation(orientation);
				} else if (numSegs == 15) {
	    			bioInstruct.setTransType(Constants.SCALE);
	    			bioInstruct.setScaleMatrix(1.0, 1.25, 1.1);
					bioInstruct.setTranslateMatrix(1.0, 0.0, 0.0);
				}
				
				
				else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.0, -0.50, 0.0);
				}
	    
				// Add the instruction into the instruction set
				bioMightInstructSet.addElement(bioInstruct);
			}
		
		}
		else if (componentID.equals("AdductorMagnusMuscle:01")  && componentName.equals("MagnusLow3")) 
		{	
			int nMaxSegs = 16;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
				
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
				if (numSegs == 0) {
	    			bioInstruct.setTransType(Constants.SCALE);
	    			bioInstruct.setScaleMatrix(1.25, 1.25, 1.1);
					bioInstruct.setTranslateMatrix(0.03, -1.00, 0.05);
				} 	
				else if (numSegs == 1) {
	    			bioInstruct.setTransType(Constants.SCALE);
	    			bioInstruct.setScaleMatrix(1.1, 1.0, 1.01);
					bioInstruct.setTranslateMatrix(0.04, -3.0, 0.07);
				} 
				else if (numSegs == 2) {
	    			bioInstruct.setTransType(Constants.SCALE);
	    			bioInstruct.setScaleMatrix(1.1, 1.0, 1.01);
					bioInstruct.setTranslateMatrix(0.0, -2.0, 0.07);
				} 
				else if (numSegs == 3) {
	    			bioInstruct.setTransType(Constants.SCALE);
	    			bioInstruct.setScaleMatrix(1.1, 1.0, 1.01);
					bioInstruct.setTranslateMatrix(0.01, -2.0, 0.07);
				}
				else if (numSegs == 4) {
	    			bioInstruct.setTransType(Constants.SCALE);
	    			bioInstruct.setScaleMatrix(1.1, 1.0, 1.01);
					bioInstruct.setTranslateMatrix(0.01, -2.0, 0.07);
				} 
				else if (numSegs == 5) {
	    			bioInstruct.setTransType(Constants.SCALE);
	    			bioInstruct.setScaleMatrix(1.2, 1.0, 1.01);
					bioInstruct.setTranslateMatrix(0.01, -1.0, 0.07);
				} 
				else if (numSegs == 6) {
	    			bioInstruct.setTransType(Constants.SCALE);
	    			bioInstruct.setScaleMatrix(1.2, 1.0, 1.01);
					bioInstruct.setTranslateMatrix(0.01, -1.0, 0.07);
				} 
				else if (numSegs == 7) {
	    			bioInstruct.setTransType(Constants.SCALE);
	    			bioInstruct.setScaleMatrix(1.3, 1.0, 1.01);
					bioInstruct.setTranslateMatrix(0.01, -1.0, 0.07);
				} 
				else if (numSegs == 8) {
					BioMightOrientation orientation = new BioMightOrientation(0.0, -1.0, 0.0, 90.0);
					bioInstruct.setTransType(Constants.ROTATEOCTO);
	    			bioInstruct.setTheta(30);	
	    			bioInstruct.setPivotPoint(0);	
	     			bioInstruct.setRotateVector(0.0, 0.0, 1.0);
	     			bioInstruct.setOrientation(orientation);
				}  else if (numSegs == 9) {
	    			bioInstruct.setTransType(Constants.SCALE);
	    			bioInstruct.setScaleMatrix(1.2, 1.2, 1.01);
					bioInstruct.setTranslateMatrix(0.50, -1.0, 0.15);
				}  else if (numSegs == 10) {
	    			bioInstruct.setTransType(Constants.SCALE);
	    			bioInstruct.setScaleMatrix(1.3, 1.3, 1.05);
					bioInstruct.setTranslateMatrix(0.50, -1.0, 0.15);
				} else if (numSegs == 11) {
					BioMightOrientation orientation = new BioMightOrientation(0.0, -1.0, 0.0, 90.0);
					bioInstruct.setTransType(Constants.ROTATEOCTO);
	    			bioInstruct.setTheta(15);	
	    			bioInstruct.setPivotPoint(0);	
	     			bioInstruct.setRotateVector(0.0, 0.0, 1.0);
	     			bioInstruct.setOrientation(orientation);
				} else if (numSegs == 12) {
					BioMightOrientation orientation = new BioMightOrientation(0.0, -1.0, 0.0, 90.0);
					bioInstruct.setTransType(Constants.ROTATEOCTO);
	    			bioInstruct.setTheta(15);	
	    			bioInstruct.setPivotPoint(0);	
	     			bioInstruct.setRotateVector(0.0, 0.0, 1.0);
	     			bioInstruct.setOrientation(orientation);
				} else if (numSegs == 13) {
					BioMightOrientation orientation = new BioMightOrientation(0.0, -1.0, 0.0, 90.0);
					bioInstruct.setTransType(Constants.ROTATEOCTO);
	    			bioInstruct.setTheta(15);	
	    			bioInstruct.setPivotPoint(0);	
	     			bioInstruct.setRotateVector(0.0, 0.0, 1.0);
	     			bioInstruct.setOrientation(orientation);
				} else if (numSegs == 14) {
					BioMightOrientation orientation = new BioMightOrientation(0.0, -1.0, 0.0, 90.0);
					bioInstruct.setTransType(Constants.ROTATEOCTO);
	    			bioInstruct.setTheta(15);	
	    			bioInstruct.setPivotPoint(0);	
	     			bioInstruct.setRotateVector(0.0, 0.0, 1.0);
	     			bioInstruct.setOrientation(orientation);
				} else if (numSegs == 15) {
	    			bioInstruct.setTransType(Constants.SCALE);
	    			bioInstruct.setScaleMatrix(1.1, 1.25, 1.1);
					bioInstruct.setTranslateMatrix(1.0, 0.0, 0.0);
				}
				
				
				else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.0, -0.50, 0.0);
				}
	    
				// Add the instruction into the instruction set
				bioMightInstructSet.addElement(bioInstruct);
			}
		
		}
		
		else if (componentID.equals("AdductorMagnusMuscle:02")  && componentName.equals("MagnusTop")) 
		{	
			int nMaxSegs = 12;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
				
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
				if (numSegs == 0) {
	    			bioInstruct.setTransType(Constants.SCALE);
	    			bioInstruct.setScaleMatrix(1.25, 1.25, 1.1);
					bioInstruct.setTranslateMatrix(-0.03, -0.50, 0.15);
				} 	
				else if (numSegs == 1) {
	    			bioInstruct.setTransType(Constants.SCALE);
	    			bioInstruct.setScaleMatrix(1.1, 1.0, 1.01);
					bioInstruct.setTranslateMatrix(-0.01, -2.0, 0.15);
				} 
				else if (numSegs == 2) {
	    			bioInstruct.setTransType(Constants.SCALE);
	    			bioInstruct.setScaleMatrix(1.1, 1.0, 1.01);
					bioInstruct.setTranslateMatrix(-0.01, -2.0, 0.07);
				} 
				else if (numSegs == 3) {
	    			bioInstruct.setTransType(Constants.SCALE);
	    			bioInstruct.setScaleMatrix(1.1, 1.0, 1.01);
					bioInstruct.setTranslateMatrix(-0.01, -1.0, 0.07);
				} 
				else if (numSegs == 4) {
					BioMightOrientation orientation = new BioMightOrientation(0.0, -1.0, 0.0, 90.0);
					bioInstruct.setTransType(Constants.ROTATEOCTO);
	    			bioInstruct.setTheta(-30);	
	    			bioInstruct.setPivotPoint(4);	
	     			bioInstruct.setRotateVector(0.0, 0.0, 1.0);
	     			bioInstruct.setOrientation(orientation);
				}  else if (numSegs == 5) {
	    			bioInstruct.setTransType(Constants.SCALE);
	    			bioInstruct.setScaleMatrix(1.4, 1.4, 1.01);
					bioInstruct.setTranslateMatrix(-0.50, -1.0, 0.15);
				}  else if (numSegs == 6) {
	    			bioInstruct.setTransType(Constants.SCALE);
	    			bioInstruct.setScaleMatrix(1.2, 1.2, 1.05);
					bioInstruct.setTranslateMatrix(-0.50, -1.0, 0.15);
				} else if (numSegs == 7) {
					BioMightOrientation orientation = new BioMightOrientation(0.0, -1.0, 0.0, 90.0);
					bioInstruct.setTransType(Constants.ROTATEOCTO);
	    			bioInstruct.setTheta(-15);	
	    			bioInstruct.setPivotPoint(4);	
	     			bioInstruct.setRotateVector(0.0, 0.0, 1.0);
	     			bioInstruct.setOrientation(orientation);
				} else if (numSegs == 8) {
					bioInstruct.setTransType(Constants.SCALE);
	    			bioInstruct.setScaleMatrix(1.35, 1.35, 1.01);
					bioInstruct.setTranslateMatrix(-0.50, -0.25, 0.15);
				} else if (numSegs == 9) {
					BioMightOrientation orientation = new BioMightOrientation(0.0, -1.0, 0.0, 90.0);
					bioInstruct.setTransType(Constants.ROTATEOCTO);
	    			bioInstruct.setTheta(-30);	
	    			bioInstruct.setPivotPoint(4);	
	     			bioInstruct.setRotateVector(0.0, 0.0, 1.0);
	     			bioInstruct.setOrientation(orientation);
				} else if (numSegs == 10) {
					bioInstruct.setTransType(Constants.SCALE);
	    			bioInstruct.setScaleMatrix(1.0, 1.01, 1.0);
					bioInstruct.setTranslateMatrix(-1.0, 0.0, 0.20);
				}
				else if (numSegs == 11) {
					bioInstruct.setTransType(Constants.SCALE);
	    			bioInstruct.setScaleMatrix(1.0, 1.01, 1.0);
					bioInstruct.setTranslateMatrix(-1.0, 0.0, 0.20);
				}
	
				
				else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.0, -0.50, 0.0);
				}
	    
				// Add the instruction into the instruction set
				bioMightInstructSet.addElement(bioInstruct);
			}
		
		}
		else if (componentID.equals("AdductorMagnusMuscle:02")  && componentName.equals("MagnusMid")) 
		{	
			int nMaxSegs = 13;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
				
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
				if (numSegs == 0) {
	    			bioInstruct.setTransType(Constants.SCALE);
	    			bioInstruct.setScaleMatrix(1.25, 1.25, 1.1);
					bioInstruct.setTranslateMatrix(0.03, -0.50, 0.05);
				} 	
				else if (numSegs == 1) {
	    			bioInstruct.setTransType(Constants.SCALE);
	    			bioInstruct.setScaleMatrix(1.1, 1.0, 1.01);
					bioInstruct.setTranslateMatrix(0.04, -1.0, 0.07);
				} 
				else if (numSegs == 2) {
	    			bioInstruct.setTransType(Constants.SCALE);
	    			bioInstruct.setScaleMatrix(1.1, 1.0, 1.01);
					bioInstruct.setTranslateMatrix(0.0, -1.0, 0.07);
				} 
				else if (numSegs == 3) {
	    			bioInstruct.setTransType(Constants.SCALE);
	    			bioInstruct.setScaleMatrix(1.1, 1.0, 1.01);
					bioInstruct.setTranslateMatrix(0.01, -1.0, 0.07);
				}
				else if (numSegs == 4) {
	    			bioInstruct.setTransType(Constants.SCALE);
	    			bioInstruct.setScaleMatrix(1.1, 1.0, 1.01);
					bioInstruct.setTranslateMatrix(0.01, -1.0, 0.07);
				} 
				else if (numSegs == 5) {
	    			bioInstruct.setTransType(Constants.SCALE);
	    			bioInstruct.setScaleMatrix(1.1, 1.0, 1.01);
					bioInstruct.setTranslateMatrix(0.01, -1.0, 0.07);
				} 
				else if (numSegs == 6) {
					BioMightOrientation orientation = new BioMightOrientation(0.0, -1.0, 0.0, 90.0);
					bioInstruct.setTransType(Constants.ROTATEOCTO);
	    			bioInstruct.setTheta(30);	
	    			bioInstruct.setPivotPoint(0);	
	     			bioInstruct.setRotateVector(0.0, 0.0, 1.0);
	     			bioInstruct.setOrientation(orientation);
				}  else if (numSegs == 7) {
	    			bioInstruct.setTransType(Constants.SCALE);
	    			bioInstruct.setScaleMatrix(1.4, 1.4, 1.01);
					bioInstruct.setTranslateMatrix(0.50, -1.0, 0.15);
				}  else if (numSegs == 8) {
	    			bioInstruct.setTransType(Constants.SCALE);
	    			bioInstruct.setScaleMatrix(1.2, 1.2, 1.05);
					bioInstruct.setTranslateMatrix(0.50, -1.0, 0.15);
				} else if (numSegs == 9) {
					BioMightOrientation orientation = new BioMightOrientation(0.0, -1.0, 0.0, 90.0);
					bioInstruct.setTransType(Constants.ROTATEOCTO);
	    			bioInstruct.setTheta(15);	
	    			bioInstruct.setPivotPoint(0);	
	     			bioInstruct.setRotateVector(0.0, 0.0, 1.0);
	     			bioInstruct.setOrientation(orientation);
				} else if (numSegs == 10) {
					bioInstruct.setTransType(Constants.SCALE);
	    			bioInstruct.setScaleMatrix(1.35, 1.35, 1.01);
					bioInstruct.setTranslateMatrix(0.50, -0.25, 0.15);
				} else if (numSegs == 11) {
					BioMightOrientation orientation = new BioMightOrientation(0.0, -1.0, 0.0, 90.0);
					bioInstruct.setTransType(Constants.ROTATEOCTO);
	    			bioInstruct.setTheta(15);	
	    			bioInstruct.setPivotPoint(0);	
	     			bioInstruct.setRotateVector(0.0, 0.0, 1.0);
	     			bioInstruct.setOrientation(orientation);
				} else if (numSegs == 12) {
					bioInstruct.setTransType(Constants.SCALE);
	    			bioInstruct.setScaleMatrix(1.0, 1.01, 1.0);
					bioInstruct.setTranslateMatrix(1.0, -0.25, 0.20);
				}
				
				
				else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.0, -0.50, 0.0);
				}
	    
				// Add the instruction into the instruction set
				bioMightInstructSet.addElement(bioInstruct);
			}
		
		}
		else if (componentID.equals("AdductorMagnusMuscle:02")  && componentName.equals("MagnusLow")) 
		{	
			int nMaxSegs = 13;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
				
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
				if (numSegs == 0) {
	    			bioInstruct.setTransType(Constants.SCALE);
	    			bioInstruct.setScaleMatrix(1.25, 1.25, 1.1);
					bioInstruct.setTranslateMatrix(0.03, -0.50, 0.05);
				} 	
				else if (numSegs == 1) {
	    			bioInstruct.setTransType(Constants.SCALE);
	    			bioInstruct.setScaleMatrix(1.1, 1.0, 1.01);
					bioInstruct.setTranslateMatrix(0.04, -1.0, 0.07);
				} 
				else if (numSegs == 2) {
	    			bioInstruct.setTransType(Constants.SCALE);
	    			bioInstruct.setScaleMatrix(1.1, 1.0, 1.01);
					bioInstruct.setTranslateMatrix(0.0, -1.0, 0.07);
				} 
				else if (numSegs == 3) {
	    			bioInstruct.setTransType(Constants.SCALE);
	    			bioInstruct.setScaleMatrix(1.1, 1.0, 1.01);
					bioInstruct.setTranslateMatrix(0.01, -1.0, 0.07);
				}
				else if (numSegs == 4) {
	    			bioInstruct.setTransType(Constants.SCALE);
	    			bioInstruct.setScaleMatrix(1.1, 1.0, 1.01);
					bioInstruct.setTranslateMatrix(0.01, -1.0, 0.07);
				} 
				else if (numSegs == 5) {
	    			bioInstruct.setTransType(Constants.SCALE);
	    			bioInstruct.setScaleMatrix(1.1, 1.0, 1.01);
					bioInstruct.setTranslateMatrix(0.01, -1.0, 0.07);
				} 
				else if (numSegs == 6) {
					BioMightOrientation orientation = new BioMightOrientation(0.0, -1.0, 0.0, 90.0);
					bioInstruct.setTransType(Constants.ROTATEOCTO);
	    			bioInstruct.setTheta(30);	
	    			bioInstruct.setPivotPoint(0);	
	     			bioInstruct.setRotateVector(0.0, 0.0, 1.0);
	     			bioInstruct.setOrientation(orientation);
				}  else if (numSegs == 7) {
	    			bioInstruct.setTransType(Constants.SCALE);
	    			bioInstruct.setScaleMatrix(1.4, 1.4, 1.01);
					bioInstruct.setTranslateMatrix(0.50, -1.0, 0.15);
				}  else if (numSegs == 8) {
	    			bioInstruct.setTransType(Constants.SCALE);
	    			bioInstruct.setScaleMatrix(1.2, 1.2, 1.05);
					bioInstruct.setTranslateMatrix(0.50, -1.0, 0.15);
				} else if (numSegs == 9) {
					BioMightOrientation orientation = new BioMightOrientation(0.0, -1.0, 0.0, 90.0);
					bioInstruct.setTransType(Constants.ROTATEOCTO);
	    			bioInstruct.setTheta(15);	
	    			bioInstruct.setPivotPoint(0);	
	     			bioInstruct.setRotateVector(0.0, 0.0, 1.0);
	     			bioInstruct.setOrientation(orientation);
				} else if (numSegs == 10) {
					bioInstruct.setTransType(Constants.SCALE);
	    			bioInstruct.setScaleMatrix(1.35, 1.35, 1.01);
					bioInstruct.setTranslateMatrix(0.50, -0.25, 0.15);
				} else if (numSegs == 11) {
					BioMightOrientation orientation = new BioMightOrientation(0.0, -1.0, 0.0, 90.0);
					bioInstruct.setTransType(Constants.ROTATEOCTO);
	    			bioInstruct.setTheta(15);	
	    			bioInstruct.setPivotPoint(0);	
	     			bioInstruct.setRotateVector(0.0, 0.0, 1.0);
	     			bioInstruct.setOrientation(orientation);
				} else if (numSegs == 12) {
					bioInstruct.setTransType(Constants.SCALE);
	    			bioInstruct.setScaleMatrix(1.0, 1.01, 1.0);
					bioInstruct.setTranslateMatrix(1.0, -0.25, 0.20);
				}
				
				
				else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-0.0, -0.50, 0.0);
				}
	    
				// Add the instruction into the instruction set
				bioMightInstructSet.addElement(bioInstruct);
			}
		
		}
		
		// Generate the BicepsFemorisMuscle	
		DBUtils.generateFacedComponents(Constants.QUADRANGLE, startID, componentType, componentName, componentID, currentPoints, bioMightInstructSet);
		System.out.println("Generated the Rows for AdductorMagnusMuscle: " + componentID + "   " + componentType + "  instr: " + bioMightInstructSet.getSize());

		return returnCode;
	}
  
   	
   	
   	
   	/***************************************************************************************
	 * GENERATE ADDUCTOR POLLICIS MUSCLES
	 * 
	 * This generates the AdductorPollicisMuscle Muscles  
	 * 
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/
   
   	public int generateAdductorPollicisMuscle(String startID, String componentType, String componentName, String componentID, String parentID, double[][] currentPoints) 
	throws DataException, DataSecurityException
  	{	
		System.out.println("Generate AdductorPollicisMuscle");
		
		int bodyID = 1;
		int projectID = 1;
		String vertices = "";
		
		ArrayList mySqlList= new ArrayList();
		int returnCode = 0;
	
		
		// We can generate the AdductorPollicisMuscle Muscle
		if (currentPoints == null )
		{
			double circumference = 0.125;
	    	
			double x =  -8.0;
    		double y =  -10.0;
    		double z =  -1.0;
			
			// Create a equilateral octogon	
			currentPoints[0][0] =  x;
			currentPoints[0][1] =  y;
			currentPoints[0][2] =  z;
			
			currentPoints[1][0] =  x-circumference;
			currentPoints[1][1] =  y;
			currentPoints[1][2] =  z-circumference;
			
			currentPoints[2][0] =  x-circumference;
			currentPoints[2][1] =  y;
			currentPoints[2][2] =  z-circumference*2;
			
			currentPoints[3][0] =  x;
			currentPoints[3][1] =  y;
			currentPoints[3][2] =  z-circumference*3;
	
			currentPoints[4][0] =  x+circumference;
			currentPoints[4][1] =  y;
			currentPoints[4][2] =  z-circumference*3;
			
			currentPoints[5][0] =  x+circumference*2;
			currentPoints[5][1] =  y;
			currentPoints[5][2] =  z-circumference*2;
	
			currentPoints[6][0] =  x+circumference*2;
			currentPoints[6][1] =  y;
			currentPoints[6][2] =  z-circumference;

			currentPoints[7][0] =  x+circumference;
			currentPoints[7][1] =  y;
			currentPoints[7][2] =  z;
		}
		

		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();
		
		
		if (parentID.equals("AdductorPollicisMuscle:01")) 
		{	
			int nMaxSegs = 6;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
				
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
		     
				if (numSegs==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10); 
				}
				else if (numSegs==1){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10); 
				}
				else if (numSegs==2){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);  
				}
				else if (numSegs==3){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10); 
				}
				else if (numSegs==4){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);    
				}	
				else if (numSegs==5){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);    
				}	
				else if (numSegs==6){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);    
				}	
				else if (numSegs==7){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);    
				}		
				else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
				}
	    
				// Add the instruction into the instruction set
				bioMightInstructSet.addElement(bioInstruct);
			}
		
		}
		else if (parentID.equals("AdductorPollicisMuscle:02")) 
		{		
			int nMaxSegs = 6;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
			
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
		 
	    		if (numSegs==0){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
	    		}
	       		else if (numSegs==1){
	       			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
	           	}
	    		else if (numSegs==2){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
	    		}
	    		else if (numSegs==3){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
	    		}
	    		else if (numSegs==4){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10); 	   
	        	}
	    		else if (numSegs==5){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10); 	   
	        	}
	    		else if (numSegs==6){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10); 	   
	        	}
	    		else if (numSegs==7){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10); 	   
	        	}
	    		else {
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
	    		}
		    
	    		// Add the instruction into the instruction set
	    		bioMightInstructSet.addElement(bioInstruct);
			}	

		}	
		
		
		//Generate the AdductorPollicisMuscle
		//generateComponentRows(startID, componentType, componentName, componentID, currentPoints, bioMightInstructSet);
		//System.out.println("Generated the Rows for AdductorPollicisMuscleTissue: " + componentID + "   parent: " + parentID + "   " + componentType);

		return returnCode;
	}
   	
   	
   	
   	
   	/***************************************************************************************
	 * GENERATE ANTERIOR Constants.SCALENE MUSCLES
	 * 
	 * This generates the Anterior Scalene Muscles  
	 * 
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/
   
   	public int generateAnteriorScaleneMuscle(String startID, String componentType, String componentName, String componentID, String parentID, double[][] currentPoints) 
	throws DataException, DataSecurityException
  	{	
		System.out.println("Generate AnteriorScaleneMuscle");
		
		int bodyID = 1;
		int projectID = 1;
		String vertices = "";
		
		ArrayList mySqlList= new ArrayList();
		int returnCode = 0;
	
		
		// We can generate the AnteriorScaleneMuscle Muscle
		if (currentPoints == null )
		{
			double circumference = 0.125;
	    	
			double x =  -8.0;
    		double y =  -10.0;
    		double z =  -1.0;
			
			// Create a equilateral octogon	
			currentPoints[0][0] =  x;
			currentPoints[0][1] =  y;
			currentPoints[0][2] =  z;
			
			currentPoints[1][0] =  x-circumference;
			currentPoints[1][1] =  y;
			currentPoints[1][2] =  z-circumference;
			
			currentPoints[2][0] =  x-circumference;
			currentPoints[2][1] =  y;
			currentPoints[2][2] =  z-circumference*2;
			
			currentPoints[3][0] =  x;
			currentPoints[3][1] =  y;
			currentPoints[3][2] =  z-circumference*3;
	
			currentPoints[4][0] =  x+circumference;
			currentPoints[4][1] =  y;
			currentPoints[4][2] =  z-circumference*3;
			
			currentPoints[5][0] =  x+circumference*2;
			currentPoints[5][1] =  y;
			currentPoints[5][2] =  z-circumference*2;
	
			currentPoints[6][0] =  x+circumference*2;
			currentPoints[6][1] =  y;
			currentPoints[6][2] =  z-circumference;

			currentPoints[7][0] =  x+circumference;
			currentPoints[7][1] =  y;
			currentPoints[7][2] =  z;
		}
		

		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();
		
		
		if (parentID.equals("AnteriorScaleneMuscle:01")) 
		{	
			int nMaxSegs = 6;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
				
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
		     
				if (numSegs==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10); 
				}
				else if (numSegs==1){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10); 
				}
				else if (numSegs==2){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);  
				}
				else if (numSegs==3){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10); 
				}
				else if (numSegs==4){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);    
				}	
				else if (numSegs==5){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);    
				}	
				else if (numSegs==6){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);    
				}	
				else if (numSegs==7){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);    
				}		
				else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
				}
	    
				// Add the instruction into the instruction set
				bioMightInstructSet.addElement(bioInstruct);
			}
		
		}
		else if (parentID.equals("AnteriorScaleneMuscle:02")) 
		{		
			int nMaxSegs = 6;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
			
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
		 
	    		if (numSegs==0){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
	    		}
	       		else if (numSegs==1){
	       			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
	           	}
	    		else if (numSegs==2){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
	    		}
	    		else if (numSegs==3){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
	    		}
	    		else if (numSegs==4){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10); 	   
	        	}
	    		else if (numSegs==5){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10); 	   
	        	}
	    		else if (numSegs==6){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10); 	   
	        	}
	    		else if (numSegs==7){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10); 	   
	        	}
	    		else {
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
	    		}
		    
	    		// Add the instruction into the instruction set
	    		bioMightInstructSet.addElement(bioInstruct);
			}	

		}	
		
		
		//Generate the AnteriorScaleneMuscle
		//generateComponentRows(startID, componentType, componentName, componentID, currentPoints, bioMightInstructSet);
		//System.out.println("Generated the Rows for AnteriorScaleneMuscleTissue: " + componentID + "   parent: " + parentID + "   " + componentType);

		return returnCode;
	}
   	
   	
	
/***************************************************************************************
 * GENERATE ANTERIOR VERTERBRAL MUSCLES
 * 
 * This generates the Anterior Verterbral Muscles  
 * 
 * @param key
 * @param user
 * @return
 * @throws DataException
 * @throws DataSecurityException
 ***************************************************************************************/

	public int generateAnteriorVertebralMuscle(String startID, String componentType, String componentName, String componentID, String parentID, double[][] currentPoints) 
throws DataException, DataSecurityException
	{	
	System.out.println("Generate AnteriorVertebralMuscle");
	
	int bodyID = 1;
	int projectID = 1;
	String vertices = "";
	
	ArrayList mySqlList= new ArrayList();
	int returnCode = 0;

	
	// We can generate the AnteriorVertebralMuscle Muscle
	if (currentPoints == null )
	{
		double circumference = 0.125;
    	
		double x =  -8.0;
		double y =  -10.0;
		double z =  -1.0;
		
		// Create a equilateral octogon	
		currentPoints[0][0] =  x;
		currentPoints[0][1] =  y;
		currentPoints[0][2] =  z;
		
		currentPoints[1][0] =  x-circumference;
		currentPoints[1][1] =  y;
		currentPoints[1][2] =  z-circumference;
		
		currentPoints[2][0] =  x-circumference;
		currentPoints[2][1] =  y;
		currentPoints[2][2] =  z-circumference*2;
		
		currentPoints[3][0] =  x;
		currentPoints[3][1] =  y;
		currentPoints[3][2] =  z-circumference*3;

		currentPoints[4][0] =  x+circumference;
		currentPoints[4][1] =  y;
		currentPoints[4][2] =  z-circumference*3;
		
		currentPoints[5][0] =  x+circumference*2;
		currentPoints[5][1] =  y;
		currentPoints[5][2] =  z-circumference*2;

		currentPoints[6][0] =  x+circumference*2;
		currentPoints[6][1] =  y;
		currentPoints[6][2] =  z-circumference;

		currentPoints[7][0] =  x+circumference;
		currentPoints[7][1] =  y;
		currentPoints[7][2] =  z;
	}
	

	// Allocate an instruction set for building it
	BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();
	
	
	if (parentID.equals("AnteriorVertebralMuscle:01")) 
	{	
		int nMaxSegs = 6;
		for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
			
			// Create a place for an instruction 
			BioMightInstruction bioInstruct = new BioMightInstruction();
	     
			if (numSegs==0){
				bioInstruct.setTransType(Constants.TRANSLATE);
				bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10); 
			}
			else if (numSegs==1){
				bioInstruct.setTransType(Constants.TRANSLATE);
				bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10); 
			}
			else if (numSegs==2){
				bioInstruct.setTransType(Constants.TRANSLATE);
				bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);  
			}
			else if (numSegs==3){
				bioInstruct.setTransType(Constants.TRANSLATE);
				bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10); 
			}
			else if (numSegs==4){
				bioInstruct.setTransType(Constants.TRANSLATE);
				bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);    
			}	
			else if (numSegs==5){
				bioInstruct.setTransType(Constants.TRANSLATE);
				bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);    
			}	
			else if (numSegs==6){
				bioInstruct.setTransType(Constants.TRANSLATE);
				bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);    
			}	
			else if (numSegs==7){
				bioInstruct.setTransType(Constants.TRANSLATE);
				bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);    
			}		
			else {
				bioInstruct.setTransType(Constants.TRANSLATE);
				bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
			}
    
			// Add the instruction into the instruction set
			bioMightInstructSet.addElement(bioInstruct);
		}
	
	}
	else if (parentID.equals("AnteriorVertebralMuscle:02")) 
	{		
		int nMaxSegs = 6;
		for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
		
			// Create a place for an instruction 
			BioMightInstruction bioInstruct = new BioMightInstruction();
	 
    		if (numSegs==0){
    			bioInstruct.setTransType(Constants.TRANSLATE);
    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
    		}
       		else if (numSegs==1){
       			bioInstruct.setTransType(Constants.TRANSLATE);
    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
           	}
    		else if (numSegs==2){
    			bioInstruct.setTransType(Constants.TRANSLATE);
    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
    		}
    		else if (numSegs==3){
    			bioInstruct.setTransType(Constants.TRANSLATE);
    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
    		}
    		else if (numSegs==4){
    			bioInstruct.setTransType(Constants.TRANSLATE);
    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10); 	   
        	}
    		else if (numSegs==5){
    			bioInstruct.setTransType(Constants.TRANSLATE);
    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10); 	   
        	}
    		else if (numSegs==6){
    			bioInstruct.setTransType(Constants.TRANSLATE);
    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10); 	   
        	}
    		else if (numSegs==7){
    			bioInstruct.setTransType(Constants.TRANSLATE);
    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10); 	   
        	}
    		else {
    			bioInstruct.setTransType(Constants.TRANSLATE);
    			bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
    		}
	    
    		// Add the instruction into the instruction set
    		bioMightInstructSet.addElement(bioInstruct);
		}	

	}	
	
	
	//Generate the AnteriorVertebralMuscle
	//generateComponentRows(startID, componentType, componentName, componentID, currentPoints, bioMightInstructSet);
	//System.out.println("Generated the Rows for AnteriorVertebralMuscle: " + componentID + "   parent: " + parentID + "   " + componentType);

	return returnCode;
}
   
   	
	
	
	/***************************************************************************************
	 * GENERATE ARTICULARIS GENUS MUSCLES
	 * 
	 * This generates the Articularis Genus Muscles  
	 * 
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/

	public int generateArticularisGenusMuscle(String startID,
			String componentType, String componentName, String componentID,
			String parentID, double[][] currentPoints) throws DataException,
			DataSecurityException {
		System.out.println("Generate ArticularisGenusMuscle");

		int bodyID = 1;
		int projectID = 1;
		String vertices = "";

		ArrayList mySqlList = new ArrayList();
		int returnCode = 0;

		// We can generate the ArticularisGenusMuscle Muscle
		if (currentPoints == null) {
			double circumference = 0.125;

			double x = -8.0;
			double y = -10.0;
			double z = -1.0;

			// Create a equilateral octogon
			currentPoints[0][0] = x;
			currentPoints[0][1] = y;
			currentPoints[0][2] = z;

			currentPoints[1][0] = x - circumference;
			currentPoints[1][1] = y;
			currentPoints[1][2] = z - circumference;

			currentPoints[2][0] = x - circumference;
			currentPoints[2][1] = y;
			currentPoints[2][2] = z - circumference * 2;

			currentPoints[3][0] = x;
			currentPoints[3][1] = y;
			currentPoints[3][2] = z - circumference * 3;

			currentPoints[4][0] = x + circumference;
			currentPoints[4][1] = y;
			currentPoints[4][2] = z - circumference * 3;

			currentPoints[5][0] = x + circumference * 2;
			currentPoints[5][1] = y;
			currentPoints[5][2] = z - circumference * 2;

			currentPoints[6][0] = x + circumference * 2;
			currentPoints[6][1] = y;
			currentPoints[6][2] = z - circumference;

			currentPoints[7][0] = x + circumference;
			currentPoints[7][1] = y;
			currentPoints[7][2] = z;
		}

		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();

		if (parentID.equals("ArticularisGenusMuscle:01")) {
			int nMaxSegs = 6;
			for (int numSegs = 0; numSegs < nMaxSegs; numSegs++) {

				// Create a place for an instruction
				BioMightInstruction bioInstruct = new BioMightInstruction();

				if (numSegs == 0) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 1) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 2) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 3) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 4) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 5) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 6) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 7) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
				}

				// Add the instruction into the instruction set
				bioMightInstructSet.addElement(bioInstruct);
			}

		} else if (parentID.equals("ArticularisGenusMuscle:02")) {
			int nMaxSegs = 6;
			for (int numSegs = 0; numSegs < nMaxSegs; numSegs++) {

				// Create a place for an instruction
				BioMightInstruction bioInstruct = new BioMightInstruction();

				if (numSegs == 0) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 1) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 2) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 3) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 4) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 5) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 6) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 7) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
				}

				// Add the instruction into the instruction set
				bioMightInstructSet.addElement(bioInstruct);
			}

		}

		// Generate the ArticularisGenusMuscle
		// generateComponentRows(startID, componentType, componentName,
		// componentID, currentPoints, bioMightInstructSet);
		// System.out.println("Generated the Rows for ArticularisGenusMuscleTissue: "
		// + componentID + "   parent: " + parentID + "   " + componentType);

		return returnCode;
	}
		
		
		
		/***************************************************************************************
		 * GENERATE AURICULARIS ANTERIOR MUSCLES
		 * 
		 * This generates the Auricularis Anterior Muscles  
		 * 
		 * @param key
		 * @param user
		 * @return
		 * @throws DataException
		 * @throws DataSecurityException
		 ***************************************************************************************/

			public int generateAuricularisAnteriorMuscle(String startID, String componentType, String componentName, String componentID, String parentID, double[][] currentPoints) 
		throws DataException, DataSecurityException
			{	
			System.out.println("Generate AuricularisAnteriorMuscle");
			
			int bodyID = 1;
			int projectID = 1;
			String vertices = "";
			
			ArrayList mySqlList= new ArrayList();
			int returnCode = 0;

			
			// We can generate the AuricularisAnteriorMuscle Muscle
			if (currentPoints == null )
			{
				double circumference = 0.125;
		    	
				double x =  -8.0;
				double y =  -10.0;
				double z =  -1.0;
				
				// Create a equilateral octogon	
				currentPoints[0][0] =  x;
				currentPoints[0][1] =  y;
				currentPoints[0][2] =  z;
				
				currentPoints[1][0] =  x-circumference;
				currentPoints[1][1] =  y;
				currentPoints[1][2] =  z-circumference;
				
				currentPoints[2][0] =  x-circumference;
				currentPoints[2][1] =  y;
				currentPoints[2][2] =  z-circumference*2;
				
				currentPoints[3][0] =  x;
				currentPoints[3][1] =  y;
				currentPoints[3][2] =  z-circumference*3;

				currentPoints[4][0] =  x+circumference;
				currentPoints[4][1] =  y;
				currentPoints[4][2] =  z-circumference*3;
				
				currentPoints[5][0] =  x+circumference*2;
				currentPoints[5][1] =  y;
				currentPoints[5][2] =  z-circumference*2;

				currentPoints[6][0] =  x+circumference*2;
				currentPoints[6][1] =  y;
				currentPoints[6][2] =  z-circumference;

				currentPoints[7][0] =  x+circumference;
				currentPoints[7][1] =  y;
				currentPoints[7][2] =  z;
			}
			

			// Allocate an instruction set for building it
			BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();
			
			
			if (parentID.equals("AuricularisAnteriorMuscle:01")) 
			{	
				int nMaxSegs = 6;
				for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
					
					// Create a place for an instruction 
					BioMightInstruction bioInstruct = new BioMightInstruction();
			     
					if (numSegs==0){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10); 
					}
					else if (numSegs==1){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10); 
					}
					else if (numSegs==2){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);  
					}
					else if (numSegs==3){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10); 
					}
					else if (numSegs==4){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);    
					}	
					else if (numSegs==5){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);    
					}	
					else if (numSegs==6){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);    
					}	
					else if (numSegs==7){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);    
					}		
					else {
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
					}
		    
					// Add the instruction into the instruction set
					bioMightInstructSet.addElement(bioInstruct);
				}
			
			}
			else if (parentID.equals("AuricularisAnteriorMuscle:02")) 
			{		
				int nMaxSegs = 6;
				for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
				
					// Create a place for an instruction 
					BioMightInstruction bioInstruct = new BioMightInstruction();
			 
		    		if (numSegs==0){
		    			bioInstruct.setTransType(Constants.TRANSLATE);
		    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
		    		}
		       		else if (numSegs==1){
		       			bioInstruct.setTransType(Constants.TRANSLATE);
		    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
		           	}
		    		else if (numSegs==2){
		    			bioInstruct.setTransType(Constants.TRANSLATE);
		    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
		    		}
		    		else if (numSegs==3){
		    			bioInstruct.setTransType(Constants.TRANSLATE);
		    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
		    		}
		    		else if (numSegs==4){
		    			bioInstruct.setTransType(Constants.TRANSLATE);
		    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10); 	   
		        	}
		    		else if (numSegs==5){
		    			bioInstruct.setTransType(Constants.TRANSLATE);
		    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10); 	   
		        	}
		    		else if (numSegs==6){
		    			bioInstruct.setTransType(Constants.TRANSLATE);
		    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10); 	   
		        	}
		    		else if (numSegs==7){
		    			bioInstruct.setTransType(Constants.TRANSLATE);
		    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10); 	   
		        	}
		    		else {
		    			bioInstruct.setTransType(Constants.TRANSLATE);
		    			bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
		    		}
			    
		    		// Add the instruction into the instruction set
		    		bioMightInstructSet.addElement(bioInstruct);
				}	

			}	
			
			
			//Generate the AuricularisAnteriorMuscle
			//ComponentRows(startID, componentType, componentName, componentID, currentPoints, bioMightInstructSet);
			//System.out.println("Generated the Rows for AuricularisAnteriorMuscleTissue: " + componentID + "   parent: " + parentID + "   " + componentType);

			return returnCode;
		}
			
			
	/***************************************************************************************
	 * GENERATE BULBO CAVERNOSUS MUSCLES
	 * 
	 * This generates the Bulbo Cavernosus Muscles
	 * 
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/

	public int generateBulboCavernosusMuscle(String startID,
			String componentType, String componentName, String componentID,
			String parentID, double[][] currentPoints) throws DataException,
			DataSecurityException {
		System.out.println("Generate BulboCavernosusMuscle");

		int bodyID = 1;
		int projectID = 1;
		String vertices = "";

		ArrayList mySqlList = new ArrayList();
		int returnCode = 0;

		// We can generate the BulboCavernosusMuscle Muscle
		if (currentPoints == null) {
			double circumference = 0.125;

			double x = -8.0;
			double y = -10.0;
			double z = -1.0;

			// Create a equilateral octogon
			currentPoints[0][0] = x;
			currentPoints[0][1] = y;
			currentPoints[0][2] = z;

			currentPoints[1][0] = x - circumference;
			currentPoints[1][1] = y;
			currentPoints[1][2] = z - circumference;

			currentPoints[2][0] = x - circumference;
			currentPoints[2][1] = y;
			currentPoints[2][2] = z - circumference * 2;

			currentPoints[3][0] = x;
			currentPoints[3][1] = y;
			currentPoints[3][2] = z - circumference * 3;

			currentPoints[4][0] = x + circumference;
			currentPoints[4][1] = y;
			currentPoints[4][2] = z - circumference * 3;

			currentPoints[5][0] = x + circumference * 2;
			currentPoints[5][1] = y;
			currentPoints[5][2] = z - circumference * 2;

			currentPoints[6][0] = x + circumference * 2;
			currentPoints[6][1] = y;
			currentPoints[6][2] = z - circumference;

			currentPoints[7][0] = x + circumference;
			currentPoints[7][1] = y;
			currentPoints[7][2] = z;
		}

		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();

		if (parentID.equals("BulboCavernosusMuscle:01")) {
			int nMaxSegs = 6;
			for (int numSegs = 0; numSegs < nMaxSegs; numSegs++) {

				// Create a place for an instruction
				BioMightInstruction bioInstruct = new BioMightInstruction();

				if (numSegs == 0) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 1) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 2) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 3) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 4) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 5) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 6) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 7) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
				}

				// Add the instruction into the instruction set
				bioMightInstructSet.addElement(bioInstruct);
			}

		} else if (parentID.equals("BulboCavernosusMuscle:02")) {
			int nMaxSegs = 6;
			for (int numSegs = 0; numSegs < nMaxSegs; numSegs++) {

				// Create a place for an instruction
				BioMightInstruction bioInstruct = new BioMightInstruction();

				if (numSegs == 0) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 1) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 2) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 3) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 4) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 5) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 6) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 7) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
				}

				// Add the instruction into the instruction set
				bioMightInstructSet.addElement(bioInstruct);
			}

		}

		// Generate the BulboCavernosusMuscle
		// generateComponentRows(startID, componentType, componentName,
		// componentID, currentPoints, bioMightInstructSet);
		// System.out.println("Generated the Rows for BulboCavernosusMuscleTissue: "
		// + componentID + "   parent: " + parentID + "   " + componentType);

		return returnCode;
	}
		
		
	
	/***************************************************************************************
	 * GENERATE BULBO SPONGIOSUS MUSCLES
	 * 
	 * This generates the Bulbo Spongiosus Muscles  
	 * 
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/

		public int generateBulboSpongiosusMuscle(String startID, String componentType, String componentName, String componentID, String parentID, double[][] currentPoints) 
		throws DataException, DataSecurityException
		{	
		System.out.println("Generate BulboSpongiosusMuscle");
		
		int bodyID = 1;
		int projectID = 1;
		String vertices = "";
		
		ArrayList mySqlList= new ArrayList();
		int returnCode = 0;

		
		// We can generate the BulboSpongiosusMuscle Muscle
		if (currentPoints == null )
		{
			double circumference = 0.125;
	    	
			double x =  -8.0;
			double y =  -10.0;
			double z =  -1.0;
			
			// Create a equilateral octogon	
			currentPoints[0][0] =  x;
			currentPoints[0][1] =  y;
			currentPoints[0][2] =  z;
			
			currentPoints[1][0] =  x-circumference;
			currentPoints[1][1] =  y;
			currentPoints[1][2] =  z-circumference;
			
			currentPoints[2][0] =  x-circumference;
			currentPoints[2][1] =  y;
			currentPoints[2][2] =  z-circumference*2;
			
			currentPoints[3][0] =  x;
			currentPoints[3][1] =  y;
			currentPoints[3][2] =  z-circumference*3;

			currentPoints[4][0] =  x+circumference;
			currentPoints[4][1] =  y;
			currentPoints[4][2] =  z-circumference*3;
			
			currentPoints[5][0] =  x+circumference*2;
			currentPoints[5][1] =  y;
			currentPoints[5][2] =  z-circumference*2;

			currentPoints[6][0] =  x+circumference*2;
			currentPoints[6][1] =  y;
			currentPoints[6][2] =  z-circumference;

			currentPoints[7][0] =  x+circumference;
			currentPoints[7][1] =  y;
			currentPoints[7][2] =  z;
		}
		

		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();
		
		
		if (parentID.equals("BulboSpongiosusMuscle:01")) 
		{	
			int nMaxSegs = 6;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
				
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
		     
				if (numSegs==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10); 
				}
				else if (numSegs==1){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10); 
				}
				else if (numSegs==2){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);  
				}
				else if (numSegs==3){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10); 
				}
				else if (numSegs==4){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);    
				}	
				else if (numSegs==5){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);    
				}	
				else if (numSegs==6){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);    
				}	
				else if (numSegs==7){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);    
				}		
				else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
				}
	    
				// Add the instruction into the instruction set
				bioMightInstructSet.addElement(bioInstruct);
			}
		
		}
		else if (parentID.equals("BulboSpongiosusMuscle:02")) 
		{		
			int nMaxSegs = 6;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
			
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
		 
	    		if (numSegs==0){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
	    		}
	       		else if (numSegs==1){
	       			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
	           	}
	    		else if (numSegs==2){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
	    		}
	    		else if (numSegs==3){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
	    		}
	    		else if (numSegs==4){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10); 	   
	        	}
	    		else if (numSegs==5){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10); 	   
	        	}
	    		else if (numSegs==6){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10); 	   
	        	}
	    		else if (numSegs==7){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10); 	   
	        	}
	    		else {
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
	    		}
		    
	    		// Add the instruction into the instruction set
	    		bioMightInstructSet.addElement(bioInstruct);
			}	

		}	
		
		
		//Generate the BulboSpongiosusMuscle
		//generateComponentRows(startID, componentType, componentName, componentID, currentPoints, bioMightInstructSet);
		//System.out.println("Generated the Rows for BulboSpongiosusMuscleTissue: " + componentID + "   parent: " + parentID + "   " + componentType);

		return returnCode;
	}
				
			
				
	
	/***************************************************************************************
	 * GENERATE COCCYGENUS MUSCLES
	 * 
	 * This generates the Coccygenus Muscles  
	 * 
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/

	public int generateCoccygeusMuscle(String startID, String componentType, String componentName, String componentID, String parentID, double[][] currentPoints) 
	throws DataException, DataSecurityException
		{	
		System.out.println("Generate CoccygeusMuscle");
		
		int bodyID = 1;
		int projectID = 1;
		String vertices = "";
		
		ArrayList mySqlList= new ArrayList();
		int returnCode = 0;

		
		// We can generate the CoccygeusMuscle Muscle
		if (currentPoints == null )
		{
			double circumference = 0.125;
	    	
			double x =  -8.0;
			double y =  -10.0;
			double z =  -1.0;
			
			// Create a equilateral octogon	
			currentPoints[0][0] =  x;
			currentPoints[0][1] =  y;
			currentPoints[0][2] =  z;
			
			currentPoints[1][0] =  x-circumference;
			currentPoints[1][1] =  y;
			currentPoints[1][2] =  z-circumference;
			
			currentPoints[2][0] =  x-circumference;
			currentPoints[2][1] =  y;
			currentPoints[2][2] =  z-circumference*2;
			
			currentPoints[3][0] =  x;
			currentPoints[3][1] =  y;
			currentPoints[3][2] =  z-circumference*3;

			currentPoints[4][0] =  x+circumference;
			currentPoints[4][1] =  y;
			currentPoints[4][2] =  z-circumference*3;
			
			currentPoints[5][0] =  x+circumference*2;
			currentPoints[5][1] =  y;
			currentPoints[5][2] =  z-circumference*2;

			currentPoints[6][0] =  x+circumference*2;
			currentPoints[6][1] =  y;
			currentPoints[6][2] =  z-circumference;

			currentPoints[7][0] =  x+circumference;
			currentPoints[7][1] =  y;
			currentPoints[7][2] =  z;
		}
		

		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();
		
		
		if (parentID.equals("CoccygeusMuscle:01")) 
		{	
			int nMaxSegs = 6;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
				
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
		     
				if (numSegs==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10); 
				}
				else if (numSegs==1){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10); 
				}
				else if (numSegs==2){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);  
				}
				else if (numSegs==3){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10); 
				}
				else if (numSegs==4){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);    
				}	
				else if (numSegs==5){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);    
				}	
				else if (numSegs==6){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);    
				}	
				else if (numSegs==7){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);    
				}		
				else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
				}
	    
				// Add the instruction into the instruction set
				bioMightInstructSet.addElement(bioInstruct);
			}
		
		}
		else if (parentID.equals("CoccygeusMuscle:02")) 
		{		
			int nMaxSegs = 6;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
			
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
		 
	    		if (numSegs==0){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
	    		}
	       		else if (numSegs==1){
	       			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
	           	}
	    		else if (numSegs==2){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
	    		}
	    		else if (numSegs==3){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
	    		}
	    		else if (numSegs==4){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10); 	   
	        	}
	    		else if (numSegs==5){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10); 	   
	        	}
	    		else if (numSegs==6){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10); 	   
	        	}
	    		else if (numSegs==7){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10); 	   
	        	}
	    		else {
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
	    		}
		    
	    		// Add the instruction into the instruction set
	    		bioMightInstructSet.addElement(bioInstruct);
			}	

		}	
		
		
		//Generate the CoccygeusMuscle
		//generateComponentRows(startID, componentType, componentName, componentID, currentPoints, bioMightInstructSet);
		//System.out.println("Generated the Rows for CoccygeusMuscleTissue: " + componentID + "   parent: " + parentID + "   " + componentType);

		return returnCode;
	}
						
				
			
	/***************************************************************************************
	 * GENERATE CORRUGATOR SUPERCILII MUSCLES
	 * 
	 * This generates the Corrugator Supercilii Muscles
	 * 
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/

	public int generateCorrugatorSuperciliiMuscle(String startID,
			String componentType, String componentName, String componentID,
			String parentID, double[][] currentPoints) throws DataException,
			DataSecurityException {
		System.out.println("Generate CorrugatorSuperciliiMuscle");

		int bodyID = 1;
		int projectID = 1;
		String vertices = "";

		ArrayList mySqlList = new ArrayList();
		int returnCode = 0;

		// We can generate the CorrugatorSuperciliiMuscle Muscle
		if (currentPoints == null) {
			double circumference = 0.125;

			double x = -8.0;
			double y = -10.0;
			double z = -1.0;

			// Create a equilateral octogon
			currentPoints[0][0] = x;
			currentPoints[0][1] = y;
			currentPoints[0][2] = z;

			currentPoints[1][0] = x - circumference;
			currentPoints[1][1] = y;
			currentPoints[1][2] = z - circumference;

			currentPoints[2][0] = x - circumference;
			currentPoints[2][1] = y;
			currentPoints[2][2] = z - circumference * 2;

			currentPoints[3][0] = x;
			currentPoints[3][1] = y;
			currentPoints[3][2] = z - circumference * 3;

			currentPoints[4][0] = x + circumference;
			currentPoints[4][1] = y;
			currentPoints[4][2] = z - circumference * 3;

			currentPoints[5][0] = x + circumference * 2;
			currentPoints[5][1] = y;
			currentPoints[5][2] = z - circumference * 2;

			currentPoints[6][0] = x + circumference * 2;
			currentPoints[6][1] = y;
			currentPoints[6][2] = z - circumference;

			currentPoints[7][0] = x + circumference;
			currentPoints[7][1] = y;
			currentPoints[7][2] = z;
		}

		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();

		if (parentID.equals("CorrugatorSuperciliiMuscle:01")) {
			int nMaxSegs = 6;
			for (int numSegs = 0; numSegs < nMaxSegs; numSegs++) {

				// Create a place for an instruction
				BioMightInstruction bioInstruct = new BioMightInstruction();

				if (numSegs == 0) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 1) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 2) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 3) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 4) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 5) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 6) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 7) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
				}

				// Add the instruction into the instruction set
				bioMightInstructSet.addElement(bioInstruct);
			}

		} else if (parentID.equals("CorrugatorSuperciliiMuscle:02")) {
			int nMaxSegs = 6;
			for (int numSegs = 0; numSegs < nMaxSegs; numSegs++) {

				// Create a place for an instruction
				BioMightInstruction bioInstruct = new BioMightInstruction();

				if (numSegs == 0) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 1) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 2) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 3) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 4) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 5) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 6) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 7) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
				}

				// Add the instruction into the instruction set
				bioMightInstructSet.addElement(bioInstruct);
			}

		}

		// Generate the CorrugatorSuperciliiMuscle
		// generateComponentRows(startID, componentType, componentName,
		// componentID, currentPoints, bioMightInstructSet);
		// System.out.println("Generated the Rows for CorrugatorSuperciliiMuscleTissue: "
		// + componentID + "   parent: " + parentID + "   " + componentType);

		return returnCode;
	}				
							
	/***************************************************************************************
	 * GENERATE CRICO ARYTENOID MUSCLES
	 * 
	 * This generates the Crico Arytenoid Muscles
	 * 
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/

	public int generateCricoArytenoidMuscle(String startID,
			String componentType, String componentName, String componentID,
			String parentID, double[][] currentPoints) throws DataException,
			DataSecurityException {
		System.out.println("Generate generateCricoArytenoidMuscle");

		int bodyID = 1;
		int projectID = 1;
		String vertices = "";

		ArrayList mySqlList = new ArrayList();
		int returnCode = 0;

		// We can generate the CricoArytenoidMuscle Muscle
		if (currentPoints == null) {
			double circumference = 0.125;

			double x = -8.0;
			double y = -10.0;
			double z = -1.0;

			// Create a equilateral octogon
			currentPoints[0][0] = x;
			currentPoints[0][1] = y;
			currentPoints[0][2] = z;

			currentPoints[1][0] = x - circumference;
			currentPoints[1][1] = y;
			currentPoints[1][2] = z - circumference;

			currentPoints[2][0] = x - circumference;
			currentPoints[2][1] = y;
			currentPoints[2][2] = z - circumference * 2;

			currentPoints[3][0] = x;
			currentPoints[3][1] = y;
			currentPoints[3][2] = z - circumference * 3;

			currentPoints[4][0] = x + circumference;
			currentPoints[4][1] = y;
			currentPoints[4][2] = z - circumference * 3;

			currentPoints[5][0] = x + circumference * 2;
			currentPoints[5][1] = y;
			currentPoints[5][2] = z - circumference * 2;

			currentPoints[6][0] = x + circumference * 2;
			currentPoints[6][1] = y;
			currentPoints[6][2] = z - circumference;

			currentPoints[7][0] = x + circumference;
			currentPoints[7][1] = y;
			currentPoints[7][2] = z;
		}

		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();

		if (parentID.equals("CricoArytenoidMuscle:01")) {
			int nMaxSegs = 6;
			for (int numSegs = 0; numSegs < nMaxSegs; numSegs++) {

				// Create a place for an instruction
				BioMightInstruction bioInstruct = new BioMightInstruction();

				if (numSegs == 0) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 1) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 2) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 3) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 4) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 5) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 6) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 7) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
				}

				// Add the instruction into the instruction set
				bioMightInstructSet.addElement(bioInstruct);
			}

		} else if (parentID.equals("CricoArytenoidMuscle:02")) {
			int nMaxSegs = 6;
			for (int numSegs = 0; numSegs < nMaxSegs; numSegs++) {

				// Create a place for an instruction
				BioMightInstruction bioInstruct = new BioMightInstruction();

				if (numSegs == 0) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 1) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 2) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 3) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 4) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 5) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 6) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 7) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
				}

				// Add the instruction into the instruction set
				bioMightInstructSet.addElement(bioInstruct);
			}

		}

		// Generate the CricoArytenoidMuscle
		// generateComponentRows(startID, componentType, componentName,
		// componentID, currentPoints, bioMightInstructSet);
		// System.out.println("Generated the Rows for CricoArytenoidMuscleTissue: "
		// + componentID + "   parent: " + parentID + "   " + componentType);

		return returnCode;
	}		
								
								
								
	/***************************************************************************************
	 * GENERATE DELTOIDEUS MUSCLES
	 * 
	 * This generates the Deltoideus Muscles
	 * 
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/

	public int generateDeltoideusMuscle(String startID, String componentType,
			String componentName, String componentID, String parentID,
			double[][] currentPoints) throws DataException,
			DataSecurityException {
		System.out.println("Generate generateDeltoideusMuscle");

		int bodyID = 1;
		int projectID = 1;
		String vertices = "";

		ArrayList mySqlList = new ArrayList();
		int returnCode = 0;

		// We can generate the DeltoideusMuscle Muscle
		if (currentPoints == null) {
			double circumference = 0.125;

			double x = -8.0;
			double y = -10.0;
			double z = -1.0;

			// Create a equilateral octogon
			currentPoints[0][0] = x;
			currentPoints[0][1] = y;
			currentPoints[0][2] = z;

			currentPoints[1][0] = x - circumference;
			currentPoints[1][1] = y;
			currentPoints[1][2] = z - circumference;

			currentPoints[2][0] = x - circumference;
			currentPoints[2][1] = y;
			currentPoints[2][2] = z - circumference * 2;

			currentPoints[3][0] = x;
			currentPoints[3][1] = y;
			currentPoints[3][2] = z - circumference * 3;

			currentPoints[4][0] = x + circumference;
			currentPoints[4][1] = y;
			currentPoints[4][2] = z - circumference * 3;

			currentPoints[5][0] = x + circumference * 2;
			currentPoints[5][1] = y;
			currentPoints[5][2] = z - circumference * 2;

			currentPoints[6][0] = x + circumference * 2;
			currentPoints[6][1] = y;
			currentPoints[6][2] = z - circumference;

			currentPoints[7][0] = x + circumference;
			currentPoints[7][1] = y;
			currentPoints[7][2] = z;
		}

		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();

		if (parentID.equals("DeltoideusMuscle:01")) {
			int nMaxSegs = 6;
			for (int numSegs = 0; numSegs < nMaxSegs; numSegs++) {

				// Create a place for an instruction
				BioMightInstruction bioInstruct = new BioMightInstruction();

				if (numSegs == 0) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 1) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 2) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 3) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 4) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 5) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 6) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 7) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
				}

				// Add the instruction into the instruction set
				bioMightInstructSet.addElement(bioInstruct);
			}

		} else if (parentID.equals("DeltoideusMuscle:02")) {
			int nMaxSegs = 6;
			for (int numSegs = 0; numSegs < nMaxSegs; numSegs++) {

				// Create a place for an instruction
				BioMightInstruction bioInstruct = new BioMightInstruction();

				if (numSegs == 0) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 1) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 2) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 3) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 4) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 5) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 6) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 7) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
				}

				// Add the instruction into the instruction set
				bioMightInstructSet.addElement(bioInstruct);
			}

		}

		// Generate the DeltoideusMuscle
		// generateComponentRows(startID, componentType, componentName,
		// componentID, currentPoints, bioMightInstructSet);
		// System.out.println("Generated the Rows for DeltoideusMuscleTissue: "
		// + componentID + "   parent: " + parentID + "   " + componentType);

		return returnCode;
	}		
									
									
									
									
	/***************************************************************************************
	 * GENERATE DEPRESSOR ANGULI ORIS MUSCLES
	 * 
	 * This generates the Depressor Anguli Oris Muscles  
	 * 
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/

		public int generateDepressorAnguliOrisMuscle(String startID, String componentType, String componentName, String componentID, String parentID, double[][] currentPoints) 
	throws DataException, DataSecurityException
		{	
		System.out.println("Generate generateDepressorAnguliOrisMuscle");
		
		int bodyID = 1;
		int projectID = 1;
		String vertices = "";
		
		ArrayList mySqlList= new ArrayList();
		int returnCode = 0;

		
		// We can generate the DepressorAnguliOrisMuscle Muscle
		if (currentPoints == null )
		{
			double circumference = 0.125;
	    	
			double x =  -8.0;
			double y =  -10.0;
			double z =  -1.0;
			
			// Create a equilateral octogon	
			currentPoints[0][0] =  x;
			currentPoints[0][1] =  y;
			currentPoints[0][2] =  z;
			
			currentPoints[1][0] =  x-circumference;
			currentPoints[1][1] =  y;
			currentPoints[1][2] =  z-circumference;
			
			currentPoints[2][0] =  x-circumference;
			currentPoints[2][1] =  y;
			currentPoints[2][2] =  z-circumference*2;
			
			currentPoints[3][0] =  x;
			currentPoints[3][1] =  y;
			currentPoints[3][2] =  z-circumference*3;

			currentPoints[4][0] =  x+circumference;
			currentPoints[4][1] =  y;
			currentPoints[4][2] =  z-circumference*3;
			
			currentPoints[5][0] =  x+circumference*2;
			currentPoints[5][1] =  y;
			currentPoints[5][2] =  z-circumference*2;

			currentPoints[6][0] =  x+circumference*2;
			currentPoints[6][1] =  y;
			currentPoints[6][2] =  z-circumference;

			currentPoints[7][0] =  x+circumference;
			currentPoints[7][1] =  y;
			currentPoints[7][2] =  z;
		}
		

		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();
		
		
		if (parentID.equals("DepressorAnguliOrisMuscle:01")) 
		{	
			int nMaxSegs = 6;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
				
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
		     
				if (numSegs==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10); 
				}
				else if (numSegs==1){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10); 
				}
				else if (numSegs==2){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);  
				}
				else if (numSegs==3){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10); 
				}
				else if (numSegs==4){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);    
				}	
				else if (numSegs==5){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);    
				}	
				else if (numSegs==6){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);    
				}	
				else if (numSegs==7){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);    
				}		
				else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
				}
	    
				// Add the instruction into the instruction set
				bioMightInstructSet.addElement(bioInstruct);
			}
		
		}
		else if (parentID.equals("DepressorAnguliOrisMuscle:02")) 
		{		
			int nMaxSegs = 6;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
			
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
		 
	    		if (numSegs==0){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
	    		}
	       		else if (numSegs==1){
	       			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
	           	}
	    		else if (numSegs==2){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
	    		}
	    		else if (numSegs==3){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
	    		}
	    		else if (numSegs==4){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10); 	   
	        	}
	    		else if (numSegs==5){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10); 	   
	        	}
	    		else if (numSegs==6){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10); 	   
	        	}
	    		else if (numSegs==7){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10); 	   
	        	}
	    		else {
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
	    		}
		    
	    		// Add the instruction into the instruction set
	    		bioMightInstructSet.addElement(bioInstruct);
			}	

		}	
		
		
		//Generate the DepressorAnguliOrisMuscle
		//generateComponentRows(startID, componentType, componentName, componentID, currentPoints, bioMightInstructSet);
		//System.out.println("Generated the Rows for DepressorAnguliOrisMuscleTissue: " + componentID + "   parent: " + parentID + "   " + componentType);

		return returnCode;
	}
		
		
		
		
								
								
						
	/***************************************************************************************
	 * GENERATE EPICRANIUS MUSCLES
	 * 
	 * This generates the Epicranius Muscles  
	 * 
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/

	public int generateEpicraniusMuscle(String startID, String componentType, String componentName, String componentID, String parentID, double[][] currentPoints) 
		throws DataException, DataSecurityException
			{	
			System.out.println("Generate generateEpicraniusMuscle");
			
			int bodyID = 1;
			int projectID = 1;
			String vertices = "";
			
			ArrayList mySqlList= new ArrayList();
			int returnCode = 0;

			
			// We can generate the EpicraniusMuscle Muscle
			if (currentPoints == null )
			{
				double circumference = 0.125;
		    	
				double x =  -8.0;
				double y =  -10.0;
				double z =  -1.0;
				
				// Create a equilateral octogon	
				currentPoints[0][0] =  x;
				currentPoints[0][1] =  y;
				currentPoints[0][2] =  z;
				
				currentPoints[1][0] =  x-circumference;
				currentPoints[1][1] =  y;
				currentPoints[1][2] =  z-circumference;
				
				currentPoints[2][0] =  x-circumference;
				currentPoints[2][1] =  y;
				currentPoints[2][2] =  z-circumference*2;
				
				currentPoints[3][0] =  x;
				currentPoints[3][1] =  y;
				currentPoints[3][2] =  z-circumference*3;

				currentPoints[4][0] =  x+circumference;
				currentPoints[4][1] =  y;
				currentPoints[4][2] =  z-circumference*3;
				
				currentPoints[5][0] =  x+circumference*2;
				currentPoints[5][1] =  y;
				currentPoints[5][2] =  z-circumference*2;

				currentPoints[6][0] =  x+circumference*2;
				currentPoints[6][1] =  y;
				currentPoints[6][2] =  z-circumference;

				currentPoints[7][0] =  x+circumference;
				currentPoints[7][1] =  y;
				currentPoints[7][2] =  z;
			}
			

			// Allocate an instruction set for building it
			BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();
			
			
			if (parentID.equals("EpicraniusMuscle:01")) 
			{	
				int nMaxSegs = 6;
				for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
					
					// Create a place for an instruction 
					BioMightInstruction bioInstruct = new BioMightInstruction();
			     
					if (numSegs==0){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10); 
					}
					else if (numSegs==1){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10); 
					}
					else if (numSegs==2){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);  
					}
					else if (numSegs==3){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10); 
					}
					else if (numSegs==4){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);    
					}	
					else if (numSegs==5){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);    
					}	
					else if (numSegs==6){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);    
					}	
					else if (numSegs==7){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);    
					}		
					else {
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
					}
		    
					// Add the instruction into the instruction set
					bioMightInstructSet.addElement(bioInstruct);
				}
			
			}
			else if (parentID.equals("EpicraniusMuscle:02")) 
			{		
				int nMaxSegs = 6;
				for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
				
					// Create a place for an instruction 
					BioMightInstruction bioInstruct = new BioMightInstruction();
			 
		    		if (numSegs==0){
		    			bioInstruct.setTransType(Constants.TRANSLATE);
		    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
		    		}
		       		else if (numSegs==1){
		       			bioInstruct.setTransType(Constants.TRANSLATE);
		    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
		           	}
		    		else if (numSegs==2){
		    			bioInstruct.setTransType(Constants.TRANSLATE);
		    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
		    		}
		    		else if (numSegs==3){
		    			bioInstruct.setTransType(Constants.TRANSLATE);
		    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
		    		}
		    		else if (numSegs==4){
		    			bioInstruct.setTransType(Constants.TRANSLATE);
		    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10); 	   
		        	}
		    		else if (numSegs==5){
		    			bioInstruct.setTransType(Constants.TRANSLATE);
		    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10); 	   
		        	}
		    		else if (numSegs==6){
		    			bioInstruct.setTransType(Constants.TRANSLATE);
		    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10); 	   
		        	}
		    		else if (numSegs==7){
		    			bioInstruct.setTransType(Constants.TRANSLATE);
		    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10); 	   
		        	}
		    		else {
		    			bioInstruct.setTransType(Constants.TRANSLATE);
		    			bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
		    		}
			    
		    		// Add the instruction into the instruction set
		    		bioMightInstructSet.addElement(bioInstruct);
				}	

			}	
			
			
			//Generate the EpicraniusMuscle
			//generateComponentRows(startID, componentType, componentName, componentID, currentPoints, bioMightInstructSet);
			//System.out.println("Generated the Rows for EpicraniusMuscleTissue: " + componentID + "   parent: " + parentID + "   " + componentType);

			return returnCode;
		}
									
							
									
		/***************************************************************************************
		 * GENERATE EXTENSOR DIGITORUM LONGUS MUSCLES
		 * 
		 * This generates the Extensor Digitorum Longus Muscles  
		 * 
		 * @param key
		 * @param user
		 * @return
		 * @throws DataException
		 * @throws DataSecurityException
		 ***************************************************************************************/

		public int generateExtensorDigitorumLongusMuscle(String startID, String componentType, String componentName, String componentID, String parentID, double[][] currentPoints) 
			throws DataException, DataSecurityException
				{	
				System.out.println("Generate ExtensorDigitorumLongusMuscle");
				
				int bodyID = 1;
				int projectID = 1;
				String vertices = "";
				
				ArrayList mySqlList= new ArrayList();
				int returnCode = 0;

				
				// We can generate the ExtensorDigitorumLongusMuscle Muscle
				if (currentPoints == null )
				{
					double circumference = 0.125;
			    	
					double x =  -8.0;
					double y =  -10.0;
					double z =  -1.0;
					
					// Create a equilateral octogon	
					currentPoints[0][0] =  x;
					currentPoints[0][1] =  y;
					currentPoints[0][2] =  z;
					
					currentPoints[1][0] =  x-circumference;
					currentPoints[1][1] =  y;
					currentPoints[1][2] =  z-circumference;
					
					currentPoints[2][0] =  x-circumference;
					currentPoints[2][1] =  y;
					currentPoints[2][2] =  z-circumference*2;
					
					currentPoints[3][0] =  x;
					currentPoints[3][1] =  y;
					currentPoints[3][2] =  z-circumference*3;

					currentPoints[4][0] =  x+circumference;
					currentPoints[4][1] =  y;
					currentPoints[4][2] =  z-circumference*3;
					
					currentPoints[5][0] =  x+circumference*2;
					currentPoints[5][1] =  y;
					currentPoints[5][2] =  z-circumference*2;

					currentPoints[6][0] =  x+circumference*2;
					currentPoints[6][1] =  y;
					currentPoints[6][2] =  z-circumference;

					currentPoints[7][0] =  x+circumference;
					currentPoints[7][1] =  y;
					currentPoints[7][2] =  z;
				}
				

				// Allocate an instruction set for building it
				BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();
				
				
				if (parentID.equals("ExtensorDigitorumLongusMuscle:01")) 
				{	
					int nMaxSegs = 6;
					for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
						
						// Create a place for an instruction 
						BioMightInstruction bioInstruct = new BioMightInstruction();
				     
						if (numSegs==0){
							bioInstruct.setTransType(Constants.TRANSLATE);
							bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10); 
						}
						else if (numSegs==1){
							bioInstruct.setTransType(Constants.TRANSLATE);
							bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10); 
						}
						else if (numSegs==2){
							bioInstruct.setTransType(Constants.TRANSLATE);
							bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);  
						}
						else if (numSegs==3){
							bioInstruct.setTransType(Constants.TRANSLATE);
							bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10); 
						}
						else if (numSegs==4){
							bioInstruct.setTransType(Constants.TRANSLATE);
							bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);    
						}	
						else if (numSegs==5){
							bioInstruct.setTransType(Constants.TRANSLATE);
							bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);    
						}	
						else if (numSegs==6){
							bioInstruct.setTransType(Constants.TRANSLATE);
							bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);    
						}	
						else if (numSegs==7){
							bioInstruct.setTransType(Constants.TRANSLATE);
							bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);    
						}		
						else {
							bioInstruct.setTransType(Constants.TRANSLATE);
							bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
						}
			    
						// Add the instruction into the instruction set
						bioMightInstructSet.addElement(bioInstruct);
					}
				
				}
				else if (parentID.equals("ExtensorDigitorumLongusMuscle:02")) 
				{		
					int nMaxSegs = 6;
					for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
					
						// Create a place for an instruction 
						BioMightInstruction bioInstruct = new BioMightInstruction();
				 
			    		if (numSegs==0){
			    			bioInstruct.setTransType(Constants.TRANSLATE);
			    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
			    		}
			       		else if (numSegs==1){
			       			bioInstruct.setTransType(Constants.TRANSLATE);
			    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
			           	}
			    		else if (numSegs==2){
			    			bioInstruct.setTransType(Constants.TRANSLATE);
			    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
			    		}
			    		else if (numSegs==3){
			    			bioInstruct.setTransType(Constants.TRANSLATE);
			    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
			    		}
			    		else if (numSegs==4){
			    			bioInstruct.setTransType(Constants.TRANSLATE);
			    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10); 	   
			        	}
			    		else if (numSegs==5){
			    			bioInstruct.setTransType(Constants.TRANSLATE);
			    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10); 	   
			        	}
			    		else if (numSegs==6){
			    			bioInstruct.setTransType(Constants.TRANSLATE);
			    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10); 	   
			        	}
			    		else if (numSegs==7){
			    			bioInstruct.setTransType(Constants.TRANSLATE);
			    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10); 	   
			        	}
			    		else {
			    			bioInstruct.setTransType(Constants.TRANSLATE);
			    			bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
			    		}
				    
			    		// Add the instruction into the instruction set
			    		bioMightInstructSet.addElement(bioInstruct);
					}	

				}	
				
				
				//Generate the ExtensorDigitorumLongusMuscle
				//generateComponentRows(startID, componentType, componentName, componentID, currentPoints, bioMightInstructSet);
				//System.out.println("Generated the Rows for ExtensorDigitorumLongusMuscleTissue: " + componentID + "   parent: " + parentID + "   " + componentType);

				return returnCode;
			}
			
			
			
				
		


/***************************************************************************************
 * GENERATE EXTENSOR HALLICUS LONGUS MUSCLES
 * 
 * This generates the Extensor Hallicus Longus Muscles  
 * 
 * @param key
 * @param user
 * @return
 * @throws DataException
 * @throws DataSecurityException
 ***************************************************************************************/

	public int generateExtensorHallicusLongusMuscle(String startID, String componentType, String componentName, String componentID, String parentID, double[][] currentPoints) 
	throws DataException, DataSecurityException
		{	
		System.out.println("Generate ExtensorHallicusLongusMuscle");
		
		int bodyID = 1;
		int projectID = 1;
		String vertices = "";
		
		ArrayList mySqlList= new ArrayList();
		int returnCode = 0;

		
		// We can generate the ExtensorHallicusLongusMuscle Muscle
		if (currentPoints == null )
		{
			double circumference = 0.125;
	    	
			double x =  -8.0;
			double y =  -10.0;
			double z =  -1.0;
			
			// Create a equilateral octogon	
			currentPoints[0][0] =  x;
			currentPoints[0][1] =  y;
			currentPoints[0][2] =  z;
			
			currentPoints[1][0] =  x-circumference;
			currentPoints[1][1] =  y;
			currentPoints[1][2] =  z-circumference;
			
			currentPoints[2][0] =  x-circumference;
			currentPoints[2][1] =  y;
			currentPoints[2][2] =  z-circumference*2;
			
			currentPoints[3][0] =  x;
			currentPoints[3][1] =  y;
			currentPoints[3][2] =  z-circumference*3;

			currentPoints[4][0] =  x+circumference;
			currentPoints[4][1] =  y;
			currentPoints[4][2] =  z-circumference*3;
			
			currentPoints[5][0] =  x+circumference*2;
			currentPoints[5][1] =  y;
			currentPoints[5][2] =  z-circumference*2;

			currentPoints[6][0] =  x+circumference*2;
			currentPoints[6][1] =  y;
			currentPoints[6][2] =  z-circumference;

			currentPoints[7][0] =  x+circumference;
			currentPoints[7][1] =  y;
			currentPoints[7][2] =  z;
		}
		

		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();
		
		
		if (parentID.equals("ExtensorHallicusLongusMuscle:01")) 
		{	
			int nMaxSegs = 6;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
				
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
		     
				if (numSegs==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10); 
				}
				else if (numSegs==1){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10); 
				}
				else if (numSegs==2){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);  
				}
				else if (numSegs==3){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10); 
				}
				else if (numSegs==4){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);    
				}	
				else if (numSegs==5){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);    
				}	
				else if (numSegs==6){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);    
				}	
				else if (numSegs==7){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);    
				}		
				else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
				}
	    
				// Add the instruction into the instruction set
				bioMightInstructSet.addElement(bioInstruct);
			}
		
		}
		else if (parentID.equals("ExtensorHallicusLongusMuscle:02")) 
		{		
			int nMaxSegs = 6;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
			
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
		 
	    		if (numSegs==0){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
	    		}
	       		else if (numSegs==1){
	       			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
	           	}
	    		else if (numSegs==2){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
	    		}
	    		else if (numSegs==3){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
	    		}
	    		else if (numSegs==4){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10); 	   
	        	}
	    		else if (numSegs==5){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10); 	   
	        	}
	    		else if (numSegs==6){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10); 	   
	        	}
	    		else if (numSegs==7){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10); 	   
	        	}
	    		else {
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
	    		}
		    
	    		// Add the instruction into the instruction set
	    		bioMightInstructSet.addElement(bioInstruct);
			}	

		}	
		
		
		//Generate the ExtensorHallicusLongusMuscle
		//generateComponentRows(startID, componentType, componentName, componentID, currentPoints, bioMightInstructSet);
		//System.out.println("Generated the Rows for ExtensorHallicusLongusMuscleTissue: " + componentID + "   parent: " + parentID + "   " + componentType);

		return returnCode;
	}			
						
						
				
	/***************************************************************************************
	 * GENERATE EXTENSOR POLLICIS BREVIS MUSCLES
	 * 
	 * This generates the Extensor Pollicis Brevis Muscles  
	 * 
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/

		public int generateExtensorPollicisBrevisMuscle(String startID, String componentType, String componentName, String componentID, String parentID, double[][] currentPoints) 
		throws DataException, DataSecurityException
			{	
			System.out.println("Generate ExtensorPollicisBrevisMuscle");
			
			int bodyID = 1;
			int projectID = 1;
			String vertices = "";
			
			ArrayList mySqlList= new ArrayList();
			int returnCode = 0;

			
			// We can generate the ExtensorPollicisBrevisMuscle Muscle
			if (currentPoints == null )
			{
				double circumference = 0.125;
		    	
				double x =  -8.0;
				double y =  -10.0;
				double z =  -1.0;
				
				// Create a equilateral octogon	
				currentPoints[0][0] =  x;
				currentPoints[0][1] =  y;
				currentPoints[0][2] =  z;
				
				currentPoints[1][0] =  x-circumference;
				currentPoints[1][1] =  y;
				currentPoints[1][2] =  z-circumference;
				
				currentPoints[2][0] =  x-circumference;
				currentPoints[2][1] =  y;
				currentPoints[2][2] =  z-circumference*2;
				
				currentPoints[3][0] =  x;
				currentPoints[3][1] =  y;
				currentPoints[3][2] =  z-circumference*3;

				currentPoints[4][0] =  x+circumference;
				currentPoints[4][1] =  y;
				currentPoints[4][2] =  z-circumference*3;
				
				currentPoints[5][0] =  x+circumference*2;
				currentPoints[5][1] =  y;
				currentPoints[5][2] =  z-circumference*2;

				currentPoints[6][0] =  x+circumference*2;
				currentPoints[6][1] =  y;
				currentPoints[6][2] =  z-circumference;

				currentPoints[7][0] =  x+circumference;
				currentPoints[7][1] =  y;
				currentPoints[7][2] =  z;
			}
			

			// Allocate an instruction set for building it
			BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();
			
			
			if (parentID.equals("ExtensorPollicisBrevisMuscle:01")) 
			{	
				int nMaxSegs = 6;
				for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
					
					// Create a place for an instruction 
					BioMightInstruction bioInstruct = new BioMightInstruction();
			     
					if (numSegs==0){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10); 
					}
					else if (numSegs==1){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10); 
					}
					else if (numSegs==2){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);  
					}
					else if (numSegs==3){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10); 
					}
					else if (numSegs==4){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);    
					}	
					else if (numSegs==5){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);    
					}	
					else if (numSegs==6){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);    
					}	
					else if (numSegs==7){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);    
					}		
					else {
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
					}
		    
					// Add the instruction into the instruction set
					bioMightInstructSet.addElement(bioInstruct);
				}
			
			}
			else if (parentID.equals("ExtensorPollicisBrevisMuscle:02")) 
			{		
				int nMaxSegs = 6;
				for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
				
					// Create a place for an instruction 
					BioMightInstruction bioInstruct = new BioMightInstruction();
			 
		    		if (numSegs==0){
		    			bioInstruct.setTransType(Constants.TRANSLATE);
		    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
		    		}
		       		else if (numSegs==1){
		       			bioInstruct.setTransType(Constants.TRANSLATE);
		    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
		           	}
		    		else if (numSegs==2){
		    			bioInstruct.setTransType(Constants.TRANSLATE);
		    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
		    		}
		    		else if (numSegs==3){
		    			bioInstruct.setTransType(Constants.TRANSLATE);
		    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
		    		}
		    		else if (numSegs==4){
		    			bioInstruct.setTransType(Constants.TRANSLATE);
		    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10); 	   
		        	}
		    		else if (numSegs==5){
		    			bioInstruct.setTransType(Constants.TRANSLATE);
		    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10); 	   
		        	}
		    		else if (numSegs==6){
		    			bioInstruct.setTransType(Constants.TRANSLATE);
		    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10); 	   
		        	}
		    		else if (numSegs==7){
		    			bioInstruct.setTransType(Constants.TRANSLATE);
		    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10); 	   
		        	}
		    		else {
		    			bioInstruct.setTransType(Constants.TRANSLATE);
		    			bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
		    		}
			    
		    		// Add the instruction into the instruction set
		    		bioMightInstructSet.addElement(bioInstruct);
				}	

			}	
			
			
			//Generate the ExtensorPollicisBrevisMuscle
			//generateComponentRows(startID, componentType, componentName, componentID, currentPoints, bioMightInstructSet);
			//System.out.println("Generated the Rows for ExtensorPollicisBrevisMuscleTissue: " + componentID + "   parent: " + parentID + "   " + componentType);

			return returnCode;
		}
		
		

	/***************************************************************************************
	 * GENERATE FLEXOR DIGITORUM LONGUS MUSCLES
	 * 
	 * This generates the Flexor Digitorum Longus Muscles  
	 * 
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/

	public int generateFlexorDigitorumLongusMuscle(String startID, String componentType, String componentName, String componentID, String parentID, double[][] currentPoints) 
		throws DataException, DataSecurityException
			{	
			System.out.println("Generate FlexorDigitorumLongusMuscle");
			
			int bodyID = 1;
			int projectID = 1;
			String vertices = "";
			
			ArrayList mySqlList= new ArrayList();
			int returnCode = 0;

			
			// We can generate the FlexorDigitorumLongusMuscle Muscle
			if (currentPoints == null )
			{
				double circumference = 0.125;
		    	
				double x =  -8.0;
				double y =  -10.0;
				double z =  -1.0;
				
				// Create a equilateral octogon	
				currentPoints[0][0] =  x;
				currentPoints[0][1] =  y;
				currentPoints[0][2] =  z;
				
				currentPoints[1][0] =  x-circumference;
				currentPoints[1][1] =  y;
				currentPoints[1][2] =  z-circumference;
				
				currentPoints[2][0] =  x-circumference;
				currentPoints[2][1] =  y;
				currentPoints[2][2] =  z-circumference*2;
				
				currentPoints[3][0] =  x;
				currentPoints[3][1] =  y;
				currentPoints[3][2] =  z-circumference*3;

				currentPoints[4][0] =  x+circumference;
				currentPoints[4][1] =  y;
				currentPoints[4][2] =  z-circumference*3;
				
				currentPoints[5][0] =  x+circumference*2;
				currentPoints[5][1] =  y;
				currentPoints[5][2] =  z-circumference*2;

				currentPoints[6][0] =  x+circumference*2;
				currentPoints[6][1] =  y;
				currentPoints[6][2] =  z-circumference;

				currentPoints[7][0] =  x+circumference;
				currentPoints[7][1] =  y;
				currentPoints[7][2] =  z;
			}
			

			// Allocate an instruction set for building it
			BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();
			
			
			if (parentID.equals("FlexorDigitorumLongusMuscle:01")) 
			{	
				int nMaxSegs = 6;
				for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
					
					// Create a place for an instruction 
					BioMightInstruction bioInstruct = new BioMightInstruction();
			     
					if (numSegs==0){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10); 
					}
					else if (numSegs==1){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10); 
					}
					else if (numSegs==2){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);  
					}
					else if (numSegs==3){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10); 
					}
					else if (numSegs==4){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);    
					}	
					else if (numSegs==5){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);    
					}	
					else if (numSegs==6){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);    
					}	
					else if (numSegs==7){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);    
					}		
					else {
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
					}
		    
					// Add the instruction into the instruction set
					bioMightInstructSet.addElement(bioInstruct);
				}
			
			}
			else if (parentID.equals("FlexorDigitorumLongusMuscle:02")) 
			{		
				int nMaxSegs = 6;
				for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
				
					// Create a place for an instruction 
					BioMightInstruction bioInstruct = new BioMightInstruction();
			 
		    		if (numSegs==0){
		    			bioInstruct.setTransType(Constants.TRANSLATE);
		    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
		    		}
		       		else if (numSegs==1){
		       			bioInstruct.setTransType(Constants.TRANSLATE);
		    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
		           	}
		    		else if (numSegs==2){
		    			bioInstruct.setTransType(Constants.TRANSLATE);
		    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
		    		}
		    		else if (numSegs==3){
		    			bioInstruct.setTransType(Constants.TRANSLATE);
		    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
		    		}
		    		else if (numSegs==4){
		    			bioInstruct.setTransType(Constants.TRANSLATE);
		    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10); 	   
		        	}
		    		else if (numSegs==5){
		    			bioInstruct.setTransType(Constants.TRANSLATE);
		    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10); 	   
		        	}
		    		else if (numSegs==6){
		    			bioInstruct.setTransType(Constants.TRANSLATE);
		    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10); 	   
		        	}
		    		else if (numSegs==7){
		    			bioInstruct.setTransType(Constants.TRANSLATE);
		    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10); 	   
		        	}
		    		else {
		    			bioInstruct.setTransType(Constants.TRANSLATE);
		    			bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
		    		}
			    
		    		// Add the instruction into the instruction set
		    		bioMightInstructSet.addElement(bioInstruct);
				}	

			}	
			
			
			//Generate the FlexorDigitorumLongusMuscle
			//generateComponentRows(startID, componentType, componentName, componentID, currentPoints, bioMightInstructSet);
			//System.out.println("Generated the Rows for FlexorDigitorumLongusMuscleTissue: " + componentID + "   parent: " + parentID + "   " + componentType);

			return returnCode;
		}
		
					

	/***************************************************************************************
	 * GENERATE FLEXOR POLLICIS BREVIS MUSCLES
	 * 
	 * This generates the Flexor Pollicis Brevis Muscles  
	 * 
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/

		public int generateFlexorPollicisBrevisMuscle(String startID, String componentType, String componentName, String componentID, String parentID, double[][] currentPoints) 
		throws DataException, DataSecurityException
			{	
			System.out.println("Generate FlexorPollicisBrevisMuscle");
			
			int bodyID = 1;
			int projectID = 1;
			String vertices = "";
			
			ArrayList mySqlList= new ArrayList();
			int returnCode = 0;

			
			// We can generate the FlexorPollicisBrevisMuscle Muscle
			if (currentPoints == null )
			{
				double circumference = 0.125;
		    	
				double x =  -8.0;
				double y =  -10.0;
				double z =  -1.0;
				
				// Create a equilateral octogon	
				currentPoints[0][0] =  x;
				currentPoints[0][1] =  y;
				currentPoints[0][2] =  z;
				
				currentPoints[1][0] =  x-circumference;
				currentPoints[1][1] =  y;
				currentPoints[1][2] =  z-circumference;
				
				currentPoints[2][0] =  x-circumference;
				currentPoints[2][1] =  y;
				currentPoints[2][2] =  z-circumference*2;
				
				currentPoints[3][0] =  x;
				currentPoints[3][1] =  y;
				currentPoints[3][2] =  z-circumference*3;

				currentPoints[4][0] =  x+circumference;
				currentPoints[4][1] =  y;
				currentPoints[4][2] =  z-circumference*3;
				
				currentPoints[5][0] =  x+circumference*2;
				currentPoints[5][1] =  y;
				currentPoints[5][2] =  z-circumference*2;

				currentPoints[6][0] =  x+circumference*2;
				currentPoints[6][1] =  y;
				currentPoints[6][2] =  z-circumference;

				currentPoints[7][0] =  x+circumference;
				currentPoints[7][1] =  y;
				currentPoints[7][2] =  z;
			}
			

			// Allocate an instruction set for building it
			BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();
			
			
			if (parentID.equals("FlexorPollicisBrevisMuscle:01")) 
			{	
				int nMaxSegs = 6;
				for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
					
					// Create a place for an instruction 
					BioMightInstruction bioInstruct = new BioMightInstruction();
			     
					if (numSegs==0){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10); 
					}
					else if (numSegs==1){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10); 
					}
					else if (numSegs==2){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);  
					}
					else if (numSegs==3){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10); 
					}
					else if (numSegs==4){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);    
					}	
					else if (numSegs==5){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);    
					}	
					else if (numSegs==6){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);    
					}	
					else if (numSegs==7){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);    
					}		
					else {
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
					}
		    
					// Add the instruction into the instruction set
					bioMightInstructSet.addElement(bioInstruct);
				}
			
			}
			else if (parentID.equals("FlexorPollicisBrevisMuscle:02")) 
			{		
				int nMaxSegs = 6;
				for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
				
					// Create a place for an instruction 
					BioMightInstruction bioInstruct = new BioMightInstruction();
			 
		    		if (numSegs==0){
		    			bioInstruct.setTransType(Constants.TRANSLATE);
		    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
		    		}
		       		else if (numSegs==1){
		       			bioInstruct.setTransType(Constants.TRANSLATE);
		    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
		           	}
		    		else if (numSegs==2){
		    			bioInstruct.setTransType(Constants.TRANSLATE);
		    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
		    		}
		    		else if (numSegs==3){
		    			bioInstruct.setTransType(Constants.TRANSLATE);
		    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
		    		}
		    		else if (numSegs==4){
		    			bioInstruct.setTransType(Constants.TRANSLATE);
		    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10); 	   
		        	}
		    		else if (numSegs==5){
		    			bioInstruct.setTransType(Constants.TRANSLATE);
		    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10); 	   
		        	}
		    		else if (numSegs==6){
		    			bioInstruct.setTransType(Constants.TRANSLATE);
		    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10); 	   
		        	}
		    		else if (numSegs==7){
		    			bioInstruct.setTransType(Constants.TRANSLATE);
		    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10); 	   
		        	}
		    		else {
		    			bioInstruct.setTransType(Constants.TRANSLATE);
		    			bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
		    		}
			    
		    		// Add the instruction into the instruction set
		    		bioMightInstructSet.addElement(bioInstruct);
				}	

			}	
			
			
			//Generate the FlexorPollicisBrevisMuscle
			//generateComponentRows(startID, componentType, componentName, componentID, currentPoints, bioMightInstructSet);
			//System.out.println("Generated the Rows for FlexorPollicisBrevisMuscleTeissue: " + componentID + "   parent: " + parentID + "   " + componentType);

			return returnCode;
		}
			
								
				
	/***************************************************************************************
	 * GENERATE FLEXOR POLLICIS LONGUS MUSCLES
	 * 
	 * This generates the Flexor Pollicis Longus Muscles  
	 * 
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/

		public int generateFlexorPollicisLongusMuscle(String startID, String componentType, String componentName, String componentID, String parentID, double[][] currentPoints) 
		throws DataException, DataSecurityException
			{	
			System.out.println("Generate FlexorPollicisLongusMuscle");
			
			int bodyID = 1;
			int projectID = 1;
			String vertices = "";
			
			ArrayList mySqlList= new ArrayList();
			int returnCode = 0;

			
			// We can generate the FlexorPollicisLongusMuscle Muscle
			if (currentPoints == null )
			{
				double circumference = 0.125;
		    	
				double x =  -8.0;
				double y =  -10.0;
				double z =  -1.0;
				
				// Create a equilateral octogon	
				currentPoints[0][0] =  x;
				currentPoints[0][1] =  y;
				currentPoints[0][2] =  z;
				
				currentPoints[1][0] =  x-circumference;
				currentPoints[1][1] =  y;
				currentPoints[1][2] =  z-circumference;
				
				currentPoints[2][0] =  x-circumference;
				currentPoints[2][1] =  y;
				currentPoints[2][2] =  z-circumference*2;
				
				currentPoints[3][0] =  x;
				currentPoints[3][1] =  y;
				currentPoints[3][2] =  z-circumference*3;

				currentPoints[4][0] =  x+circumference;
				currentPoints[4][1] =  y;
				currentPoints[4][2] =  z-circumference*3;
				
				currentPoints[5][0] =  x+circumference*2;
				currentPoints[5][1] =  y;
				currentPoints[5][2] =  z-circumference*2;

				currentPoints[6][0] =  x+circumference*2;
				currentPoints[6][1] =  y;
				currentPoints[6][2] =  z-circumference;

				currentPoints[7][0] =  x+circumference;
				currentPoints[7][1] =  y;
				currentPoints[7][2] =  z;
			}
			

			// Allocate an instruction set for building it
			BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();
			
			
			if (parentID.equals("FlexorPollicisLongusMuscle:01")) 
			{	
				int nMaxSegs = 6;
				for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
					
					// Create a place for an instruction 
					BioMightInstruction bioInstruct = new BioMightInstruction();
			     
					if (numSegs==0){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10); 
					}
					else if (numSegs==1){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10); 
					}
					else if (numSegs==2){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);  
					}
					else if (numSegs==3){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10); 
					}
					else if (numSegs==4){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);    
					}	
					else if (numSegs==5){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);    
					}	
					else if (numSegs==6){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);    
					}	
					else if (numSegs==7){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);    
					}		
					else {
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
					}
		    
					// Add the instruction into the instruction set
					bioMightInstructSet.addElement(bioInstruct);
				}
			
			}
			else if (parentID.equals("FlexorPollicisLongusMuscle:02")) 
			{		
				int nMaxSegs = 6;
				for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
				
					// Create a place for an instruction 
					BioMightInstruction bioInstruct = new BioMightInstruction();
			 
		    		if (numSegs==0){
		    			bioInstruct.setTransType(Constants.TRANSLATE);
		    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
		    		}
		       		else if (numSegs==1){
		       			bioInstruct.setTransType(Constants.TRANSLATE);
		    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
		           	}
		    		else if (numSegs==2){
		    			bioInstruct.setTransType(Constants.TRANSLATE);
		    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
		    		}
		    		else if (numSegs==3){
		    			bioInstruct.setTransType(Constants.TRANSLATE);
		    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
		    		}
		    		else if (numSegs==4){
		    			bioInstruct.setTransType(Constants.TRANSLATE);
		    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10); 	   
		        	}
		    		else if (numSegs==5){
		    			bioInstruct.setTransType(Constants.TRANSLATE);
		    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10); 	   
		        	}
		    		else if (numSegs==6){
		    			bioInstruct.setTransType(Constants.TRANSLATE);
		    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10); 	   
		        	}
		    		else if (numSegs==7){
		    			bioInstruct.setTransType(Constants.TRANSLATE);
		    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10); 	   
		        	}
		    		else {
		    			bioInstruct.setTransType(Constants.TRANSLATE);
		    			bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
		    		}
			    
		    		// Add the instruction into the instruction set
		    		bioMightInstructSet.addElement(bioInstruct);
				}	

			}	
			
			
			//Generate the FlexorPollicisLongusMuscle
			//generateComponentRows(startID, componentType, componentName, componentID, currentPoints, bioMightInstructSet);
			//System.out.println("Generated the Rows for FlexorPollicisLongusMuscleTeissue: " + componentID + "   parent: " + parentID + "   " + componentType);

			return returnCode;
		}
								
								
								
							
	/***************************************************************************************
	 * GENERATE FRONTALIS MUSCLES
	 * 
	 * This generates the Frontalis Muscles  
	 * 
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/

		public int generateFrontalisMuscle(String startID, String componentType, String componentName, String componentID, String parentID, double[][] currentPoints) 
		throws DataException, DataSecurityException
			{	
			System.out.println("Generate FrontalisMuscle");
			
			int bodyID = 1;
			int projectID = 1;
			String vertices = "";
			
			ArrayList mySqlList= new ArrayList();
			int returnCode = 0;

			
			// We can generate the FrontalisMuscle Muscle
			if (currentPoints == null )
			{
				double circumference = 0.125;
		    	
				double x =  -8.0;
				double y =  -10.0;
				double z =  -1.0;
				
				// Create a equilateral octogon	
				currentPoints[0][0] =  x;
				currentPoints[0][1] =  y;
				currentPoints[0][2] =  z;
				
				currentPoints[1][0] =  x-circumference;
				currentPoints[1][1] =  y;
				currentPoints[1][2] =  z-circumference;
				
				currentPoints[2][0] =  x-circumference;
				currentPoints[2][1] =  y;
				currentPoints[2][2] =  z-circumference*2;
				
				currentPoints[3][0] =  x;
				currentPoints[3][1] =  y;
				currentPoints[3][2] =  z-circumference*3;

				currentPoints[4][0] =  x+circumference;
				currentPoints[4][1] =  y;
				currentPoints[4][2] =  z-circumference*3;
				
				currentPoints[5][0] =  x+circumference*2;
				currentPoints[5][1] =  y;
				currentPoints[5][2] =  z-circumference*2;

				currentPoints[6][0] =  x+circumference*2;
				currentPoints[6][1] =  y;
				currentPoints[6][2] =  z-circumference;

				currentPoints[7][0] =  x+circumference;
				currentPoints[7][1] =  y;
				currentPoints[7][2] =  z;
			}
			

			// Allocate an instruction set for building it
			BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();
			
			
			if (parentID.equals("FrontalisMuscle:01")) 
			{	
				int nMaxSegs = 6;
				for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
					
					// Create a place for an instruction 
					BioMightInstruction bioInstruct = new BioMightInstruction();
			     
					if (numSegs==0){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10); 
					}
					else if (numSegs==1){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10); 
					}
					else if (numSegs==2){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);  
					}
					else if (numSegs==3){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10); 
					}
					else if (numSegs==4){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);    
					}	
					else if (numSegs==5){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);    
					}	
					else if (numSegs==6){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);    
					}	
					else if (numSegs==7){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);    
					}		
					else {
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
					}
		    
					// Add the instruction into the instruction set
					bioMightInstructSet.addElement(bioInstruct);
				}
			
			}
			else if (parentID.equals("FrontalisMuscle:02")) 
			{		
				int nMaxSegs = 6;
				for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
				
					// Create a place for an instruction 
					BioMightInstruction bioInstruct = new BioMightInstruction();
			 
		    		if (numSegs==0){
		    			bioInstruct.setTransType(Constants.TRANSLATE);
		    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
		    		}
		       		else if (numSegs==1){
		       			bioInstruct.setTransType(Constants.TRANSLATE);
		    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
		           	}
		    		else if (numSegs==2){
		    			bioInstruct.setTransType(Constants.TRANSLATE);
		    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
		    		}
		    		else if (numSegs==3){
		    			bioInstruct.setTransType(Constants.TRANSLATE);
		    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
		    		}
		    		else if (numSegs==4){
		    			bioInstruct.setTransType(Constants.TRANSLATE);
		    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10); 	   
		        	}
		    		else if (numSegs==5){
		    			bioInstruct.setTransType(Constants.TRANSLATE);
		    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10); 	   
		        	}
		    		else if (numSegs==6){
		    			bioInstruct.setTransType(Constants.TRANSLATE);
		    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10); 	   
		        	}
		    		else if (numSegs==7){
		    			bioInstruct.setTransType(Constants.TRANSLATE);
		    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10); 	   
		        	}
		    		else {
		    			bioInstruct.setTransType(Constants.TRANSLATE);
		    			bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
		    		}
			    
		    		// Add the instruction into the instruction set
		    		bioMightInstructSet.addElement(bioInstruct);
				}	

			}	
			
			
			//Generate the FrontalisMuscle
			//generateComponentRows(startID, componentType, componentName, componentID, currentPoints, bioMightInstructSet);
			//System.out.println("Generated the Rows for FrontalisMuscleTeissue: " + componentID + "   parent: " + parentID + "   " + componentType);

			return returnCode;
		}
		
									
			
	/***************************************************************************************
	 * GENERATE GENIO HHYOID MUSCLES
	 * 
	 * This generates the Genio Hyoid Muscles  
	 * 
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/

	public int generateGenioHyoidMuscle(String startID, String componentType, String componentName, String componentID, String parentID, double[][] currentPoints) 
	throws DataException, DataSecurityException
		{	
		System.out.println("Generate GenioHyoidMuscle");
		
		int bodyID = 1;
		int projectID = 1;
		String vertices = "";
		
		ArrayList mySqlList= new ArrayList();
		int returnCode = 0;

		
		// We can generate the GenioHyoidMuscle Muscle
		if (currentPoints == null )
		{
			double circumference = 0.125;
	    	
			double x =  -8.0;
			double y =  -10.0;
			double z =  -1.0;
			
			// Create a equilateral octogon	
			currentPoints[0][0] =  x;
			currentPoints[0][1] =  y;
			currentPoints[0][2] =  z;
			
			currentPoints[1][0] =  x-circumference;
			currentPoints[1][1] =  y;
			currentPoints[1][2] =  z-circumference;
			
			currentPoints[2][0] =  x-circumference;
			currentPoints[2][1] =  y;
			currentPoints[2][2] =  z-circumference*2;
			
			currentPoints[3][0] =  x;
			currentPoints[3][1] =  y;
			currentPoints[3][2] =  z-circumference*3;

			currentPoints[4][0] =  x+circumference;
			currentPoints[4][1] =  y;
			currentPoints[4][2] =  z-circumference*3;
			
			currentPoints[5][0] =  x+circumference*2;
			currentPoints[5][1] =  y;
			currentPoints[5][2] =  z-circumference*2;

			currentPoints[6][0] =  x+circumference*2;
			currentPoints[6][1] =  y;
			currentPoints[6][2] =  z-circumference;

			currentPoints[7][0] =  x+circumference;
			currentPoints[7][1] =  y;
			currentPoints[7][2] =  z;
		}
		

		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();
		
		
		if (parentID.equals("GenioHyoidMuscle:01")) 
		{	
			int nMaxSegs = 6;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
				
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
		     
				if (numSegs==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10); 
				}
				else if (numSegs==1){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10); 
				}
				else if (numSegs==2){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);  
				}
				else if (numSegs==3){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10); 
				}
				else if (numSegs==4){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);    
				}	
				else if (numSegs==5){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);    
				}	
				else if (numSegs==6){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);    
				}	
				else if (numSegs==7){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);    
				}		
				else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
				}
	    
				// Add the instruction into the instruction set
				bioMightInstructSet.addElement(bioInstruct);
			}
		
		}
		else if (parentID.equals("GenioHyoidMuscle:02")) 
		{		
			int nMaxSegs = 6;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
			
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
		 
	    		if (numSegs==0){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
	    		}
	       		else if (numSegs==1){
	       			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
	           	}
	    		else if (numSegs==2){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
	    		}
	    		else if (numSegs==3){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
	    		}
	    		else if (numSegs==4){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10); 	   
	        	}
	    		else if (numSegs==5){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10); 	   
	        	}
	    		else if (numSegs==6){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10); 	   
	        	}
	    		else if (numSegs==7){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10); 	   
	        	}
	    		else {
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
	    		}
		    
	    		// Add the instruction into the instruction set
	    		bioMightInstructSet.addElement(bioInstruct);
			}	

		}	
		
		
		//Generate the GenioHyoidMuscle
		//generateComponentRows(startID, componentType, componentName, componentID, currentPoints, bioMightInstructSet);
		//System.out.println("Generated the Rows for GenioHyoidMuscleTeissue: " + componentID + "   parent: " + parentID + "   " + componentType);

		return returnCode;
	}
			

	/***************************************************************************************
	 * GENERATE GLUTEUS MAXIMUS MUSCLES
	 * 
	 * This generates the Gluteus Maximus Muscles  
	 * 
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/

	 public int generateGluteusMaximusMuscle(String startID, String componentType, String componentName, String componentID, String parentID, double[][] currentPoints) 
		throws DataException, DataSecurityException
			{	
			System.out.println("Generate GluteusMaximusMuscle");
			
			int bodyID = 1;
			int projectID = 1;
			String vertices = "";
			
			ArrayList mySqlList= new ArrayList();
			int returnCode = 0;

			
			// We can generate the GluteusMaximusMuscle Muscle
			if (currentPoints == null )
			{
				double circumference = 0.125;
		    	
				double x =  -8.0;
				double y =  -10.0;
				double z =  -1.0;
				
				// Create a equilateral octogon	
				currentPoints[0][0] =  x;
				currentPoints[0][1] =  y;
				currentPoints[0][2] =  z;
				
				currentPoints[1][0] =  x-circumference;
				currentPoints[1][1] =  y;
				currentPoints[1][2] =  z-circumference;
				
				currentPoints[2][0] =  x-circumference;
				currentPoints[2][1] =  y;
				currentPoints[2][2] =  z-circumference*2;
				
				currentPoints[3][0] =  x;
				currentPoints[3][1] =  y;
				currentPoints[3][2] =  z-circumference*3;

				currentPoints[4][0] =  x+circumference;
				currentPoints[4][1] =  y;
				currentPoints[4][2] =  z-circumference*3;
				
				currentPoints[5][0] =  x+circumference*2;
				currentPoints[5][1] =  y;
				currentPoints[5][2] =  z-circumference*2;

				currentPoints[6][0] =  x+circumference*2;
				currentPoints[6][1] =  y;
				currentPoints[6][2] =  z-circumference;

				currentPoints[7][0] =  x+circumference;
				currentPoints[7][1] =  y;
				currentPoints[7][2] =  z;
			}
			

			// Allocate an instruction set for building it
			BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();
			
			
			if (parentID.equals("GluteusMaximusMuscle:01")) 
			{	
				int nMaxSegs = 6;
				for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
					
					// Create a place for an instruction 
					BioMightInstruction bioInstruct = new BioMightInstruction();
			     
					if (numSegs==0){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10); 
					}
					else if (numSegs==1){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10); 
					}
					else if (numSegs==2){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);  
					}
					else if (numSegs==3){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10); 
					}
					else if (numSegs==4){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);    
					}	
					else if (numSegs==5){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);    
					}	
					else if (numSegs==6){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);    
					}	
					else if (numSegs==7){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);    
					}		
					else {
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
					}
		    
					// Add the instruction into the instruction set
					bioMightInstructSet.addElement(bioInstruct);
				}
			
			}
			else if (parentID.equals("GluteusMaximusMuscle:02")) 
			{		
				int nMaxSegs = 6;
				for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
				
					// Create a place for an instruction 
					BioMightInstruction bioInstruct = new BioMightInstruction();
			 
		    		if (numSegs==0){
		    			bioInstruct.setTransType(Constants.TRANSLATE);
		    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
		    		}
		       		else if (numSegs==1){
		       			bioInstruct.setTransType(Constants.TRANSLATE);
		    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
		           	}
		    		else if (numSegs==2){
		    			bioInstruct.setTransType(Constants.TRANSLATE);
		    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
		    		}
		    		else if (numSegs==3){
		    			bioInstruct.setTransType(Constants.TRANSLATE);
		    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
		    		}
		    		else if (numSegs==4){
		    			bioInstruct.setTransType(Constants.TRANSLATE);
		    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10); 	   
		        	}
		    		else if (numSegs==5){
		    			bioInstruct.setTransType(Constants.TRANSLATE);
		    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10); 	   
		        	}
		    		else if (numSegs==6){
		    			bioInstruct.setTransType(Constants.TRANSLATE);
		    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10); 	   
		        	}
		    		else if (numSegs==7){
		    			bioInstruct.setTransType(Constants.TRANSLATE);
		    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10); 	   
		        	}
		    		else {
		    			bioInstruct.setTransType(Constants.TRANSLATE);
		    			bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
		    		}
			    
		    		// Add the instruction into the instruction set
		    		bioMightInstructSet.addElement(bioInstruct);
				}	

			}	
			
			
			//Generate the GluteusMaximusMuscle
			//generateComponentRows(startID, componentType, componentName, componentID, currentPoints, bioMightInstructSet);
			//System.out.println("Generated the Rows for GluteusMaximusMuscleTissue: " + componentID + "   parent: " + parentID + "   " + componentType);

			return returnCode;
		}
		
									
					
	/***************************************************************************************
	 * GENERATE GLUTEUS MEDIUS MUSCLES
	 * 
	 * This generates the Gluteus Medius Muscles  
	 * 
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/

	public int generateGluteusMediusMuscle(String startID, String componentType, String componentName, String componentID, String parentID, double[][] currentPoints) 
		throws DataException, DataSecurityException
			{	
			System.out.println("Generate GluteusMediusMuscle");
			
			int bodyID = 1;
			int projectID = 1;
			String vertices = "";
			
			ArrayList mySqlList= new ArrayList();
			int returnCode = 0;

			
			// We can generate the GluteusMediusMuscle Muscle
			if (currentPoints == null )
			{
				double circumference = 0.125;
		    	
				double x =  -8.0;
				double y =  -10.0;
				double z =  -1.0;
				
				// Create a equilateral octogon	
				currentPoints[0][0] =  x;
				currentPoints[0][1] =  y;
				currentPoints[0][2] =  z;
				
				currentPoints[1][0] =  x-circumference;
				currentPoints[1][1] =  y;
				currentPoints[1][2] =  z-circumference;
				
				currentPoints[2][0] =  x-circumference;
				currentPoints[2][1] =  y;
				currentPoints[2][2] =  z-circumference*2;
				
				currentPoints[3][0] =  x;
				currentPoints[3][1] =  y;
				currentPoints[3][2] =  z-circumference*3;

				currentPoints[4][0] =  x+circumference;
				currentPoints[4][1] =  y;
				currentPoints[4][2] =  z-circumference*3;
				
				currentPoints[5][0] =  x+circumference*2;
				currentPoints[5][1] =  y;
				currentPoints[5][2] =  z-circumference*2;

				currentPoints[6][0] =  x+circumference*2;
				currentPoints[6][1] =  y;
				currentPoints[6][2] =  z-circumference;

				currentPoints[7][0] =  x+circumference;
				currentPoints[7][1] =  y;
				currentPoints[7][2] =  z;
			}
			

			// Allocate an instruction set for building it
			BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();
			
			
			if (parentID.equals("GluteusMediusMuscle:01")) 
			{	
				int nMaxSegs = 6;
				for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
					
					// Create a place for an instruction 
					BioMightInstruction bioInstruct = new BioMightInstruction();
			     
					if (numSegs==0){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10); 
					}
					else if (numSegs==1){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10); 
					}
					else if (numSegs==2){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);  
					}
					else if (numSegs==3){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10); 
					}
					else if (numSegs==4){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);    
					}	
					else if (numSegs==5){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);    
					}	
					else if (numSegs==6){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);    
					}	
					else if (numSegs==7){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);    
					}		
					else {
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
					}
		    
					// Add the instruction into the instruction set
					bioMightInstructSet.addElement(bioInstruct);
				}
			
			}
			else if (parentID.equals("GluteusMediusMuscle:02")) 
			{		
				int nMaxSegs = 6;
				for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
				
					// Create a place for an instruction 
					BioMightInstruction bioInstruct = new BioMightInstruction();
			 
		    		if (numSegs==0){
		    			bioInstruct.setTransType(Constants.TRANSLATE);
		    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
		    		}
		       		else if (numSegs==1){
		       			bioInstruct.setTransType(Constants.TRANSLATE);
		    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
		           	}
		    		else if (numSegs==2){
		    			bioInstruct.setTransType(Constants.TRANSLATE);
		    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
		    		}
		    		else if (numSegs==3){
		    			bioInstruct.setTransType(Constants.TRANSLATE);
		    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
		    		}
		    		else if (numSegs==4){
		    			bioInstruct.setTransType(Constants.TRANSLATE);
		    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10); 	   
		        	}
		    		else if (numSegs==5){
		    			bioInstruct.setTransType(Constants.TRANSLATE);
		    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10); 	   
		        	}
		    		else if (numSegs==6){
		    			bioInstruct.setTransType(Constants.TRANSLATE);
		    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10); 	   
		        	}
		    		else if (numSegs==7){
		    			bioInstruct.setTransType(Constants.TRANSLATE);
		    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10); 	   
		        	}
		    		else {
		    			bioInstruct.setTransType(Constants.TRANSLATE);
		    			bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
		    		}
			    
		    		// Add the instruction into the instruction set
		    		bioMightInstructSet.addElement(bioInstruct);
				}	

			}	
			
			
			//Generate the GluteusMediusMuscle
			//generateComponentRows(startID, componentType, componentName, componentID, currentPoints, bioMightInstructSet);
			//System.out.println("Generated the Rows for GluteusMediusMuscleTissue: " + componentID + "   parent: " + parentID + "   " + componentType);

			return returnCode;
		}
						
						
								
								
								
								
								
					
	/***************************************************************************************
	 * GENERATE GLUTEUS MINIMUS MUSCLES
	 * 
	 * This generates the Gluteus Minimus Muscles  
	 * 
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/

	public int generateGluteusMinimusMuscle(String startID, String componentType, String componentName, String componentID, String parentID, double[][] currentPoints) 
	throws DataException, DataSecurityException
		{	
		System.out.println("Generate GluteusMinimusMuscle");
		
		int bodyID = 1;
		int projectID = 1;
		String vertices = "";
		
		ArrayList mySqlList= new ArrayList();
		int returnCode = 0;

		
		// We can generate the GluteusMinimusMuscle Muscle
		if (currentPoints == null )
		{
			double circumference = 0.125;
	    	
			double x =  -8.0;
			double y =  -10.0;
			double z =  -1.0;
			
			// Create a equilateral octogon	
			currentPoints[0][0] =  x;
			currentPoints[0][1] =  y;
			currentPoints[0][2] =  z;
			
			currentPoints[1][0] =  x-circumference;
			currentPoints[1][1] =  y;
			currentPoints[1][2] =  z-circumference;
			
			currentPoints[2][0] =  x-circumference;
			currentPoints[2][1] =  y;
			currentPoints[2][2] =  z-circumference*2;
			
			currentPoints[3][0] =  x;
			currentPoints[3][1] =  y;
			currentPoints[3][2] =  z-circumference*3;

			currentPoints[4][0] =  x+circumference;
			currentPoints[4][1] =  y;
			currentPoints[4][2] =  z-circumference*3;
			
			currentPoints[5][0] =  x+circumference*2;
			currentPoints[5][1] =  y;
			currentPoints[5][2] =  z-circumference*2;

			currentPoints[6][0] =  x+circumference*2;
			currentPoints[6][1] =  y;
			currentPoints[6][2] =  z-circumference;

			currentPoints[7][0] =  x+circumference;
			currentPoints[7][1] =  y;
			currentPoints[7][2] =  z;
		}
		

		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();
		
		
		if (parentID.equals("GluteusMinimusMuscle:01")) 
		{	
			int nMaxSegs = 6;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
				
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
		     
				if (numSegs==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10); 
				}
				else if (numSegs==1){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10); 
				}
				else if (numSegs==2){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);  
				}
				else if (numSegs==3){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10); 
				}
				else if (numSegs==4){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);    
				}	
				else if (numSegs==5){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);    
				}	
				else if (numSegs==6){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);    
				}	
				else if (numSegs==7){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);    
				}		
				else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
				}
	    
				// Add the instruction into the instruction set
				bioMightInstructSet.addElement(bioInstruct);
			}
		
		}
		else if (parentID.equals("GluteusMinimusMuscle:02")) 
		{		
			int nMaxSegs = 6;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
			
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
		 
	    		if (numSegs==0){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
	    		}
	       		else if (numSegs==1){
	       			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
	           	}
	    		else if (numSegs==2){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
	    		}
	    		else if (numSegs==3){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
	    		}
	    		else if (numSegs==4){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10); 	   
	        	}
	    		else if (numSegs==5){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10); 	   
	        	}
	    		else if (numSegs==6){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10); 	   
	        	}
	    		else if (numSegs==7){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10); 	   
	        	}
	    		else {
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
	    		}
		    
	    		// Add the instruction into the instruction set
	    		bioMightInstructSet.addElement(bioInstruct);
			}	

		}	
		
		
		//Generate the GluteusMinimusMuscle
		//generateComponentRows(startID, componentType, componentName, componentID, currentPoints, bioMightInstructSet);
		//System.out.println("Generated the Rows for GluteusMinimusMuscleTissue: " + componentID + "   parent: " + parentID + "   " + componentType);

		return returnCode;
	}
	
	
	
		
					
			
			
	/***************************************************************************************
	 * GENERATE GRACILIS MUSCLES
	 * 
	 * This generates the Gracilis Muscles  
	 * 
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/

		public int generateGracilisMuscle(String startID, String componentType, String componentName, String componentID, String parentID, double[][] currentPoints) 
		throws DataException, DataSecurityException
			{	
			System.out.println("Generate GracilisMuscle");
			
			int bodyID = 1;
			int projectID = 1;
			String vertices = "";
			
			ArrayList mySqlList= new ArrayList();
			int returnCode = 0;

			
			// We can generate the GracilisMuscle Muscle
			if (currentPoints == null )
			{
				double circumference = 0.125;
		    	
				double x =  -8.0;
				double y =  -10.0;
				double z =  -1.0;
				
				// Create a equilateral octogon	
				currentPoints[0][0] =  x;
				currentPoints[0][1] =  y;
				currentPoints[0][2] =  z;
				
				currentPoints[1][0] =  x-circumference;
				currentPoints[1][1] =  y;
				currentPoints[1][2] =  z-circumference;
				
				currentPoints[2][0] =  x-circumference;
				currentPoints[2][1] =  y;
				currentPoints[2][2] =  z-circumference*2;
				
				currentPoints[3][0] =  x;
				currentPoints[3][1] =  y;
				currentPoints[3][2] =  z-circumference*3;

				currentPoints[4][0] =  x+circumference;
				currentPoints[4][1] =  y;
				currentPoints[4][2] =  z-circumference*3;
				
				currentPoints[5][0] =  x+circumference*2;
				currentPoints[5][1] =  y;
				currentPoints[5][2] =  z-circumference*2;

				currentPoints[6][0] =  x+circumference*2;
				currentPoints[6][1] =  y;
				currentPoints[6][2] =  z-circumference;

				currentPoints[7][0] =  x+circumference;
				currentPoints[7][1] =  y;
				currentPoints[7][2] =  z;
			}
			

			// Allocate an instruction set for building it
			BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();
			
			
			if (parentID.equals("GracilisMuscle:01")) 
			{	
				int nMaxSegs = 6;
				for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
					
					// Create a place for an instruction 
					BioMightInstruction bioInstruct = new BioMightInstruction();
			     
					if (numSegs==0){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10); 
					}
					else if (numSegs==1){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10); 
					}
					else if (numSegs==2){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);  
					}
					else if (numSegs==3){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10); 
					}
					else if (numSegs==4){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);    
					}	
					else if (numSegs==5){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);    
					}	
					else if (numSegs==6){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);    
					}	
					else if (numSegs==7){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);    
					}		
					else {
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
					}
		    
					// Add the instruction into the instruction set
					bioMightInstructSet.addElement(bioInstruct);
				}
			
			}
			else if (parentID.equals("GracilisMuscle:02")) 
			{		
				int nMaxSegs = 6;
				for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
				
					// Create a place for an instruction 
					BioMightInstruction bioInstruct = new BioMightInstruction();
			 
		    		if (numSegs==0){
		    			bioInstruct.setTransType(Constants.TRANSLATE);
		    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
		    		}
		       		else if (numSegs==1){
		       			bioInstruct.setTransType(Constants.TRANSLATE);
		    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
		           	}
		    		else if (numSegs==2){
		    			bioInstruct.setTransType(Constants.TRANSLATE);
		    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
		    		}
		    		else if (numSegs==3){
		    			bioInstruct.setTransType(Constants.TRANSLATE);
		    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
		    		}
		    		else if (numSegs==4){
		    			bioInstruct.setTransType(Constants.TRANSLATE);
		    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10); 	   
		        	}
		    		else if (numSegs==5){
		    			bioInstruct.setTransType(Constants.TRANSLATE);
		    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10); 	   
		        	}
		    		else if (numSegs==6){
		    			bioInstruct.setTransType(Constants.TRANSLATE);
		    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10); 	   
		        	}
		    		else if (numSegs==7){
		    			bioInstruct.setTransType(Constants.TRANSLATE);
		    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10); 	   
		        	}
		    		else {
		    			bioInstruct.setTransType(Constants.TRANSLATE);
		    			bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
		    		}
			    
		    		// Add the instruction into the instruction set
		    		bioMightInstructSet.addElement(bioInstruct);
				}	

			}	
			
			
			//Generate the GracilisMuscle
			//generateComponentRows(startID, componentType, componentName, componentID, currentPoints, bioMightInstructSet);
			//System.out.println("Generated the Rows for GracilisMuscleTissue: " + componentID + "   parent: " + parentID + "   " + componentType);

			return returnCode;
		}
				
				
				
						
				
				
			
	/***************************************************************************************
	 * GENERATE HIP MUSCLES
	 * 
	 * This generates the Hip Muscles  
	 * 
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/

	public int generateHipMuscle(String startID, String componentType, String componentName, String componentID, String parentID, double[][] currentPoints) 
	throws DataException, DataSecurityException
		{	
		System.out.println("Generate HipMuscle");
		
		int bodyID = 1;
		int projectID = 1;
		String vertices = "";
		
		ArrayList mySqlList= new ArrayList();
		int returnCode = 0;

		
		// We can generate the HipMuscle Muscle
		if (currentPoints == null )
		{
			double circumference = 0.125;
	    	
			double x =  -8.0;
			double y =  -10.0;
			double z =  -1.0;
			
			// Create a equilateral octogon	
			currentPoints[0][0] =  x;
			currentPoints[0][1] =  y;
			currentPoints[0][2] =  z;
			
			currentPoints[1][0] =  x-circumference;
			currentPoints[1][1] =  y;
			currentPoints[1][2] =  z-circumference;
			
			currentPoints[2][0] =  x-circumference;
			currentPoints[2][1] =  y;
			currentPoints[2][2] =  z-circumference*2;
			
			currentPoints[3][0] =  x;
			currentPoints[3][1] =  y;
			currentPoints[3][2] =  z-circumference*3;

			currentPoints[4][0] =  x+circumference;
			currentPoints[4][1] =  y;
			currentPoints[4][2] =  z-circumference*3;
			
			currentPoints[5][0] =  x+circumference*2;
			currentPoints[5][1] =  y;
			currentPoints[5][2] =  z-circumference*2;

			currentPoints[6][0] =  x+circumference*2;
			currentPoints[6][1] =  y;
			currentPoints[6][2] =  z-circumference;

			currentPoints[7][0] =  x+circumference;
			currentPoints[7][1] =  y;
			currentPoints[7][2] =  z;
		}
		

		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();
		
		
		if (parentID.equals("HipMuscle:01")) 
		{	
			int nMaxSegs = 6;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
				
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
		     
				if (numSegs==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10); 
				}
				else if (numSegs==1){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10); 
				}
				else if (numSegs==2){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);  
				}
				else if (numSegs==3){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10); 
				}
				else if (numSegs==4){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);    
				}	
				else if (numSegs==5){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);    
				}	
				else if (numSegs==6){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);    
				}	
				else if (numSegs==7){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);    
				}		
				else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
				}
	    
				// Add the instruction into the instruction set
				bioMightInstructSet.addElement(bioInstruct);
			}
		
		}
		else if (parentID.equals("HipMuscle:02")) 
		{		
			int nMaxSegs = 6;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
			
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
		 
	    		if (numSegs==0){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
	    		}
	       		else if (numSegs==1){
	       			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
	           	}
	    		else if (numSegs==2){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
	    		}
	    		else if (numSegs==3){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
	    		}
	    		else if (numSegs==4){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10); 	   
	        	}
	    		else if (numSegs==5){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10); 	   
	        	}
	    		else if (numSegs==6){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10); 	   
	        	}
	    		else if (numSegs==7){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10); 	   
	        	}
	    		else {
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
	    		}
		    
	    		// Add the instruction into the instruction set
	    		bioMightInstructSet.addElement(bioInstruct);
			}	

		}	
		
		
		//Generate the HipMuscle
		//generateComponentRows(startID, componentType, componentName, componentID, currentPoints, bioMightInstructSet);
		//System.out.println("Generated the Rows for HipMuscleTissue: " + componentID + "   parent: " + parentID + "   " + componentType);

		return returnCode;
	}
	
	
			
					
					
			
	/***************************************************************************************
	 * GENERATE ILOTIBIAL TRACT MUSCLES
	 * 
	 * This generates the Ilotibial Tract Muscles  
	 * 
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/

	public int generateIlotibialTractMuscle(String startID, String componentType, String componentName, String componentID, String parentID, double[][] currentPoints) 
	throws DataException, DataSecurityException
		{	
		System.out.println("Generate IlotibialTractMuscle");
		
		int bodyID = 1;
		int projectID = 1;
		String vertices = "";
		
		ArrayList mySqlList= new ArrayList();
		int returnCode = 0;

		
		// We can generate the IlotibialTractMuscle Muscle
		if (currentPoints == null )
		{
			double circumference = 0.125;
	    	
			double x =  -8.0;
			double y =  -10.0;
			double z =  -1.0;
			
			// Create a equilateral octogon	
			currentPoints[0][0] =  x;
			currentPoints[0][1] =  y;
			currentPoints[0][2] =  z;
			
			currentPoints[1][0] =  x-circumference;
			currentPoints[1][1] =  y;
			currentPoints[1][2] =  z-circumference;
			
			currentPoints[2][0] =  x-circumference;
			currentPoints[2][1] =  y;
			currentPoints[2][2] =  z-circumference*2;
			
			currentPoints[3][0] =  x;
			currentPoints[3][1] =  y;
			currentPoints[3][2] =  z-circumference*3;

			currentPoints[4][0] =  x+circumference;
			currentPoints[4][1] =  y;
			currentPoints[4][2] =  z-circumference*3;
			
			currentPoints[5][0] =  x+circumference*2;
			currentPoints[5][1] =  y;
			currentPoints[5][2] =  z-circumference*2;

			currentPoints[6][0] =  x+circumference*2;
			currentPoints[6][1] =  y;
			currentPoints[6][2] =  z-circumference;

			currentPoints[7][0] =  x+circumference;
			currentPoints[7][1] =  y;
			currentPoints[7][2] =  z;
		}
		

		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();
		
		
		if (parentID.equals("IlotibialTractMuscle:01")) 
		{	
			int nMaxSegs = 6;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
				
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
		     
				if (numSegs==0){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10); 
				}
				else if (numSegs==1){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10); 
				}
				else if (numSegs==2){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);  
				}
				else if (numSegs==3){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10); 
				}
				else if (numSegs==4){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);    
				}	
				else if (numSegs==5){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);    
				}	
				else if (numSegs==6){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);    
				}	
				else if (numSegs==7){
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);    
				}		
				else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
				}
	    
				// Add the instruction into the instruction set
				bioMightInstructSet.addElement(bioInstruct);
			}
		
		}
		else if (parentID.equals("IlotibialTractMuscle:02")) 
		{		
			int nMaxSegs = 6;
			for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
			
				// Create a place for an instruction 
				BioMightInstruction bioInstruct = new BioMightInstruction();
		 
	    		if (numSegs==0){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
	    		}
	       		else if (numSegs==1){
	       			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
	           	}
	    		else if (numSegs==2){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
	    		}
	    		else if (numSegs==3){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
	    		}
	    		else if (numSegs==4){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10); 	   
	        	}
	    		else if (numSegs==5){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10); 	   
	        	}
	    		else if (numSegs==6){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10); 	   
	        	}
	    		else if (numSegs==7){
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10); 	   
	        	}
	    		else {
	    			bioInstruct.setTransType(Constants.TRANSLATE);
	    			bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
	    		}
		    
	    		// Add the instruction into the instruction set
	    		bioMightInstructSet.addElement(bioInstruct);
			}	

		}	
		
		
		//Generate the IlotibialTractMuscle
		//generateComponentRows(startID, componentType, componentName, componentID, currentPoints, bioMightInstructSet);
		//System.out.println("Generated the Rows for IlotibialTractMuscleTissue: " + componentID + "   parent: " + parentID + "   " + componentType);

		return returnCode;
	}
	
			
					
					
	/***************************************************************************************
	 * GENERATE INFERIOR LONGITUDINAL MUSCLES
	 * 
	 * This generates the Inferior Longitudinal Muscles  
	 * 
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/

		public int generateInferiorLongitudinalMuscle(String startID, String componentType, String componentName, String componentID, String parentID, double[][] currentPoints) 
		throws DataException, DataSecurityException
			{	
			System.out.println("Generate InferiorLongitudinalMuscle");
			
			int bodyID = 1;
			int projectID = 1;
			String vertices = "";
			
			ArrayList mySqlList= new ArrayList();
			int returnCode = 0;

			
			// We can generate the InferiorLongitudinalMuscle Muscle
			if (currentPoints == null )
			{
				double circumference = 0.125;
		    	
				double x =  -8.0;
				double y =  -10.0;
				double z =  -1.0;
				
				// Create a equilateral octogon	
				currentPoints[0][0] =  x;
				currentPoints[0][1] =  y;
				currentPoints[0][2] =  z;
				
				currentPoints[1][0] =  x-circumference;
				currentPoints[1][1] =  y;
				currentPoints[1][2] =  z-circumference;
				
				currentPoints[2][0] =  x-circumference;
				currentPoints[2][1] =  y;
				currentPoints[2][2] =  z-circumference*2;
				
				currentPoints[3][0] =  x;
				currentPoints[3][1] =  y;
				currentPoints[3][2] =  z-circumference*3;

				currentPoints[4][0] =  x+circumference;
				currentPoints[4][1] =  y;
				currentPoints[4][2] =  z-circumference*3;
				
				currentPoints[5][0] =  x+circumference*2;
				currentPoints[5][1] =  y;
				currentPoints[5][2] =  z-circumference*2;

				currentPoints[6][0] =  x+circumference*2;
				currentPoints[6][1] =  y;
				currentPoints[6][2] =  z-circumference;

				currentPoints[7][0] =  x+circumference;
				currentPoints[7][1] =  y;
				currentPoints[7][2] =  z;
			}
			

			// Allocate an instruction set for building it
			BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();
			
			
			if (parentID.equals("InferiorLongitudinalMuscle:01")) 
			{	
				int nMaxSegs = 6;
				for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
					
					// Create a place for an instruction 
					BioMightInstruction bioInstruct = new BioMightInstruction();
			     
					if (numSegs==0){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10); 
					}
					else if (numSegs==1){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10); 
					}
					else if (numSegs==2){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);  
					}
					else if (numSegs==3){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10); 
					}
					else if (numSegs==4){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);    
					}	
					else if (numSegs==5){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);    
					}	
					else if (numSegs==6){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);    
					}	
					else if (numSegs==7){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);    
					}		
					else {
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
					}
		    
					// Add the instruction into the instruction set
					bioMightInstructSet.addElement(bioInstruct);
				}
			
			}
			else if (parentID.equals("InferiorLongitudinalMuscle:02")) 
			{		
				int nMaxSegs = 6;
				for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
				
					// Create a place for an instruction 
					BioMightInstruction bioInstruct = new BioMightInstruction();
			 
		    		if (numSegs==0){
		    			bioInstruct.setTransType(Constants.TRANSLATE);
		    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
		    		}
		       		else if (numSegs==1){
		       			bioInstruct.setTransType(Constants.TRANSLATE);
		    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
		           	}
		    		else if (numSegs==2){
		    			bioInstruct.setTransType(Constants.TRANSLATE);
		    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
		    		}
		    		else if (numSegs==3){
		    			bioInstruct.setTransType(Constants.TRANSLATE);
		    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
		    		}
		    		else if (numSegs==4){
		    			bioInstruct.setTransType(Constants.TRANSLATE);
		    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10); 	   
		        	}
		    		else if (numSegs==5){
		    			bioInstruct.setTransType(Constants.TRANSLATE);
		    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10); 	   
		        	}
		    		else if (numSegs==6){
		    			bioInstruct.setTransType(Constants.TRANSLATE);
		    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10); 	   
		        	}
		    		else if (numSegs==7){
		    			bioInstruct.setTransType(Constants.TRANSLATE);
		    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10); 	   
		        	}
		    		else {
		    			bioInstruct.setTransType(Constants.TRANSLATE);
		    			bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
		    		}
			    
		    		// Add the instruction into the instruction set
		    		bioMightInstructSet.addElement(bioInstruct);
				}	

			}	
			
			
			//Generate the InferiorLongitudinalMuscle
			//generateComponentRows(startID, componentType, componentName, componentID, currentPoints, bioMightInstructSet);
			//System.out.println("Generated the Rows for InferiorLongitudinalMuscleTissue: " + componentID + "   parent: " + parentID + "   " + componentType);

			return returnCode;
		}
					
					
							
							
							
	
	/***************************************************************************************
	 * GENERATE INFERIOR OBLIQUE MUSCLES
	 * 
	 * This generates the Inferior Oblique Muscles  
	 * 
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/

		public int generateInferiorObliqueMuscle(String startID, String componentType, String componentName, String componentID, String parentID, double[][] currentPoints) 
		throws DataException, DataSecurityException
			{	
			System.out.println("Generate InferiorObliqueMuscle");
			
			int bodyID = 1;
			int projectID = 1;
			String vertices = "";
			
			ArrayList mySqlList= new ArrayList();
			int returnCode = 0;

			
			// We can generate the InferiorObliqueMuscle Muscle
			if (currentPoints == null )
			{
				double circumference = 0.125;
		    	
				double x =  -8.0;
				double y =  -10.0;
				double z =  -1.0;
				
				// Create a equilateral octogon	
				currentPoints[0][0] =  x;
				currentPoints[0][1] =  y;
				currentPoints[0][2] =  z;
				
				currentPoints[1][0] =  x-circumference;
				currentPoints[1][1] =  y;
				currentPoints[1][2] =  z-circumference;
				
				currentPoints[2][0] =  x-circumference;
				currentPoints[2][1] =  y;
				currentPoints[2][2] =  z-circumference*2;
				
				currentPoints[3][0] =  x;
				currentPoints[3][1] =  y;
				currentPoints[3][2] =  z-circumference*3;

				currentPoints[4][0] =  x+circumference;
				currentPoints[4][1] =  y;
				currentPoints[4][2] =  z-circumference*3;
				
				currentPoints[5][0] =  x+circumference*2;
				currentPoints[5][1] =  y;
				currentPoints[5][2] =  z-circumference*2;

				currentPoints[6][0] =  x+circumference*2;
				currentPoints[6][1] =  y;
				currentPoints[6][2] =  z-circumference;

				currentPoints[7][0] =  x+circumference;
				currentPoints[7][1] =  y;
				currentPoints[7][2] =  z;
			}
			

			// Allocate an instruction set for building it
			BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();
			
			
			if (parentID.equals("InferiorObliqueMuscle:01")) 
			{	
				int nMaxSegs = 6;
				for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
					
					// Create a place for an instruction 
					BioMightInstruction bioInstruct = new BioMightInstruction();
			     
					if (numSegs==0){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10); 
					}
					else if (numSegs==1){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10); 
					}
					else if (numSegs==2){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);  
					}
					else if (numSegs==3){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10); 
					}
					else if (numSegs==4){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);    
					}	
					else if (numSegs==5){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);    
					}	
					else if (numSegs==6){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);    
					}	
					else if (numSegs==7){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);    
					}		
					else {
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
					}
		    
					// Add the instruction into the instruction set
					bioMightInstructSet.addElement(bioInstruct);
				}
			
			}
			else if (parentID.equals("InferiorObliqueMuscle:02")) 
			{		
				int nMaxSegs = 6;
				for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
				
					// Create a place for an instruction 
					BioMightInstruction bioInstruct = new BioMightInstruction();
			 
		    		if (numSegs==0){
		    			bioInstruct.setTransType(Constants.TRANSLATE);
		    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
		    		}
		       		else if (numSegs==1){
		       			bioInstruct.setTransType(Constants.TRANSLATE);
		    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
		           	}
		    		else if (numSegs==2){
		    			bioInstruct.setTransType(Constants.TRANSLATE);
		    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
		    		}
		    		else if (numSegs==3){
		    			bioInstruct.setTransType(Constants.TRANSLATE);
		    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
		    		}
		    		else if (numSegs==4){
		    			bioInstruct.setTransType(Constants.TRANSLATE);
		    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10); 	   
		        	}
		    		else if (numSegs==5){
		    			bioInstruct.setTransType(Constants.TRANSLATE);
		    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10); 	   
		        	}
		    		else if (numSegs==6){
		    			bioInstruct.setTransType(Constants.TRANSLATE);
		    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10); 	   
		        	}
		    		else if (numSegs==7){
		    			bioInstruct.setTransType(Constants.TRANSLATE);
		    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10); 	   
		        	}
		    		else {
		    			bioInstruct.setTransType(Constants.TRANSLATE);
		    			bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
		    		}
			    
		    		// Add the instruction into the instruction set
		    		bioMightInstructSet.addElement(bioInstruct);
				}	

			}	
			
			
			//Generate the InferiorObliqueMuscle
			//generateComponentRows(startID, componentType, componentName, componentID, currentPoints, bioMightInstructSet);
			//System.out.println("Generated the Rows for InferiorObliqueMuscleTissue: " + componentID + "   parent: " + parentID + "   " + componentType);

			return returnCode;
		}
		
		
		
								
								
								
							
	
	/***************************************************************************************
	 * GENERATE INFERIOR RECTUS MUSCLES
	 * 
	 * This generates the Inferior Rectus Muscles  
	 * 
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/

	public int generateInferiorRectusMuscle(String startID, String componentType, String componentName, String componentID, String parentID, double[][] currentPoints) 
		throws DataException, DataSecurityException
			{	
			System.out.println("Generate InferiorRectusMuscle");
			
			int bodyID = 1;
			int projectID = 1;
			String vertices = "";
			
			ArrayList mySqlList= new ArrayList();
			int returnCode = 0;

			
			// We can generate the InferiorRectusMuscle Muscle
			if (currentPoints == null )
			{
				double circumference = 0.125;
		    	
				double x =  -8.0;
				double y =  -10.0;
				double z =  -1.0;
				
				// Create a equilateral octogon	
				currentPoints[0][0] =  x;
				currentPoints[0][1] =  y;
				currentPoints[0][2] =  z;
				
				currentPoints[1][0] =  x-circumference;
				currentPoints[1][1] =  y;
				currentPoints[1][2] =  z-circumference;
				
				currentPoints[2][0] =  x-circumference;
				currentPoints[2][1] =  y;
				currentPoints[2][2] =  z-circumference*2;
				
				currentPoints[3][0] =  x;
				currentPoints[3][1] =  y;
				currentPoints[3][2] =  z-circumference*3;

				currentPoints[4][0] =  x+circumference;
				currentPoints[4][1] =  y;
				currentPoints[4][2] =  z-circumference*3;
				
				currentPoints[5][0] =  x+circumference*2;
				currentPoints[5][1] =  y;
				currentPoints[5][2] =  z-circumference*2;

				currentPoints[6][0] =  x+circumference*2;
				currentPoints[6][1] =  y;
				currentPoints[6][2] =  z-circumference;

				currentPoints[7][0] =  x+circumference;
				currentPoints[7][1] =  y;
				currentPoints[7][2] =  z;
			}
			

			// Allocate an instruction set for building it
			BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();
			
			
			if (parentID.equals("InferiorRectusMuscle:01")) 
			{	
				int nMaxSegs = 6;
				for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
					
					// Create a place for an instruction 
					BioMightInstruction bioInstruct = new BioMightInstruction();
			     
					if (numSegs==0){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10); 
					}
					else if (numSegs==1){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10); 
					}
					else if (numSegs==2){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);  
					}
					else if (numSegs==3){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10); 
					}
					else if (numSegs==4){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);    
					}	
					else if (numSegs==5){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);    
					}	
					else if (numSegs==6){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);    
					}	
					else if (numSegs==7){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);    
					}		
					else {
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
					}
		    
					// Add the instruction into the instruction set
					bioMightInstructSet.addElement(bioInstruct);
				}
			
			}
			else if (parentID.equals("InferiorRectusMuscle:02")) 
			{		
				int nMaxSegs = 6;
				for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
				
					// Create a place for an instruction 
					BioMightInstruction bioInstruct = new BioMightInstruction();
			 
		    		if (numSegs==0){
		    			bioInstruct.setTransType(Constants.TRANSLATE);
		    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
		    		}
		       		else if (numSegs==1){
		       			bioInstruct.setTransType(Constants.TRANSLATE);
		    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
		           	}
		    		else if (numSegs==2){
		    			bioInstruct.setTransType(Constants.TRANSLATE);
		    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
		    		}
		    		else if (numSegs==3){
		    			bioInstruct.setTransType(Constants.TRANSLATE);
		    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
		    		}
		    		else if (numSegs==4){
		    			bioInstruct.setTransType(Constants.TRANSLATE);
		    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10); 	   
		        	}
		    		else if (numSegs==5){
		    			bioInstruct.setTransType(Constants.TRANSLATE);
		    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10); 	   
		        	}
		    		else if (numSegs==6){
		    			bioInstruct.setTransType(Constants.TRANSLATE);
		    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10); 	   
		        	}
		    		else if (numSegs==7){
		    			bioInstruct.setTransType(Constants.TRANSLATE);
		    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10); 	   
		        	}
		    		else {
		    			bioInstruct.setTransType(Constants.TRANSLATE);
		    			bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
		    		}
			    
		    		// Add the instruction into the instruction set
		    		bioMightInstructSet.addElement(bioInstruct);
				}	

			}	
			
			
			//Generate the InferiorRectusMuscle
			//generateComponentRows(startID, componentType, componentName, componentID, currentPoints, bioMightInstructSet);
			//System.out.println("Generated the Rows for InferiorRectusMuscle: " + componentID + "   parent: " + parentID + "   " + componentType);

			return returnCode;
		}
		
											
	/***************************************************************************************
	 * GENERATE INFRA SPINATUS MUSCLES
	 * 
	 * This generates the Infra Spinatus Muscles  
	 * 
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/

	public int generateInfraSpinatusMuscle(String startID, String componentType, String componentName, String componentID, String parentID, double[][] currentPoints) 
		throws DataException, DataSecurityException
			{	
			System.out.println("Generate InfraSpinatusMuscle");
			
			int bodyID = 1;
			int projectID = 1;
			String vertices = "";
			
			ArrayList mySqlList= new ArrayList();
			int returnCode = 0;

			
			// We can generate the InfraSpinatusMuscle Muscle
			if (currentPoints == null )
			{
				double circumference = 0.125;
				double[] startPos = {-8.0,-10.0, -1.5};
	    		currentPoints = BioGraphics.octogonYPlane(startPos, circumference);	
			}
			

			// Allocate an instruction set for building it
			BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();
			
			if (parentID.equals("InfraSpinatusMuscle:01")) 
			{	
				int nMaxSegs = 3;
				for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
					
					// Create a place for an instruction 
					BioMightInstruction bioInstruct = new BioMightInstruction();
					
					
					if (numSegs==0){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-1.0, -0.25, -0.25); 
					}
					else if (numSegs==1){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-1.0, -0.25, -0.25); 
					}
					else if (numSegs==2){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(-1.0, -0.25, -0.25);  
					}
					else if (numSegs==3){
		    			bioInstruct.setTransType(Constants.TRANSLATE);
		    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
		    		}
		    		else if (numSegs==4){
		    			bioInstruct.setTransType(Constants.TRANSLATE);
		    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10); 	   
		        	}
		    		else if (numSegs==5){
		    			bioInstruct.setTransType(Constants.TRANSLATE);
		    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10); 	   
		        	}
		    		else if (numSegs==6){
		    			bioInstruct.setTransType(Constants.TRANSLATE);
		    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10); 	   
		        	}
		    		else if (numSegs==7){
		    			bioInstruct.setTransType(Constants.TRANSLATE);
		    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10); 	   
		        	}
					// Add the instruction into the instruction set
					bioMightInstructSet.addElement(bioInstruct);
				}
			
			}
			else if (parentID.equals("InfraSpinatusMuscle:02")) 
			{		
				int nMaxSegs = 3;
				for (int numSegs=0; numSegs<nMaxSegs;numSegs++) {
				
					// Create a place for an instruction 
					BioMightInstruction bioInstruct = new BioMightInstruction();
			 
					if (numSegs==0){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(1.0, -0.25, -0.25); 
					}
					else if (numSegs==1){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(1.0, -0.25, -0.25); 
					}
					else if (numSegs==2){
						bioInstruct.setTransType(Constants.TRANSLATE);
						bioInstruct.setTranslateMatrix(1.0, -0.25, -0.25);  
					}
					else if (numSegs==3){
		    			bioInstruct.setTransType(Constants.TRANSLATE);
		    			bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
		    		}
		    		else if (numSegs==4){
		    			bioInstruct.setTransType(Constants.TRANSLATE);
		    			bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10); 	   
		        	}
		    		else if (numSegs==5){
		    			bioInstruct.setTransType(Constants.TRANSLATE);
		    			bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10); 	   
		        	}
		    		else if (numSegs==6){
		    			bioInstruct.setTransType(Constants.TRANSLATE);
		    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10); 	   
		        	}
		    		else if (numSegs==7){
		    			bioInstruct.setTransType(Constants.TRANSLATE);
		    			bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10); 	   
		        	}
		    		else {
		    			bioInstruct.setTransType(Constants.TRANSLATE);
		    			bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
		    		}
			    
		    		// Add the instruction into the instruction set
		    		bioMightInstructSet.addElement(bioInstruct);
				}	

			}	
			
			
			//Generate the InfraSpinatusMuscle
			DBUtils.generateFacedComponents(Constants.QUADRANGLE, startID, componentType, componentName, componentID, currentPoints, bioMightInstructSet);
			System.out.println("Generated the Rows for InfraSpinatusMuscle: " + componentID + "   parent: " + parentID + "   " + componentType);

			return returnCode;
		}
	

	/***************************************************************************************
	 * GENERATE IRIS SPHINCTER MUSCLES
	 * 
	 * This generates the generateIrisSphincterMuscle 
	 * 
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/

	public int generateIrisSphincterMuscle(String startID,
			String componentType, String componentName, String componentID,
			String parentID, double[][] currentPoints) throws DataException,
			DataSecurityException {
		System.out.println("Generat IrisSphincterMuscle");

		int bodyID = 1;
		int projectID = 1;
		String vertices = "";

		ArrayList mySqlList = new ArrayList();
		int returnCode = 0;

		// We can generate the IrisSphincterMuscle 
		if (currentPoints == null) {
			double circumference = 0.125;

			double x = -8.0;
			double y = -10.0;
			double z = -1.0;

			// Create a equilateral octogon
			currentPoints[0][0] = x;
			currentPoints[0][1] = y;
			currentPoints[0][2] = z;

			currentPoints[1][0] = x - circumference;
			currentPoints[1][1] = y;
			currentPoints[1][2] = z - circumference;

			currentPoints[2][0] = x - circumference;
			currentPoints[2][1] = y;
			currentPoints[2][2] = z - circumference * 2;

			currentPoints[3][0] = x;
			currentPoints[3][1] = y;
			currentPoints[3][2] = z - circumference * 3;

			currentPoints[4][0] = x + circumference;
			currentPoints[4][1] = y;
			currentPoints[4][2] = z - circumference * 3;

			currentPoints[5][0] = x + circumference * 2;
			currentPoints[5][1] = y;
			currentPoints[5][2] = z - circumference * 2;

			currentPoints[6][0] = x + circumference * 2;
			currentPoints[6][1] = y;
			currentPoints[6][2] = z - circumference;

			currentPoints[7][0] = x + circumference;
			currentPoints[7][1] = y;
			currentPoints[7][2] = z;
		}

		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();

		if (parentID.equals("IrisSphincterMuscle:01")) {
			int nMaxSegs = 6;
			for (int numSegs = 0; numSegs < nMaxSegs; numSegs++) {

				// Create a place for an instruction
				BioMightInstruction bioInstruct = new BioMightInstruction();

				if (numSegs == 0) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 1) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 2) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 3) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 4) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 5) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 6) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 7) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
				}

				// Add the instruction into the instruction set
				bioMightInstructSet.addElement(bioInstruct);
			}

		} else if (parentID.equals("IrisSphincterMuscle:02")) {
			int nMaxSegs = 6;
			for (int numSegs = 0; numSegs < nMaxSegs; numSegs++) {

				// Create a place for an instruction
				BioMightInstruction bioInstruct = new BioMightInstruction();

				if (numSegs == 0) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 1) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 2) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 3) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 4) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 5) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 6) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 7) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
				}

				// Add the instruction into the instruction set
				bioMightInstructSet.addElement(bioInstruct);
			}

		}

		// Generate the IrisSphincterMuscle
		// generateComponentRows(startID, componentType, componentName,
		// componentID, currentPoints, bioMightInstructSet);
		// System.out.println("Generated the Rows for IrisSphincterMuscleTissue: "
		// + componentID + "   parent: " + parentID + "   " + componentType);

		return returnCode;
	}	
	
	
	
	
	

	/***************************************************************************************
	 * GENERATE ISCHIOCAVERNOSUS MUSCLES
	 * 
	 * This generates the generateIrisSphincterMuscle 
	 * 
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/

	public int generateIschiocavernosusMuscle(String startID,
			String componentType, String componentName, String componentID,
			String parentID, double[][] currentPoints) throws DataException,
			DataSecurityException {
		System.out.println("Generat IschiocavernosusMuscle");

		int bodyID = 1;
		int projectID = 1;
		String vertices = "";

		ArrayList mySqlList = new ArrayList();
		int returnCode = 0;

		// We can generate the IrisSphincterMuscle 
		if (currentPoints == null) {
			double circumference = 0.125;

			double x = -8.0;
			double y = -10.0;
			double z = -1.0;

			// Create a equilateral octogon
			currentPoints[0][0] = x;
			currentPoints[0][1] = y;
			currentPoints[0][2] = z;

			currentPoints[1][0] = x - circumference;
			currentPoints[1][1] = y;
			currentPoints[1][2] = z - circumference;

			currentPoints[2][0] = x - circumference;
			currentPoints[2][1] = y;
			currentPoints[2][2] = z - circumference * 2;

			currentPoints[3][0] = x;
			currentPoints[3][1] = y;
			currentPoints[3][2] = z - circumference * 3;

			currentPoints[4][0] = x + circumference;
			currentPoints[4][1] = y;
			currentPoints[4][2] = z - circumference * 3;

			currentPoints[5][0] = x + circumference * 2;
			currentPoints[5][1] = y;
			currentPoints[5][2] = z - circumference * 2;

			currentPoints[6][0] = x + circumference * 2;
			currentPoints[6][1] = y;
			currentPoints[6][2] = z - circumference;

			currentPoints[7][0] = x + circumference;
			currentPoints[7][1] = y;
			currentPoints[7][2] = z;
		}

		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();

		if (parentID.equals("IschiocavernosusMuscle:01")) {
			int nMaxSegs = 6;
			for (int numSegs = 0; numSegs < nMaxSegs; numSegs++) {

				// Create a place for an instruction
				BioMightInstruction bioInstruct = new BioMightInstruction();

				if (numSegs == 0) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 1) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 2) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 3) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 4) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 5) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 6) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 7) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
				}

				// Add the instruction into the instruction set
				bioMightInstructSet.addElement(bioInstruct);
			}

		} else if (parentID.equals("IschiocavernosusMuscle:02")) {
			int nMaxSegs = 6;
			for (int numSegs = 0; numSegs < nMaxSegs; numSegs++) {

				// Create a place for an instruction
				BioMightInstruction bioInstruct = new BioMightInstruction();

				if (numSegs == 0) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 1) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 2) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 3) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 4) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 5) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 6) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 7) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
				}

				// Add the instruction into the instruction set
				bioMightInstructSet.addElement(bioInstruct);
			}

		}

		// Generate the IschiocavernosusMuscle
		// generateComponentRows(startID, componentType, componentName,
		// componentID, currentPoints, bioMightInstructSet);
		// System.out.println("Generated the Rows for IschiocavernosusMuscleTissue: "
		// + componentID + "   parent: " + parentID + "   " + componentType);

		return returnCode;
	}	
	
	
	
	

	/***************************************************************************************
	 * GENERATE LATER CAVERNOSUS MUSCLES
	 * 
	 * This generates the generateIrisSphincterMuscle 
	 * 
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/

	public int generateLateralCricoarytenoidMuscle(String startID,
			String componentType, String componentName, String componentID,
			String parentID, double[][] currentPoints) throws DataException,
			DataSecurityException {
		System.out.println("Generat LateralCricoarytenoidMuscle");

		int bodyID = 1;
		int projectID = 1;
		String vertices = "";

		ArrayList mySqlList = new ArrayList();
		int returnCode = 0;

		// We can generate the LateralCricoarytenoidMuscle 
		if (currentPoints == null) {
			double circumference = 0.125;

			double x = -8.0;
			double y = -10.0;
			double z = -1.0;

			// Create a equilateral octogon
			currentPoints[0][0] = x;
			currentPoints[0][1] = y;
			currentPoints[0][2] = z;

			currentPoints[1][0] = x - circumference;
			currentPoints[1][1] = y;
			currentPoints[1][2] = z - circumference;

			currentPoints[2][0] = x - circumference;
			currentPoints[2][1] = y;
			currentPoints[2][2] = z - circumference * 2;

			currentPoints[3][0] = x;
			currentPoints[3][1] = y;
			currentPoints[3][2] = z - circumference * 3;

			currentPoints[4][0] = x + circumference;
			currentPoints[4][1] = y;
			currentPoints[4][2] = z - circumference * 3;

			currentPoints[5][0] = x + circumference * 2;
			currentPoints[5][1] = y;
			currentPoints[5][2] = z - circumference * 2;

			currentPoints[6][0] = x + circumference * 2;
			currentPoints[6][1] = y;
			currentPoints[6][2] = z - circumference;

			currentPoints[7][0] = x + circumference;
			currentPoints[7][1] = y;
			currentPoints[7][2] = z;
		}

		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();

		if (parentID.equals("LateralCricoarytenoidMuscle:01")) {
			int nMaxSegs = 6;
			for (int numSegs = 0; numSegs < nMaxSegs; numSegs++) {

				// Create a place for an instruction
				BioMightInstruction bioInstruct = new BioMightInstruction();

				if (numSegs == 0) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 1) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 2) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 3) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 4) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 5) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 6) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 7) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
				}

				// Add the instruction into the instruction set
				bioMightInstructSet.addElement(bioInstruct);
			}

		} else if (parentID.equals("LateralCricoarytenoidMuscle:02")) {
			int nMaxSegs = 6;
			for (int numSegs = 0; numSegs < nMaxSegs; numSegs++) {

				// Create a place for an instruction
				BioMightInstruction bioInstruct = new BioMightInstruction();

				if (numSegs == 0) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 1) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 2) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 3) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 4) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 5) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 6) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 7) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
				}

				// Add the instruction into the instruction set
				bioMightInstructSet.addElement(bioInstruct);
			}

		}

		// Generate the LateralCricoarytenoidMuscle
		// generateComponentRows(startID, componentType, componentName,
		// componentID, currentPoints, bioMightInstructSet);
		// System.out.println("Generated the Rows for LateralCricoarytenoidMuscleTissue: "
		// + componentID + "   parent: " + parentID + "   " + componentType);

		return returnCode;
	}	
		
	
	


	/***************************************************************************************
	 * GENERATE LATERAL RWECTUS MUSCLES
	 * 
	 * This generates the generateIrisSphincterMuscle 
	 * 
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/

	public int generateLateralRectusMuscle(String startID,
			String componentType, String componentName, String componentID,
			String parentID, double[][] currentPoints) throws DataException,
			DataSecurityException {
		System.out.println("Generat LateralRectusMuscle");

		int bodyID = 1;
		int projectID = 1;
		String vertices = "";

		ArrayList mySqlList = new ArrayList();
		int returnCode = 0;

		// We can generate the LateralRectusMuscle 
		if (currentPoints == null) {
			double circumference = 0.125;

			double x = -8.0;
			double y = -10.0;
			double z = -1.0;

			// Create a equilateral octogon
			currentPoints[0][0] = x;
			currentPoints[0][1] = y;
			currentPoints[0][2] = z;

			currentPoints[1][0] = x - circumference;
			currentPoints[1][1] = y;
			currentPoints[1][2] = z - circumference;

			currentPoints[2][0] = x - circumference;
			currentPoints[2][1] = y;
			currentPoints[2][2] = z - circumference * 2;

			currentPoints[3][0] = x;
			currentPoints[3][1] = y;
			currentPoints[3][2] = z - circumference * 3;

			currentPoints[4][0] = x + circumference;
			currentPoints[4][1] = y;
			currentPoints[4][2] = z - circumference * 3;

			currentPoints[5][0] = x + circumference * 2;
			currentPoints[5][1] = y;
			currentPoints[5][2] = z - circumference * 2;

			currentPoints[6][0] = x + circumference * 2;
			currentPoints[6][1] = y;
			currentPoints[6][2] = z - circumference;

			currentPoints[7][0] = x + circumference;
			currentPoints[7][1] = y;
			currentPoints[7][2] = z;
		}

		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();

		if (parentID.equals("LateralRectusMuscle:01")) {
			int nMaxSegs = 6;
			for (int numSegs = 0; numSegs < nMaxSegs; numSegs++) {

				// Create a place for an instruction
				BioMightInstruction bioInstruct = new BioMightInstruction();

				if (numSegs == 0) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 1) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 2) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 3) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 4) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 5) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 6) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 7) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
				}

				// Add the instruction into the instruction set
				bioMightInstructSet.addElement(bioInstruct);
			}

		} else if (parentID.equals("LateralRectusMuscle:02")) {
			int nMaxSegs = 6;
			for (int numSegs = 0; numSegs < nMaxSegs; numSegs++) {

				// Create a place for an instruction
				BioMightInstruction bioInstruct = new BioMightInstruction();

				if (numSegs == 0) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 1) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 2) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 3) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 4) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 5) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 6) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 7) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
				}

				// Add the instruction into the instruction set
				bioMightInstructSet.addElement(bioInstruct);
			}

		}

		// Generate the LateralRectusMuscle
		// generateComponentRows(startID, componentType, componentName,
		// componentID, currentPoints, bioMightInstructSet);
		// System.out.println("Generated the Rows for LateralRectusMuscleTissue: "
		// + componentID + "   parent: " + parentID + "   " + componentType);

		return returnCode;
	}	
		
	
		
	
	

	/***************************************************************************************
	 * GENERATE LATERAL RWECTUS MUSCLES
	 * 
	 * This generates the generateIrisSphincterMuscle 
	 * 
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/

	public int generateLateralVeterbralMuscle(String startID,
			String componentType, String componentName, String componentID,
			String parentID, double[][] currentPoints) throws DataException,
			DataSecurityException {
		System.out.println("Generat LateralVeterbralMuscle");

		int bodyID = 1;
		int projectID = 1;
		String vertices = "";

		ArrayList mySqlList = new ArrayList();
		int returnCode = 0;

		// We can generate the LateralRectusMuscle 
		if (currentPoints == null) {
			double circumference = 0.125;

			double x = -8.0;
			double y = -10.0;
			double z = -1.0;

			// Create a equilateral octogon
			currentPoints[0][0] = x;
			currentPoints[0][1] = y;
			currentPoints[0][2] = z;

			currentPoints[1][0] = x - circumference;
			currentPoints[1][1] = y;
			currentPoints[1][2] = z - circumference;

			currentPoints[2][0] = x - circumference;
			currentPoints[2][1] = y;
			currentPoints[2][2] = z - circumference * 2;

			currentPoints[3][0] = x;
			currentPoints[3][1] = y;
			currentPoints[3][2] = z - circumference * 3;

			currentPoints[4][0] = x + circumference;
			currentPoints[4][1] = y;
			currentPoints[4][2] = z - circumference * 3;

			currentPoints[5][0] = x + circumference * 2;
			currentPoints[5][1] = y;
			currentPoints[5][2] = z - circumference * 2;

			currentPoints[6][0] = x + circumference * 2;
			currentPoints[6][1] = y;
			currentPoints[6][2] = z - circumference;

			currentPoints[7][0] = x + circumference;
			currentPoints[7][1] = y;
			currentPoints[7][2] = z;
		}

		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();

		if (parentID.equals("LateralVeterbralMuscle:01")) {
			int nMaxSegs = 6;
			for (int numSegs = 0; numSegs < nMaxSegs; numSegs++) {

				// Create a place for an instruction
				BioMightInstruction bioInstruct = new BioMightInstruction();

				if (numSegs == 0) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 1) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 2) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 3) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 4) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 5) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 6) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 7) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
				}

				// Add the instruction into the instruction set
				bioMightInstructSet.addElement(bioInstruct);
			}

		} else if (parentID.equals("LateralVeterbralMuscle:02")) {
			int nMaxSegs = 6;
			for (int numSegs = 0; numSegs < nMaxSegs; numSegs++) {

				// Create a place for an instruction
				BioMightInstruction bioInstruct = new BioMightInstruction();

				if (numSegs == 0) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 1) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 2) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 3) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 4) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 5) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 6) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 7) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
				}

				// Add the instruction into the instruction set
				bioMightInstructSet.addElement(bioInstruct);
			}

		}

		// Generate the LateralVeterbralMuscle
		// generateComponentRows(startID, componentType, componentName,
		// componentID, currentPoints, bioMightInstructSet);
		// System.out.println("Generated the Rows for LateralVeterbralMuscleTissue: "
		// + componentID + "   parent: " + parentID + "   " + componentType);

		return returnCode;
	}	
		
	
	

	
	

	/***************************************************************************************
	 * GENERATE LATERAL LevatorAnguliOrisMuscle 
	 * 
	 * This generates the generateIrisSphincterMuscle 
	 * 
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/

	public int generateLevatorAnguliOrisMuscle(String startID,
			String componentType, String componentName, String componentID,
			String parentID, double[][] currentPoints) throws DataException,
			DataSecurityException {
		System.out.println("Generat LevatorAnguliOrisMuscle");

		int bodyID = 1;
		int projectID = 1;
		String vertices = "";

		ArrayList mySqlList = new ArrayList();
		int returnCode = 0;

		// We can generate the LevatorAnguliOrisMuscle 
		if (currentPoints == null) {
			double circumference = 0.125;

			double x = -8.0;
			double y = -10.0;
			double z = -1.0;

			// Create a equilateral octogon
			currentPoints[0][0] = x;
			currentPoints[0][1] = y;
			currentPoints[0][2] = z;

			currentPoints[1][0] = x - circumference;
			currentPoints[1][1] = y;
			currentPoints[1][2] = z - circumference;

			currentPoints[2][0] = x - circumference;
			currentPoints[2][1] = y;
			currentPoints[2][2] = z - circumference * 2;

			currentPoints[3][0] = x;
			currentPoints[3][1] = y;
			currentPoints[3][2] = z - circumference * 3;

			currentPoints[4][0] = x + circumference;
			currentPoints[4][1] = y;
			currentPoints[4][2] = z - circumference * 3;

			currentPoints[5][0] = x + circumference * 2;
			currentPoints[5][1] = y;
			currentPoints[5][2] = z - circumference * 2;

			currentPoints[6][0] = x + circumference * 2;
			currentPoints[6][1] = y;
			currentPoints[6][2] = z - circumference;

			currentPoints[7][0] = x + circumference;
			currentPoints[7][1] = y;
			currentPoints[7][2] = z;
		}

		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();

		if (parentID.equals("LevatorAnguliOrisMuscle:01")) {
			int nMaxSegs = 6;
			for (int numSegs = 0; numSegs < nMaxSegs; numSegs++) {

				// Create a place for an instruction
				BioMightInstruction bioInstruct = new BioMightInstruction();

				if (numSegs == 0) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 1) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 2) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 3) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 4) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 5) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 6) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 7) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
				}

				// Add the instruction into the instruction set
				bioMightInstructSet.addElement(bioInstruct);
			}

		} else if (parentID.equals("LevatorAnguliOrisMuscle:02")) {
			int nMaxSegs = 6;
			for (int numSegs = 0; numSegs < nMaxSegs; numSegs++) {

				// Create a place for an instruction
				BioMightInstruction bioInstruct = new BioMightInstruction();

				if (numSegs == 0) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 1) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 2) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 3) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 4) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 5) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 6) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 7) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
				}

				// Add the instruction into the instruction set
				bioMightInstructSet.addElement(bioInstruct);
			}

		}

		// Generate the LevatorAnguliOrisMuscle
		// generateComponentRows(startID, componentType, componentName,
		// componentID, currentPoints, bioMightInstructSet);
		// System.out.println("Generated the Rows for LevatorAnguliOrisMuscle: "
		// + componentID + "   parent: " + parentID + "   " + componentType);

		return returnCode;
	}	
	
	
	
	
	
	

	/***************************************************************************************
	 * GENERATE LATERAL LevatorLabiiSuperiorisMuscle 
	 * 
	 * This generates the generateIrisSphincterMuscle 
	 * 
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/

	public int generateLevatorLabiiSuperiorisMuscle(String startID,
			String componentType, String componentName, String componentID,
			String parentID, double[][] currentPoints) throws DataException,
			DataSecurityException {
		System.out.println("Generat LevatorLabiiSuperiorisMuscle");

		int bodyID = 1;
		int projectID = 1;
		String vertices = "";

		ArrayList mySqlList = new ArrayList();
		int returnCode = 0;

		// We can generate the LevatorLabiiSuperiorisMuscle 
		if (currentPoints == null) {
			double circumference = 0.125;

			double x = -8.0;
			double y = -10.0;
			double z = -1.0;

			// Create a equilateral octogon
			currentPoints[0][0] = x;
			currentPoints[0][1] = y;
			currentPoints[0][2] = z;

			currentPoints[1][0] = x - circumference;
			currentPoints[1][1] = y;
			currentPoints[1][2] = z - circumference;

			currentPoints[2][0] = x - circumference;
			currentPoints[2][1] = y;
			currentPoints[2][2] = z - circumference * 2;

			currentPoints[3][0] = x;
			currentPoints[3][1] = y;
			currentPoints[3][2] = z - circumference * 3;

			currentPoints[4][0] = x + circumference;
			currentPoints[4][1] = y;
			currentPoints[4][2] = z - circumference * 3;

			currentPoints[5][0] = x + circumference * 2;
			currentPoints[5][1] = y;
			currentPoints[5][2] = z - circumference * 2;

			currentPoints[6][0] = x + circumference * 2;
			currentPoints[6][1] = y;
			currentPoints[6][2] = z - circumference;

			currentPoints[7][0] = x + circumference;
			currentPoints[7][1] = y;
			currentPoints[7][2] = z;
		}

		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();

		if (parentID.equals("LevatorLabiiSuperiorisMuscle:01")) {
			int nMaxSegs = 6;
			for (int numSegs = 0; numSegs < nMaxSegs; numSegs++) {

				// Create a place for an instruction
				BioMightInstruction bioInstruct = new BioMightInstruction();

				if (numSegs == 0) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 1) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 2) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 3) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 4) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 5) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 6) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 7) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
				}

				// Add the instruction into the instruction set
				bioMightInstructSet.addElement(bioInstruct);
			}

		} else if (parentID.equals("LevatorLabiiSuperiorisMuscle:02")) {
			int nMaxSegs = 6;
			for (int numSegs = 0; numSegs < nMaxSegs; numSegs++) {

				// Create a place for an instruction
				BioMightInstruction bioInstruct = new BioMightInstruction();

				if (numSegs == 0) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 1) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 2) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 3) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 4) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 5) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 6) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 7) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
				}

				// Add the instruction into the instruction set
				bioMightInstructSet.addElement(bioInstruct);
			}

		}

		// Generate the LevatorLabiiSuperiorisMuscle
		// generateComponentRows(startID, componentType, componentName,
		// componentID, currentPoints, bioMightInstructSet);
		// System.out.println("Generated the Rows for LevatorLabiiSuperiorisMuscle: "
		// + componentID + "   parent: " + parentID + "   " + componentType);

		return returnCode;
	}	
	
	
	

	/***************************************************************************************
	 * GENERATE LATERAL LevatorLabiiSuperiorisMuscle 
	 * 
	 * This generates the generateIrisSphincterMuscle 
	 * 
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/

	public int generateMediallRectusMuscle(String startID,
			String componentType, String componentName, String componentID,
			String parentID, double[][] currentPoints) throws DataException,
			DataSecurityException {
		System.out.println("Generat MediallRectusMuscle");

		int bodyID = 1;
		int projectID = 1;
		String vertices = "";

		ArrayList mySqlList = new ArrayList();
		int returnCode = 0;

		// We can generate the MediallRectusMuscle 
		if (currentPoints == null) {
			double circumference = 0.125;

			double x = -8.0;
			double y = -10.0;
			double z = -1.0;

			// Create a equilateral octogon
			currentPoints[0][0] = x;
			currentPoints[0][1] = y;
			currentPoints[0][2] = z;

			currentPoints[1][0] = x - circumference;
			currentPoints[1][1] = y;
			currentPoints[1][2] = z - circumference;

			currentPoints[2][0] = x - circumference;
			currentPoints[2][1] = y;
			currentPoints[2][2] = z - circumference * 2;

			currentPoints[3][0] = x;
			currentPoints[3][1] = y;
			currentPoints[3][2] = z - circumference * 3;

			currentPoints[4][0] = x + circumference;
			currentPoints[4][1] = y;
			currentPoints[4][2] = z - circumference * 3;

			currentPoints[5][0] = x + circumference * 2;
			currentPoints[5][1] = y;
			currentPoints[5][2] = z - circumference * 2;

			currentPoints[6][0] = x + circumference * 2;
			currentPoints[6][1] = y;
			currentPoints[6][2] = z - circumference;

			currentPoints[7][0] = x + circumference;
			currentPoints[7][1] = y;
			currentPoints[7][2] = z;
		}

		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();

		if (parentID.equals("MediallRectusMuscle:01")) {
			int nMaxSegs = 6;
			for (int numSegs = 0; numSegs < nMaxSegs; numSegs++) {

				// Create a place for an instruction
				BioMightInstruction bioInstruct = new BioMightInstruction();

				if (numSegs == 0) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 1) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 2) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 3) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 4) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 5) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 6) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 7) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
				}

				// Add the instruction into the instruction set
				bioMightInstructSet.addElement(bioInstruct);
			}

		} else if (parentID.equals("MediallRectusMuscle:02")) {
			int nMaxSegs = 6;
			for (int numSegs = 0; numSegs < nMaxSegs; numSegs++) {

				// Create a place for an instruction
				BioMightInstruction bioInstruct = new BioMightInstruction();

				if (numSegs == 0) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 1) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 2) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 3) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 4) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 5) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 6) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 7) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
				}

				// Add the instruction into the instruction set
				bioMightInstructSet.addElement(bioInstruct);
			}

		}

		// Generate the MediallRectusMuscle
		// generateComponentRows(startID, componentType, componentName,
		// componentID, currentPoints, bioMightInstructSet);
		// System.out.println("Generated the Rows for MediallRectusMuscleTissue: "
		// + componentID + "   parent: " + parentID + "   " + componentType);

		return returnCode;
	}	
	


	/***************************************************************************************
	 * GENERATE LATERAL LevatorLabiiSuperiorisMuscle 
	 * 
	 * This generates the MusculusUvulaeMuscle 
	 * 
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/

	public int generateMusculusUvulaeMuscle(String startID,
			String componentType, String componentName, String componentID,
			String parentID, double[][] currentPoints) throws DataException,
			DataSecurityException {
		System.out.println("Generat MusculusUvulaeMuscle");

		int bodyID = 1;
		int projectID = 1;
		String vertices = "";

		ArrayList mySqlList = new ArrayList();
		int returnCode = 0;

		// We can generate the MusculusUvulaeMuscle 
		if (currentPoints == null) {
			double circumference = 0.125;

			double x = -8.0;
			double y = -10.0;
			double z = -1.0;

			// Create a equilateral octogon
			currentPoints[0][0] = x;
			currentPoints[0][1] = y;
			currentPoints[0][2] = z;

			currentPoints[1][0] = x - circumference;
			currentPoints[1][1] = y;
			currentPoints[1][2] = z - circumference;

			currentPoints[2][0] = x - circumference;
			currentPoints[2][1] = y;
			currentPoints[2][2] = z - circumference * 2;

			currentPoints[3][0] = x;
			currentPoints[3][1] = y;
			currentPoints[3][2] = z - circumference * 3;

			currentPoints[4][0] = x + circumference;
			currentPoints[4][1] = y;
			currentPoints[4][2] = z - circumference * 3;

			currentPoints[5][0] = x + circumference * 2;
			currentPoints[5][1] = y;
			currentPoints[5][2] = z - circumference * 2;

			currentPoints[6][0] = x + circumference * 2;
			currentPoints[6][1] = y;
			currentPoints[6][2] = z - circumference;

			currentPoints[7][0] = x + circumference;
			currentPoints[7][1] = y;
			currentPoints[7][2] = z;
		}

		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();

		if (parentID.equals("MusculusUvulaeMuscle:01")) {
			int nMaxSegs = 6;
			for (int numSegs = 0; numSegs < nMaxSegs; numSegs++) {

				// Create a place for an instruction
				BioMightInstruction bioInstruct = new BioMightInstruction();

				if (numSegs == 0) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 1) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 2) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 3) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 4) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 5) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 6) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 7) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
				}

				// Add the instruction into the instruction set
				bioMightInstructSet.addElement(bioInstruct);
			}

		} else if (parentID.equals("MusculusUvulaeMuscle:02")) {
			int nMaxSegs = 6;
			for (int numSegs = 0; numSegs < nMaxSegs; numSegs++) {

				// Create a place for an instruction
				BioMightInstruction bioInstruct = new BioMightInstruction();

				if (numSegs == 0) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 1) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 2) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 3) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 4) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 5) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 6) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 7) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
				}

				// Add the instruction into the instruction set
				bioMightInstructSet.addElement(bioInstruct);
			}

		}

		// Generate the MusculusUvulaeMuscle
		// generateComponentRows(startID, componentType, componentName,
		// componentID, currentPoints, bioMightInstructSet);
		// System.out.println("Generated the Rows for MusculusUvulaeMuscleTissue: "
		// + componentID + "   parent: " + parentID + "   " + componentType);

		return returnCode;
	}	
	

	
	
	
	/***************************************************************************************
	 * GENERATE LATERAL NasalisMuscle 
	 * 
	 * This generates the MusculusUvulaeMuscle 
	 * 
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/

	public int generateNasalisMuscle(String startID,
			String componentType, String componentName, String componentID,
			String parentID, double[][] currentPoints) throws DataException,
			DataSecurityException {
		System.out.println("Generat NasalisMuscle");

		int bodyID = 1;
		int projectID = 1;
		String vertices = "";

		ArrayList mySqlList = new ArrayList();
		int returnCode = 0;

		// We can generate the NasalisMuscle 
		if (currentPoints == null) {
			double circumference = 0.125;

			double x = -8.0;
			double y = -10.0;
			double z = -1.0;

			// Create a equilateral octogon
			currentPoints[0][0] = x;
			currentPoints[0][1] = y;
			currentPoints[0][2] = z;

			currentPoints[1][0] = x - circumference;
			currentPoints[1][1] = y;
			currentPoints[1][2] = z - circumference;

			currentPoints[2][0] = x - circumference;
			currentPoints[2][1] = y;
			currentPoints[2][2] = z - circumference * 2;

			currentPoints[3][0] = x;
			currentPoints[3][1] = y;
			currentPoints[3][2] = z - circumference * 3;

			currentPoints[4][0] = x + circumference;
			currentPoints[4][1] = y;
			currentPoints[4][2] = z - circumference * 3;

			currentPoints[5][0] = x + circumference * 2;
			currentPoints[5][1] = y;
			currentPoints[5][2] = z - circumference * 2;

			currentPoints[6][0] = x + circumference * 2;
			currentPoints[6][1] = y;
			currentPoints[6][2] = z - circumference;

			currentPoints[7][0] = x + circumference;
			currentPoints[7][1] = y;
			currentPoints[7][2] = z;
		}

		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();

		if (parentID.equals("NasalisMuscle:01")) {
			int nMaxSegs = 6;
			for (int numSegs = 0; numSegs < nMaxSegs; numSegs++) {

				// Create a place for an instruction
				BioMightInstruction bioInstruct = new BioMightInstruction();

				if (numSegs == 0) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 1) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 2) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 3) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 4) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 5) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 6) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 7) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
				}

				// Add the instruction into the instruction set
				bioMightInstructSet.addElement(bioInstruct);
			}

		} else if (parentID.equals("NasalisMuscle:02")) {
			int nMaxSegs = 6;
			for (int numSegs = 0; numSegs < nMaxSegs; numSegs++) {

				// Create a place for an instruction
				BioMightInstruction bioInstruct = new BioMightInstruction();

				if (numSegs == 0) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 1) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 2) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 3) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 4) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 5) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 6) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 7) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
				}

				// Add the instruction into the instruction set
				bioMightInstructSet.addElement(bioInstruct);
			}

		}

		// Generate the NasalisMuscle
		// generateComponentRows(startID, componentType, componentName,
		// componentID, currentPoints, bioMightInstructSet);
		// System.out.println("Generated the Rows for NasalisMuscleTissue: "
		// + componentID + "   parent: " + parentID + "   " + componentType);

		return returnCode;
	}	
	

	
	/***************************************************************************************
	 * GENERATE LATERAL ObturatorExternusMuscle 
	 * 
	 * This generates the ObturatorExternusMuscle 
	 * 
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/

	public int generateObturatorExternusMuscle(String startID,
			String componentType, String componentName, String componentID,
			String parentID, double[][] currentPoints) throws DataException,
			DataSecurityException {
		System.out.println("Generat ObturatorExternusMuscle");

		int bodyID = 1;
		int projectID = 1;
		String vertices = "";

		ArrayList mySqlList = new ArrayList();
		int returnCode = 0;

		// We can generate the ObturatorExternusMuscle 
		if (currentPoints == null) {
			double circumference = 0.125;

			double x = -8.0;
			double y = -10.0;
			double z = -1.0;

			// Create a equilateral octogon
			currentPoints[0][0] = x;
			currentPoints[0][1] = y;
			currentPoints[0][2] = z;

			currentPoints[1][0] = x - circumference;
			currentPoints[1][1] = y;
			currentPoints[1][2] = z - circumference;

			currentPoints[2][0] = x - circumference;
			currentPoints[2][1] = y;
			currentPoints[2][2] = z - circumference * 2;

			currentPoints[3][0] = x;
			currentPoints[3][1] = y;
			currentPoints[3][2] = z - circumference * 3;

			currentPoints[4][0] = x + circumference;
			currentPoints[4][1] = y;
			currentPoints[4][2] = z - circumference * 3;

			currentPoints[5][0] = x + circumference * 2;
			currentPoints[5][1] = y;
			currentPoints[5][2] = z - circumference * 2;

			currentPoints[6][0] = x + circumference * 2;
			currentPoints[6][1] = y;
			currentPoints[6][2] = z - circumference;

			currentPoints[7][0] = x + circumference;
			currentPoints[7][1] = y;
			currentPoints[7][2] = z;
		}

		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();

		if (parentID.equals("ObturatorExternusMuscle:01")) {
			int nMaxSegs = 6;
			for (int numSegs = 0; numSegs < nMaxSegs; numSegs++) {

				// Create a place for an instruction
				BioMightInstruction bioInstruct = new BioMightInstruction();

				if (numSegs == 0) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 1) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 2) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 3) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 4) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 5) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 6) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 7) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
				}

				// Add the instruction into the instruction set
				bioMightInstructSet.addElement(bioInstruct);
			}

		} else if (parentID.equals("ObturatorExternusMuscle:02")) {
			int nMaxSegs = 6;
			for (int numSegs = 0; numSegs < nMaxSegs; numSegs++) {

				// Create a place for an instruction
				BioMightInstruction bioInstruct = new BioMightInstruction();

				if (numSegs == 0) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 1) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 2) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 3) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 4) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 5) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 6) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 7) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
				}

				// Add the instruction into the instruction set
				bioMightInstructSet.addElement(bioInstruct);
			}

		}

		// Generate the ObturatorExternusMuscle
		// generateComponentRows(startID, componentType, componentName,
		// componentID, currentPoints, bioMightInstructSet);
		// System.out.println("Generated the Rows for ObturatorExternusMuscleTissue: "
		// + componentID + "   parent: " + parentID + "   " + componentType);

		return returnCode;
	}	
	
	
	
	/***************************************************************************************
	 * GENERATE  ObturatorInternusMuscle 
	 * 
	 * This generates the ObturatorInternusMuscle 
	 * 
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/

	public int generateObturatorInternusMuscle(String startID,
			String componentType, String componentName, String componentID,
			String parentID, double[][] currentPoints) throws DataException,
			DataSecurityException {
		System.out.println("Generat ObturatorInternusMuscle");

		int bodyID = 1;
		int projectID = 1;
		String vertices = "";

		ArrayList mySqlList = new ArrayList();
		int returnCode = 0;

		// We can generate the ObturatorInternusMuscle 
		if (currentPoints == null) {
			double circumference = 0.125;

			double x = -8.0;
			double y = -10.0;
			double z = -1.0;

			// Create a equilateral octogon
			currentPoints[0][0] = x;
			currentPoints[0][1] = y;
			currentPoints[0][2] = z;

			currentPoints[1][0] = x - circumference;
			currentPoints[1][1] = y;
			currentPoints[1][2] = z - circumference;

			currentPoints[2][0] = x - circumference;
			currentPoints[2][1] = y;
			currentPoints[2][2] = z - circumference * 2;

			currentPoints[3][0] = x;
			currentPoints[3][1] = y;
			currentPoints[3][2] = z - circumference * 3;

			currentPoints[4][0] = x + circumference;
			currentPoints[4][1] = y;
			currentPoints[4][2] = z - circumference * 3;

			currentPoints[5][0] = x + circumference * 2;
			currentPoints[5][1] = y;
			currentPoints[5][2] = z - circumference * 2;

			currentPoints[6][0] = x + circumference * 2;
			currentPoints[6][1] = y;
			currentPoints[6][2] = z - circumference;

			currentPoints[7][0] = x + circumference;
			currentPoints[7][1] = y;
			currentPoints[7][2] = z;
		}

		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();

		if (parentID.equals("ObturatorInternusMuscle:01")) {
			int nMaxSegs = 6;
			for (int numSegs = 0; numSegs < nMaxSegs; numSegs++) {

				// Create a place for an instruction
				BioMightInstruction bioInstruct = new BioMightInstruction();

				if (numSegs == 0) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 1) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 2) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 3) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 4) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 5) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 6) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 7) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
				}

				// Add the instruction into the instruction set
				bioMightInstructSet.addElement(bioInstruct);
			}

		} else if (parentID.equals("ObturatorInternusMuscle:02")) {
			int nMaxSegs = 6;
			for (int numSegs = 0; numSegs < nMaxSegs; numSegs++) {

				// Create a place for an instruction
				BioMightInstruction bioInstruct = new BioMightInstruction();

				if (numSegs == 0) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 1) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 2) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 3) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 4) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 5) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 6) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 7) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
				}

				// Add the instruction into the instruction set
				bioMightInstructSet.addElement(bioInstruct);
			}

		}

		// Generate the ObturatorInternusMuscle
		// generateComponentRows(startID, componentType, componentName,
		// componentID, currentPoints, bioMightInstructSet);
		// System.out.println("Generated the Rows for ObturatorInternusMuscleTissue: "
		// + componentID + "   parent: " + parentID + "   " + componentType);

		return returnCode;
	}	
	
	
	
	

	/***************************************************************************************
	 * GENERATE OpponensPollicisMuscle 
	 * 
	 * This generates the OpponensPollicisMuscle 
	 * 
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/

	public int generateOpponensPollicisMuscle(String startID,
			String componentType, String componentName, String componentID,
			String parentID, double[][] currentPoints) throws DataException,
			DataSecurityException {
		System.out.println("Generat OpponensPollicisMuscle");

		int bodyID = 1;
		int projectID = 1;
		String vertices = "";

		ArrayList mySqlList = new ArrayList();
		int returnCode = 0;

		// We can generate the OpponensPollicisMuscle 
		if (currentPoints == null) {
			double circumference = 0.125;

			double x = -8.0;
			double y = -10.0;
			double z = -1.0;

			// Create a equilateral octogon
			currentPoints[0][0] = x;
			currentPoints[0][1] = y;
			currentPoints[0][2] = z;

			currentPoints[1][0] = x - circumference;
			currentPoints[1][1] = y;
			currentPoints[1][2] = z - circumference;

			currentPoints[2][0] = x - circumference;
			currentPoints[2][1] = y;
			currentPoints[2][2] = z - circumference * 2;

			currentPoints[3][0] = x;
			currentPoints[3][1] = y;
			currentPoints[3][2] = z - circumference * 3;

			currentPoints[4][0] = x + circumference;
			currentPoints[4][1] = y;
			currentPoints[4][2] = z - circumference * 3;

			currentPoints[5][0] = x + circumference * 2;
			currentPoints[5][1] = y;
			currentPoints[5][2] = z - circumference * 2;

			currentPoints[6][0] = x + circumference * 2;
			currentPoints[6][1] = y;
			currentPoints[6][2] = z - circumference;

			currentPoints[7][0] = x + circumference;
			currentPoints[7][1] = y;
			currentPoints[7][2] = z;
		}

		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();

		if (parentID.equals("OpponensPollicisMuscle:01")) {
			int nMaxSegs = 6;
			for (int numSegs = 0; numSegs < nMaxSegs; numSegs++) {

				// Create a place for an instruction
				BioMightInstruction bioInstruct = new BioMightInstruction();

				if (numSegs == 0) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 1) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 2) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 3) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 4) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 5) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 6) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 7) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
				}

				// Add the instruction into the instruction set
				bioMightInstructSet.addElement(bioInstruct);
			}

		} else if (parentID.equals("OpponensPollicisMuscle:02")) {
			int nMaxSegs = 6;
			for (int numSegs = 0; numSegs < nMaxSegs; numSegs++) {

				// Create a place for an instruction
				BioMightInstruction bioInstruct = new BioMightInstruction();

				if (numSegs == 0) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 1) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 2) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 3) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 4) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 5) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 6) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 7) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
				}

				// Add the instruction into the instruction set
				bioMightInstructSet.addElement(bioInstruct);
			}

		}

		// Generate the OpponensPollicisMuscle
		// generateComponentRows(startID, componentType, componentName,
		// componentID, currentPoints, bioMightInstructSet);
		// System.out.println("Generated the Rows for OpponensPollicisMuscle: "
		// + componentID + "   parent: " + parentID + "   " + componentType);

		return returnCode;
	}	

	

	/***************************************************************************************
	 * GENERATE LATERAL OrbicularisOrisMuscle 
	 * 
	 * This generates the OrbicularisOrisMuscle 
	 * 
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/

	public int generateOrbicularisOrisMuscle(String startID,
			String componentType, String componentName, String componentID,
			String parentID, double[][] currentPoints) throws DataException,
			DataSecurityException {
		System.out.println("Generat OrbicularisOrisMuscle");

		int bodyID = 1;
		int projectID = 1;
		String vertices = "";

		ArrayList mySqlList = new ArrayList();
		int returnCode = 0;

		// We can generate the OrbicularisOrisMuscle 
		if (currentPoints == null) {
			double circumference = 0.125;

			double x = -8.0;
			double y = -10.0;
			double z = -1.0;

			// Create a equilateral octogon
			currentPoints[0][0] = x;
			currentPoints[0][1] = y;
			currentPoints[0][2] = z;

			currentPoints[1][0] = x - circumference;
			currentPoints[1][1] = y;
			currentPoints[1][2] = z - circumference;

			currentPoints[2][0] = x - circumference;
			currentPoints[2][1] = y;
			currentPoints[2][2] = z - circumference * 2;

			currentPoints[3][0] = x;
			currentPoints[3][1] = y;
			currentPoints[3][2] = z - circumference * 3;

			currentPoints[4][0] = x + circumference;
			currentPoints[4][1] = y;
			currentPoints[4][2] = z - circumference * 3;

			currentPoints[5][0] = x + circumference * 2;
			currentPoints[5][1] = y;
			currentPoints[5][2] = z - circumference * 2;

			currentPoints[6][0] = x + circumference * 2;
			currentPoints[6][1] = y;
			currentPoints[6][2] = z - circumference;

			currentPoints[7][0] = x + circumference;
			currentPoints[7][1] = y;
			currentPoints[7][2] = z;
		}

		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();

		if (parentID.equals("OrbicularisOrisMuscle:01")) {
			int nMaxSegs = 6;
			for (int numSegs = 0; numSegs < nMaxSegs; numSegs++) {

				// Create a place for an instruction
				BioMightInstruction bioInstruct = new BioMightInstruction();

				if (numSegs == 0) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 1) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 2) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 3) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 4) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 5) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 6) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 7) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
				}

				// Add the instruction into the instruction set
				bioMightInstructSet.addElement(bioInstruct);
			}

		} else if (parentID.equals("OrbicularisOrisMuscle:02")) {
			int nMaxSegs = 6;
			for (int numSegs = 0; numSegs < nMaxSegs; numSegs++) {

				// Create a place for an instruction
				BioMightInstruction bioInstruct = new BioMightInstruction();

				if (numSegs == 0) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 1) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 2) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 3) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 4) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 5) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 6) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 7) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
				}

				// Add the instruction into the instruction set
				bioMightInstructSet.addElement(bioInstruct);
			}

		}

		// Generate the OrbicularisOrisMuscle
		// generateComponentRows(startID, componentType, componentName,
		// componentID, currentPoints, bioMightInstructSet);
		// System.out.println("Generated the Rows for OrbicularisOrisMuscleTissue: "
		// + componentID + "   parent: " + parentID + "   " + componentType);

		return returnCode;
	}	
	
	

	/***************************************************************************************
	 * GENERATE LATERAL PalmarisBrevisMuscle 
	 * 
	 * This generates the PalmarisBrevisMuscle 
	 * 
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/

	public int generatePalmarisBrevisMuscle(String startID,
			String componentType, String componentName, String componentID,
			String parentID, double[][] currentPoints) throws DataException,
			DataSecurityException {
		System.out.println("Generat PalmarisBrevisMuscle");

		int bodyID = 1;
		int projectID = 1;
		String vertices = "";

		ArrayList mySqlList = new ArrayList();
		int returnCode = 0;

		// We can generate the PalmarisBrevisMuscle 
		if (currentPoints == null) {
			double circumference = 0.125;

			double x = -8.0;
			double y = -10.0;
			double z = -1.0;

			// Create a equilateral octogon
			currentPoints[0][0] = x;
			currentPoints[0][1] = y;
			currentPoints[0][2] = z;

			currentPoints[1][0] = x - circumference;
			currentPoints[1][1] = y;
			currentPoints[1][2] = z - circumference;

			currentPoints[2][0] = x - circumference;
			currentPoints[2][1] = y;
			currentPoints[2][2] = z - circumference * 2;

			currentPoints[3][0] = x;
			currentPoints[3][1] = y;
			currentPoints[3][2] = z - circumference * 3;

			currentPoints[4][0] = x + circumference;
			currentPoints[4][1] = y;
			currentPoints[4][2] = z - circumference * 3;

			currentPoints[5][0] = x + circumference * 2;
			currentPoints[5][1] = y;
			currentPoints[5][2] = z - circumference * 2;

			currentPoints[6][0] = x + circumference * 2;
			currentPoints[6][1] = y;
			currentPoints[6][2] = z - circumference;

			currentPoints[7][0] = x + circumference;
			currentPoints[7][1] = y;
			currentPoints[7][2] = z;
		}

		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();

		if (parentID.equals("PalmarisBrevisMuscle:01")) {
			int nMaxSegs = 6;
			for (int numSegs = 0; numSegs < nMaxSegs; numSegs++) {

				// Create a place for an instruction
				BioMightInstruction bioInstruct = new BioMightInstruction();

				if (numSegs == 0) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 1) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 2) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 3) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 4) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 5) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 6) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 7) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
				}

				// Add the instruction into the instruction set
				bioMightInstructSet.addElement(bioInstruct);
			}

		} else if (parentID.equals("PalmarisBrevisMuscle:02")) {
			int nMaxSegs = 6;
			for (int numSegs = 0; numSegs < nMaxSegs; numSegs++) {

				// Create a place for an instruction
				BioMightInstruction bioInstruct = new BioMightInstruction();

				if (numSegs == 0) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 1) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 2) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 3) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 4) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 5) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 6) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 7) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
				}

				// Add the instruction into the instruction set
				bioMightInstructSet.addElement(bioInstruct);
			}

		}

		// Generate the ObturatorInternusMuscle
		// generateComponentRows(startID, componentType, componentName,
		// componentID, currentPoints, bioMightInstructSet);
		// System.out.println("Generated the Rows for PalmarisBrevisMuscle: "
		// + componentID + "   parent: " + parentID + "   " + componentType);

		return returnCode;
	}	
	
	
	

	/***************************************************************************************
	 * GENERATE LATERAL PectineusMuscle 
	 * 
	 * This generates the PectineusMuscle 
	 * 
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/

	public int generatePectineusMuscle(String startID,
			String componentType, String componentName, String componentID,
			String parentID, double[][] currentPoints) throws DataException,
			DataSecurityException {
		System.out.println("Generat PectineusMuscle ");

		int bodyID = 1;
		int projectID = 1;
		String vertices = "";

		ArrayList mySqlList = new ArrayList();
		int returnCode = 0;

		// We can generate the PectineusMuscle 
		if (currentPoints == null) {
			double circumference = 0.125;

			double x = -8.0;
			double y = -10.0;
			double z = -1.0;

			// Create a equilateral octogon
			currentPoints[0][0] = x;
			currentPoints[0][1] = y;
			currentPoints[0][2] = z;

			currentPoints[1][0] = x - circumference;
			currentPoints[1][1] = y;
			currentPoints[1][2] = z - circumference;

			currentPoints[2][0] = x - circumference;
			currentPoints[2][1] = y;
			currentPoints[2][2] = z - circumference * 2;

			currentPoints[3][0] = x;
			currentPoints[3][1] = y;
			currentPoints[3][2] = z - circumference * 3;

			currentPoints[4][0] = x + circumference;
			currentPoints[4][1] = y;
			currentPoints[4][2] = z - circumference * 3;

			currentPoints[5][0] = x + circumference * 2;
			currentPoints[5][1] = y;
			currentPoints[5][2] = z - circumference * 2;

			currentPoints[6][0] = x + circumference * 2;
			currentPoints[6][1] = y;
			currentPoints[6][2] = z - circumference;

			currentPoints[7][0] = x + circumference;
			currentPoints[7][1] = y;
			currentPoints[7][2] = z;
		}

		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();

		if (parentID.equals("PectineusMuscle:01")) {
			int nMaxSegs = 6;
			for (int numSegs = 0; numSegs < nMaxSegs; numSegs++) {

				// Create a place for an instruction
				BioMightInstruction bioInstruct = new BioMightInstruction();

				if (numSegs == 0) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 1) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 2) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 3) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 4) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 5) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 6) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 7) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
				}

				// Add the instruction into the instruction set
				bioMightInstructSet.addElement(bioInstruct);
			}

		} else if (parentID.equals("PectineusMuscle:02")) {
			int nMaxSegs = 6;
			for (int numSegs = 0; numSegs < nMaxSegs; numSegs++) {

				// Create a place for an instruction
				BioMightInstruction bioInstruct = new BioMightInstruction();

				if (numSegs == 0) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 1) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 2) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 3) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 4) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 5) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 6) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 7) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
				}

				// Add the instruction into the instruction set
				bioMightInstructSet.addElement(bioInstruct);
			}

		}

		// Generate the PectineusMuscle
		// generateComponentRows(startID, componentType, componentName,
		// componentID, currentPoints, bioMightInstructSet);
		// System.out.println("Generated the Rows for PectineusMuscle: "
		// + componentID + "   parent: " + parentID + "   " + componentType);

		return returnCode;
	}	
	
	
	

	/***************************************************************************************
	 * GENERATE LATERAL PeroneusBrevisMuscle 
	 * 
	 * This generates the PeroneusBrevisMuscle 
	 * 
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/

	public int generatePeroneusBrevisMuscle(String startID,
			String componentType, String componentName, String componentID,
			String parentID, double[][] currentPoints) throws DataException,
			DataSecurityException {
		System.out.println("Generat PeroneusBrevisMuscle ");

		int bodyID = 1;
		int projectID = 1;
		String vertices = "";

		ArrayList mySqlList = new ArrayList();
		int returnCode = 0;

		// We can generate the PeroneusBrevisMuscle 
		if (currentPoints == null) {
			double circumference = 0.125;

			double x = -8.0;
			double y = -10.0;
			double z = -1.0;

			// Create a equilateral octogon
			currentPoints[0][0] = x;
			currentPoints[0][1] = y;
			currentPoints[0][2] = z;

			currentPoints[1][0] = x - circumference;
			currentPoints[1][1] = y;
			currentPoints[1][2] = z - circumference;

			currentPoints[2][0] = x - circumference;
			currentPoints[2][1] = y;
			currentPoints[2][2] = z - circumference * 2;

			currentPoints[3][0] = x;
			currentPoints[3][1] = y;
			currentPoints[3][2] = z - circumference * 3;

			currentPoints[4][0] = x + circumference;
			currentPoints[4][1] = y;
			currentPoints[4][2] = z - circumference * 3;

			currentPoints[5][0] = x + circumference * 2;
			currentPoints[5][1] = y;
			currentPoints[5][2] = z - circumference * 2;

			currentPoints[6][0] = x + circumference * 2;
			currentPoints[6][1] = y;
			currentPoints[6][2] = z - circumference;

			currentPoints[7][0] = x + circumference;
			currentPoints[7][1] = y;
			currentPoints[7][2] = z;
		}

		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();

		if (parentID.equals("PeroneusBrevisMuscle:01")) {
			int nMaxSegs = 6;
			for (int numSegs = 0; numSegs < nMaxSegs; numSegs++) {

				// Create a place for an instruction
				BioMightInstruction bioInstruct = new BioMightInstruction();

				if (numSegs == 0) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 1) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 2) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 3) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 4) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 5) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 6) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 7) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
				}

				// Add the instruction into the instruction set
				bioMightInstructSet.addElement(bioInstruct);
			}

		} else if (parentID.equals("PeroneusBrevisMuscle:02")) {
			int nMaxSegs = 6;
			for (int numSegs = 0; numSegs < nMaxSegs; numSegs++) {

				// Create a place for an instruction
				BioMightInstruction bioInstruct = new BioMightInstruction();

				if (numSegs == 0) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 1) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 2) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 3) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 4) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 5) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 6) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 7) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
				}

				// Add the instruction into the instruction set
				bioMightInstructSet.addElement(bioInstruct);
			}

		}

		// Generate the PeroneusBrevisMuscle
		// generateComponentRows(startID, componentType, componentName,
		// componentID, currentPoints, bioMightInstructSet);
		// System.out.println("Generated the Rows for PeroneusBrevisMuscle: "
		// + componentID + "   parent: " + parentID + "   " + componentType);

		return returnCode;
	}	
	
	

	/***************************************************************************************
	 * GENERATE LATERAL PeroneusLongusMuscle 
	 * 
	 * This generates the PeroneusLongusMuscle 
	 * 
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/

	public int generatePeroneusLongusMuscle(String startID,
			String componentType, String componentName, String componentID,
			String parentID, double[][] currentPoints) throws DataException,
			DataSecurityException {
		System.out.println("Generat PectineusMuscle ");

		int bodyID = 1;
		int projectID = 1;
		String vertices = "";

		ArrayList mySqlList = new ArrayList();
		int returnCode = 0;

		// We can generate the PeroneusLongusMuscle 
		if (currentPoints == null) {
			double circumference = 0.125;

			double x = -8.0;
			double y = -10.0;
			double z = -1.0;

			// Create a equilateral octogon
			currentPoints[0][0] = x;
			currentPoints[0][1] = y;
			currentPoints[0][2] = z;

			currentPoints[1][0] = x - circumference;
			currentPoints[1][1] = y;
			currentPoints[1][2] = z - circumference;

			currentPoints[2][0] = x - circumference;
			currentPoints[2][1] = y;
			currentPoints[2][2] = z - circumference * 2;

			currentPoints[3][0] = x;
			currentPoints[3][1] = y;
			currentPoints[3][2] = z - circumference * 3;

			currentPoints[4][0] = x + circumference;
			currentPoints[4][1] = y;
			currentPoints[4][2] = z - circumference * 3;

			currentPoints[5][0] = x + circumference * 2;
			currentPoints[5][1] = y;
			currentPoints[5][2] = z - circumference * 2;

			currentPoints[6][0] = x + circumference * 2;
			currentPoints[6][1] = y;
			currentPoints[6][2] = z - circumference;

			currentPoints[7][0] = x + circumference;
			currentPoints[7][1] = y;
			currentPoints[7][2] = z;
		}

		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();

		if (parentID.equals("PeroneusLongusMuscle:01")) {
			int nMaxSegs = 6;
			for (int numSegs = 0; numSegs < nMaxSegs; numSegs++) {

				// Create a place for an instruction
				BioMightInstruction bioInstruct = new BioMightInstruction();

				if (numSegs == 0) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 1) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 2) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 3) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 4) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 5) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 6) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 7) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
				}

				// Add the instruction into the instruction set
				bioMightInstructSet.addElement(bioInstruct);
			}

		} else if (parentID.equals("PeroneusLongusMuscle:02")) {
			int nMaxSegs = 6;
			for (int numSegs = 0; numSegs < nMaxSegs; numSegs++) {

				// Create a place for an instruction
				BioMightInstruction bioInstruct = new BioMightInstruction();

				if (numSegs == 0) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 1) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 2) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 3) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 4) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 5) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 6) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 7) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
				}

				// Add the instruction into the instruction set
				bioMightInstructSet.addElement(bioInstruct);
			}

		}

		// Generate the PeroneusLongusMuscle
		// generateComponentRows(startID, componentType, componentName,
		// componentID, currentPoints, bioMightInstructSet);
		// System.out.println("Generated the Rows for PeroneusLongusMuscle: "
		// + componentID + "   parent: " + parentID + "   " + componentType);

		return returnCode;
	}	
	
	
	

	/***************************************************************************************
	 * GENERATE LATERAL PeroneusTertiusMuscle 
	 * 
	 * This generates the PeroneusTertiusMuscle 
	 * 
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/

	public int generatePeroneusTertiusMuscle(String startID,
			String componentType, String componentName, String componentID,
			String parentID, double[][] currentPoints) throws DataException,
			DataSecurityException {
		System.out.println("Generat PectineusMuscle ");

		int bodyID = 1;
		int projectID = 1;
		String vertices = "";

		ArrayList mySqlList = new ArrayList();
		int returnCode = 0;

		// We can generate the PeroneusTertiusMuscle 
		if (currentPoints == null) {
			double circumference = 0.125;

			double x = -8.0;
			double y = -10.0;
			double z = -1.0;

			// Create a equilateral octogon
			currentPoints[0][0] = x;
			currentPoints[0][1] = y;
			currentPoints[0][2] = z;

			currentPoints[1][0] = x - circumference;
			currentPoints[1][1] = y;
			currentPoints[1][2] = z - circumference;

			currentPoints[2][0] = x - circumference;
			currentPoints[2][1] = y;
			currentPoints[2][2] = z - circumference * 2;

			currentPoints[3][0] = x;
			currentPoints[3][1] = y;
			currentPoints[3][2] = z - circumference * 3;

			currentPoints[4][0] = x + circumference;
			currentPoints[4][1] = y;
			currentPoints[4][2] = z - circumference * 3;

			currentPoints[5][0] = x + circumference * 2;
			currentPoints[5][1] = y;
			currentPoints[5][2] = z - circumference * 2;

			currentPoints[6][0] = x + circumference * 2;
			currentPoints[6][1] = y;
			currentPoints[6][2] = z - circumference;

			currentPoints[7][0] = x + circumference;
			currentPoints[7][1] = y;
			currentPoints[7][2] = z;
		}

		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();

		if (parentID.equals("PeroneusTertiusMuscle:01")) {
			int nMaxSegs = 6;
			for (int numSegs = 0; numSegs < nMaxSegs; numSegs++) {

				// Create a place for an instruction
				BioMightInstruction bioInstruct = new BioMightInstruction();

				if (numSegs == 0) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 1) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 2) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 3) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 4) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 5) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 6) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 7) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
				}

				// Add the instruction into the instruction set
				bioMightInstructSet.addElement(bioInstruct);
			}

		} else if (parentID.equals("PeroneusTertiusMuscle:02")) {
			int nMaxSegs = 6;
			for (int numSegs = 0; numSegs < nMaxSegs; numSegs++) {

				// Create a place for an instruction
				BioMightInstruction bioInstruct = new BioMightInstruction();

				if (numSegs == 0) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 1) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 2) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 3) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 4) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 5) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 6) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 7) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
				}

				// Add the instruction into the instruction set
				bioMightInstructSet.addElement(bioInstruct);
			}

		}

		// Generate the PeroneusTertiusMuscle
		// generateComponentRows(startID, componentType, componentName,
		// componentID, currentPoints, bioMightInstructSet);
		// System.out.println("Generated the Rows for PeroneusTertiusMuscle: "
		// + componentID + "   parent: " + parentID + "   " + componentType);

		return returnCode;
	}	
	
	
	
	

	/***************************************************************************************
	 * GENERATE  PiriformisMuscle 
	 * 
	 * This generates the PiriformisMuscle 
	 * 
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/

	public int generatePiriformisMuscle(String startID,
			String componentType, String componentName, String componentID,
			String parentID, double[][] currentPoints) throws DataException,
			DataSecurityException {
		System.out.println("Generat PiriformisMuscle ");

		int bodyID = 1;
		int projectID = 1;
		String vertices = "";

		ArrayList mySqlList = new ArrayList();
		int returnCode = 0;

		// We can generate the PiriformisMuscle 
		if (currentPoints == null) {
			double circumference = 0.125;

			double x = -8.0;
			double y = -10.0;
			double z = -1.0;

			// Create a equilateral octogon
			currentPoints[0][0] = x;
			currentPoints[0][1] = y;
			currentPoints[0][2] = z;

			currentPoints[1][0] = x - circumference;
			currentPoints[1][1] = y;
			currentPoints[1][2] = z - circumference;

			currentPoints[2][0] = x - circumference;
			currentPoints[2][1] = y;
			currentPoints[2][2] = z - circumference * 2;

			currentPoints[3][0] = x;
			currentPoints[3][1] = y;
			currentPoints[3][2] = z - circumference * 3;

			currentPoints[4][0] = x + circumference;
			currentPoints[4][1] = y;
			currentPoints[4][2] = z - circumference * 3;

			currentPoints[5][0] = x + circumference * 2;
			currentPoints[5][1] = y;
			currentPoints[5][2] = z - circumference * 2;

			currentPoints[6][0] = x + circumference * 2;
			currentPoints[6][1] = y;
			currentPoints[6][2] = z - circumference;

			currentPoints[7][0] = x + circumference;
			currentPoints[7][1] = y;
			currentPoints[7][2] = z;
		}

		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();

		if (parentID.equals("PiriformisMuscle:01")) {
			int nMaxSegs = 6;
			for (int numSegs = 0; numSegs < nMaxSegs; numSegs++) {

				// Create a place for an instruction
				BioMightInstruction bioInstruct = new BioMightInstruction();

				if (numSegs == 0) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 1) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 2) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 3) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 4) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 5) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 6) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 7) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
				}

				// Add the instruction into the instruction set
				bioMightInstructSet.addElement(bioInstruct);
			}

		} else if (parentID.equals("PiriformisMuscle:02")) {
			int nMaxSegs = 6;
			for (int numSegs = 0; numSegs < nMaxSegs; numSegs++) {

				// Create a place for an instruction
				BioMightInstruction bioInstruct = new BioMightInstruction();

				if (numSegs == 0) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 1) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 2) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 3) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 4) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 5) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 6) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 7) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
				}

				// Add the instruction into the instruction set
				bioMightInstructSet.addElement(bioInstruct);
			}

		}

		// Generate the generatePiriformisMuscle
		// generateComponentRows(startID, componentType, componentName,
		// componentID, currentPoints, bioMightInstructSet);
		// System.out.println("Generated the Rows for PiriformisMuscle: "
		// + componentID + "   parent: " + parentID + "   " + componentType);

		return returnCode;
	}	
	
	
	

	/***************************************************************************************
	 * GENERATE PlantarisMuscle 
	 * 
	 * This generates the PlantarisMuscle 
	 * 
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/

	public int generatePlantarisMuscle(String startID,
			String componentType, String componentName, String componentID,
			String parentID, double[][] currentPoints) throws DataException,
			DataSecurityException {
		System.out.println("Generat PlantarisMuscle ");

		int bodyID = 1;
		int projectID = 1;
		String vertices = "";

		ArrayList mySqlList = new ArrayList();
		int returnCode = 0;

		// We can generate the PlantarisMuscle
		if (currentPoints == null) {
			double circumference = 0.125;

			double x = -8.0;
			double y = -10.0;
			double z = -1.0;

			// Create a equilateral octogon
			currentPoints[0][0] = x;
			currentPoints[0][1] = y;
			currentPoints[0][2] = z;

			currentPoints[1][0] = x - circumference;
			currentPoints[1][1] = y;
			currentPoints[1][2] = z - circumference;

			currentPoints[2][0] = x - circumference;
			currentPoints[2][1] = y;
			currentPoints[2][2] = z - circumference * 2;

			currentPoints[3][0] = x;
			currentPoints[3][1] = y;
			currentPoints[3][2] = z - circumference * 3;

			currentPoints[4][0] = x + circumference;
			currentPoints[4][1] = y;
			currentPoints[4][2] = z - circumference * 3;

			currentPoints[5][0] = x + circumference * 2;
			currentPoints[5][1] = y;
			currentPoints[5][2] = z - circumference * 2;

			currentPoints[6][0] = x + circumference * 2;
			currentPoints[6][1] = y;
			currentPoints[6][2] = z - circumference;

			currentPoints[7][0] = x + circumference;
			currentPoints[7][1] = y;
			currentPoints[7][2] = z;
		}

		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();

		if (parentID.equals("PlantarisMuscle:01")) {
			int nMaxSegs = 6;
			for (int numSegs = 0; numSegs < nMaxSegs; numSegs++) {

				// Create a place for an instruction
				BioMightInstruction bioInstruct = new BioMightInstruction();

				if (numSegs == 0) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 1) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 2) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 3) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 4) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 5) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 6) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 7) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
				}

				// Add the instruction into the instruction set
				bioMightInstructSet.addElement(bioInstruct);
			}

		} else if (parentID.equals("PlantarisMuscle:02")) {
			int nMaxSegs = 6;
			for (int numSegs = 0; numSegs < nMaxSegs; numSegs++) {

				// Create a place for an instruction
				BioMightInstruction bioInstruct = new BioMightInstruction();

				if (numSegs == 0) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 1) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 2) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 3) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 4) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 5) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 6) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 7) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
				}

				// Add the instruction into the instruction set
				bioMightInstructSet.addElement(bioInstruct);
			}

		}

		// Generate the PlantarisMusclee
		// generateComponentRows(startID, componentType, componentName,
		// componentID, currentPoints, bioMightInstructSet);
		// System.out.println("Generated the Rows for PlantarisMuscle: "
		// + componentID + "   parent: " + parentID + "   " + componentType);

		return returnCode;
	}	
	
	
	
	

	/***************************************************************************************
	 * GENERATE PopliteusMuscle 
	 * 
	 * This generates the PopliteusMuscle 
	 * 
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/

	public int generatePopliteusMuscle(String startID,
			String componentType, String componentName, String componentID,
			String parentID, double[][] currentPoints) throws DataException,
			DataSecurityException {
		System.out.println("Generat PopliteusMuscle ");

		int bodyID = 1;
		int projectID = 1;
		String vertices = "";

		ArrayList mySqlList = new ArrayList();
		int returnCode = 0;

		// We can generate the PopliteusMuscle
		if (currentPoints == null) {
			double circumference = 0.125;

			double x = -8.0;
			double y = -10.0;
			double z = -1.0;

			// Create a equilateral octogon
			currentPoints[0][0] = x;
			currentPoints[0][1] = y;
			currentPoints[0][2] = z;

			currentPoints[1][0] = x - circumference;
			currentPoints[1][1] = y;
			currentPoints[1][2] = z - circumference;

			currentPoints[2][0] = x - circumference;
			currentPoints[2][1] = y;
			currentPoints[2][2] = z - circumference * 2;

			currentPoints[3][0] = x;
			currentPoints[3][1] = y;
			currentPoints[3][2] = z - circumference * 3;

			currentPoints[4][0] = x + circumference;
			currentPoints[4][1] = y;
			currentPoints[4][2] = z - circumference * 3;

			currentPoints[5][0] = x + circumference * 2;
			currentPoints[5][1] = y;
			currentPoints[5][2] = z - circumference * 2;

			currentPoints[6][0] = x + circumference * 2;
			currentPoints[6][1] = y;
			currentPoints[6][2] = z - circumference;

			currentPoints[7][0] = x + circumference;
			currentPoints[7][1] = y;
			currentPoints[7][2] = z;
		}

		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();

		if (parentID.equals("PopliteusMuscle:01")) {
			int nMaxSegs = 6;
			for (int numSegs = 0; numSegs < nMaxSegs; numSegs++) {

				// Create a place for an instruction
				BioMightInstruction bioInstruct = new BioMightInstruction();

				if (numSegs == 0) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 1) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 2) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 3) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 4) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 5) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 6) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 7) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
				}

				// Add the instruction into the instruction set
				bioMightInstructSet.addElement(bioInstruct);
			}

		} else if (parentID.equals("PopliteusMuscle:02")) {
			int nMaxSegs = 6;
			for (int numSegs = 0; numSegs < nMaxSegs; numSegs++) {

				// Create a place for an instruction
				BioMightInstruction bioInstruct = new BioMightInstruction();

				if (numSegs == 0) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 1) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 2) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 3) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 4) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 5) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 6) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 7) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
				}

				// Add the instruction into the instruction set
				bioMightInstructSet.addElement(bioInstruct);
			}

		}

		// Generate the PopliteusMuscle
		// generateComponentRows(startID, componentType, componentName,
		// componentID, currentPoints, bioMightInstructSet);
		// System.out.println("Generated the Rows for PopliteusMuscle: "
		// + componentID + "   parent: " + parentID + "   " + componentType);

		return returnCode;
	}	
	
	
	/***************************************************************************************
	 * GENERATE LATERAL PeroneusTertiusMuscle 
	 * 
	 * This generates the PeroneusTertiusMuscle 
	 * 
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/

	public int generateProcerusMuscle(String startID,
			String componentType, String componentName, String componentID,
			String parentID, double[][] currentPoints) throws DataException,
			DataSecurityException {
		System.out.println("Generat PectineusMuscle ");

		int bodyID = 1;
		int projectID = 1;
		String vertices = "";

		ArrayList mySqlList = new ArrayList();
		int returnCode = 0;

		// We can generate the ProcerusMuscle
		if (currentPoints == null) {
			double circumference = 0.125;

			double x = -8.0;
			double y = -10.0;
			double z = -1.0;

			// Create a equilateral octogon
			currentPoints[0][0] = x;
			currentPoints[0][1] = y;
			currentPoints[0][2] = z;

			currentPoints[1][0] = x - circumference;
			currentPoints[1][1] = y;
			currentPoints[1][2] = z - circumference;

			currentPoints[2][0] = x - circumference;
			currentPoints[2][1] = y;
			currentPoints[2][2] = z - circumference * 2;

			currentPoints[3][0] = x;
			currentPoints[3][1] = y;
			currentPoints[3][2] = z - circumference * 3;

			currentPoints[4][0] = x + circumference;
			currentPoints[4][1] = y;
			currentPoints[4][2] = z - circumference * 3;

			currentPoints[5][0] = x + circumference * 2;
			currentPoints[5][1] = y;
			currentPoints[5][2] = z - circumference * 2;

			currentPoints[6][0] = x + circumference * 2;
			currentPoints[6][1] = y;
			currentPoints[6][2] = z - circumference;

			currentPoints[7][0] = x + circumference;
			currentPoints[7][1] = y;
			currentPoints[7][2] = z;
		}

		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();

		if (parentID.equals("ProcerusMuscle:01")) {
			int nMaxSegs = 6;
			for (int numSegs = 0; numSegs < nMaxSegs; numSegs++) {

				// Create a place for an instruction
				BioMightInstruction bioInstruct = new BioMightInstruction();

				if (numSegs == 0) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 1) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 2) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 3) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 4) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 5) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 6) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 7) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
				}

				// Add the instruction into the instruction set
				bioMightInstructSet.addElement(bioInstruct);
			}

		} else if (parentID.equals("ProcerusMuscle:02")) {
			int nMaxSegs = 6;
			for (int numSegs = 0; numSegs < nMaxSegs; numSegs++) {

				// Create a place for an instruction
				BioMightInstruction bioInstruct = new BioMightInstruction();

				if (numSegs == 0) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 1) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 2) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 3) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 4) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 5) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 6) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 7) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
				}

				// Add the instruction into the instruction set
				bioMightInstructSet.addElement(bioInstruct);
			}

		}

		// Generate the ProcerusMuscle
		// generateComponentRows(startID, componentType, componentName,
		// componentID, currentPoints, bioMightInstructSet);
		// System.out.println("Generated the Rows for ProcerusMuscle: "
		// + componentID + "   parent: " + parentID + "   " + componentType);

		return returnCode;
	}	
	
	

	/***************************************************************************************
	 * GENERATE LATERAL PeroneusTertiusMuscle 
	 * 
	 * This generates the PeroneusTertiusMuscle 
	 * 
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/

	public int generatePronatorQuadratusMuscle(String startID,
			String componentType, String componentName, String componentID,
			String parentID, double[][] currentPoints) throws DataException,
			DataSecurityException {
		System.out.println("Generat PectineusMuscle ");

		int bodyID = 1;
		int projectID = 1;
		String vertices = "";

		ArrayList mySqlList = new ArrayList();
		int returnCode = 0;

		// We can generate the ProcerusMuscle
		if (currentPoints == null) {
			double circumference = 0.125;

			double x = -8.0;
			double y = -10.0;
			double z = -1.0;

			// Create a equilateral octogon
			currentPoints[0][0] = x;
			currentPoints[0][1] = y;
			currentPoints[0][2] = z;

			currentPoints[1][0] = x - circumference;
			currentPoints[1][1] = y;
			currentPoints[1][2] = z - circumference;

			currentPoints[2][0] = x - circumference;
			currentPoints[2][1] = y;
			currentPoints[2][2] = z - circumference * 2;

			currentPoints[3][0] = x;
			currentPoints[3][1] = y;
			currentPoints[3][2] = z - circumference * 3;

			currentPoints[4][0] = x + circumference;
			currentPoints[4][1] = y;
			currentPoints[4][2] = z - circumference * 3;

			currentPoints[5][0] = x + circumference * 2;
			currentPoints[5][1] = y;
			currentPoints[5][2] = z - circumference * 2;

			currentPoints[6][0] = x + circumference * 2;
			currentPoints[6][1] = y;
			currentPoints[6][2] = z - circumference;

			currentPoints[7][0] = x + circumference;
			currentPoints[7][1] = y;
			currentPoints[7][2] = z;
		}

		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();

		if (parentID.equals("ProcerusMuscle:01")) {
			int nMaxSegs = 6;
			for (int numSegs = 0; numSegs < nMaxSegs; numSegs++) {

				// Create a place for an instruction
				BioMightInstruction bioInstruct = new BioMightInstruction();

				if (numSegs == 0) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 1) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 2) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 3) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 4) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 5) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 6) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 7) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
				}

				// Add the instruction into the instruction set
				bioMightInstructSet.addElement(bioInstruct);
			}

		} else if (parentID.equals("ProcerusMuscle:02")) {
			int nMaxSegs = 6;
			for (int numSegs = 0; numSegs < nMaxSegs; numSegs++) {

				// Create a place for an instruction
				BioMightInstruction bioInstruct = new BioMightInstruction();

				if (numSegs == 0) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 1) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 2) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 3) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 4) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 5) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 6) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 7) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
				}

				// Add the instruction into the instruction set
				bioMightInstructSet.addElement(bioInstruct);
			}

		}

		// Generate the ProcerusMuscle
		// generateComponentRows(startID, componentType, componentName,
		// componentID, currentPoints, bioMightInstructSet);
		// System.out.println("Generated the Rows for ProcerusMuscle: "
		// + componentID + "   parent: " + parentID + "   " + componentType);

		return returnCode;
	}	
	
	
	
	

	/***************************************************************************************
	 * GENERATE LATERAL PeroneusTertiusMuscle 
	 * 
	 * This generates the PeroneusTertiusMuscle 
	 * 
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/

	public int generatePterygoideusInternusMuscle(String startID,
			String componentType, String componentName, String componentID,
			String parentID, double[][] currentPoints) throws DataException,
			DataSecurityException {
		System.out.println("Generat PectineusMuscle ");

		int bodyID = 1;
		int projectID = 1;
		String vertices = "";

		ArrayList mySqlList = new ArrayList();
		int returnCode = 0;

		// We can generate the ProcerusMuscle
		if (currentPoints == null) {
			double circumference = 0.125;

			double x = -8.0;
			double y = -10.0;
			double z = -1.0;

			// Create a equilateral octogon
			currentPoints[0][0] = x;
			currentPoints[0][1] = y;
			currentPoints[0][2] = z;

			currentPoints[1][0] = x - circumference;
			currentPoints[1][1] = y;
			currentPoints[1][2] = z - circumference;

			currentPoints[2][0] = x - circumference;
			currentPoints[2][1] = y;
			currentPoints[2][2] = z - circumference * 2;

			currentPoints[3][0] = x;
			currentPoints[3][1] = y;
			currentPoints[3][2] = z - circumference * 3;

			currentPoints[4][0] = x + circumference;
			currentPoints[4][1] = y;
			currentPoints[4][2] = z - circumference * 3;

			currentPoints[5][0] = x + circumference * 2;
			currentPoints[5][1] = y;
			currentPoints[5][2] = z - circumference * 2;

			currentPoints[6][0] = x + circumference * 2;
			currentPoints[6][1] = y;
			currentPoints[6][2] = z - circumference;

			currentPoints[7][0] = x + circumference;
			currentPoints[7][1] = y;
			currentPoints[7][2] = z;
		}

		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();

		if (parentID.equals("PterygoideusInternusMuscle:01")) {
			int nMaxSegs = 6;
			for (int numSegs = 0; numSegs < nMaxSegs; numSegs++) {

				// Create a place for an instruction
				BioMightInstruction bioInstruct = new BioMightInstruction();

				if (numSegs == 0) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 1) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 2) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 3) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 4) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 5) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 6) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 7) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
				}

				// Add the instruction into the instruction set
				bioMightInstructSet.addElement(bioInstruct);
			}

		} else if (parentID.equals("PterygoideusInternusMuscle:02")) {
			int nMaxSegs = 6;
			for (int numSegs = 0; numSegs < nMaxSegs; numSegs++) {

				// Create a place for an instruction
				BioMightInstruction bioInstruct = new BioMightInstruction();

				if (numSegs == 0) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 1) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 2) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 3) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 4) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 5) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 6) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 7) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
				}

				// Add the instruction into the instruction set
				bioMightInstructSet.addElement(bioInstruct);
			}

		}

		// Generate the PterygoideusInternusMuscle
		// generateComponentRows(startID, componentType, componentName,
		// componentID, currentPoints, bioMightInstructSet);
		// System.out.println("Generated the Rows for PterygoideusInternusMuscle: "
		// + componentID + "   parent: " + parentID + "   " + componentType);

		return returnCode;
	}	
	
	
	
	/***************************************************************************************
	 * GENERATE LATERAL PeroneusTertiusMuscle 
	 * 
	 * This generates the PeroneusTertiusMuscle 
	 * 
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/

	public int generateQuadratusLabiiSuperiorisMuscle(String startID,
			String componentType, String componentName, String componentID,
			String parentID, double[][] currentPoints) throws DataException,
			DataSecurityException {
		System.out.println("Generat PectineusMuscle ");

		int bodyID = 1;
		int projectID = 1;
		String vertices = "";

		ArrayList mySqlList = new ArrayList();
		int returnCode = 0;

		// We can generate the ProcerusMuscle
		if (currentPoints == null) {
			double circumference = 0.125;

			double x = -8.0;
			double y = -10.0;
			double z = -1.0;

			// Create a equilateral octogon
			currentPoints[0][0] = x;
			currentPoints[0][1] = y;
			currentPoints[0][2] = z;

			currentPoints[1][0] = x - circumference;
			currentPoints[1][1] = y;
			currentPoints[1][2] = z - circumference;

			currentPoints[2][0] = x - circumference;
			currentPoints[2][1] = y;
			currentPoints[2][2] = z - circumference * 2;

			currentPoints[3][0] = x;
			currentPoints[3][1] = y;
			currentPoints[3][2] = z - circumference * 3;

			currentPoints[4][0] = x + circumference;
			currentPoints[4][1] = y;
			currentPoints[4][2] = z - circumference * 3;

			currentPoints[5][0] = x + circumference * 2;
			currentPoints[5][1] = y;
			currentPoints[5][2] = z - circumference * 2;

			currentPoints[6][0] = x + circumference * 2;
			currentPoints[6][1] = y;
			currentPoints[6][2] = z - circumference;

			currentPoints[7][0] = x + circumference;
			currentPoints[7][1] = y;
			currentPoints[7][2] = z;
		}

		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();

		if (parentID.equals("QuadratusLabiiSuperiorisMuscle:01")) {
			int nMaxSegs = 6;
			for (int numSegs = 0; numSegs < nMaxSegs; numSegs++) {

				// Create a place for an instruction
				BioMightInstruction bioInstruct = new BioMightInstruction();

				if (numSegs == 0) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 1) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 2) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 3) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 4) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 5) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 6) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 7) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
				}

				// Add the instruction into the instruction set
				bioMightInstructSet.addElement(bioInstruct);
			}

		} else if (parentID.equals("QuadratusLabiiSuperiorisMuscle:02")) {
			int nMaxSegs = 6;
			for (int numSegs = 0; numSegs < nMaxSegs; numSegs++) {

				// Create a place for an instruction
				BioMightInstruction bioInstruct = new BioMightInstruction();

				if (numSegs == 0) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 1) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 2) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 3) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 4) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 5) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 6) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 7) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
				}

				// Add the instruction into the instruction set
				bioMightInstructSet.addElement(bioInstruct);
			}

		}

		// Generate the QuadratusLabiiSuperiorisMuscle
		// generateComponentRows(startID, componentType, componentName,
		// componentID, currentPoints, bioMightInstructSet);
		// System.out.println("Generated the Rows for QuadratusLabiiSuperiorisMuscle: "
		// + componentID + "   parent: " + parentID + "   " + componentType);

		return returnCode;
	}	
	

	/***************************************************************************************
	 * GENERATE LATERAL PeroneusTertiusMuscle 
	 * 
	 * This generates the PeroneusTertiusMuscle 
	 * 
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/

	public int generateQuadricepsFemorisMuscle(String startID,
			String componentType, String componentName, String componentID,
			String parentID, double[][] currentPoints) throws DataException,
			DataSecurityException {
		System.out.println("Generat PectineusMuscle ");

		int bodyID = 1;
		int projectID = 1;
		String vertices = "";

		ArrayList mySqlList = new ArrayList();
		int returnCode = 0;

		// We can generate the QuadricepsFemorisMuscle
		if (currentPoints == null) {
			double circumference = 0.125;

			double x = -8.0;
			double y = -10.0;
			double z = -1.0;

			// Create a equilateral octogon
			currentPoints[0][0] = x;
			currentPoints[0][1] = y;
			currentPoints[0][2] = z;

			currentPoints[1][0] = x - circumference;
			currentPoints[1][1] = y;
			currentPoints[1][2] = z - circumference;

			currentPoints[2][0] = x - circumference;
			currentPoints[2][1] = y;
			currentPoints[2][2] = z - circumference * 2;

			currentPoints[3][0] = x;
			currentPoints[3][1] = y;
			currentPoints[3][2] = z - circumference * 3;

			currentPoints[4][0] = x + circumference;
			currentPoints[4][1] = y;
			currentPoints[4][2] = z - circumference * 3;

			currentPoints[5][0] = x + circumference * 2;
			currentPoints[5][1] = y;
			currentPoints[5][2] = z - circumference * 2;

			currentPoints[6][0] = x + circumference * 2;
			currentPoints[6][1] = y;
			currentPoints[6][2] = z - circumference;

			currentPoints[7][0] = x + circumference;
			currentPoints[7][1] = y;
			currentPoints[7][2] = z;
		}

		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();

		if (parentID.equals("QuadricepsFemorisMuscle:01")) {
			int nMaxSegs = 6;
			for (int numSegs = 0; numSegs < nMaxSegs; numSegs++) {

				// Create a place for an instruction
				BioMightInstruction bioInstruct = new BioMightInstruction();

				if (numSegs == 0) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 1) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 2) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 3) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 4) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 5) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 6) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 7) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
				}

				// Add the instruction into the instruction set
				bioMightInstructSet.addElement(bioInstruct);
			}

		} else if (parentID.equals("QuadricepsFemorisMuscle:02")) {
			int nMaxSegs = 6;
			for (int numSegs = 0; numSegs < nMaxSegs; numSegs++) {

				// Create a place for an instruction
				BioMightInstruction bioInstruct = new BioMightInstruction();

				if (numSegs == 0) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 1) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 2) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 3) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 4) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 5) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 6) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 7) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
				}

				// Add the instruction into the instruction set
				bioMightInstructSet.addElement(bioInstruct);
			}

		}

		// Generate the QuadricepsFemorisMuscle
		// generateComponentRows(startID, componentType, componentName,
		// componentID, currentPoints, bioMightInstructSet);
		// System.out.println("Generated the Rows for QuadricepsFemorisMuscle: "
		// + componentID + "   parent: " + parentID + "   " + componentType);

		return returnCode;
	}	
	
	
	
	
	/***************************************************************************************
	 * GENERATE LATERAL PeroneusTertiusMuscle 
	 * 
	 * This generates the PeroneusTertiusMuscle 
	 * 
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/

	public int generateRectusCapitisAnteriorMuscle	(String startID,
			String componentType, String componentName, String componentID,
			String parentID, double[][] currentPoints) throws DataException,
			DataSecurityException {
		System.out.println("Generat PectineusMuscle ");

		int bodyID = 1;
		int projectID = 1;
		String vertices = "";

		ArrayList mySqlList = new ArrayList();
		int returnCode = 0;

		// We can generate the RectusCapitisAnteriorMuscle
		if (currentPoints == null) {
			double circumference = 0.125;

			double x = -8.0;
			double y = -10.0;
			double z = -1.0;

			// Create a equilateral octogon
			currentPoints[0][0] = x;
			currentPoints[0][1] = y;
			currentPoints[0][2] = z;

			currentPoints[1][0] = x - circumference;
			currentPoints[1][1] = y;
			currentPoints[1][2] = z - circumference;

			currentPoints[2][0] = x - circumference;
			currentPoints[2][1] = y;
			currentPoints[2][2] = z - circumference * 2;

			currentPoints[3][0] = x;
			currentPoints[3][1] = y;
			currentPoints[3][2] = z - circumference * 3;

			currentPoints[4][0] = x + circumference;
			currentPoints[4][1] = y;
			currentPoints[4][2] = z - circumference * 3;

			currentPoints[5][0] = x + circumference * 2;
			currentPoints[5][1] = y;
			currentPoints[5][2] = z - circumference * 2;

			currentPoints[6][0] = x + circumference * 2;
			currentPoints[6][1] = y;
			currentPoints[6][2] = z - circumference;

			currentPoints[7][0] = x + circumference;
			currentPoints[7][1] = y;
			currentPoints[7][2] = z;
		}

		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();

		if (parentID.equals("RectusCapitisAnteriorMuscle:01")) {
			int nMaxSegs = 6;
			for (int numSegs = 0; numSegs < nMaxSegs; numSegs++) {

				// Create a place for an instruction
				BioMightInstruction bioInstruct = new BioMightInstruction();

				if (numSegs == 0) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 1) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 2) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 3) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 4) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 5) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 6) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 7) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
				}

				// Add the instruction into the instruction set
				bioMightInstructSet.addElement(bioInstruct);
			}

		} else if (parentID.equals("RectusCapitisAnteriorMuscle:02")) {
			int nMaxSegs = 6;
			for (int numSegs = 0; numSegs < nMaxSegs; numSegs++) {

				// Create a place for an instruction
				BioMightInstruction bioInstruct = new BioMightInstruction();

				if (numSegs == 0) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 1) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 2) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 3) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 4) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 5) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 6) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 7) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
				}

				// Add the instruction into the instruction set
				bioMightInstructSet.addElement(bioInstruct);
			}

		}

		// Generate the RectusCapitisAnteriorMuscle
		// generateComponentRows(startID, componentType, componentName,
		// componentID, currentPoints, bioMightInstructSet);
		// System.out.println("Generated the Rows for RectusCapitisAnteriorMuscle: "
		// + componentID + "   parent: " + parentID + "   " + componentType);

		return returnCode;
	}	
	
	
	
	

	/***************************************************************************************
	 * GENERATE LATERAL PeroneusTertiusMuscle 
	 * 
	 * This generates the PeroneusTertiusMuscle 
	 * 
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/

	public int generateRectusFemorisMuscle	(String startID,
			String componentType, String componentName, String componentID,
			String parentID, double[][] currentPoints) throws DataException,
			DataSecurityException {
		System.out.println("Generat PectineusMuscle ");

		int bodyID = 1;
		int projectID = 1;
		String vertices = "";

		ArrayList mySqlList = new ArrayList();
		int returnCode = 0;

		// We can generate the RectusFemorisMuscle
		if (currentPoints == null) {
			double circumference = 0.125;

			double x = -8.0;
			double y = -10.0;
			double z = -1.0;

			// Create a equilateral octogon
			currentPoints[0][0] = x;
			currentPoints[0][1] = y;
			currentPoints[0][2] = z;

			currentPoints[1][0] = x - circumference;
			currentPoints[1][1] = y;
			currentPoints[1][2] = z - circumference;

			currentPoints[2][0] = x - circumference;
			currentPoints[2][1] = y;
			currentPoints[2][2] = z - circumference * 2;

			currentPoints[3][0] = x;
			currentPoints[3][1] = y;
			currentPoints[3][2] = z - circumference * 3;

			currentPoints[4][0] = x + circumference;
			currentPoints[4][1] = y;
			currentPoints[4][2] = z - circumference * 3;

			currentPoints[5][0] = x + circumference * 2;
			currentPoints[5][1] = y;
			currentPoints[5][2] = z - circumference * 2;

			currentPoints[6][0] = x + circumference * 2;
			currentPoints[6][1] = y;
			currentPoints[6][2] = z - circumference;

			currentPoints[7][0] = x + circumference;
			currentPoints[7][1] = y;
			currentPoints[7][2] = z;
		}

		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();

		if (parentID.equals("RectusFemorisMuscle:01")) {
			int nMaxSegs = 6;
			for (int numSegs = 0; numSegs < nMaxSegs; numSegs++) {

				// Create a place for an instruction
				BioMightInstruction bioInstruct = new BioMightInstruction();

				if (numSegs == 0) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 1) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 2) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 3) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 4) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 5) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 6) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 7) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
				}

				// Add the instruction into the instruction set
				bioMightInstructSet.addElement(bioInstruct);
			}

		} else if (parentID.equals("RectusFemorisMuscle:02")) {
			int nMaxSegs = 6;
			for (int numSegs = 0; numSegs < nMaxSegs; numSegs++) {

				// Create a place for an instruction
				BioMightInstruction bioInstruct = new BioMightInstruction();

				if (numSegs == 0) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 1) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 2) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 3) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 4) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 5) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 6) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 7) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
				}

				// Add the instruction into the instruction set
				bioMightInstructSet.addElement(bioInstruct);
			}

		}

		// Generate the RectusFemorisMuscle
		// generateComponentRows(startID, componentType, componentName,
		// componentID, currentPoints, bioMightInstructSet);
		// System.out.println("Generated the Rows for RectusFemorisMuscle: "
		// + componentID + "   parent: " + parentID + "   " + componentType);

		return returnCode;
	}	
	

	/***************************************************************************************
	 * GENERATE LATERAL PeroneusTertiusMuscle 
	 * 
	 * This generates the PeroneusTertiusMuscle 
	 * 
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/

	public int generateRisoriusMuscle	(String startID,
			String componentType, String componentName, String componentID,
			String parentID, double[][] currentPoints) throws DataException,
			DataSecurityException {
		System.out.println("Generat PectineusMuscle ");

		int bodyID = 1;
		int projectID = 1;
		String vertices = "";

		ArrayList mySqlList = new ArrayList();
		int returnCode = 0;

		// We can generate the RisoriusMuscle
		if (currentPoints == null) {
			double circumference = 0.125;

			double x = -8.0;
			double y = -10.0;
			double z = -1.0;

			// Create a equilateral octogon
			currentPoints[0][0] = x;
			currentPoints[0][1] = y;
			currentPoints[0][2] = z;

			currentPoints[1][0] = x - circumference;
			currentPoints[1][1] = y;
			currentPoints[1][2] = z - circumference;

			currentPoints[2][0] = x - circumference;
			currentPoints[2][1] = y;
			currentPoints[2][2] = z - circumference * 2;

			currentPoints[3][0] = x;
			currentPoints[3][1] = y;
			currentPoints[3][2] = z - circumference * 3;

			currentPoints[4][0] = x + circumference;
			currentPoints[4][1] = y;
			currentPoints[4][2] = z - circumference * 3;

			currentPoints[5][0] = x + circumference * 2;
			currentPoints[5][1] = y;
			currentPoints[5][2] = z - circumference * 2;

			currentPoints[6][0] = x + circumference * 2;
			currentPoints[6][1] = y;
			currentPoints[6][2] = z - circumference;

			currentPoints[7][0] = x + circumference;
			currentPoints[7][1] = y;
			currentPoints[7][2] = z;
		}

		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();

		if (parentID.equals("RisoriusMuscle:01")) {
			int nMaxSegs = 6;
			for (int numSegs = 0; numSegs < nMaxSegs; numSegs++) {

				// Create a place for an instruction
				BioMightInstruction bioInstruct = new BioMightInstruction();

				if (numSegs == 0) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 1) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 2) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 3) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 4) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 5) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 6) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 7) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
				}

				// Add the instruction into the instruction set
				bioMightInstructSet.addElement(bioInstruct);
			}

		} else if (parentID.equals("RisoriusMuscle:02")) {
			int nMaxSegs = 6;
			for (int numSegs = 0; numSegs < nMaxSegs; numSegs++) {

				// Create a place for an instruction
				BioMightInstruction bioInstruct = new BioMightInstruction();

				if (numSegs == 0) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 1) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 2) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 3) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 4) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 5) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 6) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 7) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
				}

				// Add the instruction into the instruction set
				bioMightInstructSet.addElement(bioInstruct);
			}

		}

		// Generate the RisoriusMuscle
		// generateComponentRows(startID, componentType, componentName,
		// componentID, currentPoints, bioMightInstructSet);
		// System.out.println("Generated the Rows for RisoriusMuscle: "
		// + componentID + "   parent: " + parentID + "   " + componentType);

		return returnCode;
	}	
	
	
	

	/***************************************************************************************
	 * GENERATE LATERAL PeroneusTertiusMuscle 
	 * 
	 * This generates the PeroneusTertiusMuscle 
	 * 
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/

	public int generateSartoriusMuscle	(String startID,
			String componentType, String componentName, String componentID,
			String parentID, double[][] currentPoints) throws DataException,
			DataSecurityException {
		System.out.println("Generat PectineusMuscle ");

		int bodyID = 1;
		int projectID = 1;
		String vertices = "";

		ArrayList mySqlList = new ArrayList();
		int returnCode = 0;

		// We can generate the SartoriusMuscle
		if (currentPoints == null) {
			double circumference = 0.125;

			double x = -8.0;
			double y = -10.0;
			double z = -1.0;

			// Create a equilateral octogon
			currentPoints[0][0] = x;
			currentPoints[0][1] = y;
			currentPoints[0][2] = z;

			currentPoints[1][0] = x - circumference;
			currentPoints[1][1] = y;
			currentPoints[1][2] = z - circumference;

			currentPoints[2][0] = x - circumference;
			currentPoints[2][1] = y;
			currentPoints[2][2] = z - circumference * 2;

			currentPoints[3][0] = x;
			currentPoints[3][1] = y;
			currentPoints[3][2] = z - circumference * 3;

			currentPoints[4][0] = x + circumference;
			currentPoints[4][1] = y;
			currentPoints[4][2] = z - circumference * 3;

			currentPoints[5][0] = x + circumference * 2;
			currentPoints[5][1] = y;
			currentPoints[5][2] = z - circumference * 2;

			currentPoints[6][0] = x + circumference * 2;
			currentPoints[6][1] = y;
			currentPoints[6][2] = z - circumference;

			currentPoints[7][0] = x + circumference;
			currentPoints[7][1] = y;
			currentPoints[7][2] = z;
		}

		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();

		if (parentID.equals("SartoriusMuscle:01")) {
			int nMaxSegs = 6;
			for (int numSegs = 0; numSegs < nMaxSegs; numSegs++) {

				// Create a place for an instruction
				BioMightInstruction bioInstruct = new BioMightInstruction();

				if (numSegs == 0) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 1) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 2) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 3) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 4) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 5) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 6) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 7) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
				}

				// Add the instruction into the instruction set
				bioMightInstructSet.addElement(bioInstruct);
			}

		} else if (parentID.equals("SartoriusMuscle:02")) {
			int nMaxSegs = 6;
			for (int numSegs = 0; numSegs < nMaxSegs; numSegs++) {

				// Create a place for an instruction
				BioMightInstruction bioInstruct = new BioMightInstruction();

				if (numSegs == 0) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 1) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 2) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 3) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 4) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 5) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 6) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 7) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
				}

				// Add the instruction into the instruction set
				bioMightInstructSet.addElement(bioInstruct);
			}

		}

		// Generate the SartoriusMuscle
		// generateComponentRows(startID, componentType, componentName,
		// componentID, currentPoints, bioMightInstructSet);
		// System.out.println("Generated the Rows for SartoriusMuscle: "
		// + componentID + "   parent: " + parentID + "   " + componentType);

		return returnCode;
	}	
	


	/***************************************************************************************
	 * GENERATE LATERAL PeroneusTertiusMuscle 
	 * 
	 * This generates the PeroneusTertiusMuscle 
	 * 
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/

	public int generateScalenusAnteriorMuscle	(String startID,
			String componentType, String componentName, String componentID,
			String parentID, double[][] currentPoints) throws DataException,
			DataSecurityException {
		System.out.println("Generat PectineusMuscle ");

		int bodyID = 1;
		int projectID = 1;
		String vertices = "";

		ArrayList mySqlList = new ArrayList();
		int returnCode = 0;

		// We can generate the SartoriusMuscle
		if (currentPoints == null) {
			double circumference = 0.125;

			double x = -8.0;
			double y = -10.0;
			double z = -1.0;

			// Create a equilateral octogon
			currentPoints[0][0] = x;
			currentPoints[0][1] = y;
			currentPoints[0][2] = z;

			currentPoints[1][0] = x - circumference;
			currentPoints[1][1] = y;
			currentPoints[1][2] = z - circumference;

			currentPoints[2][0] = x - circumference;
			currentPoints[2][1] = y;
			currentPoints[2][2] = z - circumference * 2;

			currentPoints[3][0] = x;
			currentPoints[3][1] = y;
			currentPoints[3][2] = z - circumference * 3;

			currentPoints[4][0] = x + circumference;
			currentPoints[4][1] = y;
			currentPoints[4][2] = z - circumference * 3;

			currentPoints[5][0] = x + circumference * 2;
			currentPoints[5][1] = y;
			currentPoints[5][2] = z - circumference * 2;

			currentPoints[6][0] = x + circumference * 2;
			currentPoints[6][1] = y;
			currentPoints[6][2] = z - circumference;

			currentPoints[7][0] = x + circumference;
			currentPoints[7][1] = y;
			currentPoints[7][2] = z;
		}

		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();

		if (parentID.equals("ScalenusAnteriorMuscle:01")) {
			int nMaxSegs = 6;
			for (int numSegs = 0; numSegs < nMaxSegs; numSegs++) {

				// Create a place for an instruction
				BioMightInstruction bioInstruct = new BioMightInstruction();

				if (numSegs == 0) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 1) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 2) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 3) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 4) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 5) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 6) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 7) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
				}

				// Add the instruction into the instruction set
				bioMightInstructSet.addElement(bioInstruct);
			}

		} else if (parentID.equals("ScalenusAnteriorMuscle:02")) {
			int nMaxSegs = 6;
			for (int numSegs = 0; numSegs < nMaxSegs; numSegs++) {

				// Create a place for an instruction
				BioMightInstruction bioInstruct = new BioMightInstruction();

				if (numSegs == 0) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 1) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 2) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 3) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 4) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 5) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 6) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 7) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
				}

				// Add the instruction into the instruction set
				bioMightInstructSet.addElement(bioInstruct);
			}

		}

		// Generate the ScalenusAnteriorMuscle
		// generateComponentRows(startID, componentType, componentName,
		// componentID, currentPoints, bioMightInstructSet);
		// System.out.println("Generated the Rows for ScalenusAnteriorMuscle: "
		// + componentID + "   parent: " + parentID + "   " + componentType);

		return returnCode;
	}	
	
	

	

	/***************************************************************************************
	 * GENERATE LATERAL PeroneusTertiusMuscle 
	 * 
	 * This generates the PeroneusTertiusMuscle 
	 * 
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/

	public int generateScalenusMediusMuscle	(String startID,
			String componentType, String componentName, String componentID,
			String parentID, double[][] currentPoints) throws DataException,
			DataSecurityException {
		System.out.println("Generat PectineusMuscle ");

		int bodyID = 1;
		int projectID = 1;
		String vertices = "";

		ArrayList mySqlList = new ArrayList();
		int returnCode = 0;

		// We can generate the ScalenusMediusMuscle
		if (currentPoints == null) {
			double circumference = 0.125;

			double x = -8.0;
			double y = -10.0;
			double z = -1.0;

			// Create a equilateral octogon
			currentPoints[0][0] = x;
			currentPoints[0][1] = y;
			currentPoints[0][2] = z;

			currentPoints[1][0] = x - circumference;
			currentPoints[1][1] = y;
			currentPoints[1][2] = z - circumference;

			currentPoints[2][0] = x - circumference;
			currentPoints[2][1] = y;
			currentPoints[2][2] = z - circumference * 2;

			currentPoints[3][0] = x;
			currentPoints[3][1] = y;
			currentPoints[3][2] = z - circumference * 3;

			currentPoints[4][0] = x + circumference;
			currentPoints[4][1] = y;
			currentPoints[4][2] = z - circumference * 3;

			currentPoints[5][0] = x + circumference * 2;
			currentPoints[5][1] = y;
			currentPoints[5][2] = z - circumference * 2;

			currentPoints[6][0] = x + circumference * 2;
			currentPoints[6][1] = y;
			currentPoints[6][2] = z - circumference;

			currentPoints[7][0] = x + circumference;
			currentPoints[7][1] = y;
			currentPoints[7][2] = z;
		}

		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();

		if (parentID.equals("ScalenusMediusMuscle:01")) {
			int nMaxSegs = 6;
			for (int numSegs = 0; numSegs < nMaxSegs; numSegs++) {

				// Create a place for an instruction
				BioMightInstruction bioInstruct = new BioMightInstruction();

				if (numSegs == 0) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 1) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 2) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 3) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 4) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 5) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 6) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 7) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
				}

				// Add the instruction into the instruction set
				bioMightInstructSet.addElement(bioInstruct);
			}

		} else if (parentID.equals("ScalenusMediusMuscle:02")) {
			int nMaxSegs = 6;
			for (int numSegs = 0; numSegs < nMaxSegs; numSegs++) {

				// Create a place for an instruction
				BioMightInstruction bioInstruct = new BioMightInstruction();

				if (numSegs == 0) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 1) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 2) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 3) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 4) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 5) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 6) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 7) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
				}

				// Add the instruction into the instruction set
				bioMightInstructSet.addElement(bioInstruct);
			}

		}

		// Generate the ScalenusMediusMuscle
		// generateComponentRows(startID, componentType, componentName,
		// componentID, currentPoints, bioMightInstructSet);
		// System.out.println("Generated the Rows for ScalenusAnteriorMuscle: "
		// + componentID + "   parent: " + parentID + "   " + componentType);

		return returnCode;
	}	
	
	

	/***************************************************************************************
	 * GENERATE LATERAL PeroneusTertiusMuscle 
	 * 
	 * This generates the PeroneusTertiusMuscle 
	 * 
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/

	public int generateSoleusMuscle	(String startID,
			String componentType, String componentName, String componentID,
			String parentID, double[][] currentPoints) throws DataException,
			DataSecurityException {
		System.out.println("Generat PectineusMuscle ");

		int bodyID = 1;
		int projectID = 1;
		String vertices = "";

		ArrayList mySqlList = new ArrayList();
		int returnCode = 0;

		// We can generate the SoleusMuscle
		if (currentPoints == null) {
			double circumference = 0.125;

			double x = -8.0;
			double y = -10.0;
			double z = -1.0;

			// Create a equilateral octogon
			currentPoints[0][0] = x;
			currentPoints[0][1] = y;
			currentPoints[0][2] = z;

			currentPoints[1][0] = x - circumference;
			currentPoints[1][1] = y;
			currentPoints[1][2] = z - circumference;

			currentPoints[2][0] = x - circumference;
			currentPoints[2][1] = y;
			currentPoints[2][2] = z - circumference * 2;

			currentPoints[3][0] = x;
			currentPoints[3][1] = y;
			currentPoints[3][2] = z - circumference * 3;

			currentPoints[4][0] = x + circumference;
			currentPoints[4][1] = y;
			currentPoints[4][2] = z - circumference * 3;

			currentPoints[5][0] = x + circumference * 2;
			currentPoints[5][1] = y;
			currentPoints[5][2] = z - circumference * 2;

			currentPoints[6][0] = x + circumference * 2;
			currentPoints[6][1] = y;
			currentPoints[6][2] = z - circumference;

			currentPoints[7][0] = x + circumference;
			currentPoints[7][1] = y;
			currentPoints[7][2] = z;
		}

		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();

		if (parentID.equals("SoleusMuscle:01")) {
			int nMaxSegs = 6;
			for (int numSegs = 0; numSegs < nMaxSegs; numSegs++) {

				// Create a place for an instruction
				BioMightInstruction bioInstruct = new BioMightInstruction();

				if (numSegs == 0) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 1) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 2) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 3) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 4) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 5) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 6) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 7) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
				}

				// Add the instruction into the instruction set
				bioMightInstructSet.addElement(bioInstruct);
			}

		} else if (parentID.equals("SoleusMuscle:02")) {
			int nMaxSegs = 6;
			for (int numSegs = 0; numSegs < nMaxSegs; numSegs++) {

				// Create a place for an instruction
				BioMightInstruction bioInstruct = new BioMightInstruction();

				if (numSegs == 0) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 1) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 2) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 3) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 4) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 5) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 6) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 7) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
				}

				// Add the instruction into the instruction set
				bioMightInstructSet.addElement(bioInstruct);
			}

		}

		// Generate the SoleusMuscle
		// generateComponentRows(startID, componentType, componentName,
		// componentID, currentPoints, bioMightInstructSet);
		// System.out.println("Generated the Rows for SoleusMuscle: "
		// + componentID + "   parent: " + parentID + "   " + componentType);

		return returnCode;
	}	
	

	/***************************************************************************************
	 * GENERATE LATERAL PeroneusTertiusMuscle 
	 * 
	 * This generates the PeroneusTertiusMuscle 
	 * 
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/

	public int generateSphincterAniExternusMuscle	(String startID,
			String componentType, String componentName, String componentID,
			String parentID, double[][] currentPoints) throws DataException,
			DataSecurityException {
		System.out.println("Generat PectineusMuscle ");

		int bodyID = 1;
		int projectID = 1;
		String vertices = "";

		ArrayList mySqlList = new ArrayList();
		int returnCode = 0;

		// We can generate the SphincterAniExternusMuscle
		if (currentPoints == null) {
			double circumference = 0.125;

			double x = -8.0;
			double y = -10.0;
			double z = -1.0;

			// Create a equilateral octogon
			currentPoints[0][0] = x;
			currentPoints[0][1] = y;
			currentPoints[0][2] = z;

			currentPoints[1][0] = x - circumference;
			currentPoints[1][1] = y;
			currentPoints[1][2] = z - circumference;

			currentPoints[2][0] = x - circumference;
			currentPoints[2][1] = y;
			currentPoints[2][2] = z - circumference * 2;

			currentPoints[3][0] = x;
			currentPoints[3][1] = y;
			currentPoints[3][2] = z - circumference * 3;

			currentPoints[4][0] = x + circumference;
			currentPoints[4][1] = y;
			currentPoints[4][2] = z - circumference * 3;

			currentPoints[5][0] = x + circumference * 2;
			currentPoints[5][1] = y;
			currentPoints[5][2] = z - circumference * 2;

			currentPoints[6][0] = x + circumference * 2;
			currentPoints[6][1] = y;
			currentPoints[6][2] = z - circumference;

			currentPoints[7][0] = x + circumference;
			currentPoints[7][1] = y;
			currentPoints[7][2] = z;
		}

		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();

		if (parentID.equals("SphincterAniExternusMuscle:01")) {
			int nMaxSegs = 6;
			for (int numSegs = 0; numSegs < nMaxSegs; numSegs++) {

				// Create a place for an instruction
				BioMightInstruction bioInstruct = new BioMightInstruction();

				if (numSegs == 0) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 1) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 2) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 3) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 4) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 5) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 6) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 7) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
				}

				// Add the instruction into the instruction set
				bioMightInstructSet.addElement(bioInstruct);
			}

		} else if (parentID.equals("SphincterAniExternusMuscle:02")) {
			int nMaxSegs = 6;
			for (int numSegs = 0; numSegs < nMaxSegs; numSegs++) {

				// Create a place for an instruction
				BioMightInstruction bioInstruct = new BioMightInstruction();

				if (numSegs == 0) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 1) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 2) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 3) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 4) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 5) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 6) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 7) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
				}

				// Add the instruction into the instruction set
				bioMightInstructSet.addElement(bioInstruct);
			}

		}

		// Generate the SphincterAniExternusMuscle
		// generateComponentRows(startID, componentType, componentName,
		// componentID, currentPoints, bioMightInstructSet);
		// System.out.println("Generated the Rows for SphincterAniExternusMuscle: "
		// + componentID + "   parent: " + parentID + "   " + componentType);

		return returnCode;
	}	
	
	
	/***************************************************************************************
	 * GENERATE LATERAL PeroneusTertiusMuscle 
	 * 
	 * This generates the PeroneusTertiusMuscle 
	 * 
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/

	public int generateSternoCleidoMastoidMuscle	(String startID,
			String componentType, String componentName, String componentID,
			String parentID, double[][] currentPoints) throws DataException,
			DataSecurityException {
		System.out.println("Generat PectineusMuscle ");

		int bodyID = 1;
		int projectID = 1;
		String vertices = "";

		ArrayList mySqlList = new ArrayList();
		int returnCode = 0;

		// We can generate the SternoCleidoMastoidMuscle
		if (currentPoints == null) {
			double circumference = 0.125;

			double x = -8.0;
			double y = -10.0;
			double z = -1.0;

			// Create a equilateral octogon
			currentPoints[0][0] = x;
			currentPoints[0][1] = y;
			currentPoints[0][2] = z;

			currentPoints[1][0] = x - circumference;
			currentPoints[1][1] = y;
			currentPoints[1][2] = z - circumference;

			currentPoints[2][0] = x - circumference;
			currentPoints[2][1] = y;
			currentPoints[2][2] = z - circumference * 2;

			currentPoints[3][0] = x;
			currentPoints[3][1] = y;
			currentPoints[3][2] = z - circumference * 3;

			currentPoints[4][0] = x + circumference;
			currentPoints[4][1] = y;
			currentPoints[4][2] = z - circumference * 3;

			currentPoints[5][0] = x + circumference * 2;
			currentPoints[5][1] = y;
			currentPoints[5][2] = z - circumference * 2;

			currentPoints[6][0] = x + circumference * 2;
			currentPoints[6][1] = y;
			currentPoints[6][2] = z - circumference;

			currentPoints[7][0] = x + circumference;
			currentPoints[7][1] = y;
			currentPoints[7][2] = z;
		}

		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();

		if (parentID.equals("SternoCleidoMastoidMuscle:01")) {
			int nMaxSegs = 6;
			for (int numSegs = 0; numSegs < nMaxSegs; numSegs++) {

				// Create a place for an instruction
				BioMightInstruction bioInstruct = new BioMightInstruction();

				if (numSegs == 0) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 1) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 2) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 3) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 4) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 5) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 6) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 7) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
				}

				// Add the instruction into the instruction set
				bioMightInstructSet.addElement(bioInstruct);
			}

		} else if (parentID.equals("SternoCleidoMastoidMuscle:02")) {
			int nMaxSegs = 6;
			for (int numSegs = 0; numSegs < nMaxSegs; numSegs++) {

				// Create a place for an instruction
				BioMightInstruction bioInstruct = new BioMightInstruction();

				if (numSegs == 0) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 1) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 2) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 3) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 4) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 5) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 6) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 7) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
				}

				// Add the instruction into the instruction set
				bioMightInstructSet.addElement(bioInstruct);
			}

		}

		// Generate the SternoCleidoMastoidMuscle
		// generateComponentRows(startID, componentType, componentName,
		// componentID, currentPoints, bioMightInstructSet);
		// System.out.println("Generated the Rows for SternoCleidoMastoidMuscle: "
		// + componentID + "   parent: " + parentID + "   " + componentType);

		return returnCode;
	}	
	


	/***************************************************************************************
	 * GENERATE LATERAL PeroneusTertiusMuscle 
	 * 
	 * This generates the PeroneusTertiusMuscle 
	 * 
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/

	public int generateStyloHyoidMuscle	(String startID,
			String componentType, String componentName, String componentID,
			String parentID, double[][] currentPoints) throws DataException,
			DataSecurityException {
		System.out.println("Generat PectineusMuscle ");

		int bodyID = 1;
		int projectID = 1;
		String vertices = "";

		ArrayList mySqlList = new ArrayList();
		int returnCode = 0;

		// We can generate the StyloHyoidMuscle
		if (currentPoints == null) {
			double circumference = 0.125;

			double x = -8.0;
			double y = -10.0;
			double z = -1.0;

			// Create a equilateral octogon
			currentPoints[0][0] = x;
			currentPoints[0][1] = y;
			currentPoints[0][2] = z;

			currentPoints[1][0] = x - circumference;
			currentPoints[1][1] = y;
			currentPoints[1][2] = z - circumference;

			currentPoints[2][0] = x - circumference;
			currentPoints[2][1] = y;
			currentPoints[2][2] = z - circumference * 2;

			currentPoints[3][0] = x;
			currentPoints[3][1] = y;
			currentPoints[3][2] = z - circumference * 3;

			currentPoints[4][0] = x + circumference;
			currentPoints[4][1] = y;
			currentPoints[4][2] = z - circumference * 3;

			currentPoints[5][0] = x + circumference * 2;
			currentPoints[5][1] = y;
			currentPoints[5][2] = z - circumference * 2;

			currentPoints[6][0] = x + circumference * 2;
			currentPoints[6][1] = y;
			currentPoints[6][2] = z - circumference;

			currentPoints[7][0] = x + circumference;
			currentPoints[7][1] = y;
			currentPoints[7][2] = z;
		}

		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();

		if (parentID.equals("StyloHyoidMuscle:01")) {
			int nMaxSegs = 6;
			for (int numSegs = 0; numSegs < nMaxSegs; numSegs++) {

				// Create a place for an instruction
				BioMightInstruction bioInstruct = new BioMightInstruction();

				if (numSegs == 0) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 1) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 2) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 3) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 4) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 5) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 6) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 7) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
				}

				// Add the instruction into the instruction set
				bioMightInstructSet.addElement(bioInstruct);
			}

		} else if (parentID.equals("StyloHyoidMuscle:02")) {
			int nMaxSegs = 6;
			for (int numSegs = 0; numSegs < nMaxSegs; numSegs++) {

				// Create a place for an instruction
				BioMightInstruction bioInstruct = new BioMightInstruction();

				if (numSegs == 0) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 1) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 2) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 3) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 4) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 5) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 6) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 7) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
				}

				// Add the instruction into the instruction set
				bioMightInstructSet.addElement(bioInstruct);
			}

		}

		// Generate the StyloHyoidMuscle
		// generateComponentRows(startID, componentType, componentName,
		// componentID, currentPoints, bioMightInstructSet);
		// System.out.println("Generated the Rows for StyloHyoidMuscle: "
		// + componentID + "   parent: " + parentID + "   " + componentType);

		return returnCode;
	}	
	


	/***************************************************************************************
	 * GENERATE LATERAL PeroneusTertiusMuscle 
	 * 
	 * This generates the PeroneusTertiusMuscle 
	 * 
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/

	public int generateSuperiorLongitudinalMuscle	(String startID,
			String componentType, String componentName, String componentID,
			String parentID, double[][] currentPoints) throws DataException,
			DataSecurityException {
		System.out.println("Generat PectineusMuscle ");

		int bodyID = 1;
		int projectID = 1;
		String vertices = "";

		ArrayList mySqlList = new ArrayList();
		int returnCode = 0;

		// We can generate the SuperiorLongitudinalMuscle
		if (currentPoints == null) {
			double circumference = 0.125;

			double x = -8.0;
			double y = -10.0;
			double z = -1.0;

			// Create a equilateral octogon
			currentPoints[0][0] = x;
			currentPoints[0][1] = y;
			currentPoints[0][2] = z;

			currentPoints[1][0] = x - circumference;
			currentPoints[1][1] = y;
			currentPoints[1][2] = z - circumference;

			currentPoints[2][0] = x - circumference;
			currentPoints[2][1] = y;
			currentPoints[2][2] = z - circumference * 2;

			currentPoints[3][0] = x;
			currentPoints[3][1] = y;
			currentPoints[3][2] = z - circumference * 3;

			currentPoints[4][0] = x + circumference;
			currentPoints[4][1] = y;
			currentPoints[4][2] = z - circumference * 3;

			currentPoints[5][0] = x + circumference * 2;
			currentPoints[5][1] = y;
			currentPoints[5][2] = z - circumference * 2;

			currentPoints[6][0] = x + circumference * 2;
			currentPoints[6][1] = y;
			currentPoints[6][2] = z - circumference;

			currentPoints[7][0] = x + circumference;
			currentPoints[7][1] = y;
			currentPoints[7][2] = z;
		}

		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();

		if (parentID.equals("SuperiorLongitudinalMuscle:01")) {
			int nMaxSegs = 6;
			for (int numSegs = 0; numSegs < nMaxSegs; numSegs++) {

				// Create a place for an instruction
				BioMightInstruction bioInstruct = new BioMightInstruction();

				if (numSegs == 0) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 1) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 2) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 3) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 4) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 5) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 6) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 7) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
				}

				// Add the instruction into the instruction set
				bioMightInstructSet.addElement(bioInstruct);
			}

		} else if (parentID.equals("SuperiorLongitudinalMuscle:02")) {
			int nMaxSegs = 6;
			for (int numSegs = 0; numSegs < nMaxSegs; numSegs++) {

				// Create a place for an instruction
				BioMightInstruction bioInstruct = new BioMightInstruction();

				if (numSegs == 0) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 1) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 2) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 3) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 4) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 5) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 6) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 7) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
				}

				// Add the instruction into the instruction set
				bioMightInstructSet.addElement(bioInstruct);
			}

		}

		// Generate the SuperiorLongitudinalMuscle
		// generateComponentRows(startID, componentType, componentName,
		// componentID, currentPoints, bioMightInstructSet);
		// System.out.println("Generated the Rows for SuperiorLongitudinalMuscle: "
		// + componentID + "   parent: " + parentID + "   " + componentType);

		return returnCode;
	}	

	/***************************************************************************************
	 * GENERATE LATERAL PeroneusTertiusMuscle 
	 * 
	 * This generates the PeroneusTertiusMuscle 
	 * 
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/

	public int generateSuperiorObliqueMuscle	(String startID,
			String componentType, String componentName, String componentID,
			String parentID, double[][] currentPoints) throws DataException,
			DataSecurityException {
		System.out.println("Generat PectineusMuscle ");

		int bodyID = 1;
		int projectID = 1;
		String vertices = "";

		ArrayList mySqlList = new ArrayList();
		int returnCode = 0;

		// We can generate the SuperiorLongitudinalMuscle
		if (currentPoints == null) {
			double circumference = 0.125;

			double x = -8.0;
			double y = -10.0;
			double z = -1.0;

			// Create a equilateral octogon
			currentPoints[0][0] = x;
			currentPoints[0][1] = y;
			currentPoints[0][2] = z;

			currentPoints[1][0] = x - circumference;
			currentPoints[1][1] = y;
			currentPoints[1][2] = z - circumference;

			currentPoints[2][0] = x - circumference;
			currentPoints[2][1] = y;
			currentPoints[2][2] = z - circumference * 2;

			currentPoints[3][0] = x;
			currentPoints[3][1] = y;
			currentPoints[3][2] = z - circumference * 3;

			currentPoints[4][0] = x + circumference;
			currentPoints[4][1] = y;
			currentPoints[4][2] = z - circumference * 3;

			currentPoints[5][0] = x + circumference * 2;
			currentPoints[5][1] = y;
			currentPoints[5][2] = z - circumference * 2;

			currentPoints[6][0] = x + circumference * 2;
			currentPoints[6][1] = y;
			currentPoints[6][2] = z - circumference;

			currentPoints[7][0] = x + circumference;
			currentPoints[7][1] = y;
			currentPoints[7][2] = z;
		}

		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();

		if (parentID.equals("SuperiorObliqueMuscle:01")) {
			int nMaxSegs = 6;
			for (int numSegs = 0; numSegs < nMaxSegs; numSegs++) {

				// Create a place for an instruction
				BioMightInstruction bioInstruct = new BioMightInstruction();

				if (numSegs == 0) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 1) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 2) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 3) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 4) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 5) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 6) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 7) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
				}

				// Add the instruction into the instruction set
				bioMightInstructSet.addElement(bioInstruct);
			}

		} else if (parentID.equals("SuperiorObliqueMuscle:02")) {
			int nMaxSegs = 6;
			for (int numSegs = 0; numSegs < nMaxSegs; numSegs++) {

				// Create a place for an instruction
				BioMightInstruction bioInstruct = new BioMightInstruction();

				if (numSegs == 0) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 1) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 2) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 3) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 4) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 5) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 6) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 7) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
				}

				// Add the instruction into the instruction set
				bioMightInstructSet.addElement(bioInstruct);
			}

		}

		// Generate the SuperiorObliqueMuscle
		// generateComponentRows(startID, componentType, componentName,
		// componentID, currentPoints, bioMightInstructSet);
		// System.out.println("Generated the Rows for SuperiorObliqueMuscle: "
		// + componentID + "   parent: " + parentID + "   " + componentType);

		return returnCode;
	}	
	


	/***************************************************************************************
	 * GENERATE LATERAL PeroneusTertiusMuscle 
	 * 
	 * This generates the PeroneusTertiusMuscle 
	 * 
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/

	public int generateSuperiorRectusMuscle	(String startID,
			String componentType, String componentName, String componentID,
			String parentID, double[][] currentPoints) throws DataException,
			DataSecurityException {
		System.out.println("Generat PectineusMuscle ");

		int bodyID = 1;
		int projectID = 1;
		String vertices = "";

		ArrayList mySqlList = new ArrayList();
		int returnCode = 0;

		// We can generate the SuperiorRectusMuscle
		if (currentPoints == null) {
			double circumference = 0.125;

			double x = -8.0;
			double y = -10.0;
			double z = -1.0;

			// Create a equilateral octogon
			currentPoints[0][0] = x;
			currentPoints[0][1] = y;
			currentPoints[0][2] = z;

			currentPoints[1][0] = x - circumference;
			currentPoints[1][1] = y;
			currentPoints[1][2] = z - circumference;

			currentPoints[2][0] = x - circumference;
			currentPoints[2][1] = y;
			currentPoints[2][2] = z - circumference * 2;

			currentPoints[3][0] = x;
			currentPoints[3][1] = y;
			currentPoints[3][2] = z - circumference * 3;

			currentPoints[4][0] = x + circumference;
			currentPoints[4][1] = y;
			currentPoints[4][2] = z - circumference * 3;

			currentPoints[5][0] = x + circumference * 2;
			currentPoints[5][1] = y;
			currentPoints[5][2] = z - circumference * 2;

			currentPoints[6][0] = x + circumference * 2;
			currentPoints[6][1] = y;
			currentPoints[6][2] = z - circumference;

			currentPoints[7][0] = x + circumference;
			currentPoints[7][1] = y;
			currentPoints[7][2] = z;
		}

		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();

		if (parentID.equals("SuperiorRectusMuscle:01")) {
			int nMaxSegs = 6;
			for (int numSegs = 0; numSegs < nMaxSegs; numSegs++) {

				// Create a place for an instruction
				BioMightInstruction bioInstruct = new BioMightInstruction();

				if (numSegs == 0) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 1) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 2) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 3) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 4) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 5) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 6) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 7) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
				}

				// Add the instruction into the instruction set
				bioMightInstructSet.addElement(bioInstruct);
			}

		} else if (parentID.equals("SuperiorRectusMuscle:02")) {
			int nMaxSegs = 6;
			for (int numSegs = 0; numSegs < nMaxSegs; numSegs++) {

				// Create a place for an instruction
				BioMightInstruction bioInstruct = new BioMightInstruction();

				if (numSegs == 0) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 1) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 2) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 3) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 4) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 5) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 6) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 7) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
				}

				// Add the instruction into the instruction set
				bioMightInstructSet.addElement(bioInstruct);
			}

		}

		// Generate the SuperiorRectusMuscle
		// generateComponentRows(startID, componentType, componentName,
		// componentID, currentPoints, bioMightInstructSet);
		// System.out.println("Generated the Rows for SuperiorRectusMuscle: "
		// + componentID + "   parent: " + parentID + "   " + componentType);

		return returnCode;
	}	
	

	/***************************************************************************************
	 * GENERATE LATERAL PeroneusTertiusMuscle 
	 * 
	 * This generates the PeroneusTertiusMuscle 
	 * 
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/

	public int generateSupinatorMuscle	(String startID,
			String componentType, String componentName, String componentID,
			String parentID, double[][] currentPoints) throws DataException,
			DataSecurityException {
		System.out.println("Generat PectineusMuscle ");

		int bodyID = 1;
		int projectID = 1;
		String vertices = "";

		ArrayList mySqlList = new ArrayList();
		int returnCode = 0;

		// We can generate the SupinatorMuscle
		if (currentPoints == null) {
			double circumference = 0.125;

			double x = -8.0;
			double y = -10.0;
			double z = -1.0;

			// Create a equilateral octogon
			currentPoints[0][0] = x;
			currentPoints[0][1] = y;
			currentPoints[0][2] = z;

			currentPoints[1][0] = x - circumference;
			currentPoints[1][1] = y;
			currentPoints[1][2] = z - circumference;

			currentPoints[2][0] = x - circumference;
			currentPoints[2][1] = y;
			currentPoints[2][2] = z - circumference * 2;

			currentPoints[3][0] = x;
			currentPoints[3][1] = y;
			currentPoints[3][2] = z - circumference * 3;

			currentPoints[4][0] = x + circumference;
			currentPoints[4][1] = y;
			currentPoints[4][2] = z - circumference * 3;

			currentPoints[5][0] = x + circumference * 2;
			currentPoints[5][1] = y;
			currentPoints[5][2] = z - circumference * 2;

			currentPoints[6][0] = x + circumference * 2;
			currentPoints[6][1] = y;
			currentPoints[6][2] = z - circumference;

			currentPoints[7][0] = x + circumference;
			currentPoints[7][1] = y;
			currentPoints[7][2] = z;
		}

		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();

		if (parentID.equals("SupinatorMuscle:01")) {
			int nMaxSegs = 6;
			for (int numSegs = 0; numSegs < nMaxSegs; numSegs++) {

				// Create a place for an instruction
				BioMightInstruction bioInstruct = new BioMightInstruction();

				if (numSegs == 0) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 1) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 2) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 3) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 4) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 5) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 6) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 7) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
				}

				// Add the instruction into the instruction set
				bioMightInstructSet.addElement(bioInstruct);
			}

		} else if (parentID.equals("SupinatorMuscle:02")) {
			int nMaxSegs = 6;
			for (int numSegs = 0; numSegs < nMaxSegs; numSegs++) {

				// Create a place for an instruction
				BioMightInstruction bioInstruct = new BioMightInstruction();

				if (numSegs == 0) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 1) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 2) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 3) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 4) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 5) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 6) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 7) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
				}

				// Add the instruction into the instruction set
				bioMightInstructSet.addElement(bioInstruct);
			}

		}

		// Generate the SupinatorMuscle
		// generateComponentRows(startID, componentType, componentName,
		// componentID, currentPoints, bioMightInstructSet);
		// System.out.println("Generated the Rows for SupinatorMuscle: "
		// + componentID + "   parent: " + parentID + "   " + componentType);

		return returnCode;
	}	
	

	
	
	
	
	
	


	/***************************************************************************************
	 * GENERATE LATERAL PeroneusTertiusMuscle 
	 * 
	 * This generates the PeroneusTertiusMuscle 
	 * 
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/

	public int generateSupraInfrahyoidMuscle	(String startID,
			String componentType, String componentName, String componentID,
			String parentID, double[][] currentPoints) throws DataException,
			DataSecurityException {
		System.out.println("Generat SupraInfrahyoidMuscle ");

		int bodyID = 1;
		int projectID = 1;
		String vertices = "";

		ArrayList mySqlList = new ArrayList();
		int returnCode = 0;

		// We can generate the SupraInfrahyoidMuscle
		if (currentPoints == null) {
			double circumference = 0.125;

			double x = -8.0;
			double y = -10.0;
			double z = -1.0;

			// Create a equilateral octogon
			currentPoints[0][0] = x;
			currentPoints[0][1] = y;
			currentPoints[0][2] = z;

			currentPoints[1][0] = x - circumference;
			currentPoints[1][1] = y;
			currentPoints[1][2] = z - circumference;

			currentPoints[2][0] = x - circumference;
			currentPoints[2][1] = y;
			currentPoints[2][2] = z - circumference * 2;

			currentPoints[3][0] = x;
			currentPoints[3][1] = y;
			currentPoints[3][2] = z - circumference * 3;

			currentPoints[4][0] = x + circumference;
			currentPoints[4][1] = y;
			currentPoints[4][2] = z - circumference * 3;

			currentPoints[5][0] = x + circumference * 2;
			currentPoints[5][1] = y;
			currentPoints[5][2] = z - circumference * 2;

			currentPoints[6][0] = x + circumference * 2;
			currentPoints[6][1] = y;
			currentPoints[6][2] = z - circumference;

			currentPoints[7][0] = x + circumference;
			currentPoints[7][1] = y;
			currentPoints[7][2] = z;
		}

		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();

		if (parentID.equals("SupraInfrahyoidMuscle:01")) {
			int nMaxSegs = 6;
			for (int numSegs = 0; numSegs < nMaxSegs; numSegs++) {

				// Create a place for an instruction
				BioMightInstruction bioInstruct = new BioMightInstruction();

				if (numSegs == 0) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 1) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 2) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 3) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 4) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 5) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 6) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 7) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
				}

				// Add the instruction into the instruction set
				bioMightInstructSet.addElement(bioInstruct);
			}

		} else if (parentID.equals("SupraInfrahyoidMuscle:02")) {
			int nMaxSegs = 6;
			for (int numSegs = 0; numSegs < nMaxSegs; numSegs++) {

				// Create a place for an instruction
				BioMightInstruction bioInstruct = new BioMightInstruction();

				if (numSegs == 0) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 1) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 2) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 3) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 4) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 5) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 6) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 7) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
				}

				// Add the instruction into the instruction set
				bioMightInstructSet.addElement(bioInstruct);
			}

		}

		// Generate the SupraInfrahyoidMuscle
		// generateComponentRows(startID, componentType, componentName,
		// componentID, currentPoints, bioMightInstructSet);
		// System.out.println("Generated the Rows for SupraInfrahyoidMuscle: "
		// + componentID + "   parent: " + parentID + "   " + componentType);

		return returnCode;
	}	
	


	/***************************************************************************************
	 * GENERATE SupraSpinatusMuscle 
	 * 
	 * This generates the SupraSpinatusMuscle 
	 * 
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/

	public int generateSupraSpinatusMuscle	(String startID,
			String componentType, String componentName, String componentID,
			String parentID, double[][] currentPoints) throws DataException,
			DataSecurityException {
		System.out.println("Generat SupraInfrahyoidMuscle ");

		int bodyID = 1;
		int projectID = 1;
		String vertices = "";

		ArrayList mySqlList = new ArrayList();
		int returnCode = 0;

		// We can generate the SupraSpinatusMuscle
		if (currentPoints == null) {
			double circumference = 0.125;

			double x = -8.0;
			double y = -10.0;
			double z = -1.0;

			// Create a equilateral octogon
			currentPoints[0][0] = x;
			currentPoints[0][1] = y;
			currentPoints[0][2] = z;

			currentPoints[1][0] = x - circumference;
			currentPoints[1][1] = y;
			currentPoints[1][2] = z - circumference;

			currentPoints[2][0] = x - circumference;
			currentPoints[2][1] = y;
			currentPoints[2][2] = z - circumference * 2;

			currentPoints[3][0] = x;
			currentPoints[3][1] = y;
			currentPoints[3][2] = z - circumference * 3;

			currentPoints[4][0] = x + circumference;
			currentPoints[4][1] = y;
			currentPoints[4][2] = z - circumference * 3;

			currentPoints[5][0] = x + circumference * 2;
			currentPoints[5][1] = y;
			currentPoints[5][2] = z - circumference * 2;

			currentPoints[6][0] = x + circumference * 2;
			currentPoints[6][1] = y;
			currentPoints[6][2] = z - circumference;

			currentPoints[7][0] = x + circumference;
			currentPoints[7][1] = y;
			currentPoints[7][2] = z;
		}

		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();

		if (parentID.equals("SupraSpinatusMuscle:01")) {
			int nMaxSegs = 6;
			for (int numSegs = 0; numSegs < nMaxSegs; numSegs++) {

				// Create a place for an instruction
				BioMightInstruction bioInstruct = new BioMightInstruction();

				if (numSegs == 0) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 1) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 2) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 3) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 4) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 5) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 6) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 7) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
				}

				// Add the instruction into the instruction set
				bioMightInstructSet.addElement(bioInstruct);
			}

		} else if (parentID.equals("SupraSpinatusMuscle:02")) {
			int nMaxSegs = 6;
			for (int numSegs = 0; numSegs < nMaxSegs; numSegs++) {

				// Create a place for an instruction
				BioMightInstruction bioInstruct = new BioMightInstruction();

				if (numSegs == 0) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 1) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 2) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 3) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 4) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 5) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 6) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 7) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
				}

				// Add the instruction into the instruction set
				bioMightInstructSet.addElement(bioInstruct);
			}

		}

		// Generate the SupraSpinatusMuscle
		// generateComponentRows(startID, componentType, componentName,
		// componentID, currentPoints, bioMightInstructSet);
		// System.out.println("Generated the Rows for SupraSpinatusMuscle: "
		// + componentID + "   parent: " + parentID + "   " + componentType);

		return returnCode;
	}	
	


	/***************************************************************************************
	 * GENERATE TemporalisMuscle 
	 * 
	 * This generates the TemporalisMuscle 
	 * 
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/

	public int generateTemporalisMuscle	(String startID,
			String componentType, String componentName, String componentID,
			String parentID, double[][] currentPoints) throws DataException,
			DataSecurityException {
		System.out.println("Generat TemporalisMuscle ");

		int bodyID = 1;
		int projectID = 1;
		String vertices = "";

		ArrayList mySqlList = new ArrayList();
		int returnCode = 0;

		// We can generate the TemporalisMuscle
		if (currentPoints == null) {
			double circumference = 0.125;

			double x = -8.0;
			double y = -10.0;
			double z = -1.0;

			// Create a equilateral octogon
			currentPoints[0][0] = x;
			currentPoints[0][1] = y;
			currentPoints[0][2] = z;

			currentPoints[1][0] = x - circumference;
			currentPoints[1][1] = y;
			currentPoints[1][2] = z - circumference;

			currentPoints[2][0] = x - circumference;
			currentPoints[2][1] = y;
			currentPoints[2][2] = z - circumference * 2;

			currentPoints[3][0] = x;
			currentPoints[3][1] = y;
			currentPoints[3][2] = z - circumference * 3;

			currentPoints[4][0] = x + circumference;
			currentPoints[4][1] = y;
			currentPoints[4][2] = z - circumference * 3;

			currentPoints[5][0] = x + circumference * 2;
			currentPoints[5][1] = y;
			currentPoints[5][2] = z - circumference * 2;

			currentPoints[6][0] = x + circumference * 2;
			currentPoints[6][1] = y;
			currentPoints[6][2] = z - circumference;

			currentPoints[7][0] = x + circumference;
			currentPoints[7][1] = y;
			currentPoints[7][2] = z;
		}

		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();

		if (parentID.equals("TemporalisMuscle:01")) {
			int nMaxSegs = 6;
			for (int numSegs = 0; numSegs < nMaxSegs; numSegs++) {

				// Create a place for an instruction
				BioMightInstruction bioInstruct = new BioMightInstruction();

				if (numSegs == 0) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 1) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 2) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 3) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 4) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 5) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 6) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 7) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
				}

				// Add the instruction into the instruction set
				bioMightInstructSet.addElement(bioInstruct);
			}

		} else if (parentID.equals("TemporalisMuscle:02")) {
			int nMaxSegs = 6;
			for (int numSegs = 0; numSegs < nMaxSegs; numSegs++) {

				// Create a place for an instruction
				BioMightInstruction bioInstruct = new BioMightInstruction();

				if (numSegs == 0) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 1) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 2) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 3) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 4) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 5) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 6) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 7) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
				}

				// Add the instruction into the instruction set
				bioMightInstructSet.addElement(bioInstruct);
			}

		}

		// Generate the TemporalisMuscle
		// generateComponentRows(startID, componentType, componentName,
		// componentID, currentPoints, bioMightInstructSet);
		// System.out.println("Generated the Rows for TemporalisMuscle: "
		// + componentID + "   parent: " + parentID + "   " + componentType);

		return returnCode;
	}	
	


	/***************************************************************************************
	 * GENERATE LATERAL PeroneusTertiusMuscle 
	 * 
	 * This generates the PeroneusTertiusMuscle 
	 * 
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/

	public int generateTensorFasciaLataMuscle	(String startID,
			String componentType, String componentName, String componentID,
			String parentID, double[][] currentPoints) throws DataException,
			DataSecurityException {
		System.out.println("Generat TensorFasciaLataMuscle ");

		int bodyID = 1;
		int projectID = 1;
		String vertices = "";

		ArrayList mySqlList = new ArrayList();
		int returnCode = 0;

		// We can generate the TensorFasciaLataMuscle
		if (currentPoints == null) {
			double circumference = 0.125;

			double x = -8.0;
			double y = -10.0;
			double z = -1.0;

			// Create a equilateral octogon
			currentPoints[0][0] = x;
			currentPoints[0][1] = y;
			currentPoints[0][2] = z;

			currentPoints[1][0] = x - circumference;
			currentPoints[1][1] = y;
			currentPoints[1][2] = z - circumference;

			currentPoints[2][0] = x - circumference;
			currentPoints[2][1] = y;
			currentPoints[2][2] = z - circumference * 2;

			currentPoints[3][0] = x;
			currentPoints[3][1] = y;
			currentPoints[3][2] = z - circumference * 3;

			currentPoints[4][0] = x + circumference;
			currentPoints[4][1] = y;
			currentPoints[4][2] = z - circumference * 3;

			currentPoints[5][0] = x + circumference * 2;
			currentPoints[5][1] = y;
			currentPoints[5][2] = z - circumference * 2;

			currentPoints[6][0] = x + circumference * 2;
			currentPoints[6][1] = y;
			currentPoints[6][2] = z - circumference;

			currentPoints[7][0] = x + circumference;
			currentPoints[7][1] = y;
			currentPoints[7][2] = z;
		}

		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();

		if (parentID.equals("TensorFasciaLataMuscle:01")) {
			int nMaxSegs = 6;
			for (int numSegs = 0; numSegs < nMaxSegs; numSegs++) {

				// Create a place for an instruction
				BioMightInstruction bioInstruct = new BioMightInstruction();

				if (numSegs == 0) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 1) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 2) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 3) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 4) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 5) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 6) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 7) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
				}

				// Add the instruction into the instruction set
				bioMightInstructSet.addElement(bioInstruct);
			}

		} else if (parentID.equals("TensorFasciaLataMuscle:02")) {
			int nMaxSegs = 6;
			for (int numSegs = 0; numSegs < nMaxSegs; numSegs++) {

				// Create a place for an instruction
				BioMightInstruction bioInstruct = new BioMightInstruction();

				if (numSegs == 0) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 1) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 2) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 3) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 4) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 5) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 6) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 7) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
				}

				// Add the instruction into the instruction set
				bioMightInstructSet.addElement(bioInstruct);
			}

		}

		// Generate the TensorFasciaLataMuscle
		// generateComponentRows(startID, componentType, componentName,
		// componentID, currentPoints, bioMightInstructSet);
		// System.out.println("Generated the Rows for TensorFasciaLataMuscle: "
		// + componentID + "   parent: " + parentID + "   " + componentType);

		return returnCode;
	}	
	

	/***************************************************************************************
	 * GENERATE  TeresMinorMuscle 
	 * 
	 * This generates the TeresMinorMuscle 
	 * 
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/

	public int generateTeresMinorMuscle	(String startID,
			String componentType, String componentName, String componentID,
			String parentID, double[][] currentPoints) throws DataException,
			DataSecurityException {
		System.out.println("Generat TeresMinorMuscle ");

		int bodyID = 1;
		int projectID = 1;
		String vertices = "";

		ArrayList mySqlList = new ArrayList();
		int returnCode = 0;

		// We can generate the TeresMinorMuscle
		if (currentPoints == null) {
			double circumference = 0.125;

			double x = -8.0;
			double y = -10.0;
			double z = -1.0;

			// Create a equilateral octogon
			currentPoints[0][0] = x;
			currentPoints[0][1] = y;
			currentPoints[0][2] = z;

			currentPoints[1][0] = x - circumference;
			currentPoints[1][1] = y;
			currentPoints[1][2] = z - circumference;

			currentPoints[2][0] = x - circumference;
			currentPoints[2][1] = y;
			currentPoints[2][2] = z - circumference * 2;

			currentPoints[3][0] = x;
			currentPoints[3][1] = y;
			currentPoints[3][2] = z - circumference * 3;

			currentPoints[4][0] = x + circumference;
			currentPoints[4][1] = y;
			currentPoints[4][2] = z - circumference * 3;

			currentPoints[5][0] = x + circumference * 2;
			currentPoints[5][1] = y;
			currentPoints[5][2] = z - circumference * 2;

			currentPoints[6][0] = x + circumference * 2;
			currentPoints[6][1] = y;
			currentPoints[6][2] = z - circumference;

			currentPoints[7][0] = x + circumference;
			currentPoints[7][1] = y;
			currentPoints[7][2] = z;
		}

		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();

		if (parentID.equals("TeresMinorMuscle:01")) {
			int nMaxSegs = 6;
			for (int numSegs = 0; numSegs < nMaxSegs; numSegs++) {

				// Create a place for an instruction
				BioMightInstruction bioInstruct = new BioMightInstruction();

				if (numSegs == 0) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 1) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 2) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 3) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 4) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 5) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 6) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 7) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
				}

				// Add the instruction into the instruction set
				bioMightInstructSet.addElement(bioInstruct);
			}

		} else if (parentID.equals("TeresMinorMuscle:02")) {
			int nMaxSegs = 6;
			for (int numSegs = 0; numSegs < nMaxSegs; numSegs++) {

				// Create a place for an instruction
				BioMightInstruction bioInstruct = new BioMightInstruction();

				if (numSegs == 0) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 1) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 2) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 3) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 4) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 5) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 6) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 7) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
				}

				// Add the instruction into the instruction set
				bioMightInstructSet.addElement(bioInstruct);
			}

		}

		// Generate the TeresMinorMuscle
		// generateComponentRows(startID, componentType, componentName,
		// componentID, currentPoints, bioMightInstructSet);
		// System.out.println("Generated the Rows for TeresMinorMuscle: "
		// + componentID + "   parent: " + parentID + "   " + componentType);

		return returnCode;
	}	
	

	/***************************************************************************************
	 * GENERATE LATERAL ThyroArytenoidMuscle 
	 * 
	 * This generates the ThyroArytenoidMuscle 
	 * 
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/

	public int generateThyroArytenoidMuscle	(String startID,
			String componentType, String componentName, String componentID,
			String parentID, double[][] currentPoints) throws DataException,
			DataSecurityException {
		System.out.println("Generat ThyroArytenoidMuscle ");

		int bodyID = 1;
		int projectID = 1;
		String vertices = "";

		ArrayList mySqlList = new ArrayList();
		int returnCode = 0;

		// We can generate the ThyroArytenoidMuscle
		if (currentPoints == null) {
			double circumference = 0.125;

			double x = -8.0;
			double y = -10.0;
			double z = -1.0;

			// Create a equilateral octogon
			currentPoints[0][0] = x;
			currentPoints[0][1] = y;
			currentPoints[0][2] = z;

			currentPoints[1][0] = x - circumference;
			currentPoints[1][1] = y;
			currentPoints[1][2] = z - circumference;

			currentPoints[2][0] = x - circumference;
			currentPoints[2][1] = y;
			currentPoints[2][2] = z - circumference * 2;

			currentPoints[3][0] = x;
			currentPoints[3][1] = y;
			currentPoints[3][2] = z - circumference * 3;

			currentPoints[4][0] = x + circumference;
			currentPoints[4][1] = y;
			currentPoints[4][2] = z - circumference * 3;

			currentPoints[5][0] = x + circumference * 2;
			currentPoints[5][1] = y;
			currentPoints[5][2] = z - circumference * 2;

			currentPoints[6][0] = x + circumference * 2;
			currentPoints[6][1] = y;
			currentPoints[6][2] = z - circumference;

			currentPoints[7][0] = x + circumference;
			currentPoints[7][1] = y;
			currentPoints[7][2] = z;
		}

		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();

		if (parentID.equals("ThyroArytenoidMuscle:01")) {
			int nMaxSegs = 6;
			for (int numSegs = 0; numSegs < nMaxSegs; numSegs++) {

				// Create a place for an instruction
				BioMightInstruction bioInstruct = new BioMightInstruction();

				if (numSegs == 0) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 1) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 2) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 3) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 4) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 5) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 6) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 7) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
				}

				// Add the instruction into the instruction set
				bioMightInstructSet.addElement(bioInstruct);
			}

		} else if (parentID.equals("ThyroArytenoidMuscle:02")) {
			int nMaxSegs = 6;
			for (int numSegs = 0; numSegs < nMaxSegs; numSegs++) {

				// Create a place for an instruction
				BioMightInstruction bioInstruct = new BioMightInstruction();

				if (numSegs == 0) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 1) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 2) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 3) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 4) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 5) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 6) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 7) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
				}

				// Add the instruction into the instruction set
				bioMightInstructSet.addElement(bioInstruct);
			}

		}

		// Generate the ThyroArytenoidMuscle
		// generateComponentRows(startID, componentType, componentName,
		// componentID, currentPoints, bioMightInstructSet);
		// System.out.println("Generated the Rows for ThyroArytenoidMuscle: "
		// + componentID + "   parent: " + parentID + "   " + componentType);

		return returnCode;
	}	
	
	


	/***************************************************************************************
	 * GENERATE LATERAL generateTibialisAnteriorMuscle 
	 * 
	 * This generates the generateTibialisAnteriorMuscle 
	 * 
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/

	public int generateTibialisAnteriorMuscle	(String startID,
			String componentType, String componentName, String componentID,
			String parentID, double[][] currentPoints) throws DataException,
			DataSecurityException {
		System.out.println("Generat generateTibialisAnteriorMuscle ");

		int bodyID = 1;
		int projectID = 1;
		String vertices = "";

		ArrayList mySqlList = new ArrayList();
		int returnCode = 0;

		// We can generate the TibialisAnteriorMuscle
		if (currentPoints == null) {
			double circumference = 0.125;

			double x = -8.0;
			double y = -10.0;
			double z = -1.0;

			// Create a equilateral octogon
			currentPoints[0][0] = x;
			currentPoints[0][1] = y;
			currentPoints[0][2] = z;

			currentPoints[1][0] = x - circumference;
			currentPoints[1][1] = y;
			currentPoints[1][2] = z - circumference;

			currentPoints[2][0] = x - circumference;
			currentPoints[2][1] = y;
			currentPoints[2][2] = z - circumference * 2;

			currentPoints[3][0] = x;
			currentPoints[3][1] = y;
			currentPoints[3][2] = z - circumference * 3;

			currentPoints[4][0] = x + circumference;
			currentPoints[4][1] = y;
			currentPoints[4][2] = z - circumference * 3;

			currentPoints[5][0] = x + circumference * 2;
			currentPoints[5][1] = y;
			currentPoints[5][2] = z - circumference * 2;

			currentPoints[6][0] = x + circumference * 2;
			currentPoints[6][1] = y;
			currentPoints[6][2] = z - circumference;

			currentPoints[7][0] = x + circumference;
			currentPoints[7][1] = y;
			currentPoints[7][2] = z;
		}

		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();

		if (parentID.equals("TibialisAnteriorMuscle:01")) {
			int nMaxSegs = 6;
			for (int numSegs = 0; numSegs < nMaxSegs; numSegs++) {

				// Create a place for an instruction
				BioMightInstruction bioInstruct = new BioMightInstruction();

				if (numSegs == 0) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 1) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 2) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 3) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 4) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 5) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 6) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 7) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
				}

				// Add the instruction into the instruction set
				bioMightInstructSet.addElement(bioInstruct);
			}

		} else if (parentID.equals("TibialisAnteriorMuscle:02")) {
			int nMaxSegs = 6;
			for (int numSegs = 0; numSegs < nMaxSegs; numSegs++) {

				// Create a place for an instruction
				BioMightInstruction bioInstruct = new BioMightInstruction();

				if (numSegs == 0) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 1) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 2) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 3) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 4) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 5) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 6) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 7) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
				}

				// Add the instruction into the instruction set
				bioMightInstructSet.addElement(bioInstruct);
			}

		}

		// Generate the TibialisAnteriorMuscle
		// generateComponentRows(startID, componentType, componentName,
		// componentID, currentPoints, bioMightInstructSet);
		// System.out.println("Generated the Rows for TibialisAnteriorMuscle: "
		// + componentID + "   parent: " + parentID + "   " + componentType);

		return returnCode;
	}	
	
	

	/***************************************************************************************
	 * GENERATE TRANSVERSUS PERINEI SUPER FASCIALIS 
	 * 
	 * This generates the TransversusPerineiSuperficialisMuscle 
	 * 
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/

	public int generateTransversusPerineiSuperficialisMuscle	(String startID,
			String componentType, String componentName, String componentID,
			String parentID, double[][] currentPoints) throws DataException,
			DataSecurityException {
		System.out.println("Generat TransversusPerineiSuperficialisMuscle ");

		int bodyID = 1;
		int projectID = 1;
		String vertices = "";

		ArrayList mySqlList = new ArrayList();
		int returnCode = 0;

		// We can generate the TransversusPerineiSuperficialisMuscle
		if (currentPoints == null) {
			double circumference = 0.125;

			double x = -8.0;
			double y = -10.0;
			double z = -1.0;

			// Create a equilateral octogon
			currentPoints[0][0] = x;
			currentPoints[0][1] = y;
			currentPoints[0][2] = z;

			currentPoints[1][0] = x - circumference;
			currentPoints[1][1] = y;
			currentPoints[1][2] = z - circumference;

			currentPoints[2][0] = x - circumference;
			currentPoints[2][1] = y;
			currentPoints[2][2] = z - circumference * 2;

			currentPoints[3][0] = x;
			currentPoints[3][1] = y;
			currentPoints[3][2] = z - circumference * 3;

			currentPoints[4][0] = x + circumference;
			currentPoints[4][1] = y;
			currentPoints[4][2] = z - circumference * 3;

			currentPoints[5][0] = x + circumference * 2;
			currentPoints[5][1] = y;
			currentPoints[5][2] = z - circumference * 2;

			currentPoints[6][0] = x + circumference * 2;
			currentPoints[6][1] = y;
			currentPoints[6][2] = z - circumference;

			currentPoints[7][0] = x + circumference;
			currentPoints[7][1] = y;
			currentPoints[7][2] = z;
		}

		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();

		if (parentID.equals("TransversusPerineiSuperficialisMuscle:01")) {
			int nMaxSegs = 6;
			for (int numSegs = 0; numSegs < nMaxSegs; numSegs++) {

				// Create a place for an instruction
				BioMightInstruction bioInstruct = new BioMightInstruction();

				if (numSegs == 0) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 1) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 2) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 3) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 4) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 5) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 6) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 7) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
				}

				// Add the instruction into the instruction set
				bioMightInstructSet.addElement(bioInstruct);
			}

		} else if (parentID.equals("TransversusPerineiSuperficialisMuscle:02")) {
			int nMaxSegs = 6;
			for (int numSegs = 0; numSegs < nMaxSegs; numSegs++) {

				// Create a place for an instruction
				BioMightInstruction bioInstruct = new BioMightInstruction();

				if (numSegs == 0) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 1) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 2) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 3) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 4) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 5) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 6) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 7) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
				}

				// Add the instruction into the instruction set
				bioMightInstructSet.addElement(bioInstruct);
			}

		}

		// Generate the TransversusPerineiSuperficialisMuscle
		// generateComponentRows(startID, componentType, componentName,
		// componentID, currentPoints, bioMightInstructSet);
		// System.out.println("Generated the Rows for TransversusPerineiSuperficialisMuscle: "
		// + componentID + "   parent: " + parentID + "   " + componentType);

		return returnCode;
	}	

	/***************************************************************************************
	 * GENERATE LATERAL PeroneusTertiusMuscle 
	 * 
	 * This generates the PeroneusTertiusMuscle 
	 * 
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/

	public int generateTriangularisMuscle	(String startID,
			String componentType, String componentName, String componentID,
			String parentID, double[][] currentPoints) throws DataException,
			DataSecurityException {
		System.out.println("Generat SupraInfrahyoidMuscle ");

		int bodyID = 1;
		int projectID = 1;
		String vertices = "";

		ArrayList mySqlList = new ArrayList();
		int returnCode = 0;

		// We can generate the TriangularisMuscle	
		if (currentPoints == null) {
			double circumference = 0.125;

			double x = -8.0;
			double y = -10.0;
			double z = -1.0;

			// Create a equilateral octogon
			currentPoints[0][0] = x;
			currentPoints[0][1] = y;
			currentPoints[0][2] = z;

			currentPoints[1][0] = x - circumference;
			currentPoints[1][1] = y;
			currentPoints[1][2] = z - circumference;

			currentPoints[2][0] = x - circumference;
			currentPoints[2][1] = y;
			currentPoints[2][2] = z - circumference * 2;

			currentPoints[3][0] = x;
			currentPoints[3][1] = y;
			currentPoints[3][2] = z - circumference * 3;

			currentPoints[4][0] = x + circumference;
			currentPoints[4][1] = y;
			currentPoints[4][2] = z - circumference * 3;

			currentPoints[5][0] = x + circumference * 2;
			currentPoints[5][1] = y;
			currentPoints[5][2] = z - circumference * 2;

			currentPoints[6][0] = x + circumference * 2;
			currentPoints[6][1] = y;
			currentPoints[6][2] = z - circumference;

			currentPoints[7][0] = x + circumference;
			currentPoints[7][1] = y;
			currentPoints[7][2] = z;
		}

		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();

		if (parentID.equals("TriangularisMuscle	:01")) {
			int nMaxSegs = 6;
			for (int numSegs = 0; numSegs < nMaxSegs; numSegs++) {

				// Create a place for an instruction
				BioMightInstruction bioInstruct = new BioMightInstruction();

				if (numSegs == 0) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 1) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 2) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 3) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 4) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 5) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 6) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 7) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
				}

				// Add the instruction into the instruction set
				bioMightInstructSet.addElement(bioInstruct);
			}

		} else if (parentID.equals("TriangularisMuscle	:02")) {
			int nMaxSegs = 6;
			for (int numSegs = 0; numSegs < nMaxSegs; numSegs++) {

				// Create a place for an instruction
				BioMightInstruction bioInstruct = new BioMightInstruction();

				if (numSegs == 0) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 1) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 2) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 3) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 4) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 5) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 6) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 7) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
				}

				// Add the instruction into the instruction set
				bioMightInstructSet.addElement(bioInstruct);
			}

		}

		// Generate the TriangularisMuscle	
		// generateComponentRows(startID, componentType, componentName,
		// componentID, currentPoints, bioMightInstructSet);
		// System.out.println("Generated the Rows for TriangularisMuscle	: "
		// + componentID + "   parent: " + parentID + "   " + componentType);

		return returnCode;
	}	
	

	/***************************************************************************************
	 * GENERATE VASTUS INTERMEDIUS MUSCLE 
	 * 
	 * This generates the VastusInterMediusMuscle 
	 * 
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/

	public int generateVastusInterMediusMuscle	(String startID,
			String componentType, String componentName, String componentID,
			String parentID, double[][] currentPoints) throws DataException,
			DataSecurityException {
		System.out.println("Generat VastusInterMediusMuscle");

		int bodyID = 1;
		int projectID = 1;
		String vertices = "";

		ArrayList mySqlList = new ArrayList();
		int returnCode = 0;

		// We can generate the VastusInterMediusMuscle	
		if (currentPoints == null) {
			double circumference = 0.125;

			double x = -8.0;
			double y = -10.0;
			double z = -1.0;

			// Create a equilateral octogon
			currentPoints[0][0] = x;
			currentPoints[0][1] = y;
			currentPoints[0][2] = z;

			currentPoints[1][0] = x - circumference;
			currentPoints[1][1] = y;
			currentPoints[1][2] = z - circumference;

			currentPoints[2][0] = x - circumference;
			currentPoints[2][1] = y;
			currentPoints[2][2] = z - circumference * 2;

			currentPoints[3][0] = x;
			currentPoints[3][1] = y;
			currentPoints[3][2] = z - circumference * 3;

			currentPoints[4][0] = x + circumference;
			currentPoints[4][1] = y;
			currentPoints[4][2] = z - circumference * 3;

			currentPoints[5][0] = x + circumference * 2;
			currentPoints[5][1] = y;
			currentPoints[5][2] = z - circumference * 2;

			currentPoints[6][0] = x + circumference * 2;
			currentPoints[6][1] = y;
			currentPoints[6][2] = z - circumference;

			currentPoints[7][0] = x + circumference;
			currentPoints[7][1] = y;
			currentPoints[7][2] = z;
		}

		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();

		if (parentID.equals("VastusInterMediusMuscle:01")) {
			int nMaxSegs = 6;
			for (int numSegs = 0; numSegs < nMaxSegs; numSegs++) {

				// Create a place for an instruction
				BioMightInstruction bioInstruct = new BioMightInstruction();

				if (numSegs == 0) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 1) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 2) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 3) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 4) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 5) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 6) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 7) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
				}

				// Add the instruction into the instruction set
				bioMightInstructSet.addElement(bioInstruct);
			}

		} else if (parentID.equals("VastusInterMediusMuscle:02")) {
			int nMaxSegs = 6;
			for (int numSegs = 0; numSegs < nMaxSegs; numSegs++) {

				// Create a place for an instruction
				BioMightInstruction bioInstruct = new BioMightInstruction();

				if (numSegs == 0) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 1) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 2) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 3) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 4) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 5) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 6) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 7) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
				}

				// Add the instruction into the instruction set
				bioMightInstructSet.addElement(bioInstruct);
			}

		}

		// Generate the VastusInterMediusMuscle	
		// generateComponentRows(startID, componentType, componentName,
		// componentID, currentPoints, bioMightInstructSet);
		// System.out.println("Generated the Rows for VastusInterMediusMuscleTissue	: "
		// + componentID + "   parent: " + parentID + "   " + componentType);

		return returnCode;
	}	
	
	
	
	
	
	/***************************************************************************************
	 * GENERATE ANTERIOR VETERBRA MUSCLE 
	 * 
	 * This generates the Anterior Veterbra Muscle 
	 * 
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/

	public int AnteriorVeterbralMuscle(String startID,
			String componentType, String componentName, String componentID,
			String parentID, double[][] currentPoints) throws DataException,
			DataSecurityException {
		System.out.println("Generat AnteriorVeterbralMuscle");

		int bodyID = 1;
		int projectID = 1;
		String vertices = "";

		ArrayList mySqlList = new ArrayList();
		int returnCode = 0;

		// We can generate the AnteriorVeterbralMuscle	
		if (currentPoints == null) {
			double circumference = 0.125;

			double x = -8.0;
			double y = -10.0;
			double z = -1.0;

			// Create a equilateral octogon
			currentPoints[0][0] = x;
			currentPoints[0][1] = y;
			currentPoints[0][2] = z;

			currentPoints[1][0] = x - circumference;
			currentPoints[1][1] = y;
			currentPoints[1][2] = z - circumference;

			currentPoints[2][0] = x - circumference;
			currentPoints[2][1] = y;
			currentPoints[2][2] = z - circumference * 2;

			currentPoints[3][0] = x;
			currentPoints[3][1] = y;
			currentPoints[3][2] = z - circumference * 3;

			currentPoints[4][0] = x + circumference;
			currentPoints[4][1] = y;
			currentPoints[4][2] = z - circumference * 3;

			currentPoints[5][0] = x + circumference * 2;
			currentPoints[5][1] = y;
			currentPoints[5][2] = z - circumference * 2;

			currentPoints[6][0] = x + circumference * 2;
			currentPoints[6][1] = y;
			currentPoints[6][2] = z - circumference;

			currentPoints[7][0] = x + circumference;
			currentPoints[7][1] = y;
			currentPoints[7][2] = z;
		}

		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();

		if (parentID.equals("AnteriorVeterbralMuscle:01")) {
			int nMaxSegs = 6;
			for (int numSegs = 0; numSegs < nMaxSegs; numSegs++) {

				// Create a place for an instruction
				BioMightInstruction bioInstruct = new BioMightInstruction();

				if (numSegs == 0) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 1) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 2) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 3) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 4) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 5) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 6) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 7) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
				}

				// Add the instruction into the instruction set
				bioMightInstructSet.addElement(bioInstruct);
			}

		} else if (parentID.equals("AnteriorVeterbralMuscle:02")) {
			int nMaxSegs = 6;
			for (int numSegs = 0; numSegs < nMaxSegs; numSegs++) {

				// Create a place for an instruction
				BioMightInstruction bioInstruct = new BioMightInstruction();

				if (numSegs == 0) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 1) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 2) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 3) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 4) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 5) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 6) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 7) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
				}

				// Add the instruction into the instruction set
				bioMightInstructSet.addElement(bioInstruct);
			}

		}

		// Generate the AnteriorVeterbralMuscle	
		// generateComponentRows(startID, componentType, componentName,
		// componentID, currentPoints, bioMightInstructSet);
		// System.out.println("Generated the Rows for AnteriorVeterbralMuscleTissue	: "
		// + componentID + "   parent: " + parentID + "   " + componentType);

		return returnCode;
	}	

	
	
	/***************************************************************************************
	 * GENERATE BICEPS FERMORIS MUSCLE 
	 * 
	 * This generates the Biceps Fermoris Muscle 
	 * 
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/

	public int generateBicepsFemorisMuscle(String startID,
			String componentType, String componentName, String componentID,
			String parentID, double[][] currentPoints) throws DataException,
			DataSecurityException {
		System.out.println("Generate EJB BicepsFemorisMuscle: " + componentID + "   " + parentID);

		int bodyID = 1;
		int projectID = 1;
		String vertices = "";

		ArrayList mySqlList = new ArrayList();
		int returnCode = 0;

		// We can generate the BicepsFemorisMuscle	
		if (currentPoints == null) {
			double radius = 0.125;

			double[] startPos = {1.5, -30.0, -2.0};
			currentPoints = BioGraphics.createCylinderInPlane(Constants.XPLANE, startPos, radius, 8);
		}

		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();

		if (componentID.equals("BicepsFemorisMuscle:01")) {
			int nMaxSegs = 14;
			for (int numSegs = 0; numSegs < nMaxSegs; numSegs++) {

				// Create a place for an instruction
				BioMightInstruction bioInstruct = new BioMightInstruction();

				if (numSegs == 0) {
	    			bioInstruct.setTransType(Constants.SCALE);
	    			bioInstruct.setScaleMatrix(1.0, 1.0, 1.5);
					bioInstruct.setTranslateMatrix(0.20, -0.50, 0.1);
				} else if (numSegs == 1) {
	    			bioInstruct.setTransType(Constants.SCALE);
	    			bioInstruct.setScaleMatrix(1.0, 1.0, 1.5);
					bioInstruct.setTranslateMatrix(0.15, -1.0, 0.1);
				} else if (numSegs == 2) {
					BioMightOrientation orientation = new BioMightOrientation(0.0, -1.0, 0.0, 90.0);
		 			bioInstruct.setTransType(Constants.ROTATEMOVEOCTO);
	    			bioInstruct.setTheta(20);	
	    			bioInstruct.setPivotPoint(0);	
	     			bioInstruct.setRotateVector(0.0, 1.0, 0.0);
	     			bioInstruct.setOrientation(orientation);
					bioInstruct.setTranslateMatrix(-0.02, -1.0, 0.0);
				} else if (numSegs == 3) {
	    			bioInstruct.setTransType(Constants.SCALE);
	    			bioInstruct.setScaleMatrix(1.0, 1.0, 1.1);
					bioInstruct.setTranslateMatrix(0.05, -1.0, 0.15);
				} else if (numSegs == 4) {
					BioMightOrientation orientation = new BioMightOrientation(0.0, -1.0, 0.0, 90.0);
		 			bioInstruct.setTransType(Constants.ROTATEMOVEOCTO);
	    			bioInstruct.setTheta(20);	
	    			bioInstruct.setPivotPoint(0);	
	     			bioInstruct.setRotateVector(0.0, 1.0, 0.0);
	     			bioInstruct.setOrientation(orientation);
					bioInstruct.setTranslateMatrix(-0.02, -1.0, 0.0);
				} else if (numSegs == 5) {
					BioMightOrientation orientation = new BioMightOrientation(0.0, -1.0, 0.0, 90.0);
		 			bioInstruct.setTransType(Constants.ROTATEMOVEOCTO);
	    			bioInstruct.setTheta(15);	
	    			bioInstruct.setPivotPoint(0);	
	     			bioInstruct.setRotateVector(0.0, 1.0, 0.0);
	     			bioInstruct.setOrientation(orientation);
					bioInstruct.setTranslateMatrix(0.01, -1.0, 0.0);
				} else if (numSegs == 6) {
					bioInstruct.setTransType(Constants.SCALE);
	    			bioInstruct.setScaleMatrix(1.0, 1.0, 1.1);
					bioInstruct.setTranslateMatrix(-0.03, -1.0, 0.1);
				} else if (numSegs == 7) {
					bioInstruct.setTransType(Constants.SCALE);
	    			bioInstruct.setScaleMatrix(1.0, 1.0, 1.1);
					bioInstruct.setTranslateMatrix(-0.02, -1.0, 0.1);
				} 
				else if (numSegs == 8) {
					BioMightOrientation orientation = new BioMightOrientation(0.0, -1.0, 0.0, 90.0);
		 			bioInstruct.setTransType(Constants.ROTATEMOVEOCTO);
	    			bioInstruct.setTheta(20);	
	    			bioInstruct.setPivotPoint(0);	
	     			bioInstruct.setRotateVector(0.0, 1.0, 0.0);
	     			bioInstruct.setOrientation(orientation);
					bioInstruct.setTranslateMatrix(-0.02, -1.0, 0.0);
				} 
				else if (numSegs == 9) {
					bioInstruct.setTransType(Constants.SCALE);
	    			bioInstruct.setScaleMatrix(1.0, 1.0, 1.0);
					bioInstruct.setTranslateMatrix(-0.01, -1.0, 0.15);
				} 
				else if (numSegs == 10) {
					bioInstruct.setTransType(Constants.SCALE);
	    			bioInstruct.setScaleMatrix(1.0, 1.0, 1.0);
					bioInstruct.setTranslateMatrix(-0.02, -1.0, 0.18);
				} 
				else if (numSegs == 11) {
					BioMightOrientation orientation = new BioMightOrientation(0.0, -1.0, 0.0, 90.0);
		 			bioInstruct.setTransType(Constants.ROTATEMOVEOCTO);
	    			bioInstruct.setTheta(20);	
	    			bioInstruct.setPivotPoint(0);	
	     			bioInstruct.setRotateVector(0.0, 1.0, 0.0);
	     			bioInstruct.setOrientation(orientation);
					bioInstruct.setTranslateMatrix(-0.01, -1.0, 0.08);
				} 
				else if (numSegs == 12) {
					bioInstruct.setTransType(Constants.SCALE);
	    			bioInstruct.setScaleMatrix(1.0, 1.0, 1.05);
					bioInstruct.setTranslateMatrix(-0.03, -1.00, 0.18);
				} 
				else if (numSegs == 13) {
					bioInstruct.setTransType(Constants.SCALE);
	    			bioInstruct.setScaleMatrix(1.0, 1.0, 1.05);
					bioInstruct.setTranslateMatrix(-0.02, -1.00, 0.18);
				} 
				else if (numSegs == 14) {
					BioMightOrientation orientation = new BioMightOrientation(0.0, -1.0, 0.0, 90.0);
		 			bioInstruct.setTransType(Constants.ROTATEMOVEOCTO);
	    			bioInstruct.setTheta(20);	
	    			bioInstruct.setPivotPoint(0);	
	     			bioInstruct.setRotateVector(0.0, 1.0, 0.0);
	     			bioInstruct.setOrientation(orientation);
					bioInstruct.setTranslateMatrix(0.0, -1.00, 0.0);
				} 
	 						
				else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(0.0, -0.10, 0.15);
				}

				// Add the instruction into the instruction set
				bioMightInstructSet.addElement(bioInstruct);
			}

		} else if (componentID.equals("BicepsFemorisMuscle:02")) {
			int nMaxSegs = 14;
			for (int numSegs = 0; numSegs < nMaxSegs; numSegs++) {

				// Create a place for an instruction
				BioMightInstruction bioInstruct = new BioMightInstruction();

				if (numSegs == 0) {
	    			bioInstruct.setTransType(Constants.SCALE);
	    			bioInstruct.setScaleMatrix(1.0, 1.0, 1.5);
					bioInstruct.setTranslateMatrix(-0.20, -0.50, 0.0);
				} else if (numSegs == 1) {
	    			bioInstruct.setTransType(Constants.SCALE);
	    			bioInstruct.setScaleMatrix(1.0, 1.0, 1.5);
					bioInstruct.setTranslateMatrix(-0.15, -1.0, 0.0);
				} else if (numSegs == 2) {
					BioMightOrientation orientation = new BioMightOrientation(0.0, -1.0, 0.0, 90.0);
		 			bioInstruct.setTransType(Constants.ROTATEMOVEOCTO);
	    			bioInstruct.setTheta(-15);	
	    			bioInstruct.setPivotPoint(4);	
	     			bioInstruct.setRotateVector(0.0, 1.0, 0.0);
	     			bioInstruct.setOrientation(orientation);
					bioInstruct.setTranslateMatrix(-0.01, -1.0, 0.0);
				} else if (numSegs == 3) {
	    			bioInstruct.setTransType(Constants.SCALE);
	    			bioInstruct.setScaleMatrix(1.0, 1.0, 1.1);
					bioInstruct.setTranslateMatrix(-0.05, -1.0, 0.05);
				} else if (numSegs == 4) {
					bioInstruct.setTransType(Constants.SCALE);
	    			bioInstruct.setScaleMatrix(1.0, 1.0, 1.1);
					bioInstruct.setTranslateMatrix(-0.0, -1.0, 0.05);
				} else if (numSegs == 5) {
					BioMightOrientation orientation = new BioMightOrientation(0.0, -1.0, 0.0, 90.0);
		 			bioInstruct.setTransType(Constants.ROTATEMOVEOCTO);
	    			bioInstruct.setTheta(-15);	
	    			bioInstruct.setPivotPoint(4);	
	     			bioInstruct.setRotateVector(0.0, 1.0, 0.0);
	     			bioInstruct.setOrientation(orientation);
					bioInstruct.setTranslateMatrix(-0.01, -1.0, 0.0);
				} else if (numSegs == 6) {
					bioInstruct.setTransType(Constants.SCALE);
	    			bioInstruct.setScaleMatrix(1.0, 1.0, 1.1);
					bioInstruct.setTranslateMatrix(-0.01, -1.0, 0.07);
				} else if (numSegs == 7) {
					bioInstruct.setTransType(Constants.SCALE);
	    			bioInstruct.setScaleMatrix(1.0, 1.0, 1.1);
					bioInstruct.setTranslateMatrix(0.0, -1.0, 0.08);
				} 
				else if (numSegs == 8) {
					BioMightOrientation orientation = new BioMightOrientation(0.0, -1.0, 0.0, 90.0);
		 			bioInstruct.setTransType(Constants.ROTATEMOVEOCTO);
	    			bioInstruct.setTheta(-20);	
	    			bioInstruct.setPivotPoint(4);	
	     			bioInstruct.setRotateVector(0.0, 1.0, 0.0);
	     			bioInstruct.setOrientation(orientation);
					bioInstruct.setTranslateMatrix(0.0, -1.0, 0.0);
				} 
				else if (numSegs == 9) {
					bioInstruct.setTransType(Constants.SCALE);
	    			bioInstruct.setScaleMatrix(1.0, 1.0, 1.0);
					bioInstruct.setTranslateMatrix(0.01, -1.0, 0.08);
				} 
				else if (numSegs == 10) {
					bioInstruct.setTransType(Constants.SCALE);
	    			bioInstruct.setScaleMatrix(1.0, 1.0, 1.0);
					bioInstruct.setTranslateMatrix(0.0, -1.0, 0.08);
				} 
				else if (numSegs == 11) {
					BioMightOrientation orientation = new BioMightOrientation(0.0, -1.0, 0.0, 90.0);
		 			bioInstruct.setTransType(Constants.ROTATEMOVEOCTO);
	    			bioInstruct.setTheta(-20);	
	    			bioInstruct.setPivotPoint(4);	
	     			bioInstruct.setRotateVector(0.0, 1.0, 0.0);
	     			bioInstruct.setOrientation(orientation);
					bioInstruct.setTranslateMatrix(0.01, -1.0, 0.08);
				} 
				else if (numSegs == 12) {
					BioMightOrientation orientation = new BioMightOrientation(0.0, -1.0, 0.0, 90.0);
		 			bioInstruct.setTransType(Constants.ROTATEMOVEOCTO);
	    			bioInstruct.setTheta(-15);	
	    			bioInstruct.setPivotPoint(4);	
	     			bioInstruct.setRotateVector(0.0, 1.0, 0.0);
	     			bioInstruct.setOrientation(orientation);
					bioInstruct.setTranslateMatrix(-0.01, -1.0, 0.0);
				} 
				else if (numSegs == 13) {
					bioInstruct.setTransType(Constants.SCALE);
	    			bioInstruct.setScaleMatrix(1.0, 1.0, 1.05);
					bioInstruct.setTranslateMatrix(0.01, -1.00, 0.08);
				} 
				else if (numSegs == 14) {
					BioMightOrientation orientation = new BioMightOrientation(0.0, -1.0, 0.0, 90.0);
		 			bioInstruct.setTransType(Constants.ROTATEMOVEOCTO);
	    			bioInstruct.setTheta(-20);	
	    			bioInstruct.setPivotPoint(4);	
	     			bioInstruct.setRotateVector(0.0, 1.0, 0.0);
	     			bioInstruct.setOrientation(orientation);
					bioInstruct.setTranslateMatrix(0.0, -1.00, 0.0);
				} 
			}
		}

		// Generate the BicepsFemorisMuscle	
		DBUtils.generateFacedComponents(Constants.QUADRANGLE, startID, componentType, componentName, componentID, currentPoints, bioMightInstructSet);
		System.out.println("Generated the Rows for BicepsFemorisMuscle: " + componentID + "   " + componentType + "  instr: " + bioMightInstructSet.getSize());


		return returnCode;
	}
	

	
	/***************************************************************************************
	 * GENERATE CORRUGATOR CUTIS ANI MUSCLE 
	 * 
	 * This generates the Corrugator Cutis Ani Muscle 
	 * 
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/

	public int generateCorrugatorCutisAniMuscle(String startID,
			String componentType, String componentName, String componentID,
			String parentID, double[][] currentPoints) throws DataException,
			DataSecurityException {
		System.out.println("Generat CorrugatorCutisAniMuscle");

		int bodyID = 1;
		int projectID = 1;
		String vertices = "";

		ArrayList mySqlList = new ArrayList();
		int returnCode = 0;

		// We can generate the CorrugatorCutisAniMuscle	
		if (currentPoints == null) {
			double circumference = 0.125;

			double x = -8.0;
			double y = -10.0;
			double z = -1.0;

			// Create a equilateral octogon
			currentPoints[0][0] = x;
			currentPoints[0][1] = y;
			currentPoints[0][2] = z;

			currentPoints[1][0] = x - circumference;
			currentPoints[1][1] = y;
			currentPoints[1][2] = z - circumference;

			currentPoints[2][0] = x - circumference;
			currentPoints[2][1] = y;
			currentPoints[2][2] = z - circumference * 2;

			currentPoints[3][0] = x;
			currentPoints[3][1] = y;
			currentPoints[3][2] = z - circumference * 3;

			currentPoints[4][0] = x + circumference;
			currentPoints[4][1] = y;
			currentPoints[4][2] = z - circumference * 3;

			currentPoints[5][0] = x + circumference * 2;
			currentPoints[5][1] = y;
			currentPoints[5][2] = z - circumference * 2;

			currentPoints[6][0] = x + circumference * 2;
			currentPoints[6][1] = y;
			currentPoints[6][2] = z - circumference;

			currentPoints[7][0] = x + circumference;
			currentPoints[7][1] = y;
			currentPoints[7][2] = z;
		}

		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();

		if (parentID.equals("CorrugatorCutisAniMuscle:01")) {
			int nMaxSegs = 6;
			for (int numSegs = 0; numSegs < nMaxSegs; numSegs++) {

				// Create a place for an instruction
				BioMightInstruction bioInstruct = new BioMightInstruction();

				if (numSegs == 0) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 1) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 2) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 3) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 4) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 5) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 6) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 7) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
				}

				// Add the instruction into the instruction set
				bioMightInstructSet.addElement(bioInstruct);
			}

		} else if (parentID.equals("CorrugatorCutisAniMuscle:02")) {
			int nMaxSegs = 6;
			for (int numSegs = 0; numSegs < nMaxSegs; numSegs++) {

				// Create a place for an instruction
				BioMightInstruction bioInstruct = new BioMightInstruction();

				if (numSegs == 0) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 1) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 2) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 3) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 4) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 5) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 6) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 7) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
				}

				// Add the instruction into the instruction set
				bioMightInstructSet.addElement(bioInstruct);
			}

		}

		// Generate the CorrugatorCutisAniMuscle	
		// generateComponentRows(startID, componentType, componentName,
		// componentID, currentPoints, bioMightInstructSet);
		// System.out.println("Generated the Rows for CorrugatorCutisAniMuscleTissue	: "
		// + componentID + "   parent: " + parentID + "   " + componentType);

		return returnCode;
	}
	
	
	
	
	
	
	
	
	
	/***************************************************************************************
	 * GENERATE CORRUGATOR MUSCLE 
	 * 
	 * This generates the Corrugator Muscle 
	 * 
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/

	public int generateCorrugatorMuscle(String startID,
			String componentType, String componentName, String componentID,
			String parentID, double[][] currentPoints) throws DataException,
			DataSecurityException {
		System.out.println("Generat CorrugatorMuscle");

		int bodyID = 1;
		int projectID = 1;
		String vertices = "";

		ArrayList mySqlList = new ArrayList();
		int returnCode = 0;

		// We can generate the CorrugatorMuscle	
		if (currentPoints == null) {
			double circumference = 0.125;

			double x = -8.0;
			double y = -10.0;
			double z = -1.0;

			// Create a equilateral octogon
			currentPoints[0][0] = x;
			currentPoints[0][1] = y;
			currentPoints[0][2] = z;

			currentPoints[1][0] = x - circumference;
			currentPoints[1][1] = y;
			currentPoints[1][2] = z - circumference;

			currentPoints[2][0] = x - circumference;
			currentPoints[2][1] = y;
			currentPoints[2][2] = z - circumference * 2;

			currentPoints[3][0] = x;
			currentPoints[3][1] = y;
			currentPoints[3][2] = z - circumference * 3;

			currentPoints[4][0] = x + circumference;
			currentPoints[4][1] = y;
			currentPoints[4][2] = z - circumference * 3;

			currentPoints[5][0] = x + circumference * 2;
			currentPoints[5][1] = y;
			currentPoints[5][2] = z - circumference * 2;

			currentPoints[6][0] = x + circumference * 2;
			currentPoints[6][1] = y;
			currentPoints[6][2] = z - circumference;

			currentPoints[7][0] = x + circumference;
			currentPoints[7][1] = y;
			currentPoints[7][2] = z;
		}

		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();

		if (parentID.equals("CorrugatorMuscle:01")) {
			int nMaxSegs = 6;
			for (int numSegs = 0; numSegs < nMaxSegs; numSegs++) {

				// Create a place for an instruction
				BioMightInstruction bioInstruct = new BioMightInstruction();

				if (numSegs == 0) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 1) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 2) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 3) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 4) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 5) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 6) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 7) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
				}

				// Add the instruction into the instruction set
				bioMightInstructSet.addElement(bioInstruct);
			}

		} else if (parentID.equals("CorrugatorMuscle:02")) {
			int nMaxSegs = 6;
			for (int numSegs = 0; numSegs < nMaxSegs; numSegs++) {

				// Create a place for an instruction
				BioMightInstruction bioInstruct = new BioMightInstruction();

				if (numSegs == 0) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 1) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 2) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 3) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 4) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 5) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 6) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 7) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
				}

				// Add the instruction into the instruction set
				bioMightInstructSet.addElement(bioInstruct);
			}

		}

		// Generate the CorrugatorMuscle	
		// generateComponentRows(startID, componentType, componentName,
		// componentID, currentPoints, bioMightInstructSet);
		// System.out.println("Generated the Rows for CorrugatorMuscleTissue	: "
		// + componentID + "   parent: " + parentID + "   " + componentType);

		return returnCode;
	}
	
	
	
	
	
	
	
	
	
	/***************************************************************************************
	 * GENERATE CIRCO THYROID MUSCLE 
	 * 
	 * This generates the Crico Throid Muscle 
	 * 
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/

	public int generateCricoThyroidMuscle(String startID,
			String componentType, String componentName, String componentID,
			String parentID, double[][] currentPoints) throws DataException,
			DataSecurityException {
		System.out.println("Generat CricoThyroidMuscle");

		int bodyID = 1;
		int projectID = 1;
		String vertices = "";

		ArrayList mySqlList = new ArrayList();
		int returnCode = 0;

		// We can generate the CricoThyroidMuscle	
		if (currentPoints == null) {
			double circumference = 0.125;

			double x = -8.0;
			double y = -10.0;
			double z = -1.0;

			// Create a equilateral octogon
			currentPoints[0][0] = x;
			currentPoints[0][1] = y;
			currentPoints[0][2] = z;

			currentPoints[1][0] = x - circumference;
			currentPoints[1][1] = y;
			currentPoints[1][2] = z - circumference;

			currentPoints[2][0] = x - circumference;
			currentPoints[2][1] = y;
			currentPoints[2][2] = z - circumference * 2;

			currentPoints[3][0] = x;
			currentPoints[3][1] = y;
			currentPoints[3][2] = z - circumference * 3;

			currentPoints[4][0] = x + circumference;
			currentPoints[4][1] = y;
			currentPoints[4][2] = z - circumference * 3;

			currentPoints[5][0] = x + circumference * 2;
			currentPoints[5][1] = y;
			currentPoints[5][2] = z - circumference * 2;

			currentPoints[6][0] = x + circumference * 2;
			currentPoints[6][1] = y;
			currentPoints[6][2] = z - circumference;

			currentPoints[7][0] = x + circumference;
			currentPoints[7][1] = y;
			currentPoints[7][2] = z;
		}

		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();

		if (parentID.equals("CricoThyroidMuscle:01")) {
			int nMaxSegs = 6;
			for (int numSegs = 0; numSegs < nMaxSegs; numSegs++) {

				// Create a place for an instruction
				BioMightInstruction bioInstruct = new BioMightInstruction();

				if (numSegs == 0) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 1) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 2) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 3) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 4) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 5) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 6) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 7) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
				}

				// Add the instruction into the instruction set
				bioMightInstructSet.addElement(bioInstruct);
			}

		} else if (parentID.equals("CricoThyroidMuscle:02")) {
			int nMaxSegs = 6;
			for (int numSegs = 0; numSegs < nMaxSegs; numSegs++) {

				// Create a place for an instruction
				BioMightInstruction bioInstruct = new BioMightInstruction();

				if (numSegs == 0) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 1) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 2) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 3) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 4) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 5) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 6) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 7) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
				}

				// Add the instruction into the instruction set
				bioMightInstructSet.addElement(bioInstruct);
			}

		}

		// Generate the CricoThyroidMuscle	
		// generateComponentRows(startID, componentType, componentName,
		// componentID, currentPoints, bioMightInstructSet);
		// System.out.println("Generated the Rows for CricoThyroidMuscleTissue	: "
		// + componentID + "   parent: " + parentID + "   " + componentType);

		return returnCode;
	}
	
	
	
	
	
	
	
	
	/***************************************************************************************
	 * GENERATE DEPRESSOR LABII INFERIORIS MUSCLE 
	 * 
	 * This generates the Depressor Labii Inferioris Muscle 
	 * 
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/

	public int generateDepressorLabiiInferiorisMuscle(String startID,
			String componentType, String componentName, String componentID,
			String parentID, double[][] currentPoints) throws DataException,
			DataSecurityException {
		System.out.println("Generat DepressorLabiiInferiorisMuscle");

		int bodyID = 1;
		int projectID = 1;
		String vertices = "";

		ArrayList mySqlList = new ArrayList();
		int returnCode = 0;

		// We can generate the DepressorLabiiInferiorisMuscle	
		if (currentPoints == null) {
			double circumference = 0.125;

			double x = -8.0;
			double y = -10.0;
			double z = -1.0;

			// Create a equilateral octogon
			currentPoints[0][0] = x;
			currentPoints[0][1] = y;
			currentPoints[0][2] = z;

			currentPoints[1][0] = x - circumference;
			currentPoints[1][1] = y;
			currentPoints[1][2] = z - circumference;

			currentPoints[2][0] = x - circumference;
			currentPoints[2][1] = y;
			currentPoints[2][2] = z - circumference * 2;

			currentPoints[3][0] = x;
			currentPoints[3][1] = y;
			currentPoints[3][2] = z - circumference * 3;

			currentPoints[4][0] = x + circumference;
			currentPoints[4][1] = y;
			currentPoints[4][2] = z - circumference * 3;

			currentPoints[5][0] = x + circumference * 2;
			currentPoints[5][1] = y;
			currentPoints[5][2] = z - circumference * 2;

			currentPoints[6][0] = x + circumference * 2;
			currentPoints[6][1] = y;
			currentPoints[6][2] = z - circumference;

			currentPoints[7][0] = x + circumference;
			currentPoints[7][1] = y;
			currentPoints[7][2] = z;
		}

		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();

		if (parentID.equals("DepressorLabiiInferiorisMuscle:01")) {
			int nMaxSegs = 6;
			for (int numSegs = 0; numSegs < nMaxSegs; numSegs++) {

				// Create a place for an instruction
				BioMightInstruction bioInstruct = new BioMightInstruction();

				if (numSegs == 0) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 1) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 2) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 3) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 4) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 5) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 6) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 7) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
				}

				// Add the instruction into the instruction set
				bioMightInstructSet.addElement(bioInstruct);
			}

		} else if (parentID.equals("DepressorLabiiInferiorisMuscle:02")) {
			int nMaxSegs = 6;
			for (int numSegs = 0; numSegs < nMaxSegs; numSegs++) {

				// Create a place for an instruction
				BioMightInstruction bioInstruct = new BioMightInstruction();

				if (numSegs == 0) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 1) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 2) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 3) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 4) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 5) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 6) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 7) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
				}

				// Add the instruction into the instruction set
				bioMightInstructSet.addElement(bioInstruct);
			}

		}

		// Generate the DepressorLabiiInferiorisMuscle	
		// generateComponentRows(startID, componentType, componentName,
		// componentID, currentPoints, bioMightInstructSet);
		// System.out.println("Generated the Rows for DepressorLabiiInferiorisMuscleTissue	: "
		// + componentID + "   parent: " + parentID + "   " + componentType);

		return returnCode;
	}
	
	
	
	
	
	
	
	
	/***************************************************************************************
	 * GENERATE DEPRESSOR SEPTI NASI MUSCLE 
	 * 
	 * This generates the Depressor Septi Nasi Muscle 
	 * 
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/

	public int generateDepressorSeptiNasiMuscle(String startID,
			String componentType, String componentName, String componentID,
			String parentID, double[][] currentPoints) throws DataException,
			DataSecurityException {
		System.out.println("Generat DepressorSeptiNasiMuscle");

		int bodyID = 1;
		int projectID = 1;
		String vertices = "";

		ArrayList mySqlList = new ArrayList();
		int returnCode = 0;

		// We can generate the DepressorSeptiNasiMuscle	
		if (currentPoints == null) {
			double circumference = 0.125;

			double x = -8.0;
			double y = -10.0;
			double z = -1.0;

			// Create a equilateral octogon
			currentPoints[0][0] = x;
			currentPoints[0][1] = y;
			currentPoints[0][2] = z;

			currentPoints[1][0] = x - circumference;
			currentPoints[1][1] = y;
			currentPoints[1][2] = z - circumference;

			currentPoints[2][0] = x - circumference;
			currentPoints[2][1] = y;
			currentPoints[2][2] = z - circumference * 2;

			currentPoints[3][0] = x;
			currentPoints[3][1] = y;
			currentPoints[3][2] = z - circumference * 3;

			currentPoints[4][0] = x + circumference;
			currentPoints[4][1] = y;
			currentPoints[4][2] = z - circumference * 3;

			currentPoints[5][0] = x + circumference * 2;
			currentPoints[5][1] = y;
			currentPoints[5][2] = z - circumference * 2;

			currentPoints[6][0] = x + circumference * 2;
			currentPoints[6][1] = y;
			currentPoints[6][2] = z - circumference;

			currentPoints[7][0] = x + circumference;
			currentPoints[7][1] = y;
			currentPoints[7][2] = z;
		}

		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();

		if (parentID.equals("DepressorSeptiNasiMuscle:01")) {
			int nMaxSegs = 6;
			for (int numSegs = 0; numSegs < nMaxSegs; numSegs++) {

				// Create a place for an instruction
				BioMightInstruction bioInstruct = new BioMightInstruction();

				if (numSegs == 0) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 1) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 2) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 3) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 4) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 5) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 6) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 7) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
				}

				// Add the instruction into the instruction set
				bioMightInstructSet.addElement(bioInstruct);
			}

		} else if (parentID.equals("DepressorSeptiNasiMuscle:02")) {
			int nMaxSegs = 6;
			for (int numSegs = 0; numSegs < nMaxSegs; numSegs++) {

				// Create a place for an instruction
				BioMightInstruction bioInstruct = new BioMightInstruction();

				if (numSegs == 0) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 1) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 2) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 3) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 4) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 5) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 6) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 7) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
				}

				// Add the instruction into the instruction set
				bioMightInstructSet.addElement(bioInstruct);
			}

		}

		// Generate the DepressorSeptiNasiMuscle	
		// generateComponentRows(startID, componentType, componentName,
		// componentID, currentPoints, bioMightInstructSet);
		// System.out.println("Generated the Rows for DepressorSeptiNasiMuscleTissue	: "
		// + componentID + "   parent: " + parentID + "   " + componentType);

		return returnCode;
	}
	
	
	
	
	
	
	
	
	
	/***************************************************************************************
	 * GENERATE DIGASTRIC MUSCLE 
	 * 
	 * This generates the Digastric Muscle 
	 * 
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/

	public int generateDigastricMuscle(String startID,
			String componentType, String componentName, String componentID,
			String parentID, double[][] currentPoints) throws DataException,
			DataSecurityException {
		System.out.println("Generat DigastricMuscle");

		int bodyID = 1;
		int projectID = 1;
		String vertices = "";

		ArrayList mySqlList = new ArrayList();
		int returnCode = 0;

		// We can generate the DepressorSeptiNasiMuscle	
		if (currentPoints == null) {
			double circumference = 0.125;

			double x = -8.0;
			double y = -10.0;
			double z = -1.0;

			// Create a equilateral octogon
			currentPoints[0][0] = x;
			currentPoints[0][1] = y;
			currentPoints[0][2] = z;

			currentPoints[1][0] = x - circumference;
			currentPoints[1][1] = y;
			currentPoints[1][2] = z - circumference;

			currentPoints[2][0] = x - circumference;
			currentPoints[2][1] = y;
			currentPoints[2][2] = z - circumference * 2;

			currentPoints[3][0] = x;
			currentPoints[3][1] = y;
			currentPoints[3][2] = z - circumference * 3;

			currentPoints[4][0] = x + circumference;
			currentPoints[4][1] = y;
			currentPoints[4][2] = z - circumference * 3;

			currentPoints[5][0] = x + circumference * 2;
			currentPoints[5][1] = y;
			currentPoints[5][2] = z - circumference * 2;

			currentPoints[6][0] = x + circumference * 2;
			currentPoints[6][1] = y;
			currentPoints[6][2] = z - circumference;

			currentPoints[7][0] = x + circumference;
			currentPoints[7][1] = y;
			currentPoints[7][2] = z;
		}

		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();

		if (parentID.equals("DigastricMuscle:01")) {
			int nMaxSegs = 6;
			for (int numSegs = 0; numSegs < nMaxSegs; numSegs++) {

				// Create a place for an instruction
				BioMightInstruction bioInstruct = new BioMightInstruction();

				if (numSegs == 0) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 1) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 2) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 3) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 4) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 5) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 6) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 7) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
				}

				// Add the instruction into the instruction set
				bioMightInstructSet.addElement(bioInstruct);
			}

		} else if (parentID.equals("DigastricMuscle:02")) {
			int nMaxSegs = 6;
			for (int numSegs = 0; numSegs < nMaxSegs; numSegs++) {

				// Create a place for an instruction
				BioMightInstruction bioInstruct = new BioMightInstruction();

				if (numSegs == 0) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 1) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 2) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 3) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 4) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 5) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 6) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 7) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
				}

				// Add the instruction into the instruction set
				bioMightInstructSet.addElement(bioInstruct);
			}

		}

		// Generate the DigastricMuscle	
		// generateComponentRows(startID, componentType, componentName,
		// componentID, currentPoints, bioMightInstructSet);
		// System.out.println("Generated the Rows for DigastricMuscleTissue	: "
		// + componentID + "   parent: " + parentID + "   " + componentType);

		return returnCode;
	}
	
	
	
	
	
	
	
	
	/***************************************************************************************
	 * GENERATE DILATATOR NARIS POSTERIOR MUSCLE 
	 * 
	 * This generates the Dilatator Nsris Posterior Muscle 
	 * 
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/

	public int generateDilatatorNarisPosteriorMuscle(String startID,
			String componentType, String componentName, String componentID,
			String parentID, double[][] currentPoints) throws DataException,
			DataSecurityException {
		System.out.println("Generat DilatatorNarisPosteriorMuscle");

		int bodyID = 1;
		int projectID = 1;
		String vertices = "";

		ArrayList mySqlList = new ArrayList();
		int returnCode = 0;

		// We can generate the DilatatorNarisPosteriorMuscle	
		if (currentPoints == null) {
			double circumference = 0.125;

			double x = -8.0;
			double y = -10.0;
			double z = -1.0;

			// Create a equilateral octogon
			currentPoints[0][0] = x;
			currentPoints[0][1] = y;
			currentPoints[0][2] = z;

			currentPoints[1][0] = x - circumference;
			currentPoints[1][1] = y;
			currentPoints[1][2] = z - circumference;

			currentPoints[2][0] = x - circumference;
			currentPoints[2][1] = y;
			currentPoints[2][2] = z - circumference * 2;

			currentPoints[3][0] = x;
			currentPoints[3][1] = y;
			currentPoints[3][2] = z - circumference * 3;

			currentPoints[4][0] = x + circumference;
			currentPoints[4][1] = y;
			currentPoints[4][2] = z - circumference * 3;

			currentPoints[5][0] = x + circumference * 2;
			currentPoints[5][1] = y;
			currentPoints[5][2] = z - circumference * 2;

			currentPoints[6][0] = x + circumference * 2;
			currentPoints[6][1] = y;
			currentPoints[6][2] = z - circumference;

			currentPoints[7][0] = x + circumference;
			currentPoints[7][1] = y;
			currentPoints[7][2] = z;
		}

		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();

		if (parentID.equals("DilatatorNarisPosteriorMuscle:01")) {
			int nMaxSegs = 6;
			for (int numSegs = 0; numSegs < nMaxSegs; numSegs++) {

				// Create a place for an instruction
				BioMightInstruction bioInstruct = new BioMightInstruction();

				if (numSegs == 0) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 1) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 2) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 3) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 4) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 5) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 6) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 7) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
				}

				// Add the instruction into the instruction set
				bioMightInstructSet.addElement(bioInstruct);
			}

		} else if (parentID.equals("DilatatorNarisPosteriorMuscle:02")) {
			int nMaxSegs = 6;
			for (int numSegs = 0; numSegs < nMaxSegs; numSegs++) {

				// Create a place for an instruction
				BioMightInstruction bioInstruct = new BioMightInstruction();

				if (numSegs == 0) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 1) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 2) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 3) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 4) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 5) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 6) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 7) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
				}

				// Add the instruction into the instruction set
				bioMightInstructSet.addElement(bioInstruct);
			}

		}

		// Generate the DilatatorNarisPosteriorMuscle	
		// generateComponentRows(startID, componentType, componentName,
		// componentID, currentPoints, bioMightInstructSet);
		// System.out.println("Generated the Rows for DilatatorNarisPosteriorMuscleTissue	: "
		// + componentID + "   parent: " + parentID + "   " + componentType);

		return returnCode;
	}
	
	
	
	
	
	
	
	/***************************************************************************************
	 * GENERATE FLEXOR HALLICUS LONGUS MUSCLE 
	 * 
	 * This generates the Flexor Hallicus Longus Muscle 
	 * 
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/

	public int generateFlexorHallicusLongusMuscle(String startID,
			String componentType, String componentName, String componentID,
			String parentID, double[][] currentPoints) throws DataException,
			DataSecurityException {
		System.out.println("Generat FlexorHallicusLongusMuscle");

		int bodyID = 1;
		int projectID = 1;
		String vertices = "";

		ArrayList mySqlList = new ArrayList();
		int returnCode = 0;

		// We can generate the FlexorHallicusLongusMuscle	
		if (currentPoints == null) {
			double circumference = 0.125;

			double x = -8.0;
			double y = -10.0;
			double z = -1.0;

			// Create a equilateral octogon
			currentPoints[0][0] = x;
			currentPoints[0][1] = y;
			currentPoints[0][2] = z;

			currentPoints[1][0] = x - circumference;
			currentPoints[1][1] = y;
			currentPoints[1][2] = z - circumference;

			currentPoints[2][0] = x - circumference;
			currentPoints[2][1] = y;
			currentPoints[2][2] = z - circumference * 2;

			currentPoints[3][0] = x;
			currentPoints[3][1] = y;
			currentPoints[3][2] = z - circumference * 3;

			currentPoints[4][0] = x + circumference;
			currentPoints[4][1] = y;
			currentPoints[4][2] = z - circumference * 3;

			currentPoints[5][0] = x + circumference * 2;
			currentPoints[5][1] = y;
			currentPoints[5][2] = z - circumference * 2;

			currentPoints[6][0] = x + circumference * 2;
			currentPoints[6][1] = y;
			currentPoints[6][2] = z - circumference;

			currentPoints[7][0] = x + circumference;
			currentPoints[7][1] = y;
			currentPoints[7][2] = z;
		}

		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();

		if (parentID.equals("FlexorHallicusLongusMuscle:01")) {
			int nMaxSegs = 6;
			for (int numSegs = 0; numSegs < nMaxSegs; numSegs++) {

				// Create a place for an instruction
				BioMightInstruction bioInstruct = new BioMightInstruction();

				if (numSegs == 0) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 1) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 2) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 3) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 4) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 5) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 6) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 7) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
				}

				// Add the instruction into the instruction set
				bioMightInstructSet.addElement(bioInstruct);
			}

		} else if (parentID.equals("FlexorHallicusLongusMuscle:02")) {
			int nMaxSegs = 6;
			for (int numSegs = 0; numSegs < nMaxSegs; numSegs++) {

				// Create a place for an instruction
				BioMightInstruction bioInstruct = new BioMightInstruction();

				if (numSegs == 0) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 1) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 2) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 3) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 4) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 5) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 6) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 7) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
				}

				// Add the instruction into the instruction set
				bioMightInstructSet.addElement(bioInstruct);
			}

		}

		// Generate the FlexorHallicusLongusMuscle	
		// generateComponentRows(startID, componentType, componentName,
		// componentID, currentPoints, bioMightInstructSet);
		// System.out.println("Generated the Rows for FlexorHallicusLongusMuscleTissue	: "
		// + componentID + "   parent: " + parentID + "   " + componentType);

		return returnCode;
	}
	
	
	
	
	
	
	
	
	/***************************************************************************************
	 * GENERATE GALEA APONEUROTICA MUSCLE 
	 * 
	 * This generates the Galea Aponeurotica Muscle 
	 * 
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/

	public int generateGaleaAponeurotica(String startID,
			String componentType, String componentName, String componentID,
			String parentID, double[][] currentPoints) throws DataException,
			DataSecurityException {
		System.out.println("Generat GaleaAponeurotica");

		int bodyID = 1;
		int projectID = 1;
		String vertices = "";

		ArrayList mySqlList = new ArrayList();
		int returnCode = 0;

		// We can generate the GaleaAponeurotica	
		if (currentPoints == null) {
			double circumference = 0.125;

			double x = -8.0;
			double y = -10.0;
			double z = -1.0;

			// Create a equilateral octogon
			currentPoints[0][0] = x;
			currentPoints[0][1] = y;
			currentPoints[0][2] = z;

			currentPoints[1][0] = x - circumference;
			currentPoints[1][1] = y;
			currentPoints[1][2] = z - circumference;

			currentPoints[2][0] = x - circumference;
			currentPoints[2][1] = y;
			currentPoints[2][2] = z - circumference * 2;

			currentPoints[3][0] = x;
			currentPoints[3][1] = y;
			currentPoints[3][2] = z - circumference * 3;

			currentPoints[4][0] = x + circumference;
			currentPoints[4][1] = y;
			currentPoints[4][2] = z - circumference * 3;

			currentPoints[5][0] = x + circumference * 2;
			currentPoints[5][1] = y;
			currentPoints[5][2] = z - circumference * 2;

			currentPoints[6][0] = x + circumference * 2;
			currentPoints[6][1] = y;
			currentPoints[6][2] = z - circumference;

			currentPoints[7][0] = x + circumference;
			currentPoints[7][1] = y;
			currentPoints[7][2] = z;
		}

		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();

		if (parentID.equals("GaleaAponeurotica:01")) {
			int nMaxSegs = 6;
			for (int numSegs = 0; numSegs < nMaxSegs; numSegs++) {

				// Create a place for an instruction
				BioMightInstruction bioInstruct = new BioMightInstruction();

				if (numSegs == 0) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 1) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 2) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 3) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 4) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 5) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 6) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 7) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
				}

				// Add the instruction into the instruction set
				bioMightInstructSet.addElement(bioInstruct);
			}

		} else if (parentID.equals("GaleaAponeurotica:02")) {
			int nMaxSegs = 6;
			for (int numSegs = 0; numSegs < nMaxSegs; numSegs++) {

				// Create a place for an instruction
				BioMightInstruction bioInstruct = new BioMightInstruction();

				if (numSegs == 0) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 1) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 2) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 3) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 4) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 5) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 6) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 7) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
				}

				// Add the instruction into the instruction set
				bioMightInstructSet.addElement(bioInstruct);
			}

		}

		// Generate the GaleaAponeurotica	
		// generateComponentRows(startID, componentType, componentName,
		// componentID, currentPoints, bioMightInstructSet);
		// System.out.println("Generated the Rows for GaleaAponeuroticaTissue	: "
		// + componentID + "   parent: " + parentID + "   " + componentType);

		return returnCode;
	}
	
	
	
	
	
	
	
	
	
	/***************************************************************************************
	 * GENERATE GASTROCNEMIUS MUSCLE 
	 * 
	 * This generates the Gastrocnemius Muscle 
	 * 
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/

	public int generateGastrocnemiusMuscle(String startID,
			String componentType, String componentName, String componentID,
			String parentID, double[][] currentPoints) throws DataException,
			DataSecurityException {
		System.out.println("Generat GastrocnemiusMuscle");

		int bodyID = 1;
		int projectID = 1;
		String vertices = "";

		ArrayList mySqlList = new ArrayList();
		int returnCode = 0;

		// We can generate the GastrocnemiusMuscle	
		if (currentPoints == null) {
			double circumference = 0.125;

			double x = -8.0;
			double y = -10.0;
			double z = -1.0;

			// Create a equilateral octogon
			currentPoints[0][0] = x;
			currentPoints[0][1] = y;
			currentPoints[0][2] = z;

			currentPoints[1][0] = x - circumference;
			currentPoints[1][1] = y;
			currentPoints[1][2] = z - circumference;

			currentPoints[2][0] = x - circumference;
			currentPoints[2][1] = y;
			currentPoints[2][2] = z - circumference * 2;

			currentPoints[3][0] = x;
			currentPoints[3][1] = y;
			currentPoints[3][2] = z - circumference * 3;

			currentPoints[4][0] = x + circumference;
			currentPoints[4][1] = y;
			currentPoints[4][2] = z - circumference * 3;

			currentPoints[5][0] = x + circumference * 2;
			currentPoints[5][1] = y;
			currentPoints[5][2] = z - circumference * 2;

			currentPoints[6][0] = x + circumference * 2;
			currentPoints[6][1] = y;
			currentPoints[6][2] = z - circumference;

			currentPoints[7][0] = x + circumference;
			currentPoints[7][1] = y;
			currentPoints[7][2] = z;
		}

		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();

		if (parentID.equals("GastrocnemiusMuscle:01")) {
			int nMaxSegs = 6;
			for (int numSegs = 0; numSegs < nMaxSegs; numSegs++) {

				// Create a place for an instruction
				BioMightInstruction bioInstruct = new BioMightInstruction();

				if (numSegs == 0) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 1) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 2) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 3) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 4) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 5) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 6) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 7) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
				}

				// Add the instruction into the instruction set
				bioMightInstructSet.addElement(bioInstruct);
			}

		} else if (parentID.equals("GastrocnemiusMuscle:02")) {
			int nMaxSegs = 6;
			for (int numSegs = 0; numSegs < nMaxSegs; numSegs++) {

				// Create a place for an instruction
				BioMightInstruction bioInstruct = new BioMightInstruction();

				if (numSegs == 0) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 1) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 2) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 3) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 4) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 5) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 6) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 7) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
				}

				// Add the instruction into the instruction set
				bioMightInstructSet.addElement(bioInstruct);
			}

		}

		// Generate the GastrocnemiusMuscle	
		// generateComponentRows(startID, componentType, componentName,
		// componentID, currentPoints, bioMightInstructSet);
		// System.out.println("Generated the Rows for GastrocnemiusMuscleTissue	: "
		// + componentID + "   parent: " + parentID + "   " + componentType);

		return returnCode;
	}
	
	
	
	
	
	
	
	
	
	
	/***************************************************************************************
	 * GENERATE GEMELLI MUSCLE 
	 * 
	 * This generates the Gemelli Muscle 
	 * 
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/

	public int generateGemelliMuscle(String startID,
			String componentType, String componentName, String componentID,
			String parentID, double[][] currentPoints) throws DataException,
			DataSecurityException {
		System.out.println("Generat GemelliMuscle");

		int bodyID = 1;
		int projectID = 1;
		String vertices = "";

		ArrayList mySqlList = new ArrayList();
		int returnCode = 0;

		// We can generate the GemelliMuscle	
		if (currentPoints == null) {
			double circumference = 0.125;

			double x = -8.0;
			double y = -10.0;
			double z = -1.0;

			// Create a equilateral octogon
			currentPoints[0][0] = x;
			currentPoints[0][1] = y;
			currentPoints[0][2] = z;

			currentPoints[1][0] = x - circumference;
			currentPoints[1][1] = y;
			currentPoints[1][2] = z - circumference;

			currentPoints[2][0] = x - circumference;
			currentPoints[2][1] = y;
			currentPoints[2][2] = z - circumference * 2;

			currentPoints[3][0] = x;
			currentPoints[3][1] = y;
			currentPoints[3][2] = z - circumference * 3;

			currentPoints[4][0] = x + circumference;
			currentPoints[4][1] = y;
			currentPoints[4][2] = z - circumference * 3;

			currentPoints[5][0] = x + circumference * 2;
			currentPoints[5][1] = y;
			currentPoints[5][2] = z - circumference * 2;

			currentPoints[6][0] = x + circumference * 2;
			currentPoints[6][1] = y;
			currentPoints[6][2] = z - circumference;

			currentPoints[7][0] = x + circumference;
			currentPoints[7][1] = y;
			currentPoints[7][2] = z;
		}

		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();

		if (parentID.equals("GemelliMuscle:01")) {
			int nMaxSegs = 6;
			for (int numSegs = 0; numSegs < nMaxSegs; numSegs++) {

				// Create a place for an instruction
				BioMightInstruction bioInstruct = new BioMightInstruction();

				if (numSegs == 0) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 1) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 2) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 3) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 4) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 5) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 6) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 7) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
				}

				// Add the instruction into the instruction set
				bioMightInstructSet.addElement(bioInstruct);
			}

		} else if (parentID.equals("GemelliMuscle:02")) {
			int nMaxSegs = 6;
			for (int numSegs = 0; numSegs < nMaxSegs; numSegs++) {

				// Create a place for an instruction
				BioMightInstruction bioInstruct = new BioMightInstruction();

				if (numSegs == 0) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 1) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 2) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 3) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 4) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 5) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 6) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 7) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
				}

				// Add the instruction into the instruction set
				bioMightInstructSet.addElement(bioInstruct);
			}

		}

		// Generate the GemelliMuscle	
		// generateComponentRows(startID, componentType, componentName,
		// componentID, currentPoints, bioMightInstructSet);
		// System.out.println("Generated the Rows for GemelliMuscleTissue	: "
		// + componentID + "   parent: " + parentID + "   " + componentType);

		return returnCode;
	}
	
	
	
	
	
	
	
	
	/***************************************************************************************
	 * GENERATE ILACUS MUSCLE 
	 * 
	 * This generates the Iliacus Muscle 
	 * 
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/

	public int generateIliacusMuscle(String startID,
			String componentType, String componentName, String componentID,
			String parentID, double[][] currentPoints) throws DataException,
			DataSecurityException {
		System.out.println("Generat IliacusMuscle");

		int bodyID = 1;
		int projectID = 1;
		String vertices = "";

		ArrayList mySqlList = new ArrayList();
		int returnCode = 0;

		// We can generate the IliacusMuscle	
		if (currentPoints == null) {
			double circumference = 0.125;

			double x = -8.0;
			double y = -10.0;
			double z = -1.0;

			// Create a equilateral octogon
			currentPoints[0][0] = x;
			currentPoints[0][1] = y;
			currentPoints[0][2] = z;

			currentPoints[1][0] = x - circumference;
			currentPoints[1][1] = y;
			currentPoints[1][2] = z - circumference;

			currentPoints[2][0] = x - circumference;
			currentPoints[2][1] = y;
			currentPoints[2][2] = z - circumference * 2;

			currentPoints[3][0] = x;
			currentPoints[3][1] = y;
			currentPoints[3][2] = z - circumference * 3;

			currentPoints[4][0] = x + circumference;
			currentPoints[4][1] = y;
			currentPoints[4][2] = z - circumference * 3;

			currentPoints[5][0] = x + circumference * 2;
			currentPoints[5][1] = y;
			currentPoints[5][2] = z - circumference * 2;

			currentPoints[6][0] = x + circumference * 2;
			currentPoints[6][1] = y;
			currentPoints[6][2] = z - circumference;

			currentPoints[7][0] = x + circumference;
			currentPoints[7][1] = y;
			currentPoints[7][2] = z;
		}

		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();

		if (parentID.equals("IliacusMuscle:01")) {
			int nMaxSegs = 6;
			for (int numSegs = 0; numSegs < nMaxSegs; numSegs++) {

				// Create a place for an instruction
				BioMightInstruction bioInstruct = new BioMightInstruction();

				if (numSegs == 0) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 1) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 2) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 3) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 4) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 5) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 6) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 7) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
				}

				// Add the instruction into the instruction set
				bioMightInstructSet.addElement(bioInstruct);
			}

		} else if (parentID.equals("IliacusMuscle:02")) {
			int nMaxSegs = 6;
			for (int numSegs = 0; numSegs < nMaxSegs; numSegs++) {

				// Create a place for an instruction
				BioMightInstruction bioInstruct = new BioMightInstruction();

				if (numSegs == 0) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 1) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 2) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 3) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 4) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 5) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 6) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 7) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
				}

				// Add the instruction into the instruction set
				bioMightInstructSet.addElement(bioInstruct);
			}

		}

		// Generate the IliacusMuscle	
		// generateComponentRows(startID, componentType, componentName,
		// componentID, currentPoints, bioMightInstructSet);
		// System.out.println("Generated the Rows for IliacusMuscleTissue	: "
		// + componentID + "   parent: " + parentID + "   " + componentType);

		return returnCode;
	}
	
	
	
	
	
	
	
	
	
	
	/***************************************************************************************
	 * GENERATE ILIOPSOAS MUSCLE 
	 * 
	 * This generates the Iliopsoas Muscle 
	 * 
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/

	public int generateIliopsoasMuscle(String startID,
			String componentType, String componentName, String componentID,
			String parentID, double[][] currentPoints) throws DataException,
			DataSecurityException {
		System.out.println("Generat IliopsoasMuscle");

		int bodyID = 1;
		int projectID = 1;
		String vertices = "";

		ArrayList mySqlList = new ArrayList();
		int returnCode = 0;

		// We can generate the IliopsoasMuscle	
		if (currentPoints == null) {
			double circumference = 0.125;

			double x = -8.0;
			double y = -10.0;
			double z = -1.0;

			// Create a equilateral octogon
			currentPoints[0][0] = x;
			currentPoints[0][1] = y;
			currentPoints[0][2] = z;

			currentPoints[1][0] = x - circumference;
			currentPoints[1][1] = y;
			currentPoints[1][2] = z - circumference;

			currentPoints[2][0] = x - circumference;
			currentPoints[2][1] = y;
			currentPoints[2][2] = z - circumference * 2;

			currentPoints[3][0] = x;
			currentPoints[3][1] = y;
			currentPoints[3][2] = z - circumference * 3;

			currentPoints[4][0] = x + circumference;
			currentPoints[4][1] = y;
			currentPoints[4][2] = z - circumference * 3;

			currentPoints[5][0] = x + circumference * 2;
			currentPoints[5][1] = y;
			currentPoints[5][2] = z - circumference * 2;

			currentPoints[6][0] = x + circumference * 2;
			currentPoints[6][1] = y;
			currentPoints[6][2] = z - circumference;

			currentPoints[7][0] = x + circumference;
			currentPoints[7][1] = y;
			currentPoints[7][2] = z;
		}

		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();

		if (parentID.equals("IliopsoasMuscle:01")) {
			int nMaxSegs = 6;
			for (int numSegs = 0; numSegs < nMaxSegs; numSegs++) {

				// Create a place for an instruction
				BioMightInstruction bioInstruct = new BioMightInstruction();

				if (numSegs == 0) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 1) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 2) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 3) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 4) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 5) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 6) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 7) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
				}

				// Add the instruction into the instruction set
				bioMightInstructSet.addElement(bioInstruct);
			}

		} else if (parentID.equals("IliopsoasMuscle:02")) {
			int nMaxSegs = 6;
			for (int numSegs = 0; numSegs < nMaxSegs; numSegs++) {

				// Create a place for an instruction
				BioMightInstruction bioInstruct = new BioMightInstruction();

				if (numSegs == 0) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 1) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 2) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 3) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 4) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 5) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 6) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 7) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
				}

				// Add the instruction into the instruction set
				bioMightInstructSet.addElement(bioInstruct);
			}

		}

		// Generate the IliopsoasMuscle	
		// generateComponentRows(startID, componentType, componentName,
		// componentID, currentPoints, bioMightInstructSet);
		// System.out.println("Generated the Rows for IliopsoasMuscleTissue	: "
		// + componentID + "   parent: " + parentID + "   " + componentType);

		return returnCode;
	}
	
	
	
	
	
	
	
	
	
	/***************************************************************************************
	 * GENERATE INFERIOR GEMELLI MUSCLE 
	 * 
	 * This generates the Inferior Gemelli Muscle 
	 * 
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/

	public int generateInferiorGemelliMuscle(String startID,
			String componentType, String componentName, String componentID,
			String parentID, double[][] currentPoints) throws DataException,
			DataSecurityException {
		System.out.println("Generat InferiorGemelliMuscle");

		int bodyID = 1;
		int projectID = 1;
		String vertices = "";

		ArrayList mySqlList = new ArrayList();
		int returnCode = 0;

		// We can generate the InferiorGemelliMuscle	
		if (currentPoints == null) {
			double circumference = 0.125;

			double x = -8.0;
			double y = -10.0;
			double z = -1.0;

			// Create a equilateral octogon
			currentPoints[0][0] = x;
			currentPoints[0][1] = y;
			currentPoints[0][2] = z;

			currentPoints[1][0] = x - circumference;
			currentPoints[1][1] = y;
			currentPoints[1][2] = z - circumference;

			currentPoints[2][0] = x - circumference;
			currentPoints[2][1] = y;
			currentPoints[2][2] = z - circumference * 2;

			currentPoints[3][0] = x;
			currentPoints[3][1] = y;
			currentPoints[3][2] = z - circumference * 3;

			currentPoints[4][0] = x + circumference;
			currentPoints[4][1] = y;
			currentPoints[4][2] = z - circumference * 3;

			currentPoints[5][0] = x + circumference * 2;
			currentPoints[5][1] = y;
			currentPoints[5][2] = z - circumference * 2;

			currentPoints[6][0] = x + circumference * 2;
			currentPoints[6][1] = y;
			currentPoints[6][2] = z - circumference;

			currentPoints[7][0] = x + circumference;
			currentPoints[7][1] = y;
			currentPoints[7][2] = z;
		}

		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();

		if (parentID.equals("InferiorGemelliMuscle:01")) {
			int nMaxSegs = 6;
			for (int numSegs = 0; numSegs < nMaxSegs; numSegs++) {

				// Create a place for an instruction
				BioMightInstruction bioInstruct = new BioMightInstruction();

				if (numSegs == 0) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 1) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 2) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 3) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 4) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 5) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 6) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 7) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
				}

				// Add the instruction into the instruction set
				bioMightInstructSet.addElement(bioInstruct);
			}

		} else if (parentID.equals("InferiorGemelliMuscle:02")) {
			int nMaxSegs = 6;
			for (int numSegs = 0; numSegs < nMaxSegs; numSegs++) {

				// Create a place for an instruction
				BioMightInstruction bioInstruct = new BioMightInstruction();

				if (numSegs == 0) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 1) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 2) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 3) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 4) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 5) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 6) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 7) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
				}

				// Add the instruction into the instruction set
				bioMightInstructSet.addElement(bioInstruct);
			}

		}

		// Generate the InferiorGemelliMuscle	
		// generateComponentRows(startID, componentType, componentName,
		// componentID, currentPoints, bioMightInstructSet);
		// System.out.println("Generated the Rows for InferiorGemelliMuscleTissue	: "
		// + componentID + "   parent: " + parentID + "   " + componentType);

		return returnCode;
	}
	
	
	
	
	
	
	
	
	
	/***************************************************************************************
	 * GENERATE LATERAL CERVICLE MUSCLE 
	 * 
	 * This generates the Lateral Cervicle Muscle 
	 * 
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/

	public int generateLateralCervicleMuscle(String startID,
			String componentType, String componentName, String componentID,
			String parentID, double[][] currentPoints) throws DataException,
			DataSecurityException {
		System.out.println("Generat LateralCervicleMuscle");

		int bodyID = 1;
		int projectID = 1;
		String vertices = "";

		ArrayList mySqlList = new ArrayList();
		int returnCode = 0;

		// We can generate the LateralCervicleMuscle	
		if (currentPoints == null) {
			double circumference = 0.125;

			double x = -8.0;
			double y = -10.0;
			double z = -1.0;

			// Create a equilateral octogon
			currentPoints[0][0] = x;
			currentPoints[0][1] = y;
			currentPoints[0][2] = z;

			currentPoints[1][0] = x - circumference;
			currentPoints[1][1] = y;
			currentPoints[1][2] = z - circumference;

			currentPoints[2][0] = x - circumference;
			currentPoints[2][1] = y;
			currentPoints[2][2] = z - circumference * 2;

			currentPoints[3][0] = x;
			currentPoints[3][1] = y;
			currentPoints[3][2] = z - circumference * 3;

			currentPoints[4][0] = x + circumference;
			currentPoints[4][1] = y;
			currentPoints[4][2] = z - circumference * 3;

			currentPoints[5][0] = x + circumference * 2;
			currentPoints[5][1] = y;
			currentPoints[5][2] = z - circumference * 2;

			currentPoints[6][0] = x + circumference * 2;
			currentPoints[6][1] = y;
			currentPoints[6][2] = z - circumference;

			currentPoints[7][0] = x + circumference;
			currentPoints[7][1] = y;
			currentPoints[7][2] = z;
		}

		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();

		if (parentID.equals("LateralCervicleMuscle:01")) {
			int nMaxSegs = 6;
			for (int numSegs = 0; numSegs < nMaxSegs; numSegs++) {

				// Create a place for an instruction
				BioMightInstruction bioInstruct = new BioMightInstruction();

				if (numSegs == 0) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 1) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 2) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 3) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 4) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 5) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 6) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 7) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
				}

				// Add the instruction into the instruction set
				bioMightInstructSet.addElement(bioInstruct);
			}

		} else if (parentID.equals("LateralCervicleMuscle:02")) {
			int nMaxSegs = 6;
			for (int numSegs = 0; numSegs < nMaxSegs; numSegs++) {

				// Create a place for an instruction
				BioMightInstruction bioInstruct = new BioMightInstruction();

				if (numSegs == 0) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 1) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 2) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 3) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 4) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 5) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 6) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 7) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
				}

				// Add the instruction into the instruction set
				bioMightInstructSet.addElement(bioInstruct);
			}

		}

		// Generate the LateralCervicleMuscle	
		// generateComponentRows(startID, componentType, componentName,
		// componentID, currentPoints, bioMightInstructSet);
		// System.out.println("Generated the Rows for LateralCervicleMuscle	: "
		// + componentID + "   parent: " + parentID + "   " + componentType);

		return returnCode;
	}
	
	
	
	
	
	
	
	
	
	/***************************************************************************************
	 * GENERATE LEVATOR LABII SUPERIORIS ALAEQUE NASI MUSCLE 
	 * 
	 * This generates the Levator Labii Superioris Alaeque Nasi Muscle 
	 * 
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/

	public int generateLevatorLabiiSuperiorisAlaequeNasiMuscle(String startID,
			String componentType, String componentName, String componentID,
			String parentID, double[][] currentPoints) throws DataException,
			DataSecurityException {
		System.out.println("Generat LevatorLabiiSuperiorisAlaequeNasiMuscle");

		int bodyID = 1;
		int projectID = 1;
		String vertices = "";

		ArrayList mySqlList = new ArrayList();
		int returnCode = 0;

		// We can generate the LevatorLabiiSuperiorisAlaequeNasiMuscle	
		if (currentPoints == null) {
			double circumference = 0.125;

			double x = -8.0;
			double y = -10.0;
			double z = -1.0;

			// Create a equilateral octogon
			currentPoints[0][0] = x;
			currentPoints[0][1] = y;
			currentPoints[0][2] = z;

			currentPoints[1][0] = x - circumference;
			currentPoints[1][1] = y;
			currentPoints[1][2] = z - circumference;

			currentPoints[2][0] = x - circumference;
			currentPoints[2][1] = y;
			currentPoints[2][2] = z - circumference * 2;

			currentPoints[3][0] = x;
			currentPoints[3][1] = y;
			currentPoints[3][2] = z - circumference * 3;

			currentPoints[4][0] = x + circumference;
			currentPoints[4][1] = y;
			currentPoints[4][2] = z - circumference * 3;

			currentPoints[5][0] = x + circumference * 2;
			currentPoints[5][1] = y;
			currentPoints[5][2] = z - circumference * 2;

			currentPoints[6][0] = x + circumference * 2;
			currentPoints[6][1] = y;
			currentPoints[6][2] = z - circumference;

			currentPoints[7][0] = x + circumference;
			currentPoints[7][1] = y;
			currentPoints[7][2] = z;
		}

		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();

		if (parentID.equals("LevatorLabiiSuperiorisAlaequeNasiMuscle:01")) {
			int nMaxSegs = 6;
			for (int numSegs = 0; numSegs < nMaxSegs; numSegs++) {

				// Create a place for an instruction
				BioMightInstruction bioInstruct = new BioMightInstruction();

				if (numSegs == 0) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 1) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 2) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 3) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 4) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 5) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 6) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 7) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
				}

				// Add the instruction into the instruction set
				bioMightInstructSet.addElement(bioInstruct);
			}

		} else if (parentID.equals("LevatorLabiiSuperiorisAlaequeNasiMuscle:02")) {
			int nMaxSegs = 6;
			for (int numSegs = 0; numSegs < nMaxSegs; numSegs++) {

				// Create a place for an instruction
				BioMightInstruction bioInstruct = new BioMightInstruction();

				if (numSegs == 0) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 1) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 2) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 3) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 4) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 5) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 6) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 7) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
				}

				// Add the instruction into the instruction set
				bioMightInstructSet.addElement(bioInstruct);
			}

		}

		// Generate the LevatorLabiiSuperiorisAlaequeNasiMuscle	
		// generateComponentRows(startID, componentType, componentName,
		// componentID, currentPoints, bioMightInstructSet);
		// System.out.println("Generated the Rows for LevatorLabiiSuperiorisAlaequeNasiMuscleTissue	: "
		// + componentID + "   parent: " + parentID + "   " + componentType);

		return returnCode;
	}
	
	
	
	
	
	
	
	
	
	/***************************************************************************************
	 * GENERATE LEVATOR PALPEBRAE SUPERIORIS  MUSCLE 
	 * 
	 * This generates the Levator Palpebrae Superioris  Muscle 
	 * 
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/

	public int generateLevatorPalpebraeSuperiorisMuscle(String startID,
			String componentType, String componentName, String componentID,
			String parentID, double[][] currentPoints) throws DataException,
			DataSecurityException {
		System.out.println("Generat LevatorPalpebraeSuperiorisMuscle");

		int bodyID = 1;
		int projectID = 1;
		String vertices = "";

		ArrayList mySqlList = new ArrayList();
		int returnCode = 0;

		// We can generate the LevatorPalpebraeSuperiorisMuscle	
		if (currentPoints == null) {
			double circumference = 0.125;

			double x = -8.0;
			double y = -10.0;
			double z = -1.0;

			// Create a equilateral octogon
			currentPoints[0][0] = x;
			currentPoints[0][1] = y;
			currentPoints[0][2] = z;

			currentPoints[1][0] = x - circumference;
			currentPoints[1][1] = y;
			currentPoints[1][2] = z - circumference;

			currentPoints[2][0] = x - circumference;
			currentPoints[2][1] = y;
			currentPoints[2][2] = z - circumference * 2;

			currentPoints[3][0] = x;
			currentPoints[3][1] = y;
			currentPoints[3][2] = z - circumference * 3;

			currentPoints[4][0] = x + circumference;
			currentPoints[4][1] = y;
			currentPoints[4][2] = z - circumference * 3;

			currentPoints[5][0] = x + circumference * 2;
			currentPoints[5][1] = y;
			currentPoints[5][2] = z - circumference * 2;

			currentPoints[6][0] = x + circumference * 2;
			currentPoints[6][1] = y;
			currentPoints[6][2] = z - circumference;

			currentPoints[7][0] = x + circumference;
			currentPoints[7][1] = y;
			currentPoints[7][2] = z;
		}

		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();

		if (parentID.equals("LevatorPalpebraeSuperiorisMuscle:01")) {
			int nMaxSegs = 6;
			for (int numSegs = 0; numSegs < nMaxSegs; numSegs++) {

				// Create a place for an instruction
				BioMightInstruction bioInstruct = new BioMightInstruction();

				if (numSegs == 0) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 1) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 2) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 3) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 4) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 5) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 6) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 7) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
				}

				// Add the instruction into the instruction set
				bioMightInstructSet.addElement(bioInstruct);
			}

		} else if (parentID.equals("LevatorPalpebraeSuperiorisMuscle:02")) {
			int nMaxSegs = 6;
			for (int numSegs = 0; numSegs < nMaxSegs; numSegs++) {

				// Create a place for an instruction
				BioMightInstruction bioInstruct = new BioMightInstruction();

				if (numSegs == 0) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 1) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 2) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 3) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 4) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 5) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 6) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 7) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
				}

				// Add the instruction into the instruction set
				bioMightInstructSet.addElement(bioInstruct);
			}

		}

		// Generate the LevatorPalpebraeSuperiorisMuscle	
		// generateComponentRows(startID, componentType, componentName,
		// componentID, currentPoints, bioMightInstructSet);
		// System.out.println("Generated the Rows for LevatorPalpebraeSuperiorisMuscleTissue	: "
		// + componentID + "   parent: " + parentID + "   " + componentType);

		return returnCode;
	}
	
	
	
	
	
	
	
	
	
	/***************************************************************************************
	 * GENERATE LONGUS CAPITIS  MUSCLE 
	 * 
	 * This generates the Longus Capitis  Muscle 
	 * 
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/

	public int generateLongusCapitisMuscle(String startID,
			String componentType, String componentName, String componentID,
			String parentID, double[][] currentPoints) throws DataException,
			DataSecurityException {
		System.out.println("Generat LongusCapitisMuscle");

		int bodyID = 1;
		int projectID = 1;
		String vertices = "";

		ArrayList mySqlList = new ArrayList();
		int returnCode = 0;

		// We can generate the LongusCapitisMuscle	
		if (currentPoints == null) {
			double circumference = 0.125;

			double x = -8.0;
			double y = -10.0;
			double z = -1.0;

			// Create a equilateral octogon
			currentPoints[0][0] = x;
			currentPoints[0][1] = y;
			currentPoints[0][2] = z;

			currentPoints[1][0] = x - circumference;
			currentPoints[1][1] = y;
			currentPoints[1][2] = z - circumference;

			currentPoints[2][0] = x - circumference;
			currentPoints[2][1] = y;
			currentPoints[2][2] = z - circumference * 2;

			currentPoints[3][0] = x;
			currentPoints[3][1] = y;
			currentPoints[3][2] = z - circumference * 3;

			currentPoints[4][0] = x + circumference;
			currentPoints[4][1] = y;
			currentPoints[4][2] = z - circumference * 3;

			currentPoints[5][0] = x + circumference * 2;
			currentPoints[5][1] = y;
			currentPoints[5][2] = z - circumference * 2;

			currentPoints[6][0] = x + circumference * 2;
			currentPoints[6][1] = y;
			currentPoints[6][2] = z - circumference;

			currentPoints[7][0] = x + circumference;
			currentPoints[7][1] = y;
			currentPoints[7][2] = z;
		}

		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();

		if (parentID.equals("LongusCapitisMuscle:01")) {
			int nMaxSegs = 6;
			for (int numSegs = 0; numSegs < nMaxSegs; numSegs++) {

				// Create a place for an instruction
				BioMightInstruction bioInstruct = new BioMightInstruction();

				if (numSegs == 0) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 1) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 2) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 3) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 4) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 5) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 6) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 7) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
				}

				// Add the instruction into the instruction set
				bioMightInstructSet.addElement(bioInstruct);
			}

		} else if (parentID.equals("LongusCapitisMuscle:02")) {
			int nMaxSegs = 6;
			for (int numSegs = 0; numSegs < nMaxSegs; numSegs++) {

				// Create a place for an instruction
				BioMightInstruction bioInstruct = new BioMightInstruction();

				if (numSegs == 0) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 1) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 2) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 3) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 4) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 5) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 6) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 7) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
				}

				// Add the instruction into the instruction set
				bioMightInstructSet.addElement(bioInstruct);
			}

		}

		// Generate the LongusCapitisMuscle	
		// generateComponentRows(startID, componentType, componentName,
		// componentID, currentPoints, bioMightInstructSet);
		// System.out.println("Generated the Rows for LongusCapitisMuscleTissue	: "
		// + componentID + "   parent: " + parentID + "   " + componentType);

		return returnCode;
	}
	
	
	
	
	
	
	
	
	
	
	/***************************************************************************************
	 * GENERATE MASSERTER MUSCLE 
	 * 
	 * This generates the Masserter Muscle 
	 * 
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/

	public int generateMasseterMuscle(String startID,
			String componentType, String componentName, String componentID,
			String parentID, double[][] currentPoints) throws DataException,
			DataSecurityException {
		System.out.println("Generat MasseterMuscle");

		int bodyID = 1;
		int projectID = 1;
		String vertices = "";

		ArrayList mySqlList = new ArrayList();
		int returnCode = 0;

		// We can generate the MasseterMuscle	
		if (currentPoints == null) {
			double circumference = 0.125;

			double x = -8.0;
			double y = -10.0;
			double z = -1.0;

			// Create a equilateral octogon
			currentPoints[0][0] = x;
			currentPoints[0][1] = y;
			currentPoints[0][2] = z;

			currentPoints[1][0] = x - circumference;
			currentPoints[1][1] = y;
			currentPoints[1][2] = z - circumference;

			currentPoints[2][0] = x - circumference;
			currentPoints[2][1] = y;
			currentPoints[2][2] = z - circumference * 2;

			currentPoints[3][0] = x;
			currentPoints[3][1] = y;
			currentPoints[3][2] = z - circumference * 3;

			currentPoints[4][0] = x + circumference;
			currentPoints[4][1] = y;
			currentPoints[4][2] = z - circumference * 3;

			currentPoints[5][0] = x + circumference * 2;
			currentPoints[5][1] = y;
			currentPoints[5][2] = z - circumference * 2;

			currentPoints[6][0] = x + circumference * 2;
			currentPoints[6][1] = y;
			currentPoints[6][2] = z - circumference;

			currentPoints[7][0] = x + circumference;
			currentPoints[7][1] = y;
			currentPoints[7][2] = z;
		}

		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();

		if (parentID.equals("MasseterMuscle:01")) {
			int nMaxSegs = 6;
			for (int numSegs = 0; numSegs < nMaxSegs; numSegs++) {

				// Create a place for an instruction
				BioMightInstruction bioInstruct = new BioMightInstruction();

				if (numSegs == 0) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 1) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 2) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 3) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 4) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 5) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 6) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 7) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
				}

				// Add the instruction into the instruction set
				bioMightInstructSet.addElement(bioInstruct);
			}

		} else if (parentID.equals("MasseterMuscle:02")) {
			int nMaxSegs = 6;
			for (int numSegs = 0; numSegs < nMaxSegs; numSegs++) {

				// Create a place for an instruction
				BioMightInstruction bioInstruct = new BioMightInstruction();

				if (numSegs == 0) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 1) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 2) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 3) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 4) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 5) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 6) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 7) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
				}

				// Add the instruction into the instruction set
				bioMightInstructSet.addElement(bioInstruct);
			}

		}

		// Generate the MasseterMuscle	
		// generateComponentRows(startID, componentType, componentName,
		// componentID, currentPoints, bioMightInstructSet);
		// System.out.println("Generated the Rows for MasseterMuscleTissue	: "
		// + componentID + "   parent: " + parentID + "   " + componentType);

		return returnCode;
	}
	
	
	
	
	
	
	
	
	
	
	
	
	/***************************************************************************************
	 * GENERATE MENTALIS MUSCLE 
	 * 
	 * This generates the Mentalis Muscle 
	 * 
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/

	public int generateMentalisMuscle(String startID,
			String componentType, String componentName, String componentID,
			String parentID, double[][] currentPoints) throws DataException,
			DataSecurityException {
		System.out.println("Generat MentalisMuscle");

		int bodyID = 1;
		int projectID = 1;
		String vertices = "";

		ArrayList mySqlList = new ArrayList();
		int returnCode = 0;

		// We can generate the MentalisMuscle	
		if (currentPoints == null) {
			double circumference = 0.125;

			double x = -8.0;
			double y = -10.0;
			double z = -1.0;

			// Create a equilateral octogon
			currentPoints[0][0] = x;
			currentPoints[0][1] = y;
			currentPoints[0][2] = z;

			currentPoints[1][0] = x - circumference;
			currentPoints[1][1] = y;
			currentPoints[1][2] = z - circumference;

			currentPoints[2][0] = x - circumference;
			currentPoints[2][1] = y;
			currentPoints[2][2] = z - circumference * 2;

			currentPoints[3][0] = x;
			currentPoints[3][1] = y;
			currentPoints[3][2] = z - circumference * 3;

			currentPoints[4][0] = x + circumference;
			currentPoints[4][1] = y;
			currentPoints[4][2] = z - circumference * 3;

			currentPoints[5][0] = x + circumference * 2;
			currentPoints[5][1] = y;
			currentPoints[5][2] = z - circumference * 2;

			currentPoints[6][0] = x + circumference * 2;
			currentPoints[6][1] = y;
			currentPoints[6][2] = z - circumference;

			currentPoints[7][0] = x + circumference;
			currentPoints[7][1] = y;
			currentPoints[7][2] = z;
		}

		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();

		if (parentID.equals("MentalisMuscle:01")) {
			int nMaxSegs = 6;
			for (int numSegs = 0; numSegs < nMaxSegs; numSegs++) {

				// Create a place for an instruction
				BioMightInstruction bioInstruct = new BioMightInstruction();

				if (numSegs == 0) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 1) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 2) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 3) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 4) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 5) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 6) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 7) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
				}

				// Add the instruction into the instruction set
				bioMightInstructSet.addElement(bioInstruct);
			}

		} else if (parentID.equals("MasseterMuscle:02")) {
			int nMaxSegs = 6;
			for (int numSegs = 0; numSegs < nMaxSegs; numSegs++) {

				// Create a place for an instruction
				BioMightInstruction bioInstruct = new BioMightInstruction();

				if (numSegs == 0) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 1) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 2) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 3) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 4) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 5) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 6) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 7) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
				}

				// Add the instruction into the instruction set
				bioMightInstructSet.addElement(bioInstruct);
			}

		}

		// Generate the MentalisMuscle	
		// generateComponentRows(startID, componentType, componentName,
		// componentID, currentPoints, bioMightInstructSet);
		// System.out.println("Generated the Rows for MentalisMuscleTissue	: "
		// + componentID + "   parent: " + parentID + "   " + componentType);

		return returnCode;
	}
	
	
	
	
	
	
	
	
	
	/***************************************************************************************
	 * GENERATE MYLOHYOID MUSCLE 
	 * 
	 * This generates the Mylohyoid Muscle Muscle 
	 * 
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/

	public int generateMylohyoidMuscle(String startID,
			String componentType, String componentName, String componentID,
			String parentID, double[][] currentPoints) throws DataException,
			DataSecurityException {
		System.out.println("Generat MylohyoidMuscle");

		int bodyID = 1;
		int projectID = 1;
		String vertices = "";

		ArrayList mySqlList = new ArrayList();
		int returnCode = 0;

		// We can generate the MylohyoidMuscle	
		if (currentPoints == null) {
			double circumference = 0.125;

			double x = -8.0;
			double y = -10.0;
			double z = -1.0;

			// Create a equilateral octogon
			currentPoints[0][0] = x;
			currentPoints[0][1] = y;
			currentPoints[0][2] = z;

			currentPoints[1][0] = x - circumference;
			currentPoints[1][1] = y;
			currentPoints[1][2] = z - circumference;

			currentPoints[2][0] = x - circumference;
			currentPoints[2][1] = y;
			currentPoints[2][2] = z - circumference * 2;

			currentPoints[3][0] = x;
			currentPoints[3][1] = y;
			currentPoints[3][2] = z - circumference * 3;

			currentPoints[4][0] = x + circumference;
			currentPoints[4][1] = y;
			currentPoints[4][2] = z - circumference * 3;

			currentPoints[5][0] = x + circumference * 2;
			currentPoints[5][1] = y;
			currentPoints[5][2] = z - circumference * 2;

			currentPoints[6][0] = x + circumference * 2;
			currentPoints[6][1] = y;
			currentPoints[6][2] = z - circumference;

			currentPoints[7][0] = x + circumference;
			currentPoints[7][1] = y;
			currentPoints[7][2] = z;
		}

		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();

		if (parentID.equals("MylohyoidMuscle:01")) {
			int nMaxSegs = 6;
			for (int numSegs = 0; numSegs < nMaxSegs; numSegs++) {

				// Create a place for an instruction
				BioMightInstruction bioInstruct = new BioMightInstruction();

				if (numSegs == 0) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 1) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 2) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 3) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 4) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 5) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 6) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 7) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
				}

				// Add the instruction into the instruction set
				bioMightInstructSet.addElement(bioInstruct);
			}

		} else if (parentID.equals("MylohyoidMuscle:02")) {
			int nMaxSegs = 6;
			for (int numSegs = 0; numSegs < nMaxSegs; numSegs++) {

				// Create a place for an instruction
				BioMightInstruction bioInstruct = new BioMightInstruction();

				if (numSegs == 0) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 1) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 2) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 3) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 4) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 5) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 6) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 7) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
				}

				// Add the instruction into the instruction set
				bioMightInstructSet.addElement(bioInstruct);
			}

		}

		// Generate the MylohyoidMuscle	
		// generateComponentRows(startID, componentType, componentName,
		// componentID, currentPoints, bioMightInstructSet);
		// System.out.println("Generated the Rows for generateOccipitalisMuscle	: "
		// + componentID + "   parent: " + parentID + "   " + componentType);

		return returnCode;
	}
	
	
	
	
	
	
	
	/***************************************************************************************
	 * GENERATE OCCIPITALIS MUSCLE 
	 * 
	 * This generates the Occipitalis Muscle 
	 * 
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/

	public int generateOccipitalisMuscle(String startID,
			String componentType, String componentName, String componentID,
			String parentID, double[][] currentPoints) throws DataException,
			DataSecurityException {
		System.out.println("Generat OccipitalisMuscle");

		int bodyID = 1;
		int projectID = 1;
		String vertices = "";

		ArrayList mySqlList = new ArrayList();
		int returnCode = 0;

		// We can generate the OccipitalisMuscle	
		if (currentPoints == null) {
			double circumference = 0.125;

			double x = -8.0;
			double y = -10.0;
			double z = -1.0;

			// Create a equilateral octogon
			currentPoints[0][0] = x;
			currentPoints[0][1] = y;
			currentPoints[0][2] = z;

			currentPoints[1][0] = x - circumference;
			currentPoints[1][1] = y;
			currentPoints[1][2] = z - circumference;

			currentPoints[2][0] = x - circumference;
			currentPoints[2][1] = y;
			currentPoints[2][2] = z - circumference * 2;

			currentPoints[3][0] = x;
			currentPoints[3][1] = y;
			currentPoints[3][2] = z - circumference * 3;

			currentPoints[4][0] = x + circumference;
			currentPoints[4][1] = y;
			currentPoints[4][2] = z - circumference * 3;

			currentPoints[5][0] = x + circumference * 2;
			currentPoints[5][1] = y;
			currentPoints[5][2] = z - circumference * 2;

			currentPoints[6][0] = x + circumference * 2;
			currentPoints[6][1] = y;
			currentPoints[6][2] = z - circumference;

			currentPoints[7][0] = x + circumference;
			currentPoints[7][1] = y;
			currentPoints[7][2] = z;
		}

		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();

		if (parentID.equals("OccipitalisMuscle:01")) {
			int nMaxSegs = 6;
			for (int numSegs = 0; numSegs < nMaxSegs; numSegs++) {

				// Create a place for an instruction
				BioMightInstruction bioInstruct = new BioMightInstruction();

				if (numSegs == 0) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 1) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 2) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 3) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 4) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 5) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 6) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 7) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
				}

				// Add the instruction into the instruction set
				bioMightInstructSet.addElement(bioInstruct);
			}

		} else if (parentID.equals("OccipitalisMuscle:02")) {
			int nMaxSegs = 6;
			for (int numSegs = 0; numSegs < nMaxSegs; numSegs++) {

				// Create a place for an instruction
				BioMightInstruction bioInstruct = new BioMightInstruction();

				if (numSegs == 0) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 1) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 2) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 3) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 4) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 5) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 6) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 7) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
				}

				// Add the instruction into the instruction set
				bioMightInstructSet.addElement(bioInstruct);
			}

		}

		// Generate the OccipitalisMuscle	
		// generateComponentRows(startID, componentType, componentName,
		// componentID, currentPoints, bioMightInstructSet);
		// System.out.println("Generated the Rows for OccipitalisMuscleTissue	: "
		// + componentID + "   parent: " + parentID + "   " + componentType);

		return returnCode;
	}
	
	
	
	
	
	
	
	
	
	/***************************************************************************************
	 * GENERATE OMO HYOID MUSCLE 
	 * 
	 * This generates the Omo Hyoid Muscle 
	 * 
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/

	public int generateOmoHyoidMuscle(String startID,
			String componentType, String componentName, String componentID,
			String parentID, double[][] currentPoints) throws DataException,
			DataSecurityException {
		System.out.println("Generat OmoHyoidMuscle");

		int bodyID = 1;
		int projectID = 1;
		String vertices = "";

		ArrayList mySqlList = new ArrayList();
		int returnCode = 0;

		// We can generate the OmoHyoidMuscle	
		if (currentPoints == null) {
			double circumference = 0.125;

			double x = -8.0;
			double y = -10.0;
			double z = -1.0;

			// Create a equilateral octogon
			currentPoints[0][0] = x;
			currentPoints[0][1] = y;
			currentPoints[0][2] = z;

			currentPoints[1][0] = x - circumference;
			currentPoints[1][1] = y;
			currentPoints[1][2] = z - circumference;

			currentPoints[2][0] = x - circumference;
			currentPoints[2][1] = y;
			currentPoints[2][2] = z - circumference * 2;

			currentPoints[3][0] = x;
			currentPoints[3][1] = y;
			currentPoints[3][2] = z - circumference * 3;

			currentPoints[4][0] = x + circumference;
			currentPoints[4][1] = y;
			currentPoints[4][2] = z - circumference * 3;

			currentPoints[5][0] = x + circumference * 2;
			currentPoints[5][1] = y;
			currentPoints[5][2] = z - circumference * 2;

			currentPoints[6][0] = x + circumference * 2;
			currentPoints[6][1] = y;
			currentPoints[6][2] = z - circumference;

			currentPoints[7][0] = x + circumference;
			currentPoints[7][1] = y;
			currentPoints[7][2] = z;
		}

		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();

		if (parentID.equals("OmoHyoidMuscle:01")) {
			int nMaxSegs = 6;
			for (int numSegs = 0; numSegs < nMaxSegs; numSegs++) {

				// Create a place for an instruction
				BioMightInstruction bioInstruct = new BioMightInstruction();

				if (numSegs == 0) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 1) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 2) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 3) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 4) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 5) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 6) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 7) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
				}

				// Add the instruction into the instruction set
				bioMightInstructSet.addElement(bioInstruct);
			}

		} else if (parentID.equals("OmoHyoidMuscle:02")) {
			int nMaxSegs = 6;
			for (int numSegs = 0; numSegs < nMaxSegs; numSegs++) {

				// Create a place for an instruction
				BioMightInstruction bioInstruct = new BioMightInstruction();

				if (numSegs == 0) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 1) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 2) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 3) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 4) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 5) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 6) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 7) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
				}

				// Add the instruction into the instruction set
				bioMightInstructSet.addElement(bioInstruct);
			}

		}

		// Generate the OmoHyoidMuscle	
		// generateComponentRows(startID, componentType, componentName,
		// componentID, currentPoints, bioMightInstructSet);
		// System.out.println("Generated the Rows for OmoHyoidMuscleTissue	: "
		// + componentID + "   parent: " + parentID + "   " + componentType);

		return returnCode;
	}
	
	
	
	
	
	
	
	
	
	/***************************************************************************************
	 * GENERATE OPPONENS DIGITI MINIMI MUSCLE 
	 * 
	 * This generates the Opponens Digiti Minimi Muscle 
	 * 
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/

	public int generateOpponensDigitiMinimiMuscle(String startID,
			String componentType, String componentName, String componentID,
			String parentID, double[][] currentPoints) throws DataException,
			DataSecurityException {
		System.out.println("Generat OpponensDigitiMinimiMuscle");

		int bodyID = 1;
		int projectID = 1;
		String vertices = "";

		ArrayList mySqlList = new ArrayList();
		int returnCode = 0;

		// We can generate the OpponensDigitiMinimiMuscle	
		if (currentPoints == null) {
			double circumference = 0.125;

			double x = -8.0;
			double y = -10.0;
			double z = -1.0;

			// Create a equilateral octogon
			currentPoints[0][0] = x;
			currentPoints[0][1] = y;
			currentPoints[0][2] = z;

			currentPoints[1][0] = x - circumference;
			currentPoints[1][1] = y;
			currentPoints[1][2] = z - circumference;

			currentPoints[2][0] = x - circumference;
			currentPoints[2][1] = y;
			currentPoints[2][2] = z - circumference * 2;

			currentPoints[3][0] = x;
			currentPoints[3][1] = y;
			currentPoints[3][2] = z - circumference * 3;

			currentPoints[4][0] = x + circumference;
			currentPoints[4][1] = y;
			currentPoints[4][2] = z - circumference * 3;

			currentPoints[5][0] = x + circumference * 2;
			currentPoints[5][1] = y;
			currentPoints[5][2] = z - circumference * 2;

			currentPoints[6][0] = x + circumference * 2;
			currentPoints[6][1] = y;
			currentPoints[6][2] = z - circumference;

			currentPoints[7][0] = x + circumference;
			currentPoints[7][1] = y;
			currentPoints[7][2] = z;
		}

		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();

		if (parentID.equals("OpponensDigitiMinimiMuscle:01")) {
			int nMaxSegs = 6;
			for (int numSegs = 0; numSegs < nMaxSegs; numSegs++) {

				// Create a place for an instruction
				BioMightInstruction bioInstruct = new BioMightInstruction();

				if (numSegs == 0) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 1) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 2) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 3) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 4) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 5) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 6) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 7) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
				}

				// Add the instruction into the instruction set
				bioMightInstructSet.addElement(bioInstruct);
			}

		} else if (parentID.equals("OpponensDigitiMinimiMuscle:02")) {
			int nMaxSegs = 6;
			for (int numSegs = 0; numSegs < nMaxSegs; numSegs++) {

				// Create a place for an instruction
				BioMightInstruction bioInstruct = new BioMightInstruction();

				if (numSegs == 0) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 1) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 2) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 3) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 4) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 5) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 6) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 7) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
				}

				// Add the instruction into the instruction set
				bioMightInstructSet.addElement(bioInstruct);
			}

		}

		// Generate the OpponensDigitiMinimiMuscle	
		// generateComponentRows(startID, componentType, componentName,
		// componentID, currentPoints, bioMightInstructSet);
		// System.out.println("Generated the Rows for OpponensDigitiMinimiMuscleTissue	: "
		// + componentID + "   parent: " + parentID + "   " + componentType);

		return returnCode;
	}
	
	
	
	
	
	
	
	
	
	
	
	
	/***************************************************************************************
	 * GENERATE ORBICULARIS OCULI MUSCLE 
	 * 
	 * This generates the Orbicularis Oculil Muscle 
	 * 
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/

	public int generateOrbicularisOculiMuscle(String startID,
			String componentType, String componentName, String componentID,
			String parentID, double[][] currentPoints) throws DataException,
			DataSecurityException {
		System.out.println("Generat OrbicularisOculiMuscle");

		int bodyID = 1;
		int projectID = 1;
		String vertices = "";

		ArrayList mySqlList = new ArrayList();
		int returnCode = 0;

		// We can generate the OrbicularisOculiMuscle	
		if (currentPoints == null) {
			double circumference = 0.125;

			double x = -8.0;
			double y = -10.0;
			double z = -1.0;

			// Create a equilateral octogon
			currentPoints[0][0] = x;
			currentPoints[0][1] = y;
			currentPoints[0][2] = z;

			currentPoints[1][0] = x - circumference;
			currentPoints[1][1] = y;
			currentPoints[1][2] = z - circumference;

			currentPoints[2][0] = x - circumference;
			currentPoints[2][1] = y;
			currentPoints[2][2] = z - circumference * 2;

			currentPoints[3][0] = x;
			currentPoints[3][1] = y;
			currentPoints[3][2] = z - circumference * 3;

			currentPoints[4][0] = x + circumference;
			currentPoints[4][1] = y;
			currentPoints[4][2] = z - circumference * 3;

			currentPoints[5][0] = x + circumference * 2;
			currentPoints[5][1] = y;
			currentPoints[5][2] = z - circumference * 2;

			currentPoints[6][0] = x + circumference * 2;
			currentPoints[6][1] = y;
			currentPoints[6][2] = z - circumference;

			currentPoints[7][0] = x + circumference;
			currentPoints[7][1] = y;
			currentPoints[7][2] = z;
		}

		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();

		if (parentID.equals("OrbicularisOculiMuscle:01")) {
			int nMaxSegs = 6;
			for (int numSegs = 0; numSegs < nMaxSegs; numSegs++) {

				// Create a place for an instruction
				BioMightInstruction bioInstruct = new BioMightInstruction();

				if (numSegs == 0) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 1) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 2) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 3) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 4) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 5) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 6) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 7) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
				}

				// Add the instruction into the instruction set
				bioMightInstructSet.addElement(bioInstruct);
			}

		} else if (parentID.equals("OrbicularisOculiMuscle:02")) {
			int nMaxSegs = 6;
			for (int numSegs = 0; numSegs < nMaxSegs; numSegs++) {

				// Create a place for an instruction
				BioMightInstruction bioInstruct = new BioMightInstruction();

				if (numSegs == 0) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 1) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 2) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 3) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 4) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 5) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 6) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 7) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
				}

				// Add the instruction into the instruction set
				bioMightInstructSet.addElement(bioInstruct);
			}

		}

		// Generate the OrbicularisOculiMuscle	
		// generateComponentRows(startID, componentType, componentName,
		// componentID, currentPoints, bioMightInstructSet);
		// System.out.println("Generated the Rows for OrbicularisOculiMuscleTissue	: "
		// + componentID + "   parent: " + parentID + "   " + componentType);

		return returnCode;
	}
	
	
	
	
	/***************************************************************************************
	 * GENERATE PRONATOR TERES MUSCLE 
	 * 
	 * This generates the PronatorTeresMuscle Muscle 
	 * 
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/

	public int generatePronatorTeresMuscle(String startID,
			String componentType, String componentName, String componentID,
			String parentID, double[][] currentPoints) throws DataException,
			DataSecurityException {
		System.out.println("Generat PronatorTeresMuscle");

		int bodyID = 1;
		int projectID = 1;
		String vertices = "";

		ArrayList mySqlList = new ArrayList();
		int returnCode = 0;

		// We can generate the PronatorTeresMuscle	
		if (currentPoints == null) {
			double circumference = 0.125;

			double x = -8.0;
			double y = -10.0;
			double z = -1.0;

			// Create a equilateral octogon
			currentPoints[0][0] = x;
			currentPoints[0][1] = y;
			currentPoints[0][2] = z;

			currentPoints[1][0] = x - circumference;
			currentPoints[1][1] = y;
			currentPoints[1][2] = z - circumference;

			currentPoints[2][0] = x - circumference;
			currentPoints[2][1] = y;
			currentPoints[2][2] = z - circumference * 2;

			currentPoints[3][0] = x;
			currentPoints[3][1] = y;
			currentPoints[3][2] = z - circumference * 3;

			currentPoints[4][0] = x + circumference;
			currentPoints[4][1] = y;
			currentPoints[4][2] = z - circumference * 3;

			currentPoints[5][0] = x + circumference * 2;
			currentPoints[5][1] = y;
			currentPoints[5][2] = z - circumference * 2;

			currentPoints[6][0] = x + circumference * 2;
			currentPoints[6][1] = y;
			currentPoints[6][2] = z - circumference;

			currentPoints[7][0] = x + circumference;
			currentPoints[7][1] = y;
			currentPoints[7][2] = z;
		}

		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();

		if (parentID.equals("PronatorTeresMuscle:01")) {
			int nMaxSegs = 6;
			for (int numSegs = 0; numSegs < nMaxSegs; numSegs++) {

				// Create a place for an instruction
				BioMightInstruction bioInstruct = new BioMightInstruction();

				if (numSegs == 0) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 1) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 2) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 3) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 4) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 5) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 6) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 7) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
				}

				// Add the instruction into the instruction set
				bioMightInstructSet.addElement(bioInstruct);
			}

		} else if (parentID.equals("PronatorTeresMuscle:02")) {
			int nMaxSegs = 6;
			for (int numSegs = 0; numSegs < nMaxSegs; numSegs++) {

				// Create a place for an instruction
				BioMightInstruction bioInstruct = new BioMightInstruction();

				if (numSegs == 0) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 1) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 2) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 3) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 4) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 5) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 6) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 7) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
				}

				// Add the instruction into the instruction set
				bioMightInstructSet.addElement(bioInstruct);
			}

		}

		// Generate the PronatorTeresMuscle	
		// generateComponentRows(startID, componentType, componentName,
		// componentID, currentPoints, bioMightInstructSet);
		// System.out.println("Generated the Rows for PronatorTeresMuscleTissue	: "
		// + componentID + "   parent: " + parentID + "   " + componentType);

		return returnCode;
	}
	
	
	
	
	
	
	
	
	/***************************************************************************************
	 * GENERATE STERNO MASTOID MUSCLE 
	 * 
	 * This generates the SternoMastoid Muscle 
	 * 
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/

	public int generateSternoMastoidMuscle(String startID,
			String componentType, String componentName, String componentID,
			String parentID, double[][] currentPoints) throws DataException,
			DataSecurityException {
		System.out.println("Generat SternoMastoidMuscle");

		int bodyID = 1;
		int projectID = 1;
		String vertices = "";

		ArrayList mySqlList = new ArrayList();
		int returnCode = 0;

		// We can generate the SternoMastoidMuscle	
		if (currentPoints == null) {
			double circumference = 0.125;

			double x = -8.0;
			double y = -10.0;
			double z = -1.0;

			// Create a equilateral octogon
			currentPoints[0][0] = x;
			currentPoints[0][1] = y;
			currentPoints[0][2] = z;

			currentPoints[1][0] = x - circumference;
			currentPoints[1][1] = y;
			currentPoints[1][2] = z - circumference;

			currentPoints[2][0] = x - circumference;
			currentPoints[2][1] = y;
			currentPoints[2][2] = z - circumference * 2;

			currentPoints[3][0] = x;
			currentPoints[3][1] = y;
			currentPoints[3][2] = z - circumference * 3;

			currentPoints[4][0] = x + circumference;
			currentPoints[4][1] = y;
			currentPoints[4][2] = z - circumference * 3;

			currentPoints[5][0] = x + circumference * 2;
			currentPoints[5][1] = y;
			currentPoints[5][2] = z - circumference * 2;

			currentPoints[6][0] = x + circumference * 2;
			currentPoints[6][1] = y;
			currentPoints[6][2] = z - circumference;

			currentPoints[7][0] = x + circumference;
			currentPoints[7][1] = y;
			currentPoints[7][2] = z;
		}

		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();

		if (parentID.equals("SternoMastoidMuscle:01")) {
			int nMaxSegs = 6;
			for (int numSegs = 0; numSegs < nMaxSegs; numSegs++) {

				// Create a place for an instruction
				BioMightInstruction bioInstruct = new BioMightInstruction();

				if (numSegs == 0) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 1) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 2) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 3) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 4) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 5) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 6) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 7) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
				}

				// Add the instruction into the instruction set
				bioMightInstructSet.addElement(bioInstruct);
			}

		} else if (parentID.equals("SternoMastoidMuscle:02")) {
			int nMaxSegs = 6;
			for (int numSegs = 0; numSegs < nMaxSegs; numSegs++) {

				// Create a place for an instruction
				BioMightInstruction bioInstruct = new BioMightInstruction();

				if (numSegs == 0) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 1) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 2) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 3) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 4) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 5) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 6) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 7) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
				}

				// Add the instruction into the instruction set
				bioMightInstructSet.addElement(bioInstruct);
			}

		}

		// Generate the SternoMastoidMuscle	
		// generateComponentRows(startID, componentType, componentName,
		// componentID, currentPoints, bioMightInstructSet);
		// System.out.println("Generated the Rows for SternoMastoidMuscleTissue	: "
		// + componentID + "   parent: " + parentID + "   " + componentType);

		return returnCode;
	}
	
	
	
	
	
	
	
	
	/***************************************************************************************
	 * GENERATE STERNO THYRIOD MUSCLE 
	 * 
	 * This generates the SternoThyroid Muscle 
	 * 
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/

	public int generateSternoThyroidMuscle(String startID,
			String componentType, String componentName, String componentID,
			String parentID, double[][] currentPoints) throws DataException,
			DataSecurityException {
		System.out.println("Generat SternoThyroidMuscle");

		int bodyID = 1;
		int projectID = 1;
		String vertices = "";

		ArrayList mySqlList = new ArrayList();
		int returnCode = 0;

		// We can generate the SternoThyroidMuscle	
		if (currentPoints == null) {
			double circumference = 0.125;

			double x = -8.0;
			double y = -10.0;
			double z = -1.0;

			// Create a equilateral octogon
			currentPoints[0][0] = x;
			currentPoints[0][1] = y;
			currentPoints[0][2] = z;

			currentPoints[1][0] = x - circumference;
			currentPoints[1][1] = y;
			currentPoints[1][2] = z - circumference;

			currentPoints[2][0] = x - circumference;
			currentPoints[2][1] = y;
			currentPoints[2][2] = z - circumference * 2;

			currentPoints[3][0] = x;
			currentPoints[3][1] = y;
			currentPoints[3][2] = z - circumference * 3;

			currentPoints[4][0] = x + circumference;
			currentPoints[4][1] = y;
			currentPoints[4][2] = z - circumference * 3;

			currentPoints[5][0] = x + circumference * 2;
			currentPoints[5][1] = y;
			currentPoints[5][2] = z - circumference * 2;

			currentPoints[6][0] = x + circumference * 2;
			currentPoints[6][1] = y;
			currentPoints[6][2] = z - circumference;

			currentPoints[7][0] = x + circumference;
			currentPoints[7][1] = y;
			currentPoints[7][2] = z;
		}

		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();

		if (parentID.equals("SternoThyroidMuscle:01")) {
			int nMaxSegs = 6;
			for (int numSegs = 0; numSegs < nMaxSegs; numSegs++) {

				// Create a place for an instruction
				BioMightInstruction bioInstruct = new BioMightInstruction();

				if (numSegs == 0) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 1) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 2) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 3) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 4) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 5) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 6) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 7) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
				}

				// Add the instruction into the instruction set
				bioMightInstructSet.addElement(bioInstruct);
			}

		} else if (parentID.equals("SternoThyroidMuscle:02")) {
			int nMaxSegs = 6;
			for (int numSegs = 0; numSegs < nMaxSegs; numSegs++) {

				// Create a place for an instruction
				BioMightInstruction bioInstruct = new BioMightInstruction();

				if (numSegs == 0) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 1) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 2) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 3) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 4) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 5) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 6) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 7) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
				}

				// Add the instruction into the instruction set
				bioMightInstructSet.addElement(bioInstruct);
			}

		}

		// Generate the SternoThyroidMuscle	
		// generateComponentRows(startID, componentType, componentName,
		// componentID, currentPoints, bioMightInstructSet);
		// System.out.println("Generated the Rows for SternoThyroidMuscleTissue	: "
		// + componentID + "   parent: " + parentID + "   " + componentType);

		return returnCode;
	}
	
	
	
	
	
	
	
	
	
	/***************************************************************************************
	 * GENERATE SUB SCAPULARIS MUSCLE 
	 * 
	 * This generates the SubScapularis Muscle 
	 * 
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/

	public int generateSubScapularisMuscle(String startID,
			String componentType, String componentName, String componentID,
			String parentID, double[][] currentPoints) throws DataException,
			DataSecurityException {
		System.out.println("Generat SubScapularisMuscle");

		int bodyID = 1;
		int projectID = 1;
		String vertices = "";

		ArrayList mySqlList = new ArrayList();
		int returnCode = 0;

		// We can generate the SubScapularisMuscle	
		if (currentPoints == null) {
			double circumference = 0.125;

			double x = -8.0;
			double y = -10.0;
			double z = -1.0;

			// Create a equilateral octogon
			currentPoints[0][0] = x;
			currentPoints[0][1] = y;
			currentPoints[0][2] = z;

			currentPoints[1][0] = x - circumference;
			currentPoints[1][1] = y;
			currentPoints[1][2] = z - circumference;

			currentPoints[2][0] = x - circumference;
			currentPoints[2][1] = y;
			currentPoints[2][2] = z - circumference * 2;

			currentPoints[3][0] = x;
			currentPoints[3][1] = y;
			currentPoints[3][2] = z - circumference * 3;

			currentPoints[4][0] = x + circumference;
			currentPoints[4][1] = y;
			currentPoints[4][2] = z - circumference * 3;

			currentPoints[5][0] = x + circumference * 2;
			currentPoints[5][1] = y;
			currentPoints[5][2] = z - circumference * 2;

			currentPoints[6][0] = x + circumference * 2;
			currentPoints[6][1] = y;
			currentPoints[6][2] = z - circumference;

			currentPoints[7][0] = x + circumference;
			currentPoints[7][1] = y;
			currentPoints[7][2] = z;
		}

		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();

		if (parentID.equals("SubScapularisMuscle:01")) {
			int nMaxSegs = 6;
			for (int numSegs = 0; numSegs < nMaxSegs; numSegs++) {

				// Create a place for an instruction
				BioMightInstruction bioInstruct = new BioMightInstruction();

				if (numSegs == 0) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 1) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 2) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 3) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 4) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 5) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 6) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 7) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
				}

				// Add the instruction into the instruction set
				bioMightInstructSet.addElement(bioInstruct);
			}

		} else if (parentID.equals("SubScapularisMuscle:02")) {
			int nMaxSegs = 6;
			for (int numSegs = 0; numSegs < nMaxSegs; numSegs++) {

				// Create a place for an instruction
				BioMightInstruction bioInstruct = new BioMightInstruction();

				if (numSegs == 0) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 1) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 2) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 3) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 4) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 5) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 6) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 7) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
				}

				// Add the instruction into the instruction set
				bioMightInstructSet.addElement(bioInstruct);
			}

		}

		// Generate the SubScapularisMuscle	
		// generateComponentRows(startID, componentType, componentName,
		// componentID, currentPoints, bioMightInstructSet);
		// System.out.println("Generated the Rows for SubScapularisMuscleTissue	: "
		// + componentID + "   parent: " + parentID + "   " + componentType);

		return returnCode;
	}
	
	
	
	
	
	
	
	
	/***************************************************************************************
	 * GENERATE SUPERFICIAL CERVICAL MUSCLE 
	 * 
	 * This generates the SuperficialCervicalMuscl Muscle 
	 * 
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/

	public int generateSuperficialCervicalMuscle(String startID,
			String componentType, String componentName, String componentID,
			String parentID, double[][] currentPoints) throws DataException,
			DataSecurityException {
		System.out.println("Generat SuperficialCervicalMuscle");

		int bodyID = 1;
		int projectID = 1;
		String vertices = "";

		ArrayList mySqlList = new ArrayList();
		int returnCode = 0;

		// We can generate the SuperficialCervicalMuscle	
		if (currentPoints == null) {
			double circumference = 0.125;

			double x = -8.0;
			double y = -10.0;
			double z = -1.0;

			// Create a equilateral octogon
			currentPoints[0][0] = x;
			currentPoints[0][1] = y;
			currentPoints[0][2] = z;

			currentPoints[1][0] = x - circumference;
			currentPoints[1][1] = y;
			currentPoints[1][2] = z - circumference;

			currentPoints[2][0] = x - circumference;
			currentPoints[2][1] = y;
			currentPoints[2][2] = z - circumference * 2;

			currentPoints[3][0] = x;
			currentPoints[3][1] = y;
			currentPoints[3][2] = z - circumference * 3;

			currentPoints[4][0] = x + circumference;
			currentPoints[4][1] = y;
			currentPoints[4][2] = z - circumference * 3;

			currentPoints[5][0] = x + circumference * 2;
			currentPoints[5][1] = y;
			currentPoints[5][2] = z - circumference * 2;

			currentPoints[6][0] = x + circumference * 2;
			currentPoints[6][1] = y;
			currentPoints[6][2] = z - circumference;

			currentPoints[7][0] = x + circumference;
			currentPoints[7][1] = y;
			currentPoints[7][2] = z;
		}

		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();

		if (parentID.equals("SuperficialCervicalMuscle:01")) {
			int nMaxSegs = 6;
			for (int numSegs = 0; numSegs < nMaxSegs; numSegs++) {

				// Create a place for an instruction
				BioMightInstruction bioInstruct = new BioMightInstruction();

				if (numSegs == 0) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 1) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 2) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 3) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 4) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 5) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 6) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 7) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
				}

				// Add the instruction into the instruction set
				bioMightInstructSet.addElement(bioInstruct);
			}

		} else if (parentID.equals("SuperficialCervicalMuscle:02")) {
			int nMaxSegs = 6;
			for (int numSegs = 0; numSegs < nMaxSegs; numSegs++) {

				// Create a place for an instruction
				BioMightInstruction bioInstruct = new BioMightInstruction();

				if (numSegs == 0) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 1) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 2) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 3) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 4) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 5) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 6) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 7) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
				}

				// Add the instruction into the instruction set
				bioMightInstructSet.addElement(bioInstruct);
			}

		}

		// Generate the SuperficialCervicalMuscle	
		// generateComponentRows(startID, componentType, componentName,
		// componentID, currentPoints, bioMightInstructSet);
		// System.out.println("Generated the Rows for SuperficialCervicalMuscleTissuE: "
		// + componentID + "   parent: " + parentID + "   " + componentType);

		return returnCode;
	}
	
	
	
	/***************************************************************************************
	 * GENERATE SUPERFICIAL FACIA MUSCLE 
	 * 
	 * This generates the SuperficialCervicalMuscl Muscle 
	 * 
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/

	public int generateSuperficialFasciaMuscle(String startID,
			String componentType, String componentName, String componentID,
			String parentID, double[][] currentPoints) throws DataException,
			DataSecurityException {
		System.out.println("Generat SuperficialFasciaMuscle");

		int bodyID = 1;
		int projectID = 1;
		String vertices = "";

		ArrayList mySqlList = new ArrayList();
		int returnCode = 0;

		// We can generate the SuperficialFasciaMuscle	
		if (currentPoints == null) {
			double circumference = 0.125;

			double x = -8.0;
			double y = -10.0;
			double z = -1.0;

			// Create a equilateral octogon
			currentPoints[0][0] = x;
			currentPoints[0][1] = y;
			currentPoints[0][2] = z;

			currentPoints[1][0] = x - circumference;
			currentPoints[1][1] = y;
			currentPoints[1][2] = z - circumference;

			currentPoints[2][0] = x - circumference;
			currentPoints[2][1] = y;
			currentPoints[2][2] = z - circumference * 2;

			currentPoints[3][0] = x;
			currentPoints[3][1] = y;
			currentPoints[3][2] = z - circumference * 3;

			currentPoints[4][0] = x + circumference;
			currentPoints[4][1] = y;
			currentPoints[4][2] = z - circumference * 3;

			currentPoints[5][0] = x + circumference * 2;
			currentPoints[5][1] = y;
			currentPoints[5][2] = z - circumference * 2;

			currentPoints[6][0] = x + circumference * 2;
			currentPoints[6][1] = y;
			currentPoints[6][2] = z - circumference;

			currentPoints[7][0] = x + circumference;
			currentPoints[7][1] = y;
			currentPoints[7][2] = z;
		}

		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();

		if (parentID.equals("SuperficialFasciaMuscle:01")) {
			int nMaxSegs = 6;
			for (int numSegs = 0; numSegs < nMaxSegs; numSegs++) {

				// Create a place for an instruction
				BioMightInstruction bioInstruct = new BioMightInstruction();

				if (numSegs == 0) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 1) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 2) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 3) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 4) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 5) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 6) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 7) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
				}

				// Add the instruction into the instruction set
				bioMightInstructSet.addElement(bioInstruct);
			}

		} else if (parentID.equals("SuperficialFasciaMuscle:02")) {
			int nMaxSegs = 6;
			for (int numSegs = 0; numSegs < nMaxSegs; numSegs++) {

				// Create a place for an instruction
				BioMightInstruction bioInstruct = new BioMightInstruction();

				if (numSegs == 0) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 1) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 2) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 3) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 4) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 5) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 6) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 7) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
				}

				// Add the instruction into the instruction set
				bioMightInstructSet.addElement(bioInstruct);
			}

		}

		// Generate the SuperficialFasciaMuscle	
		// generateComponentRows(startID, componentType, componentName,
		// componentID, currentPoints, bioMightInstructSet);
		// System.out.println("Generated the Rows for SuperficialFasciaMuscleTissu: "
		// + componentID + "   parent: " + parentID + "   " + componentType);

		return returnCode;
	}
	
	
	
	/***************************************************************************************
	 * GENERATE SUPERFICIAL GAMELLI MUSCLE 
	 * 
	 * This generates the SuperficialCervicalMuscl Muscle 
	 * 
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/

	public int generateSuperiorGemelliMuscle(String startID,
			String componentType, String componentName, String componentID,
			String parentID, double[][] currentPoints) throws DataException,
			DataSecurityException {
		System.out.println("Generat SuperiorGemelliMuscle");

		int bodyID = 1;
		int projectID = 1;
		String vertices = "";

		ArrayList mySqlList = new ArrayList();
		int returnCode = 0;

		// We can generate the SuperiorGemelliMuscle	
		if (currentPoints == null) {
			double circumference = 0.125;

			double x = -8.0;
			double y = -10.0;
			double z = -1.0;

			// Create a equilateral octogon
			currentPoints[0][0] = x;
			currentPoints[0][1] = y;
			currentPoints[0][2] = z;

			currentPoints[1][0] = x - circumference;
			currentPoints[1][1] = y;
			currentPoints[1][2] = z - circumference;

			currentPoints[2][0] = x - circumference;
			currentPoints[2][1] = y;
			currentPoints[2][2] = z - circumference * 2;

			currentPoints[3][0] = x;
			currentPoints[3][1] = y;
			currentPoints[3][2] = z - circumference * 3;

			currentPoints[4][0] = x + circumference;
			currentPoints[4][1] = y;
			currentPoints[4][2] = z - circumference * 3;

			currentPoints[5][0] = x + circumference * 2;
			currentPoints[5][1] = y;
			currentPoints[5][2] = z - circumference * 2;

			currentPoints[6][0] = x + circumference * 2;
			currentPoints[6][1] = y;
			currentPoints[6][2] = z - circumference;

			currentPoints[7][0] = x + circumference;
			currentPoints[7][1] = y;
			currentPoints[7][2] = z;
		}

		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();

		if (parentID.equals("SuperiorGemelliMuscle:01")) {
			int nMaxSegs = 6;
			for (int numSegs = 0; numSegs < nMaxSegs; numSegs++) {

				// Create a place for an instruction
				BioMightInstruction bioInstruct = new BioMightInstruction();

				if (numSegs == 0) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 1) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 2) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 3) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 4) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 5) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 6) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 7) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
				}

				// Add the instruction into the instruction set
				bioMightInstructSet.addElement(bioInstruct);
			}

		} else if (parentID.equals("SuperiorGemelliMuscle:02")) {
			int nMaxSegs = 6;
			for (int numSegs = 0; numSegs < nMaxSegs; numSegs++) {

				// Create a place for an instruction
				BioMightInstruction bioInstruct = new BioMightInstruction();

				if (numSegs == 0) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 1) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 2) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 3) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 4) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 5) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 6) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 7) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
				}

				// Add the instruction into the instruction set
				bioMightInstructSet.addElement(bioInstruct);
			}

		}

		// Generate the SuperiorGemelliMuscle	
		// generateComponentRows(startID, componentType, componentName,
		// componentID, currentPoints, bioMightInstructSet);
		// System.out.println("Generated the Rows for SuperiorGemelliMuscle: "
		// + componentID + "   parent: " + parentID + "   " + componentType);

		return returnCode;
	}
	
		
	
	/***************************************************************************************
	 * GENERATE SUPERIOUS MUSCLE 
	 * 
	 * This generates the SuperficialCervicalMuscl Muscle 
	 * 
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/

	public int generateSuperiorisMuscle(String startID,
			String componentType, String componentName, String componentID,
			String parentID, double[][] currentPoints) throws DataException,
			DataSecurityException {
		System.out.println("Generat SuperiorisMuscle");

		int bodyID = 1;
		int projectID = 1;
		String vertices = "";

		ArrayList mySqlList = new ArrayList();
		int returnCode = 0;

		// We can generate the SuperiorisMuscle	
		if (currentPoints == null) {
			double circumference = 0.125;

			double x = -8.0;
			double y = -10.0;
			double z = -1.0;

			// Create a equilateral octogon
			currentPoints[0][0] = x;
			currentPoints[0][1] = y;
			currentPoints[0][2] = z;

			currentPoints[1][0] = x - circumference;
			currentPoints[1][1] = y;
			currentPoints[1][2] = z - circumference;

			currentPoints[2][0] = x - circumference;
			currentPoints[2][1] = y;
			currentPoints[2][2] = z - circumference * 2;

			currentPoints[3][0] = x;
			currentPoints[3][1] = y;
			currentPoints[3][2] = z - circumference * 3;

			currentPoints[4][0] = x + circumference;
			currentPoints[4][1] = y;
			currentPoints[4][2] = z - circumference * 3;

			currentPoints[5][0] = x + circumference * 2;
			currentPoints[5][1] = y;
			currentPoints[5][2] = z - circumference * 2;

			currentPoints[6][0] = x + circumference * 2;
			currentPoints[6][1] = y;
			currentPoints[6][2] = z - circumference;

			currentPoints[7][0] = x + circumference;
			currentPoints[7][1] = y;
			currentPoints[7][2] = z;
		}

		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();

		if (parentID.equals("SuperiorisMuscle:01")) {
			int nMaxSegs = 6;
			for (int numSegs = 0; numSegs < nMaxSegs; numSegs++) {

				// Create a place for an instruction
				BioMightInstruction bioInstruct = new BioMightInstruction();

				if (numSegs == 0) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 1) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 2) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 3) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 4) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 5) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 6) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 7) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
				}

				// Add the instruction into the instruction set
				bioMightInstructSet.addElement(bioInstruct);
			}

		} else if (parentID.equals("SuperiorisMuscle:02")) {
			int nMaxSegs = 6;
			for (int numSegs = 0; numSegs < nMaxSegs; numSegs++) {

				// Create a place for an instruction
				BioMightInstruction bioInstruct = new BioMightInstruction();

				if (numSegs == 0) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 1) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 2) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 3) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 4) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 5) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 6) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 7) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
				}

				// Add the instruction into the instruction set
				bioMightInstructSet.addElement(bioInstruct);
			}

		}

		// Generate the SuperiorisMuscle	
		// generateComponentRows(startID, componentType, componentName,
		// componentID, currentPoints, bioMightInstructSet);
		// System.out.println("Generated the Rows for SuperiorisMuscleTissue: "
		// + componentID + "   parent: " + parentID + "   " + componentType);

		return returnCode;
	}	
	
	
	/***************************************************************************************
	 * GENERATE TERES MAJOR MUSCLE 
	 * 
	 * This generates the SuperficialCervicalMuscl Muscle 
	 * 
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/

	public int generateTeresMajorMuscle(String startID,
			String componentType, String componentName, String componentID,
			String parentID, double[][] currentPoints) throws DataException,
			DataSecurityException {
		System.out.println("Generat TeresMajorMuscle");

		int bodyID = 1;
		int projectID = 1;
		String vertices = "";

		ArrayList mySqlList = new ArrayList();
		int returnCode = 0;

		// We can generate the SuperiorisMuscle	
		if (currentPoints == null) {
			double circumference = 0.125;

			double x = -8.0;
			double y = -10.0;
			double z = -1.0;

			// Create a equilateral octogon
			currentPoints[0][0] = x;
			currentPoints[0][1] = y;
			currentPoints[0][2] = z;

			currentPoints[1][0] = x - circumference;
			currentPoints[1][1] = y;
			currentPoints[1][2] = z - circumference;

			currentPoints[2][0] = x - circumference;
			currentPoints[2][1] = y;
			currentPoints[2][2] = z - circumference * 2;

			currentPoints[3][0] = x;
			currentPoints[3][1] = y;
			currentPoints[3][2] = z - circumference * 3;

			currentPoints[4][0] = x + circumference;
			currentPoints[4][1] = y;
			currentPoints[4][2] = z - circumference * 3;

			currentPoints[5][0] = x + circumference * 2;
			currentPoints[5][1] = y;
			currentPoints[5][2] = z - circumference * 2;

			currentPoints[6][0] = x + circumference * 2;
			currentPoints[6][1] = y;
			currentPoints[6][2] = z - circumference;

			currentPoints[7][0] = x + circumference;
			currentPoints[7][1] = y;
			currentPoints[7][2] = z;
		}

		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();

		if (parentID.equals("TeresMajorMuscle:01")) {
			int nMaxSegs = 6;
			for (int numSegs = 0; numSegs < nMaxSegs; numSegs++) {

				// Create a place for an instruction
				BioMightInstruction bioInstruct = new BioMightInstruction();

				if (numSegs == 0) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 1) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 2) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 3) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 4) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 5) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 6) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 7) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
				}

				// Add the instruction into the instruction set
				bioMightInstructSet.addElement(bioInstruct);
			}

		} else if (parentID.equals("TeresMajorMuscle:02")) {
			int nMaxSegs = 6;
			for (int numSegs = 0; numSegs < nMaxSegs; numSegs++) {

				// Create a place for an instruction
				BioMightInstruction bioInstruct = new BioMightInstruction();

				if (numSegs == 0) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 1) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 2) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 3) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 4) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 5) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 6) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 7) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
				}

				// Add the instruction into the instruction set
				bioMightInstructSet.addElement(bioInstruct);
			}

		}

		// Generate the TeresMajorMuscle	
		// generateComponentRows(startID, componentType, componentName,
		// componentID, currentPoints, bioMightInstructSet);
		// System.out.println("Generated the Rows for TeresMajorMuscle: "
		// + componentID + "   parent: " + parentID + "   " + componentType);

		return returnCode;
	}	
	
	
	/***************************************************************************************
	 * GENERATE THYROHYOID MUSCLE 
	 * 
	 * This generates the SuperficialCervicalMuscl Muscle 
	 * 
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/

	public int generateThyroHyoidMuscle(String startID,
			String componentType, String componentName, String componentID,
			String parentID, double[][] currentPoints) throws DataException,
			DataSecurityException {
		System.out.println("Generat ThyroHyoidMuscle");

		int bodyID = 1;
		int projectID = 1;
		String vertices = "";

		ArrayList mySqlList = new ArrayList();
		int returnCode = 0;

		// We can generate the ThyroHyoidMuscle	
		if (currentPoints == null) {
			double circumference = 0.125;

			double x = -8.0;
			double y = -10.0;
			double z = -1.0;

			// Create a equilateral octogon
			currentPoints[0][0] = x;
			currentPoints[0][1] = y;
			currentPoints[0][2] = z;

			currentPoints[1][0] = x - circumference;
			currentPoints[1][1] = y;
			currentPoints[1][2] = z - circumference;

			currentPoints[2][0] = x - circumference;
			currentPoints[2][1] = y;
			currentPoints[2][2] = z - circumference * 2;

			currentPoints[3][0] = x;
			currentPoints[3][1] = y;
			currentPoints[3][2] = z - circumference * 3;

			currentPoints[4][0] = x + circumference;
			currentPoints[4][1] = y;
			currentPoints[4][2] = z - circumference * 3;

			currentPoints[5][0] = x + circumference * 2;
			currentPoints[5][1] = y;
			currentPoints[5][2] = z - circumference * 2;

			currentPoints[6][0] = x + circumference * 2;
			currentPoints[6][1] = y;
			currentPoints[6][2] = z - circumference;

			currentPoints[7][0] = x + circumference;
			currentPoints[7][1] = y;
			currentPoints[7][2] = z;
		}

		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();

		if (parentID.equals("ThyroHyoidMuscle:01")) {
			int nMaxSegs = 6;
			for (int numSegs = 0; numSegs < nMaxSegs; numSegs++) {

				// Create a place for an instruction
				BioMightInstruction bioInstruct = new BioMightInstruction();

				if (numSegs == 0) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 1) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 2) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 3) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 4) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 5) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 6) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 7) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
				}

				// Add the instruction into the instruction set
				bioMightInstructSet.addElement(bioInstruct);
			}

		} else if (parentID.equals("ThyroHyoidMuscle:02")) {
			int nMaxSegs = 6;
			for (int numSegs = 0; numSegs < nMaxSegs; numSegs++) {

				// Create a place for an instruction
				BioMightInstruction bioInstruct = new BioMightInstruction();

				if (numSegs == 0) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 1) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 2) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 3) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 4) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 5) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 6) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 7) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
				}

				// Add the instruction into the instruction set
				bioMightInstructSet.addElement(bioInstruct);
			}

		}

		// Generate the ThyroHyoidMuscle	
		// generateComponentRows(startID, componentType, componentName,
		// componentID, currentPoints, bioMightInstructSet);
		// System.out.println("Generated the Rows for ThyroHyoidMuscle: "
		// + componentID + "   parent: " + parentID + "   " + componentType);

		return returnCode;
	}	
	
	
	
	/***************************************************************************************
	 * GENERATE TIBIAL POSTERIOR MUSCLE 
	 * 
	 * This generates the TibialisPosteriorMuscle Muscle 
	 * 
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/

	public int generateTibialisPosteriorMuscle(String startID,
			String componentType, String componentName, String componentID,
			String parentID, double[][] currentPoints) throws DataException,
			DataSecurityException {
		System.out.println("Generat TibialisPosteriorMuscle");

		int bodyID = 1;
		int projectID = 1;
		String vertices = "";

		ArrayList mySqlList = new ArrayList();
		int returnCode = 0;

		// We can generate the TibialisPosteriorMuscle	
		if (currentPoints == null) {
			double circumference = 0.125;

			double x = -8.0;
			double y = -10.0;
			double z = -1.0;

			// Create a equilateral octogon
			currentPoints[0][0] = x;
			currentPoints[0][1] = y;
			currentPoints[0][2] = z;

			currentPoints[1][0] = x - circumference;
			currentPoints[1][1] = y;
			currentPoints[1][2] = z - circumference;

			currentPoints[2][0] = x - circumference;
			currentPoints[2][1] = y;
			currentPoints[2][2] = z - circumference * 2;

			currentPoints[3][0] = x;
			currentPoints[3][1] = y;
			currentPoints[3][2] = z - circumference * 3;

			currentPoints[4][0] = x + circumference;
			currentPoints[4][1] = y;
			currentPoints[4][2] = z - circumference * 3;

			currentPoints[5][0] = x + circumference * 2;
			currentPoints[5][1] = y;
			currentPoints[5][2] = z - circumference * 2;

			currentPoints[6][0] = x + circumference * 2;
			currentPoints[6][1] = y;
			currentPoints[6][2] = z - circumference;

			currentPoints[7][0] = x + circumference;
			currentPoints[7][1] = y;
			currentPoints[7][2] = z;
		}

		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();

		if (parentID.equals("TibialisPosteriorMuscle:01")) {
			int nMaxSegs = 6;
			for (int numSegs = 0; numSegs < nMaxSegs; numSegs++) {

				// Create a place for an instruction
				BioMightInstruction bioInstruct = new BioMightInstruction();

				if (numSegs == 0) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 1) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 2) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 3) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 4) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 5) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 6) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 7) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
				}

				// Add the instruction into the instruction set
				bioMightInstructSet.addElement(bioInstruct);
			}

		} else if (parentID.equals("TibialisPosteriorMuscle:02")) {
			int nMaxSegs = 6;
			for (int numSegs = 0; numSegs < nMaxSegs; numSegs++) {

				// Create a place for an instruction
				BioMightInstruction bioInstruct = new BioMightInstruction();

				if (numSegs == 0) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 1) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 2) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 3) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 4) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 5) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 6) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 7) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
				}

				// Add the instruction into the instruction set
				bioMightInstructSet.addElement(bioInstruct);
			}

		}

		// Generate the TibialisPosteriorMuscle	
		// generateComponentRows(startID, componentType, componentName,
		// componentID, currentPoints, bioMightInstructSet);
		// System.out.println("Generated the Rows for TibialisPosteriorMuscle: "
		// + componentID + "   parent: " + parentID + "   " + componentType);

		return returnCode;
	}	
	
		
	
	
	/***************************************************************************************
	 * GENERATE PTERYGOIDEUS EXTERNEUS MUSCLE 
	 * 
	 * This generates the TibialisPosteriorMuscle Muscle 
	 * 
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/

	public int generatePterygoideusExternusMuscle(String startID,
			String componentType, String componentName, String componentID,
			String parentID, double[][] currentPoints) throws DataException,
			DataSecurityException {
		System.out.println("Generat PterygoideusExternusMuscle");

		int bodyID = 1;
		int projectID = 1;
		String vertices = "";

		ArrayList mySqlList = new ArrayList();
		int returnCode = 0;

		// We can generate the PterygoideusExternusMuscle	
		if (currentPoints == null) {
			double circumference = 0.125;

			double x = -8.0;
			double y = -10.0;
			double z = -1.0;

			// Create a equilateral octogon
			currentPoints[0][0] = x;
			currentPoints[0][1] = y;
			currentPoints[0][2] = z;

			currentPoints[1][0] = x - circumference;
			currentPoints[1][1] = y;
			currentPoints[1][2] = z - circumference;

			currentPoints[2][0] = x - circumference;
			currentPoints[2][1] = y;
			currentPoints[2][2] = z - circumference * 2;

			currentPoints[3][0] = x;
			currentPoints[3][1] = y;
			currentPoints[3][2] = z - circumference * 3;

			currentPoints[4][0] = x + circumference;
			currentPoints[4][1] = y;
			currentPoints[4][2] = z - circumference * 3;

			currentPoints[5][0] = x + circumference * 2;
			currentPoints[5][1] = y;
			currentPoints[5][2] = z - circumference * 2;

			currentPoints[6][0] = x + circumference * 2;
			currentPoints[6][1] = y;
			currentPoints[6][2] = z - circumference;

			currentPoints[7][0] = x + circumference;
			currentPoints[7][1] = y;
			currentPoints[7][2] = z;
		}

		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();

		if (parentID.equals("PterygoideusExternusMuscle:01")) {
			int nMaxSegs = 6;
			for (int numSegs = 0; numSegs < nMaxSegs; numSegs++) {

				// Create a place for an instruction
				BioMightInstruction bioInstruct = new BioMightInstruction();

				if (numSegs == 0) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 1) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 2) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 3) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 4) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 5) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 6) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 7) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
				}

				// Add the instruction into the instruction set
				bioMightInstructSet.addElement(bioInstruct);
			}

		} else if (parentID.equals("PterygoideusExternusMuscle:02")) {
			int nMaxSegs = 6;
			for (int numSegs = 0; numSegs < nMaxSegs; numSegs++) {

				// Create a place for an instruction
				BioMightInstruction bioInstruct = new BioMightInstruction();

				if (numSegs == 0) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 1) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 2) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 3) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 4) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 5) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 6) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 7) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
				}

				// Add the instruction into the instruction set
				bioMightInstructSet.addElement(bioInstruct);
			}

		}

		// Generate the PterygoideusExternusMuscle	
		// generateComponentRows(startID, componentType, componentName,
		// componentID, currentPoints, bioMightInstructSet);
		// System.out.println("Generated the Rows for PterygoideusExternusMuscle: "
		// + componentID + "   parent: " + parentID + "   " + componentType);

		return returnCode;
	}	
	
			
	
	
	/***************************************************************************************
	 * GENERATE QUADRATUS LABII INFERIORIS MUSCLE 
	 * 
	 * This generates the QuadratusLabiiInferiorisMuscle 
	 * 
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/

	public int generateQuadratusLabiiInferiorisMuscle(String startID,
			String componentType, String componentName, String componentID,
			String parentID, double[][] currentPoints) throws DataException,
			DataSecurityException {
		System.out.println("Generat QuadratusLabiiInferiorisMuscle");

		int bodyID = 1;
		int projectID = 1;
		String vertices = "";

		ArrayList mySqlList = new ArrayList();
		int returnCode = 0;

		// We can generate the QuadratusLabiiInferiorisMuscle	
		if (currentPoints == null) {
			double circumference = 0.125;

			double x = -8.0;
			double y = -10.0;
			double z = -1.0;

			// Create a equilateral octogon
			currentPoints[0][0] = x;
			currentPoints[0][1] = y;
			currentPoints[0][2] = z;

			currentPoints[1][0] = x - circumference;
			currentPoints[1][1] = y;
			currentPoints[1][2] = z - circumference;

			currentPoints[2][0] = x - circumference;
			currentPoints[2][1] = y;
			currentPoints[2][2] = z - circumference * 2;

			currentPoints[3][0] = x;
			currentPoints[3][1] = y;
			currentPoints[3][2] = z - circumference * 3;

			currentPoints[4][0] = x + circumference;
			currentPoints[4][1] = y;
			currentPoints[4][2] = z - circumference * 3;

			currentPoints[5][0] = x + circumference * 2;
			currentPoints[5][1] = y;
			currentPoints[5][2] = z - circumference * 2;

			currentPoints[6][0] = x + circumference * 2;
			currentPoints[6][1] = y;
			currentPoints[6][2] = z - circumference;

			currentPoints[7][0] = x + circumference;
			currentPoints[7][1] = y;
			currentPoints[7][2] = z;
		}

		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();

		if (parentID.equals("QuadratusLabiiInferiorisMuscle:01")) {
			int nMaxSegs = 6;
			for (int numSegs = 0; numSegs < nMaxSegs; numSegs++) {

				// Create a place for an instruction
				BioMightInstruction bioInstruct = new BioMightInstruction();

				if (numSegs == 0) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 1) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 2) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 3) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 4) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 5) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 6) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 7) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
				}

				// Add the instruction into the instruction set
				bioMightInstructSet.addElement(bioInstruct);
			}

		} else if (parentID.equals("QuadratusLabiiInferiorisMuscle:02")) {
			int nMaxSegs = 6;
			for (int numSegs = 0; numSegs < nMaxSegs; numSegs++) {

				// Create a place for an instruction
				BioMightInstruction bioInstruct = new BioMightInstruction();

				if (numSegs == 0) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 1) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 2) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 3) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 4) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 5) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 6) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 7) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
				}

				// Add the instruction into the instruction set
				bioMightInstructSet.addElement(bioInstruct);
			}

		}

		// Generate the QuadratusLabiiInferiorisMuscle	
		// generateComponentRows(startID, componentType, componentName,
		// componentID, currentPoints, bioMightInstructSet);
		// System.out.println("Generated the Rows for QuadratusLabiiInferiorisMuscle: "
		// + componentID + "   parent: " + parentID + "   " + componentType);

		return returnCode;
	}	
	
	/***************************************************************************************
	 * GENERATE RECTUR CAPITIS LATERALIS MUSCLE 
	 * 
	 * This generates the RectusCapitisLateralisMuscle 
	 * 
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/

	public int generateRectusCapitisLateralisMuscle(String startID,
			String componentType, String componentName, String componentID,
			String parentID, double[][] currentPoints) throws DataException,
			DataSecurityException {
		System.out.println("Generat RectusCapitisLateralisMuscle");

		int bodyID = 1;
		int projectID = 1;
		String vertices = "";

		ArrayList mySqlList = new ArrayList();
		int returnCode = 0;

		// We can generate the RectusCapitisLateralisMuscle	
		if (currentPoints == null) {
			double circumference = 0.125;

			double x = -8.0;
			double y = -10.0;
			double z = -1.0;

			// Create a equilateral octogon
			currentPoints[0][0] = x;
			currentPoints[0][1] = y;
			currentPoints[0][2] = z;

			currentPoints[1][0] = x - circumference;
			currentPoints[1][1] = y;
			currentPoints[1][2] = z - circumference;

			currentPoints[2][0] = x - circumference;
			currentPoints[2][1] = y;
			currentPoints[2][2] = z - circumference * 2;

			currentPoints[3][0] = x;
			currentPoints[3][1] = y;
			currentPoints[3][2] = z - circumference * 3;

			currentPoints[4][0] = x + circumference;
			currentPoints[4][1] = y;
			currentPoints[4][2] = z - circumference * 3;

			currentPoints[5][0] = x + circumference * 2;
			currentPoints[5][1] = y;
			currentPoints[5][2] = z - circumference * 2;

			currentPoints[6][0] = x + circumference * 2;
			currentPoints[6][1] = y;
			currentPoints[6][2] = z - circumference;

			currentPoints[7][0] = x + circumference;
			currentPoints[7][1] = y;
			currentPoints[7][2] = z;
		}

		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();

		if (parentID.equals("RectusCapitisLateralisMuscle:01")) {
			int nMaxSegs = 6;
			for (int numSegs = 0; numSegs < nMaxSegs; numSegs++) {

				// Create a place for an instruction
				BioMightInstruction bioInstruct = new BioMightInstruction();

				if (numSegs == 0) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 1) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 2) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 3) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 4) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 5) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 6) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 7) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
				}

				// Add the instruction into the instruction set
				bioMightInstructSet.addElement(bioInstruct);
			}

		} else if (parentID.equals("RectusCapitisLateralisMuscle:02")) {
			int nMaxSegs = 6;
			for (int numSegs = 0; numSegs < nMaxSegs; numSegs++) {

				// Create a place for an instruction
				BioMightInstruction bioInstruct = new BioMightInstruction();

				if (numSegs == 0) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 1) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 2) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 3) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 4) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 5) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 6) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 7) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
				}

				// Add the instruction into the instruction set
				bioMightInstructSet.addElement(bioInstruct);
			}

		}

		// Generate the RectusCapitisLateralisMuscle	
		// generateComponentRows(startID, componentType, componentName,
		// componentID, currentPoints, bioMightInstructSet);
		// System.out.println("Generated the Rows for RectusCapitisLateralisMuscle: "
		// + componentID + "   parent: " + parentID + "   " + componentType);

		return returnCode;
	}	
	
	
	
	/***************************************************************************************
	 * GENERATE Constants.SCALENUS MINIMUS MUSCLE 
	 * 
	 * This generates the ScalenusMinimusMuscle 
	 * 
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/

	public int generateScalenusMinimusMuscle(String startID,
			String componentType, String componentName, String componentID,
			String parentID, double[][] currentPoints) throws DataException,
			DataSecurityException {
		System.out.println("Generat ScalenusMinimusMuscle");

		int bodyID = 1;
		int projectID = 1;
		String vertices = "";

		ArrayList mySqlList = new ArrayList();
		int returnCode = 0;

		// We can generate the ScalenusMinimusMuscle	
		if (currentPoints == null) {
			double circumference = 0.125;

			double x = -8.0;
			double y = -10.0;
			double z = -1.0;

			// Create a equilateral octogon
			currentPoints[0][0] = x;
			currentPoints[0][1] = y;
			currentPoints[0][2] = z;

			currentPoints[1][0] = x - circumference;
			currentPoints[1][1] = y;
			currentPoints[1][2] = z - circumference;

			currentPoints[2][0] = x - circumference;
			currentPoints[2][1] = y;
			currentPoints[2][2] = z - circumference * 2;

			currentPoints[3][0] = x;
			currentPoints[3][1] = y;
			currentPoints[3][2] = z - circumference * 3;

			currentPoints[4][0] = x + circumference;
			currentPoints[4][1] = y;
			currentPoints[4][2] = z - circumference * 3;

			currentPoints[5][0] = x + circumference * 2;
			currentPoints[5][1] = y;
			currentPoints[5][2] = z - circumference * 2;

			currentPoints[6][0] = x + circumference * 2;
			currentPoints[6][1] = y;
			currentPoints[6][2] = z - circumference;

			currentPoints[7][0] = x + circumference;
			currentPoints[7][1] = y;
			currentPoints[7][2] = z;
		}

		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();

		if (parentID.equals("ScalenusMinimusMuscle:01")) {
			int nMaxSegs = 6;
			for (int numSegs = 0; numSegs < nMaxSegs; numSegs++) {

				// Create a place for an instruction
				BioMightInstruction bioInstruct = new BioMightInstruction();

				if (numSegs == 0) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 1) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 2) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 3) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 4) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 5) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 6) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 7) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
				}

				// Add the instruction into the instruction set
				bioMightInstructSet.addElement(bioInstruct);
			}

		} else if (parentID.equals("ScalenusMinimusMuscle:02")) {
			int nMaxSegs = 6;
			for (int numSegs = 0; numSegs < nMaxSegs; numSegs++) {

				// Create a place for an instruction
				BioMightInstruction bioInstruct = new BioMightInstruction();

				if (numSegs == 0) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 1) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 2) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 3) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 4) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 5) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 6) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 7) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
				}

				// Add the instruction into the instruction set
				bioMightInstructSet.addElement(bioInstruct);
			}

		}

		// Generate the ScalenusMinimusMuscle	
		// generateComponentRows(startID, componentType, componentName,
		// componentID, currentPoints, bioMightInstructSet);
		// System.out.println("Generated the Rows for ScalenusMinimusMuscle: "
		// + componentID + "   parent: " + parentID + "   " + componentType);

		return returnCode;
	}	

	
	
	
	/***************************************************************************************
	 * GENERATE Constants.SCALENUS POSTERIOR MUSCLE 
	 * 
	 * This generates the ScalenusPosteriorMuscle 
	 * 
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/

	public int generateScalenusPosteriorMuscle(String startID,
			String componentType, String componentName, String componentID,
			String parentID, double[][] currentPoints) throws DataException,
			DataSecurityException {
		System.out.println("Generat ScalenusPosteriorMuscle");

		int bodyID = 1;
		int projectID = 1;
		String vertices = "";

		ArrayList mySqlList = new ArrayList();
		int returnCode = 0;

		// We can generate the ScalenusPosteriorMuscle	
		if (currentPoints == null) {
			double circumference = 0.125;

			double x = -8.0;
			double y = -10.0;
			double z = -1.0;

			// Create a equilateral octogon
			currentPoints[0][0] = x;
			currentPoints[0][1] = y;
			currentPoints[0][2] = z;

			currentPoints[1][0] = x - circumference;
			currentPoints[1][1] = y;
			currentPoints[1][2] = z - circumference;

			currentPoints[2][0] = x - circumference;
			currentPoints[2][1] = y;
			currentPoints[2][2] = z - circumference * 2;

			currentPoints[3][0] = x;
			currentPoints[3][1] = y;
			currentPoints[3][2] = z - circumference * 3;

			currentPoints[4][0] = x + circumference;
			currentPoints[4][1] = y;
			currentPoints[4][2] = z - circumference * 3;

			currentPoints[5][0] = x + circumference * 2;
			currentPoints[5][1] = y;
			currentPoints[5][2] = z - circumference * 2;

			currentPoints[6][0] = x + circumference * 2;
			currentPoints[6][1] = y;
			currentPoints[6][2] = z - circumference;

			currentPoints[7][0] = x + circumference;
			currentPoints[7][1] = y;
			currentPoints[7][2] = z;
		}

		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();

		if (parentID.equals("ScalenusPosteriorMuscle:01")) {
			int nMaxSegs = 6;
			for (int numSegs = 0; numSegs < nMaxSegs; numSegs++) {

				// Create a place for an instruction
				BioMightInstruction bioInstruct = new BioMightInstruction();

				if (numSegs == 0) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 1) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 2) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 3) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 4) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 5) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 6) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 7) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
				}

				// Add the instruction into the instruction set
				bioMightInstructSet.addElement(bioInstruct);
			}

		} else if (parentID.equals("ScalenusPosteriorMuscle:02")) {
			int nMaxSegs = 6;
			for (int numSegs = 0; numSegs < nMaxSegs; numSegs++) {

				// Create a place for an instruction
				BioMightInstruction bioInstruct = new BioMightInstruction();

				if (numSegs == 0) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 1) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 2) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 3) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 4) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 5) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 6) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 7) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
				}

				// Add the instruction into the instruction set
				bioMightInstructSet.addElement(bioInstruct);
			}

		}

		// Generate the ScalenusPosteriorMuscle	
		// generateComponentRows(startID, componentType, componentName,
		// componentID, currentPoints, bioMightInstructSet);
		// System.out.println("Generated the Rows for ScalenusPosteriorMuscle: "
		// + componentID + "   parent: " + parentID + "   " + componentType);

		return returnCode;
	}	
	
	
	
	/***************************************************************************************
	 * GENERATE SEMI MEMBRANOSUS MUSCLE 
	 * 
	 * This generates the SemiMembranosusMuscle 
	 * 
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/

	public int generateSemiMembranosusMuscle(String startID,
			String componentType, String componentName, String componentID,
			String parentID, double[][] currentPoints) throws DataException,
			DataSecurityException {
		System.out.println("Generat SemiMembranosusMuscle");

		int bodyID = 1;
		int projectID = 1;
		String vertices = "";

		ArrayList mySqlList = new ArrayList();
		int returnCode = 0;

		// We can generate the SemiMembranosusMuscle	
		if (currentPoints == null) {
			double circumference = 0.125;

			double x = -8.0;
			double y = -10.0;
			double z = -1.0;

			// Create a equilateral octogon
			currentPoints[0][0] = x;
			currentPoints[0][1] = y;
			currentPoints[0][2] = z;

			currentPoints[1][0] = x - circumference;
			currentPoints[1][1] = y;
			currentPoints[1][2] = z - circumference;

			currentPoints[2][0] = x - circumference;
			currentPoints[2][1] = y;
			currentPoints[2][2] = z - circumference * 2;

			currentPoints[3][0] = x;
			currentPoints[3][1] = y;
			currentPoints[3][2] = z - circumference * 3;

			currentPoints[4][0] = x + circumference;
			currentPoints[4][1] = y;
			currentPoints[4][2] = z - circumference * 3;

			currentPoints[5][0] = x + circumference * 2;
			currentPoints[5][1] = y;
			currentPoints[5][2] = z - circumference * 2;

			currentPoints[6][0] = x + circumference * 2;
			currentPoints[6][1] = y;
			currentPoints[6][2] = z - circumference;

			currentPoints[7][0] = x + circumference;
			currentPoints[7][1] = y;
			currentPoints[7][2] = z;
		}

		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();

		if (parentID.equals("SemiMembranosusMuscle:01")) {
			int nMaxSegs = 6;
			for (int numSegs = 0; numSegs < nMaxSegs; numSegs++) {

				// Create a place for an instruction
				BioMightInstruction bioInstruct = new BioMightInstruction();

				if (numSegs == 0) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 1) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 2) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 3) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 4) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 5) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 6) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 7) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
				}

				// Add the instruction into the instruction set
				bioMightInstructSet.addElement(bioInstruct);
			}

		} else if (parentID.equals("SemiMembranosusMuscle:02")) {
			int nMaxSegs = 6;
			for (int numSegs = 0; numSegs < nMaxSegs; numSegs++) {

				// Create a place for an instruction
				BioMightInstruction bioInstruct = new BioMightInstruction();

				if (numSegs == 0) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 1) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 2) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 3) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 4) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 5) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 6) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 7) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
				}

				// Add the instruction into the instruction set
				bioMightInstructSet.addElement(bioInstruct);
			}

		}

		// Generate the SemiMembranosusMuscle	
		// generateComponentRows(startID, componentType, componentName,
		// componentID, currentPoints, bioMightInstructSet);
		// System.out.println("Generated the Rows for SemiMembranosusMuscle: "
		// + componentID + "   parent: " + parentID + "   " + componentType);

		return returnCode;
	}	
	
	
	
	/***************************************************************************************
	 * GENERATE SEMITENDINOSUS MUSCLE 
	 * 
	 * This generates the SemitendinosusMuscle 
	 * 
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/

	public int generateSemitendinosusMuscle(String startID,
			String componentType, String componentName, String componentID,
			String parentID, double[][] currentPoints) throws DataException,
			DataSecurityException {
		System.out.println("Generat SemitendinosusMuscle");

		int bodyID = 1;
		int projectID = 1;
		String vertices = "";

		ArrayList mySqlList = new ArrayList();
		int returnCode = 0;

		// We can generate the SemitendinosusMuscle	
		if (currentPoints == null) {
			double circumference = 0.125;

			double x = -8.0;
			double y = -10.0;
			double z = -1.0;

			// Create a equilateral octogon
			currentPoints[0][0] = x;
			currentPoints[0][1] = y;
			currentPoints[0][2] = z;

			currentPoints[1][0] = x - circumference;
			currentPoints[1][1] = y;
			currentPoints[1][2] = z - circumference;

			currentPoints[2][0] = x - circumference;
			currentPoints[2][1] = y;
			currentPoints[2][2] = z - circumference * 2;

			currentPoints[3][0] = x;
			currentPoints[3][1] = y;
			currentPoints[3][2] = z - circumference * 3;

			currentPoints[4][0] = x + circumference;
			currentPoints[4][1] = y;
			currentPoints[4][2] = z - circumference * 3;

			currentPoints[5][0] = x + circumference * 2;
			currentPoints[5][1] = y;
			currentPoints[5][2] = z - circumference * 2;

			currentPoints[6][0] = x + circumference * 2;
			currentPoints[6][1] = y;
			currentPoints[6][2] = z - circumference;

			currentPoints[7][0] = x + circumference;
			currentPoints[7][1] = y;
			currentPoints[7][2] = z;
		}

		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();

		if (parentID.equals("SemitendinosusMuscle:01")) {
			int nMaxSegs = 6;
			for (int numSegs = 0; numSegs < nMaxSegs; numSegs++) {

				// Create a place for an instruction
				BioMightInstruction bioInstruct = new BioMightInstruction();

				if (numSegs == 0) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 1) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 2) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 3) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 4) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 5) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 6) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 7) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
				}

				// Add the instruction into the instruction set
				bioMightInstructSet.addElement(bioInstruct);
			}

		} else if (parentID.equals("SemitendinosusMuscle:02")) {
			int nMaxSegs = 6;
			for (int numSegs = 0; numSegs < nMaxSegs; numSegs++) {

				// Create a place for an instruction
				BioMightInstruction bioInstruct = new BioMightInstruction();

				if (numSegs == 0) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 1) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 2) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 3) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 4) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 5) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 6) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 7) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
				}

				// Add the instruction into the instruction set
				bioMightInstructSet.addElement(bioInstruct);
			}

		}

		// Generate the SemiMembranosusMuscle	
		// generateComponentRows(startID, componentType, componentName,
		// componentID, currentPoints, bioMightInstructSet);
		// System.out.println("Generated the Rows for SemiMembranosusMuscle: "
		// + componentID + "   parent: " + parentID + "   " + componentType);

		return returnCode;
	}	
	
	
	
	/***************************************************************************************
	 * GENERATE SPHINTER ANI INTERNUS MUSCLE 
	 * 
	 * This generates the SphincterAniInternusMuscle 
	 * 
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/

	public int generateSphincterAniInternusMuscle(String startID,
			String componentType, String componentName, String componentID,
			String parentID, double[][] currentPoints) throws DataException,
			DataSecurityException {
		System.out.println("Generat SphincterAniInternusMuscle");

		int bodyID = 1;
		int projectID = 1;
		String vertices = "";

		ArrayList mySqlList = new ArrayList();
		int returnCode = 0;

		// We can generate the SphincterAniInternusMuscle	
		if (currentPoints == null) {
			double circumference = 0.125;

			double x = -8.0;
			double y = -10.0;
			double z = -1.0;

			// Create a equilateral octogon
			currentPoints[0][0] = x;
			currentPoints[0][1] = y;
			currentPoints[0][2] = z;

			currentPoints[1][0] = x - circumference;
			currentPoints[1][1] = y;
			currentPoints[1][2] = z - circumference;

			currentPoints[2][0] = x - circumference;
			currentPoints[2][1] = y;
			currentPoints[2][2] = z - circumference * 2;

			currentPoints[3][0] = x;
			currentPoints[3][1] = y;
			currentPoints[3][2] = z - circumference * 3;

			currentPoints[4][0] = x + circumference;
			currentPoints[4][1] = y;
			currentPoints[4][2] = z - circumference * 3;

			currentPoints[5][0] = x + circumference * 2;
			currentPoints[5][1] = y;
			currentPoints[5][2] = z - circumference * 2;

			currentPoints[6][0] = x + circumference * 2;
			currentPoints[6][1] = y;
			currentPoints[6][2] = z - circumference;

			currentPoints[7][0] = x + circumference;
			currentPoints[7][1] = y;
			currentPoints[7][2] = z;
		}

		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();

		if (parentID.equals("SphincterAniInternusMuscle:01")) {
			int nMaxSegs = 6;
			for (int numSegs = 0; numSegs < nMaxSegs; numSegs++) {

				// Create a place for an instruction
				BioMightInstruction bioInstruct = new BioMightInstruction();

				if (numSegs == 0) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 1) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 2) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 3) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 4) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 5) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 6) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 7) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
				}

				// Add the instruction into the instruction set
				bioMightInstructSet.addElement(bioInstruct);
			}

		} else if (parentID.equals("SphincterAniInternusMuscle:02")) {
			int nMaxSegs = 6;
			for (int numSegs = 0; numSegs < nMaxSegs; numSegs++) {

				// Create a place for an instruction
				BioMightInstruction bioInstruct = new BioMightInstruction();

				if (numSegs == 0) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 1) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 2) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 3) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 4) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 5) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 6) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 7) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
				}

				// Add the instruction into the instruction set
				bioMightInstructSet.addElement(bioInstruct);
			}

		}

		// Generate the SphincterAniInternusMuscle	
		// generateComponentRows(startID, componentType, componentName,
		// componentID, currentPoints, bioMightInstructSet);
		// System.out.println("Generated the Rows for SphincterAniInternusMuscle: "
		// + componentID + "   parent: " + parentID + "   " + componentType);

		return returnCode;
	}	
	
	

	/***************************************************************************************
	 * GENERATE SPHINCTER URETHREA MEMBRANACAEAE MUSCLE
	 * 
	 * This generates the SphincterUrethraeMembranaceaeMuscle 
	 * 
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/

	public int generateSphincterUrethraeMembranaceaeMuscle(String startID,
			String componentType, String componentName, String componentID,
			String parentID, double[][] currentPoints) throws DataException,
			DataSecurityException {
		System.out.println("Generat SphincterUrethraeMembranaceaeMuscle");

		int bodyID = 1;
		int projectID = 1;
		String vertices = "";

		ArrayList mySqlList = new ArrayList();
		int returnCode = 0;

		// We can generate the SphincterUrethraeMembranaceaeMuscle	
		if (currentPoints == null) {
			double circumference = 0.125;

			double x = -8.0;
			double y = -10.0;
			double z = -1.0;

			// Create a equilateral octogon
			currentPoints[0][0] = x;
			currentPoints[0][1] = y;
			currentPoints[0][2] = z;

			currentPoints[1][0] = x - circumference;
			currentPoints[1][1] = y;
			currentPoints[1][2] = z - circumference;

			currentPoints[2][0] = x - circumference;
			currentPoints[2][1] = y;
			currentPoints[2][2] = z - circumference * 2;

			currentPoints[3][0] = x;
			currentPoints[3][1] = y;
			currentPoints[3][2] = z - circumference * 3;

			currentPoints[4][0] = x + circumference;
			currentPoints[4][1] = y;
			currentPoints[4][2] = z - circumference * 3;

			currentPoints[5][0] = x + circumference * 2;
			currentPoints[5][1] = y;
			currentPoints[5][2] = z - circumference * 2;

			currentPoints[6][0] = x + circumference * 2;
			currentPoints[6][1] = y;
			currentPoints[6][2] = z - circumference;

			currentPoints[7][0] = x + circumference;
			currentPoints[7][1] = y;
			currentPoints[7][2] = z;
		}

		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();

		if (parentID.equals("SphincterUrethraeMembranaceaeMuscle:01")) {
			int nMaxSegs = 6;
			for (int numSegs = 0; numSegs < nMaxSegs; numSegs++) {

				// Create a place for an instruction
				BioMightInstruction bioInstruct = new BioMightInstruction();

				if (numSegs == 0) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 1) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 2) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 3) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 4) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 5) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 6) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 7) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
				}

				// Add the instruction into the instruction set
				bioMightInstructSet.addElement(bioInstruct);
			}

		} else if (parentID.equals("SphincterUrethraeMembranaceaeMuscle:02")) {
			int nMaxSegs = 6;
			for (int numSegs = 0; numSegs < nMaxSegs; numSegs++) {

				// Create a place for an instruction
				BioMightInstruction bioInstruct = new BioMightInstruction();

				if (numSegs == 0) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 1) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 2) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 3) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 4) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 5) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 6) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 7) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
				}

				// Add the instruction into the instruction set
				bioMightInstructSet.addElement(bioInstruct);
			}

		}

		// Generate the SphincterUrethraeMembranaceaeMuscle	
		// generateComponentRows(startID, componentType, componentName,
		// componentID, currentPoints, bioMightInstructSet);
		// System.out.println("Generated the Rows for SphincterUrethraeMembranaceaeMuscle: "
		// + componentID + "   parent: " + parentID + "   " + componentType);

		return returnCode;
	}	
	
	
	
	/***************************************************************************************
	 * GENERATE STERNAL HYOID MUSCLE
	 * 
	 * This generates the SternoHyoidMuscle 
	 * 
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/

	public int generateSternoHyoidMuscle(String startID,
			String componentType, String componentName, String componentID,
			String parentID, double[][] currentPoints) throws DataException,
			DataSecurityException {
		System.out.println("Generat SternoHyoidMuscle");

		int bodyID = 1;
		int projectID = 1;
		String vertices = "";

		ArrayList mySqlList = new ArrayList();
		int returnCode = 0;

		// We can generate the SternoHyoidMuscle	
		if (currentPoints == null) {
			double circumference = 0.125;

			double x = -8.0;
			double y = -10.0;
			double z = -1.0;

			// Create a equilateral octogon
			currentPoints[0][0] = x;
			currentPoints[0][1] = y;
			currentPoints[0][2] = z;

			currentPoints[1][0] = x - circumference;
			currentPoints[1][1] = y;
			currentPoints[1][2] = z - circumference;

			currentPoints[2][0] = x - circumference;
			currentPoints[2][1] = y;
			currentPoints[2][2] = z - circumference * 2;

			currentPoints[3][0] = x;
			currentPoints[3][1] = y;
			currentPoints[3][2] = z - circumference * 3;

			currentPoints[4][0] = x + circumference;
			currentPoints[4][1] = y;
			currentPoints[4][2] = z - circumference * 3;

			currentPoints[5][0] = x + circumference * 2;
			currentPoints[5][1] = y;
			currentPoints[5][2] = z - circumference * 2;

			currentPoints[6][0] = x + circumference * 2;
			currentPoints[6][1] = y;
			currentPoints[6][2] = z - circumference;

			currentPoints[7][0] = x + circumference;
			currentPoints[7][1] = y;
			currentPoints[7][2] = z;
		}

		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();

		if (parentID.equals("SternoHyoidMuscle:01")) {
			int nMaxSegs = 6;
			for (int numSegs = 0; numSegs < nMaxSegs; numSegs++) {

				// Create a place for an instruction
				BioMightInstruction bioInstruct = new BioMightInstruction();

				if (numSegs == 0) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 1) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 2) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 3) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 4) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 5) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 6) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 7) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
				}

				// Add the instruction into the instruction set
				bioMightInstructSet.addElement(bioInstruct);
			}

		} else if (parentID.equals("SternoHyoidMuscle:02")) {
			int nMaxSegs = 6;
			for (int numSegs = 0; numSegs < nMaxSegs; numSegs++) {

				// Create a place for an instruction
				BioMightInstruction bioInstruct = new BioMightInstruction();

				if (numSegs == 0) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 1) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 2) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 3) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 4) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 5) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 6) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 7) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
				}

				// Add the instruction into the instruction set
				bioMightInstructSet.addElement(bioInstruct);
			}

		}

		// Generate the SternoHyoidMuscle	
		// generateComponentRows(startID, componentType, componentName,
		// componentID, currentPoints, bioMightInstructSet);
		// System.out.println("Generated the Rows for SternoHyoidMuscle: "
		// + componentID + "   parent: " + parentID + "   " + componentType);

		return returnCode;
	}	
	
	
	/***************************************************************************************
	 * GENERATE TRANSVERSUS MUSCLE
	 * 
	 * This generates the SternoHyoidMuscle 
	 * 
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/

	public int generateTransversusMuscle(String startID,
			String componentType, String componentName, String componentID,
			String parentID, double[][] currentPoints) throws DataException,
			DataSecurityException {
		System.out.println("Generate TransversusMuscle");

		int bodyID = 1;
		int projectID = 1;
		String vertices = "";

		ArrayList mySqlList = new ArrayList();
		int returnCode = 0;

		// We can generate the TransversusMuscle	
		if (currentPoints == null) {
			double circumference = 0.125;

			double x = -8.0;
			double y = -10.0;
			double z = -1.0;

			// Create a equilateral octogon
			currentPoints[0][0] = x;
			currentPoints[0][1] = y;
			currentPoints[0][2] = z;

			currentPoints[1][0] = x - circumference;
			currentPoints[1][1] = y;
			currentPoints[1][2] = z - circumference;

			currentPoints[2][0] = x - circumference;
			currentPoints[2][1] = y;
			currentPoints[2][2] = z - circumference * 2;

			currentPoints[3][0] = x;
			currentPoints[3][1] = y;
			currentPoints[3][2] = z - circumference * 3;

			currentPoints[4][0] = x + circumference;
			currentPoints[4][1] = y;
			currentPoints[4][2] = z - circumference * 3;

			currentPoints[5][0] = x + circumference * 2;
			currentPoints[5][1] = y;
			currentPoints[5][2] = z - circumference * 2;

			currentPoints[6][0] = x + circumference * 2;
			currentPoints[6][1] = y;
			currentPoints[6][2] = z - circumference;

			currentPoints[7][0] = x + circumference;
			currentPoints[7][1] = y;
			currentPoints[7][2] = z;
		}

		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();

		if (parentID.equals("TransversusMuscle:01")) {
			int nMaxSegs = 6;
			for (int numSegs = 0; numSegs < nMaxSegs; numSegs++) {

				// Create a place for an instruction
				BioMightInstruction bioInstruct = new BioMightInstruction();

				if (numSegs == 0) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 1) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 2) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 3) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 4) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 5) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 6) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 7) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
				}

				// Add the instruction into the instruction set
				bioMightInstructSet.addElement(bioInstruct);
			}

		} else if (parentID.equals("TransversusMuscle:02")) {
			int nMaxSegs = 6;
			for (int numSegs = 0; numSegs < nMaxSegs; numSegs++) {

				// Create a place for an instruction
				BioMightInstruction bioInstruct = new BioMightInstruction();

				if (numSegs == 0) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 1) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 2) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 3) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 4) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 5) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 6) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 7) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
				}

				// Add the instruction into the instruction set
				bioMightInstructSet.addElement(bioInstruct);
			}

		}

		// Generate the TransversusMuscle	
		// generateComponentRows(startID, componentType, componentName,
		// componentID, currentPoints, bioMightInstructSet);
		// System.out.println("Generated the Rows for TransversusMuscle: "
		// + componentID + "   parent: " + parentID + "   " + componentType);

		return returnCode;
	}
	
	/***************************************************************************************
	 * GENERATE TRANSVERSUS PERINEI PROFUNDUS MUSCLE
	 * 
	 * This generates the SternoHyoidMuscle 
	 * 
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/

	public int generateTransversusPerineiProfundusMuscle(String startID,
			String componentType, String componentName, String componentID,
			String parentID, double[][] currentPoints) throws DataException,
			DataSecurityException {
		System.out.println("Generate TransversusPerineiProfundusMuscle");

		int bodyID = 1;
		int projectID = 1;
		String vertices = "";

		ArrayList mySqlList = new ArrayList();
		int returnCode = 0;

		// We can generate the TransversusPerineiProfundusMuscle	
		if (currentPoints == null) {
			double circumference = 0.125;

			double x = -8.0;
			double y = -10.0;
			double z = -1.0;

			// Create a equilateral octogon
			currentPoints[0][0] = x;
			currentPoints[0][1] = y;
			currentPoints[0][2] = z;

			currentPoints[1][0] = x - circumference;
			currentPoints[1][1] = y;
			currentPoints[1][2] = z - circumference;

			currentPoints[2][0] = x - circumference;
			currentPoints[2][1] = y;
			currentPoints[2][2] = z - circumference * 2;

			currentPoints[3][0] = x;
			currentPoints[3][1] = y;
			currentPoints[3][2] = z - circumference * 3;

			currentPoints[4][0] = x + circumference;
			currentPoints[4][1] = y;
			currentPoints[4][2] = z - circumference * 3;

			currentPoints[5][0] = x + circumference * 2;
			currentPoints[5][1] = y;
			currentPoints[5][2] = z - circumference * 2;

			currentPoints[6][0] = x + circumference * 2;
			currentPoints[6][1] = y;
			currentPoints[6][2] = z - circumference;

			currentPoints[7][0] = x + circumference;
			currentPoints[7][1] = y;
			currentPoints[7][2] = z;
		}

		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();

		if (parentID.equals("TransversusPerineiProfundusMuscle:01")) {
			int nMaxSegs = 6;
			for (int numSegs = 0; numSegs < nMaxSegs; numSegs++) {

				// Create a place for an instruction
				BioMightInstruction bioInstruct = new BioMightInstruction();

				if (numSegs == 0) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 1) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 2) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 3) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 4) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 5) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 6) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 7) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
				}

				// Add the instruction into the instruction set
				bioMightInstructSet.addElement(bioInstruct);
			}

		} else if (parentID.equals("TransversusPerineiProfundusMuscle:02")) {
			int nMaxSegs = 6;
			for (int numSegs = 0; numSegs < nMaxSegs; numSegs++) {

				// Create a place for an instruction
				BioMightInstruction bioInstruct = new BioMightInstruction();

				if (numSegs == 0) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 1) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 2) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 3) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 4) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 5) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 6) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 7) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
				}

				// Add the instruction into the instruction set
				bioMightInstructSet.addElement(bioInstruct);
			}

		}

		// Generate the TransversusPerineiProfundusMuscle	
		// generateComponentRows(startID, componentType, componentName,
		// componentID, currentPoints, bioMightInstructSet);
		// System.out.println("Generated the Rows for TransversusPerineiProfundusMuscle: "
		// + componentID + "   parent: " + parentID + "   " + componentType);

		return returnCode;
	}
	
	/***************************************************************************************
	 * GENERATE VASTUS LATERALIS MUSCLE
	 * 
	 * This generates the SternoHyoidMuscle 
	 * 
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/

	public int generateVastusLateralisMuscle(String startID,
			String componentType, String componentName, String componentID,
			String parentID, double[][] currentPoints) throws DataException,
			DataSecurityException {
		System.out.println("Generate VastusLateralisMuscle");

		int bodyID = 1;
		int projectID = 1;
		String vertices = "";

		ArrayList mySqlList = new ArrayList();
		int returnCode = 0;

		// We can generate the VastusLateralisMuscle	
		if (currentPoints == null) {
			double circumference = 0.125;

			double x = -8.0;
			double y = -10.0;
			double z = -1.0;

			// Create a equilateral octogon
			currentPoints[0][0] = x;
			currentPoints[0][1] = y;
			currentPoints[0][2] = z;

			currentPoints[1][0] = x - circumference;
			currentPoints[1][1] = y;
			currentPoints[1][2] = z - circumference;

			currentPoints[2][0] = x - circumference;
			currentPoints[2][1] = y;
			currentPoints[2][2] = z - circumference * 2;

			currentPoints[3][0] = x;
			currentPoints[3][1] = y;
			currentPoints[3][2] = z - circumference * 3;

			currentPoints[4][0] = x + circumference;
			currentPoints[4][1] = y;
			currentPoints[4][2] = z - circumference * 3;

			currentPoints[5][0] = x + circumference * 2;
			currentPoints[5][1] = y;
			currentPoints[5][2] = z - circumference * 2;

			currentPoints[6][0] = x + circumference * 2;
			currentPoints[6][1] = y;
			currentPoints[6][2] = z - circumference;

			currentPoints[7][0] = x + circumference;
			currentPoints[7][1] = y;
			currentPoints[7][2] = z;
		}

		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();

		if (parentID.equals("VastusLateralisMuscle:01")) {
			int nMaxSegs = 6;
			for (int numSegs = 0; numSegs < nMaxSegs; numSegs++) {

				// Create a place for an instruction
				BioMightInstruction bioInstruct = new BioMightInstruction();

				if (numSegs == 0) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 1) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 2) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 3) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 4) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 5) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 6) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 7) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
				}

				// Add the instruction into the instruction set
				bioMightInstructSet.addElement(bioInstruct);
			}

		} else if (parentID.equals("VastusLateralisMuscle:02")) {
			int nMaxSegs = 6;
			for (int numSegs = 0; numSegs < nMaxSegs; numSegs++) {

				// Create a place for an instruction
				BioMightInstruction bioInstruct = new BioMightInstruction();

				if (numSegs == 0) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 1) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 2) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 3) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 4) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 5) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 6) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 7) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
				}

				// Add the instruction into the instruction set
				bioMightInstructSet.addElement(bioInstruct);
			}

		}

		// Generate the VastusLateralisMuscle	
		// generateComponentRows(startID, componentType, componentName,
		// componentID, currentPoints, bioMightInstructSet);
		// System.out.println("Generated the Rows for VastusLateralisMuscle: "
		// + componentID + "   parent: " + parentID + "   " + componentType);

		return returnCode;
	}
	
	/***************************************************************************************
	 * GENERATE VASTUS MEDIALIS MUSCLE
	 * 
	 * This generates the SternoHyoidMuscle 
	 * 
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/

	public int generateVastusMedialisMuscle(String startID,
			String componentType, String componentName, String componentID,
			String parentID, double[][] currentPoints) throws DataException,
			DataSecurityException {
		System.out.println("Generate VastusMedialisMuscle");

		int bodyID = 1;
		int projectID = 1;
		String vertices = "";

		ArrayList mySqlList = new ArrayList();
		int returnCode = 0;

		// We can generate the VastusMedialisMuscle	
		if (currentPoints == null) {
			double circumference = 0.125;

			double x = -8.0;
			double y = -10.0;
			double z = -1.0;

			// Create a equilateral octogon
			currentPoints[0][0] = x;
			currentPoints[0][1] = y;
			currentPoints[0][2] = z;

			currentPoints[1][0] = x - circumference;
			currentPoints[1][1] = y;
			currentPoints[1][2] = z - circumference;

			currentPoints[2][0] = x - circumference;
			currentPoints[2][1] = y;
			currentPoints[2][2] = z - circumference * 2;

			currentPoints[3][0] = x;
			currentPoints[3][1] = y;
			currentPoints[3][2] = z - circumference * 3;

			currentPoints[4][0] = x + circumference;
			currentPoints[4][1] = y;
			currentPoints[4][2] = z - circumference * 3;

			currentPoints[5][0] = x + circumference * 2;
			currentPoints[5][1] = y;
			currentPoints[5][2] = z - circumference * 2;

			currentPoints[6][0] = x + circumference * 2;
			currentPoints[6][1] = y;
			currentPoints[6][2] = z - circumference;

			currentPoints[7][0] = x + circumference;
			currentPoints[7][1] = y;
			currentPoints[7][2] = z;
		}

		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();

		if (parentID.equals("VastusMedialisMuscle:01")) {
			int nMaxSegs = 6;
			for (int numSegs = 0; numSegs < nMaxSegs; numSegs++) {

				// Create a place for an instruction
				BioMightInstruction bioInstruct = new BioMightInstruction();

				if (numSegs == 0) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 1) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 2) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 3) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 4) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 5) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 6) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 7) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
				}

				// Add the instruction into the instruction set
				bioMightInstructSet.addElement(bioInstruct);
			}

		} else if (parentID.equals("VastusMedialisMuscle:02")) {
			int nMaxSegs = 6;
			for (int numSegs = 0; numSegs < nMaxSegs; numSegs++) {

				// Create a place for an instruction
				BioMightInstruction bioInstruct = new BioMightInstruction();

				if (numSegs == 0) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 1) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 2) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 3) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 4) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 5) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 6) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 7) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
				}

				// Add the instruction into the instruction set
				bioMightInstructSet.addElement(bioInstruct);
			}

		}

		// Generate the VastusMedialisMuscle	
		// generateComponentRows(startID, componentType, componentName,
		// componentID, currentPoints, bioMightInstructSet);
		// System.out.println("Generated the Rows for VastusMedialisMuscle: "
		// + componentID + "   parent: " + parentID + "   " + componentType);

		return returnCode;
	}
	
	/***************************************************************************************
	 * GENERATE ZYGOMATICUS MAJOR MUSCLE
	 * 
	 * This generates the ZygomaticusMajorMuscle 
	 * 
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/

	public int generateZygomaticusMajorMuscle(String startID,
			String componentType, String componentName, String componentID,
			String parentID, double[][] currentPoints) throws DataException,
			DataSecurityException {
		System.out.println("Generate ZygomaticusMajorMuscle");

		int bodyID = 1;
		int projectID = 1;
		String vertices = "";

		ArrayList mySqlList = new ArrayList();
		int returnCode = 0;

		// We can generate the VerticalisMuscle	
		if (currentPoints == null) {
			double circumference = 0.125;

			double x = -8.0;
			double y = -10.0;
			double z = -1.0;

			// Create a equilateral octogon
			currentPoints[0][0] = x;
			currentPoints[0][1] = y;
			currentPoints[0][2] = z;

			currentPoints[1][0] = x - circumference;
			currentPoints[1][1] = y;
			currentPoints[1][2] = z - circumference;

			currentPoints[2][0] = x - circumference;
			currentPoints[2][1] = y;
			currentPoints[2][2] = z - circumference * 2;

			currentPoints[3][0] = x;
			currentPoints[3][1] = y;
			currentPoints[3][2] = z - circumference * 3;

			currentPoints[4][0] = x + circumference;
			currentPoints[4][1] = y;
			currentPoints[4][2] = z - circumference * 3;

			currentPoints[5][0] = x + circumference * 2;
			currentPoints[5][1] = y;
			currentPoints[5][2] = z - circumference * 2;

			currentPoints[6][0] = x + circumference * 2;
			currentPoints[6][1] = y;
			currentPoints[6][2] = z - circumference;

			currentPoints[7][0] = x + circumference;
			currentPoints[7][1] = y;
			currentPoints[7][2] = z;
		}

		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();

		if (parentID.equals("ZygomaticusMajorMuscle:01")) {
			int nMaxSegs = 6;
			for (int numSegs = 0; numSegs < nMaxSegs; numSegs++) {

				// Create a place for an instruction
				BioMightInstruction bioInstruct = new BioMightInstruction();

				if (numSegs == 0) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 1) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 2) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 3) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 4) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 5) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 6) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 7) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
				}

				// Add the instruction into the instruction set
				bioMightInstructSet.addElement(bioInstruct);
			}

		} else if (parentID.equals("ZygomaticusMajorMuscle:02")) {
			int nMaxSegs = 6;
			for (int numSegs = 0; numSegs < nMaxSegs; numSegs++) {

				// Create a place for an instruction
				BioMightInstruction bioInstruct = new BioMightInstruction();

				if (numSegs == 0) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 1) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 2) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 3) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 4) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 5) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 6) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 7) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
				}

				// Add the instruction into the instruction set
				bioMightInstructSet.addElement(bioInstruct);
			}

		}

		// Generate the ZygomaticusMajorMuscle	
		// generateComponentRows(startID, componentType, componentName,
		// componentID, currentPoints, bioMightInstructSet);
		// System.out.println("Generated the Rows for ZygomaticusMajorMuscle: "
		// + componentID + "   parent: " + parentID + "   " + componentType);

		return returnCode;
	}

	
	
	
	/***************************************************************************************
	 * GENERATE ZYGOMATICUS MINOR MUSCLE
	 * 
	 * This generates the ZygomaticusMajorMuscle 
	 * 
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/

	public int generateZygomaticusMinorMuscle(String startID,
			String componentType, String componentName, String componentID,
			String parentID, double[][] currentPoints) throws DataException,
			DataSecurityException {
		System.out.println("Generate ZygomaticusMinorMuscle");

		int bodyID = 1;
		int projectID = 1;
		String vertices = "";

		ArrayList mySqlList = new ArrayList();
		int returnCode = 0;

		// We can generate the ZygomaticusMinorMuscle	
		if (currentPoints == null) {
			double circumference = 0.125;

			double x = -8.0;
			double y = -10.0;
			double z = -1.0;

			// Create a equilateral octogon
			currentPoints[0][0] = x;
			currentPoints[0][1] = y;
			currentPoints[0][2] = z;

			currentPoints[1][0] = x - circumference;
			currentPoints[1][1] = y;
			currentPoints[1][2] = z - circumference;

			currentPoints[2][0] = x - circumference;
			currentPoints[2][1] = y;
			currentPoints[2][2] = z - circumference * 2;

			currentPoints[3][0] = x;
			currentPoints[3][1] = y;
			currentPoints[3][2] = z - circumference * 3;

			currentPoints[4][0] = x + circumference;
			currentPoints[4][1] = y;
			currentPoints[4][2] = z - circumference * 3;

			currentPoints[5][0] = x + circumference * 2;
			currentPoints[5][1] = y;
			currentPoints[5][2] = z - circumference * 2;

			currentPoints[6][0] = x + circumference * 2;
			currentPoints[6][1] = y;
			currentPoints[6][2] = z - circumference;

			currentPoints[7][0] = x + circumference;
			currentPoints[7][1] = y;
			currentPoints[7][2] = z;
		}

		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();

		if (parentID.equals("ZygomaticusMinorMuscle:01")) {
			int nMaxSegs = 6;
			for (int numSegs = 0; numSegs < nMaxSegs; numSegs++) {

				// Create a place for an instruction
				BioMightInstruction bioInstruct = new BioMightInstruction();

				if (numSegs == 0) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 1) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 2) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 3) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 4) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 5) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 6) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 7) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
				}

				// Add the instruction into the instruction set
				bioMightInstructSet.addElement(bioInstruct);
			}

		} else if (parentID.equals("ZygomaticusMinorMuscle:02")) {
			int nMaxSegs = 6;
			for (int numSegs = 0; numSegs < nMaxSegs; numSegs++) {

				// Create a place for an instruction
				BioMightInstruction bioInstruct = new BioMightInstruction();

				if (numSegs == 0) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 1) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 2) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 3) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 4) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 5) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 6) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 7) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
				}

				// Add the instruction into the instruction set
				bioMightInstructSet.addElement(bioInstruct);
			}

		}

		// Generate the ZygomaticusMinorMuscle	
		// generateComponentRows(startID, componentType, componentName,
		// componentID, currentPoints, bioMightInstructSet);
		// System.out.println("Generated the Rows for ZygomaticusMinorMuscle: "
		// + componentID + "   parent: " + parentID + "   " + componentType);

		return returnCode;
	}

	
	
	
	
	
	/***************************************************************************************
	 * GENERATE ZYGOMATICUS MINOR MUSCLE
	 * 
	 * This generates the ZygomaticusMajorMuscle 
	 * 
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/

	public int generateVerticalisMuscle(String startID,
			String componentType, String componentName, String componentID,
			String parentID, double[][] currentPoints) throws DataException,
			DataSecurityException {
		System.out.println("Generate VerticalisMuscle");

		int bodyID = 1;
		int projectID = 1;
		String vertices = "";

		ArrayList mySqlList = new ArrayList();
		int returnCode = 0;

		// We can generate the ZygomaticusMinorMuscle	
		if (currentPoints == null) {
			double circumference = 0.125;

			double x = -8.0;
			double y = -10.0;
			double z = -1.0;

			// Create a equilateral octogon
			currentPoints[0][0] = x;
			currentPoints[0][1] = y;
			currentPoints[0][2] = z;

			currentPoints[1][0] = x - circumference;
			currentPoints[1][1] = y;
			currentPoints[1][2] = z - circumference;

			currentPoints[2][0] = x - circumference;
			currentPoints[2][1] = y;
			currentPoints[2][2] = z - circumference * 2;

			currentPoints[3][0] = x;
			currentPoints[3][1] = y;
			currentPoints[3][2] = z - circumference * 3;

			currentPoints[4][0] = x + circumference;
			currentPoints[4][1] = y;
			currentPoints[4][2] = z - circumference * 3;

			currentPoints[5][0] = x + circumference * 2;
			currentPoints[5][1] = y;
			currentPoints[5][2] = z - circumference * 2;

			currentPoints[6][0] = x + circumference * 2;
			currentPoints[6][1] = y;
			currentPoints[6][2] = z - circumference;

			currentPoints[7][0] = x + circumference;
			currentPoints[7][1] = y;
			currentPoints[7][2] = z;
		}

		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();

		if (parentID.equals("VerticalisMuscle:01")) {
			int nMaxSegs = 6;
			for (int numSegs = 0; numSegs < nMaxSegs; numSegs++) {

				// Create a place for an instruction
				BioMightInstruction bioInstruct = new BioMightInstruction();

				if (numSegs == 0) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 1) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 2) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 3) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 4) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 5) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 6) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 7) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
				}

				// Add the instruction into the instruction set
				bioMightInstructSet.addElement(bioInstruct);
			}

		} else if (parentID.equals("VerticalisMuscle:02")) {
			int nMaxSegs = 6;
			for (int numSegs = 0; numSegs < nMaxSegs; numSegs++) {

				// Create a place for an instruction
				BioMightInstruction bioInstruct = new BioMightInstruction();

				if (numSegs == 0) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 1) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 2) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 3) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 4) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 5) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 6) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 7) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
				}

				// Add the instruction into the instruction set
				bioMightInstructSet.addElement(bioInstruct);
			}

		}

		// Generate the VerticalisMuscle	
		// generateComponentRows(startID, componentType, componentName,
		// componentID, currentPoints, bioMightInstructSet);
		// System.out.println("Generated the Rows for VerticalisMuscle: "
		// + componentID + "   parent: " + parentID + "   " + componentType);

		return returnCode;
	}
	
	
	
	
	/***************************************************************************************
	 * GENERATE ZYGOMATICUS MINOR MUSCLE
	 * 
	 * This generates the ZygomaticusMajorMuscle 
	 * 
	 * @param key
	 * @param user
	 * @return
	 * @throws DataException
	 * @throws DataSecurityException
	 ***************************************************************************************/

	public int generateZygomaticusMuscle(String startID,
			String componentType, String componentName, String componentID,
			String parentID, double[][] currentPoints) throws DataException,
			DataSecurityException {
		System.out.println("Generate VerticalisMuscle");

		int bodyID = 1;
		int projectID = 1;
		String vertices = "";

		ArrayList mySqlList = new ArrayList();
		int returnCode = 0;

		// We can generate the ZygomaticusMuscle	
		if (currentPoints == null) {
			double circumference = 0.125;

			double x = -8.0;
			double y = -10.0;
			double z = -1.0;

			// Create a equilateral octogon
			currentPoints[0][0] = x;
			currentPoints[0][1] = y;
			currentPoints[0][2] = z;

			currentPoints[1][0] = x - circumference;
			currentPoints[1][1] = y;
			currentPoints[1][2] = z - circumference;

			currentPoints[2][0] = x - circumference;
			currentPoints[2][1] = y;
			currentPoints[2][2] = z - circumference * 2;

			currentPoints[3][0] = x;
			currentPoints[3][1] = y;
			currentPoints[3][2] = z - circumference * 3;

			currentPoints[4][0] = x + circumference;
			currentPoints[4][1] = y;
			currentPoints[4][2] = z - circumference * 3;

			currentPoints[5][0] = x + circumference * 2;
			currentPoints[5][1] = y;
			currentPoints[5][2] = z - circumference * 2;

			currentPoints[6][0] = x + circumference * 2;
			currentPoints[6][1] = y;
			currentPoints[6][2] = z - circumference;

			currentPoints[7][0] = x + circumference;
			currentPoints[7][1] = y;
			currentPoints[7][2] = z;
		}

		// Allocate an instruction set for building it
		BioMightInstructSet bioMightInstructSet = new BioMightInstructSet();

		if (parentID.equals("ZygomaticusMuscle:01")) {
			int nMaxSegs = 6;
			for (int numSegs = 0; numSegs < nMaxSegs; numSegs++) {

				// Create a place for an instruction
				BioMightInstruction bioInstruct = new BioMightInstruction();

				if (numSegs == 0) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 1) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 2) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 3) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 4) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 5) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 6) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else if (numSegs == 7) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(1.0, -0.10, -0.10);
				} else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
				}

				// Add the instruction into the instruction set
				bioMightInstructSet.addElement(bioInstruct);
			}

		} else if (parentID.equals("ZygomaticusMuscle:02")) {
			int nMaxSegs = 6;
			for (int numSegs = 0; numSegs < nMaxSegs; numSegs++) {

				// Create a place for an instruction
				BioMightInstruction bioInstruct = new BioMightInstruction();

				if (numSegs == 0) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 1) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 2) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 3) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 4) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 5) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 6) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else if (numSegs == 7) {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, -0.10);
				} else {
					bioInstruct.setTransType(Constants.TRANSLATE);
					bioInstruct.setTranslateMatrix(-1.0, -0.10, 0.0);
				}

				// Add the instruction into the instruction set
				bioMightInstructSet.addElement(bioInstruct);
			}

		}

		// Generate the ZygomaticusMuscle	
		// generateComponentRows(startID, componentType, componentName,
		// componentID, currentPoints, bioMightInstructSet);
		// System.out.println("Generated the Rows for ZygomaticusMuscle: "
		// + componentID + "   parent: " + parentID + "   " + componentType);

		return returnCode;
	}
	
	
	  

}








